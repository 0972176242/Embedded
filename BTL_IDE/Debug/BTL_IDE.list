
BTL_IDE.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00007cdc  08000110  08000110  00010110  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000524  08007df0  08007df0  00017df0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08008314  08008314  000201e0  2**0
                  CONTENTS
  4 .ARM          00000000  08008314  08008314  000201e0  2**0
                  CONTENTS
  5 .preinit_array 00000000  08008314  08008314  000201e0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08008314  08008314  00018314  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08008318  08008318  00018318  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001e0  20000000  0800831c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000000f0  200001e0  080084fc  000201e0  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200002d0  080084fc  000202d0  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  000201e0  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000d689  00000000  00000000  00020209  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001ddb  00000000  00000000  0002d892  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000d28  00000000  00000000  0002f670  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000c68  00000000  00000000  00030398  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000188d9  00000000  00000000  00031000  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000e5d0  00000000  00000000  000498d9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0008be1a  00000000  00000000  00057ea9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  000e3cc3  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004ccc  00000000  00000000  000e3d18  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	; (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	; (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	; (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	200001e0 	.word	0x200001e0
 800012c:	00000000 	.word	0x00000000
 8000130:	08007dd4 	.word	0x08007dd4

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	; (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	; (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	; (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	200001e4 	.word	0x200001e4
 800014c:	08007dd4 	.word	0x08007dd4

08000150 <strlen>:
 8000150:	4603      	mov	r3, r0
 8000152:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000156:	2a00      	cmp	r2, #0
 8000158:	d1fb      	bne.n	8000152 <strlen+0x2>
 800015a:	1a18      	subs	r0, r3, r0
 800015c:	3801      	subs	r0, #1
 800015e:	4770      	bx	lr

08000160 <__aeabi_drsub>:
 8000160:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000164:	e002      	b.n	800016c <__adddf3>
 8000166:	bf00      	nop

08000168 <__aeabi_dsub>:
 8000168:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800016c <__adddf3>:
 800016c:	b530      	push	{r4, r5, lr}
 800016e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000172:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000176:	ea94 0f05 	teq	r4, r5
 800017a:	bf08      	it	eq
 800017c:	ea90 0f02 	teqeq	r0, r2
 8000180:	bf1f      	itttt	ne
 8000182:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000186:	ea55 0c02 	orrsne.w	ip, r5, r2
 800018a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800018e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000192:	f000 80e2 	beq.w	800035a <__adddf3+0x1ee>
 8000196:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800019a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800019e:	bfb8      	it	lt
 80001a0:	426d      	neglt	r5, r5
 80001a2:	dd0c      	ble.n	80001be <__adddf3+0x52>
 80001a4:	442c      	add	r4, r5
 80001a6:	ea80 0202 	eor.w	r2, r0, r2
 80001aa:	ea81 0303 	eor.w	r3, r1, r3
 80001ae:	ea82 0000 	eor.w	r0, r2, r0
 80001b2:	ea83 0101 	eor.w	r1, r3, r1
 80001b6:	ea80 0202 	eor.w	r2, r0, r2
 80001ba:	ea81 0303 	eor.w	r3, r1, r3
 80001be:	2d36      	cmp	r5, #54	; 0x36
 80001c0:	bf88      	it	hi
 80001c2:	bd30      	pophi	{r4, r5, pc}
 80001c4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80001c8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80001cc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80001d0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80001d4:	d002      	beq.n	80001dc <__adddf3+0x70>
 80001d6:	4240      	negs	r0, r0
 80001d8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80001dc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80001e0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80001e4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80001e8:	d002      	beq.n	80001f0 <__adddf3+0x84>
 80001ea:	4252      	negs	r2, r2
 80001ec:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80001f0:	ea94 0f05 	teq	r4, r5
 80001f4:	f000 80a7 	beq.w	8000346 <__adddf3+0x1da>
 80001f8:	f1a4 0401 	sub.w	r4, r4, #1
 80001fc:	f1d5 0e20 	rsbs	lr, r5, #32
 8000200:	db0d      	blt.n	800021e <__adddf3+0xb2>
 8000202:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000206:	fa22 f205 	lsr.w	r2, r2, r5
 800020a:	1880      	adds	r0, r0, r2
 800020c:	f141 0100 	adc.w	r1, r1, #0
 8000210:	fa03 f20e 	lsl.w	r2, r3, lr
 8000214:	1880      	adds	r0, r0, r2
 8000216:	fa43 f305 	asr.w	r3, r3, r5
 800021a:	4159      	adcs	r1, r3
 800021c:	e00e      	b.n	800023c <__adddf3+0xd0>
 800021e:	f1a5 0520 	sub.w	r5, r5, #32
 8000222:	f10e 0e20 	add.w	lr, lr, #32
 8000226:	2a01      	cmp	r2, #1
 8000228:	fa03 fc0e 	lsl.w	ip, r3, lr
 800022c:	bf28      	it	cs
 800022e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000232:	fa43 f305 	asr.w	r3, r3, r5
 8000236:	18c0      	adds	r0, r0, r3
 8000238:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800023c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000240:	d507      	bpl.n	8000252 <__adddf3+0xe6>
 8000242:	f04f 0e00 	mov.w	lr, #0
 8000246:	f1dc 0c00 	rsbs	ip, ip, #0
 800024a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800024e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000252:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000256:	d31b      	bcc.n	8000290 <__adddf3+0x124>
 8000258:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800025c:	d30c      	bcc.n	8000278 <__adddf3+0x10c>
 800025e:	0849      	lsrs	r1, r1, #1
 8000260:	ea5f 0030 	movs.w	r0, r0, rrx
 8000264:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000268:	f104 0401 	add.w	r4, r4, #1
 800026c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000270:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000274:	f080 809a 	bcs.w	80003ac <__adddf3+0x240>
 8000278:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800027c:	bf08      	it	eq
 800027e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000282:	f150 0000 	adcs.w	r0, r0, #0
 8000286:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800028a:	ea41 0105 	orr.w	r1, r1, r5
 800028e:	bd30      	pop	{r4, r5, pc}
 8000290:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000294:	4140      	adcs	r0, r0
 8000296:	eb41 0101 	adc.w	r1, r1, r1
 800029a:	3c01      	subs	r4, #1
 800029c:	bf28      	it	cs
 800029e:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80002a2:	d2e9      	bcs.n	8000278 <__adddf3+0x10c>
 80002a4:	f091 0f00 	teq	r1, #0
 80002a8:	bf04      	itt	eq
 80002aa:	4601      	moveq	r1, r0
 80002ac:	2000      	moveq	r0, #0
 80002ae:	fab1 f381 	clz	r3, r1
 80002b2:	bf08      	it	eq
 80002b4:	3320      	addeq	r3, #32
 80002b6:	f1a3 030b 	sub.w	r3, r3, #11
 80002ba:	f1b3 0220 	subs.w	r2, r3, #32
 80002be:	da0c      	bge.n	80002da <__adddf3+0x16e>
 80002c0:	320c      	adds	r2, #12
 80002c2:	dd08      	ble.n	80002d6 <__adddf3+0x16a>
 80002c4:	f102 0c14 	add.w	ip, r2, #20
 80002c8:	f1c2 020c 	rsb	r2, r2, #12
 80002cc:	fa01 f00c 	lsl.w	r0, r1, ip
 80002d0:	fa21 f102 	lsr.w	r1, r1, r2
 80002d4:	e00c      	b.n	80002f0 <__adddf3+0x184>
 80002d6:	f102 0214 	add.w	r2, r2, #20
 80002da:	bfd8      	it	le
 80002dc:	f1c2 0c20 	rsble	ip, r2, #32
 80002e0:	fa01 f102 	lsl.w	r1, r1, r2
 80002e4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80002e8:	bfdc      	itt	le
 80002ea:	ea41 010c 	orrle.w	r1, r1, ip
 80002ee:	4090      	lslle	r0, r2
 80002f0:	1ae4      	subs	r4, r4, r3
 80002f2:	bfa2      	ittt	ge
 80002f4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80002f8:	4329      	orrge	r1, r5
 80002fa:	bd30      	popge	{r4, r5, pc}
 80002fc:	ea6f 0404 	mvn.w	r4, r4
 8000300:	3c1f      	subs	r4, #31
 8000302:	da1c      	bge.n	800033e <__adddf3+0x1d2>
 8000304:	340c      	adds	r4, #12
 8000306:	dc0e      	bgt.n	8000326 <__adddf3+0x1ba>
 8000308:	f104 0414 	add.w	r4, r4, #20
 800030c:	f1c4 0220 	rsb	r2, r4, #32
 8000310:	fa20 f004 	lsr.w	r0, r0, r4
 8000314:	fa01 f302 	lsl.w	r3, r1, r2
 8000318:	ea40 0003 	orr.w	r0, r0, r3
 800031c:	fa21 f304 	lsr.w	r3, r1, r4
 8000320:	ea45 0103 	orr.w	r1, r5, r3
 8000324:	bd30      	pop	{r4, r5, pc}
 8000326:	f1c4 040c 	rsb	r4, r4, #12
 800032a:	f1c4 0220 	rsb	r2, r4, #32
 800032e:	fa20 f002 	lsr.w	r0, r0, r2
 8000332:	fa01 f304 	lsl.w	r3, r1, r4
 8000336:	ea40 0003 	orr.w	r0, r0, r3
 800033a:	4629      	mov	r1, r5
 800033c:	bd30      	pop	{r4, r5, pc}
 800033e:	fa21 f004 	lsr.w	r0, r1, r4
 8000342:	4629      	mov	r1, r5
 8000344:	bd30      	pop	{r4, r5, pc}
 8000346:	f094 0f00 	teq	r4, #0
 800034a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800034e:	bf06      	itte	eq
 8000350:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000354:	3401      	addeq	r4, #1
 8000356:	3d01      	subne	r5, #1
 8000358:	e74e      	b.n	80001f8 <__adddf3+0x8c>
 800035a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800035e:	bf18      	it	ne
 8000360:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000364:	d029      	beq.n	80003ba <__adddf3+0x24e>
 8000366:	ea94 0f05 	teq	r4, r5
 800036a:	bf08      	it	eq
 800036c:	ea90 0f02 	teqeq	r0, r2
 8000370:	d005      	beq.n	800037e <__adddf3+0x212>
 8000372:	ea54 0c00 	orrs.w	ip, r4, r0
 8000376:	bf04      	itt	eq
 8000378:	4619      	moveq	r1, r3
 800037a:	4610      	moveq	r0, r2
 800037c:	bd30      	pop	{r4, r5, pc}
 800037e:	ea91 0f03 	teq	r1, r3
 8000382:	bf1e      	ittt	ne
 8000384:	2100      	movne	r1, #0
 8000386:	2000      	movne	r0, #0
 8000388:	bd30      	popne	{r4, r5, pc}
 800038a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800038e:	d105      	bne.n	800039c <__adddf3+0x230>
 8000390:	0040      	lsls	r0, r0, #1
 8000392:	4149      	adcs	r1, r1
 8000394:	bf28      	it	cs
 8000396:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800039a:	bd30      	pop	{r4, r5, pc}
 800039c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80003a0:	bf3c      	itt	cc
 80003a2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80003a6:	bd30      	popcc	{r4, r5, pc}
 80003a8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003ac:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80003b0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80003b4:	f04f 0000 	mov.w	r0, #0
 80003b8:	bd30      	pop	{r4, r5, pc}
 80003ba:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003be:	bf1a      	itte	ne
 80003c0:	4619      	movne	r1, r3
 80003c2:	4610      	movne	r0, r2
 80003c4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80003c8:	bf1c      	itt	ne
 80003ca:	460b      	movne	r3, r1
 80003cc:	4602      	movne	r2, r0
 80003ce:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80003d2:	bf06      	itte	eq
 80003d4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80003d8:	ea91 0f03 	teqeq	r1, r3
 80003dc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80003e0:	bd30      	pop	{r4, r5, pc}
 80003e2:	bf00      	nop

080003e4 <__aeabi_ui2d>:
 80003e4:	f090 0f00 	teq	r0, #0
 80003e8:	bf04      	itt	eq
 80003ea:	2100      	moveq	r1, #0
 80003ec:	4770      	bxeq	lr
 80003ee:	b530      	push	{r4, r5, lr}
 80003f0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80003f4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80003f8:	f04f 0500 	mov.w	r5, #0
 80003fc:	f04f 0100 	mov.w	r1, #0
 8000400:	e750      	b.n	80002a4 <__adddf3+0x138>
 8000402:	bf00      	nop

08000404 <__aeabi_i2d>:
 8000404:	f090 0f00 	teq	r0, #0
 8000408:	bf04      	itt	eq
 800040a:	2100      	moveq	r1, #0
 800040c:	4770      	bxeq	lr
 800040e:	b530      	push	{r4, r5, lr}
 8000410:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000414:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000418:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800041c:	bf48      	it	mi
 800041e:	4240      	negmi	r0, r0
 8000420:	f04f 0100 	mov.w	r1, #0
 8000424:	e73e      	b.n	80002a4 <__adddf3+0x138>
 8000426:	bf00      	nop

08000428 <__aeabi_f2d>:
 8000428:	0042      	lsls	r2, r0, #1
 800042a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800042e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000432:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000436:	bf1f      	itttt	ne
 8000438:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800043c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000440:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000444:	4770      	bxne	lr
 8000446:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800044a:	bf08      	it	eq
 800044c:	4770      	bxeq	lr
 800044e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000452:	bf04      	itt	eq
 8000454:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000458:	4770      	bxeq	lr
 800045a:	b530      	push	{r4, r5, lr}
 800045c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000460:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000464:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000468:	e71c      	b.n	80002a4 <__adddf3+0x138>
 800046a:	bf00      	nop

0800046c <__aeabi_ul2d>:
 800046c:	ea50 0201 	orrs.w	r2, r0, r1
 8000470:	bf08      	it	eq
 8000472:	4770      	bxeq	lr
 8000474:	b530      	push	{r4, r5, lr}
 8000476:	f04f 0500 	mov.w	r5, #0
 800047a:	e00a      	b.n	8000492 <__aeabi_l2d+0x16>

0800047c <__aeabi_l2d>:
 800047c:	ea50 0201 	orrs.w	r2, r0, r1
 8000480:	bf08      	it	eq
 8000482:	4770      	bxeq	lr
 8000484:	b530      	push	{r4, r5, lr}
 8000486:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800048a:	d502      	bpl.n	8000492 <__aeabi_l2d+0x16>
 800048c:	4240      	negs	r0, r0
 800048e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000492:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000496:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800049a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800049e:	f43f aed8 	beq.w	8000252 <__adddf3+0xe6>
 80004a2:	f04f 0203 	mov.w	r2, #3
 80004a6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004aa:	bf18      	it	ne
 80004ac:	3203      	addne	r2, #3
 80004ae:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004b2:	bf18      	it	ne
 80004b4:	3203      	addne	r2, #3
 80004b6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80004ba:	f1c2 0320 	rsb	r3, r2, #32
 80004be:	fa00 fc03 	lsl.w	ip, r0, r3
 80004c2:	fa20 f002 	lsr.w	r0, r0, r2
 80004c6:	fa01 fe03 	lsl.w	lr, r1, r3
 80004ca:	ea40 000e 	orr.w	r0, r0, lr
 80004ce:	fa21 f102 	lsr.w	r1, r1, r2
 80004d2:	4414      	add	r4, r2
 80004d4:	e6bd      	b.n	8000252 <__adddf3+0xe6>
 80004d6:	bf00      	nop

080004d8 <__aeabi_dmul>:
 80004d8:	b570      	push	{r4, r5, r6, lr}
 80004da:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80004de:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80004e2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80004e6:	bf1d      	ittte	ne
 80004e8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80004ec:	ea94 0f0c 	teqne	r4, ip
 80004f0:	ea95 0f0c 	teqne	r5, ip
 80004f4:	f000 f8de 	bleq	80006b4 <__aeabi_dmul+0x1dc>
 80004f8:	442c      	add	r4, r5
 80004fa:	ea81 0603 	eor.w	r6, r1, r3
 80004fe:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000502:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000506:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800050a:	bf18      	it	ne
 800050c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000510:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000514:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000518:	d038      	beq.n	800058c <__aeabi_dmul+0xb4>
 800051a:	fba0 ce02 	umull	ip, lr, r0, r2
 800051e:	f04f 0500 	mov.w	r5, #0
 8000522:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000526:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800052a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800052e:	f04f 0600 	mov.w	r6, #0
 8000532:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000536:	f09c 0f00 	teq	ip, #0
 800053a:	bf18      	it	ne
 800053c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000540:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000544:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000548:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800054c:	d204      	bcs.n	8000558 <__aeabi_dmul+0x80>
 800054e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000552:	416d      	adcs	r5, r5
 8000554:	eb46 0606 	adc.w	r6, r6, r6
 8000558:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800055c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000560:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000564:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000568:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800056c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000570:	bf88      	it	hi
 8000572:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000576:	d81e      	bhi.n	80005b6 <__aeabi_dmul+0xde>
 8000578:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800057c:	bf08      	it	eq
 800057e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000582:	f150 0000 	adcs.w	r0, r0, #0
 8000586:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800058a:	bd70      	pop	{r4, r5, r6, pc}
 800058c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000590:	ea46 0101 	orr.w	r1, r6, r1
 8000594:	ea40 0002 	orr.w	r0, r0, r2
 8000598:	ea81 0103 	eor.w	r1, r1, r3
 800059c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80005a0:	bfc2      	ittt	gt
 80005a2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80005a6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80005aa:	bd70      	popgt	{r4, r5, r6, pc}
 80005ac:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005b0:	f04f 0e00 	mov.w	lr, #0
 80005b4:	3c01      	subs	r4, #1
 80005b6:	f300 80ab 	bgt.w	8000710 <__aeabi_dmul+0x238>
 80005ba:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80005be:	bfde      	ittt	le
 80005c0:	2000      	movle	r0, #0
 80005c2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80005c6:	bd70      	pople	{r4, r5, r6, pc}
 80005c8:	f1c4 0400 	rsb	r4, r4, #0
 80005cc:	3c20      	subs	r4, #32
 80005ce:	da35      	bge.n	800063c <__aeabi_dmul+0x164>
 80005d0:	340c      	adds	r4, #12
 80005d2:	dc1b      	bgt.n	800060c <__aeabi_dmul+0x134>
 80005d4:	f104 0414 	add.w	r4, r4, #20
 80005d8:	f1c4 0520 	rsb	r5, r4, #32
 80005dc:	fa00 f305 	lsl.w	r3, r0, r5
 80005e0:	fa20 f004 	lsr.w	r0, r0, r4
 80005e4:	fa01 f205 	lsl.w	r2, r1, r5
 80005e8:	ea40 0002 	orr.w	r0, r0, r2
 80005ec:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80005f0:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005f4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80005f8:	fa21 f604 	lsr.w	r6, r1, r4
 80005fc:	eb42 0106 	adc.w	r1, r2, r6
 8000600:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000604:	bf08      	it	eq
 8000606:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800060a:	bd70      	pop	{r4, r5, r6, pc}
 800060c:	f1c4 040c 	rsb	r4, r4, #12
 8000610:	f1c4 0520 	rsb	r5, r4, #32
 8000614:	fa00 f304 	lsl.w	r3, r0, r4
 8000618:	fa20 f005 	lsr.w	r0, r0, r5
 800061c:	fa01 f204 	lsl.w	r2, r1, r4
 8000620:	ea40 0002 	orr.w	r0, r0, r2
 8000624:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000628:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800062c:	f141 0100 	adc.w	r1, r1, #0
 8000630:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000634:	bf08      	it	eq
 8000636:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800063a:	bd70      	pop	{r4, r5, r6, pc}
 800063c:	f1c4 0520 	rsb	r5, r4, #32
 8000640:	fa00 f205 	lsl.w	r2, r0, r5
 8000644:	ea4e 0e02 	orr.w	lr, lr, r2
 8000648:	fa20 f304 	lsr.w	r3, r0, r4
 800064c:	fa01 f205 	lsl.w	r2, r1, r5
 8000650:	ea43 0302 	orr.w	r3, r3, r2
 8000654:	fa21 f004 	lsr.w	r0, r1, r4
 8000658:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800065c:	fa21 f204 	lsr.w	r2, r1, r4
 8000660:	ea20 0002 	bic.w	r0, r0, r2
 8000664:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000668:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800066c:	bf08      	it	eq
 800066e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000672:	bd70      	pop	{r4, r5, r6, pc}
 8000674:	f094 0f00 	teq	r4, #0
 8000678:	d10f      	bne.n	800069a <__aeabi_dmul+0x1c2>
 800067a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800067e:	0040      	lsls	r0, r0, #1
 8000680:	eb41 0101 	adc.w	r1, r1, r1
 8000684:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000688:	bf08      	it	eq
 800068a:	3c01      	subeq	r4, #1
 800068c:	d0f7      	beq.n	800067e <__aeabi_dmul+0x1a6>
 800068e:	ea41 0106 	orr.w	r1, r1, r6
 8000692:	f095 0f00 	teq	r5, #0
 8000696:	bf18      	it	ne
 8000698:	4770      	bxne	lr
 800069a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800069e:	0052      	lsls	r2, r2, #1
 80006a0:	eb43 0303 	adc.w	r3, r3, r3
 80006a4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80006a8:	bf08      	it	eq
 80006aa:	3d01      	subeq	r5, #1
 80006ac:	d0f7      	beq.n	800069e <__aeabi_dmul+0x1c6>
 80006ae:	ea43 0306 	orr.w	r3, r3, r6
 80006b2:	4770      	bx	lr
 80006b4:	ea94 0f0c 	teq	r4, ip
 80006b8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80006bc:	bf18      	it	ne
 80006be:	ea95 0f0c 	teqne	r5, ip
 80006c2:	d00c      	beq.n	80006de <__aeabi_dmul+0x206>
 80006c4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006c8:	bf18      	it	ne
 80006ca:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ce:	d1d1      	bne.n	8000674 <__aeabi_dmul+0x19c>
 80006d0:	ea81 0103 	eor.w	r1, r1, r3
 80006d4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006d8:	f04f 0000 	mov.w	r0, #0
 80006dc:	bd70      	pop	{r4, r5, r6, pc}
 80006de:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006e2:	bf06      	itte	eq
 80006e4:	4610      	moveq	r0, r2
 80006e6:	4619      	moveq	r1, r3
 80006e8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ec:	d019      	beq.n	8000722 <__aeabi_dmul+0x24a>
 80006ee:	ea94 0f0c 	teq	r4, ip
 80006f2:	d102      	bne.n	80006fa <__aeabi_dmul+0x222>
 80006f4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80006f8:	d113      	bne.n	8000722 <__aeabi_dmul+0x24a>
 80006fa:	ea95 0f0c 	teq	r5, ip
 80006fe:	d105      	bne.n	800070c <__aeabi_dmul+0x234>
 8000700:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000704:	bf1c      	itt	ne
 8000706:	4610      	movne	r0, r2
 8000708:	4619      	movne	r1, r3
 800070a:	d10a      	bne.n	8000722 <__aeabi_dmul+0x24a>
 800070c:	ea81 0103 	eor.w	r1, r1, r3
 8000710:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000714:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000718:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800071c:	f04f 0000 	mov.w	r0, #0
 8000720:	bd70      	pop	{r4, r5, r6, pc}
 8000722:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000726:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800072a:	bd70      	pop	{r4, r5, r6, pc}

0800072c <__aeabi_ddiv>:
 800072c:	b570      	push	{r4, r5, r6, lr}
 800072e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000732:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000736:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800073a:	bf1d      	ittte	ne
 800073c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000740:	ea94 0f0c 	teqne	r4, ip
 8000744:	ea95 0f0c 	teqne	r5, ip
 8000748:	f000 f8a7 	bleq	800089a <__aeabi_ddiv+0x16e>
 800074c:	eba4 0405 	sub.w	r4, r4, r5
 8000750:	ea81 0e03 	eor.w	lr, r1, r3
 8000754:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000758:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800075c:	f000 8088 	beq.w	8000870 <__aeabi_ddiv+0x144>
 8000760:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000764:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000768:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800076c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000770:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000774:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000778:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800077c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000780:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000784:	429d      	cmp	r5, r3
 8000786:	bf08      	it	eq
 8000788:	4296      	cmpeq	r6, r2
 800078a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 800078e:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000792:	d202      	bcs.n	800079a <__aeabi_ddiv+0x6e>
 8000794:	085b      	lsrs	r3, r3, #1
 8000796:	ea4f 0232 	mov.w	r2, r2, rrx
 800079a:	1ab6      	subs	r6, r6, r2
 800079c:	eb65 0503 	sbc.w	r5, r5, r3
 80007a0:	085b      	lsrs	r3, r3, #1
 80007a2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007a6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80007aa:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80007ae:	ebb6 0e02 	subs.w	lr, r6, r2
 80007b2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007b6:	bf22      	ittt	cs
 80007b8:	1ab6      	subcs	r6, r6, r2
 80007ba:	4675      	movcs	r5, lr
 80007bc:	ea40 000c 	orrcs.w	r0, r0, ip
 80007c0:	085b      	lsrs	r3, r3, #1
 80007c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007c6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007ca:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007ce:	bf22      	ittt	cs
 80007d0:	1ab6      	subcs	r6, r6, r2
 80007d2:	4675      	movcs	r5, lr
 80007d4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80007d8:	085b      	lsrs	r3, r3, #1
 80007da:	ea4f 0232 	mov.w	r2, r2, rrx
 80007de:	ebb6 0e02 	subs.w	lr, r6, r2
 80007e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007e6:	bf22      	ittt	cs
 80007e8:	1ab6      	subcs	r6, r6, r2
 80007ea:	4675      	movcs	r5, lr
 80007ec:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80007f0:	085b      	lsrs	r3, r3, #1
 80007f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007fe:	bf22      	ittt	cs
 8000800:	1ab6      	subcs	r6, r6, r2
 8000802:	4675      	movcs	r5, lr
 8000804:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000808:	ea55 0e06 	orrs.w	lr, r5, r6
 800080c:	d018      	beq.n	8000840 <__aeabi_ddiv+0x114>
 800080e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000812:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000816:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800081a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800081e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000822:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000826:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800082a:	d1c0      	bne.n	80007ae <__aeabi_ddiv+0x82>
 800082c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000830:	d10b      	bne.n	800084a <__aeabi_ddiv+0x11e>
 8000832:	ea41 0100 	orr.w	r1, r1, r0
 8000836:	f04f 0000 	mov.w	r0, #0
 800083a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800083e:	e7b6      	b.n	80007ae <__aeabi_ddiv+0x82>
 8000840:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000844:	bf04      	itt	eq
 8000846:	4301      	orreq	r1, r0
 8000848:	2000      	moveq	r0, #0
 800084a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800084e:	bf88      	it	hi
 8000850:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000854:	f63f aeaf 	bhi.w	80005b6 <__aeabi_dmul+0xde>
 8000858:	ebb5 0c03 	subs.w	ip, r5, r3
 800085c:	bf04      	itt	eq
 800085e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000862:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000866:	f150 0000 	adcs.w	r0, r0, #0
 800086a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800086e:	bd70      	pop	{r4, r5, r6, pc}
 8000870:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000874:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000878:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800087c:	bfc2      	ittt	gt
 800087e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000882:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000886:	bd70      	popgt	{r4, r5, r6, pc}
 8000888:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800088c:	f04f 0e00 	mov.w	lr, #0
 8000890:	3c01      	subs	r4, #1
 8000892:	e690      	b.n	80005b6 <__aeabi_dmul+0xde>
 8000894:	ea45 0e06 	orr.w	lr, r5, r6
 8000898:	e68d      	b.n	80005b6 <__aeabi_dmul+0xde>
 800089a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800089e:	ea94 0f0c 	teq	r4, ip
 80008a2:	bf08      	it	eq
 80008a4:	ea95 0f0c 	teqeq	r5, ip
 80008a8:	f43f af3b 	beq.w	8000722 <__aeabi_dmul+0x24a>
 80008ac:	ea94 0f0c 	teq	r4, ip
 80008b0:	d10a      	bne.n	80008c8 <__aeabi_ddiv+0x19c>
 80008b2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80008b6:	f47f af34 	bne.w	8000722 <__aeabi_dmul+0x24a>
 80008ba:	ea95 0f0c 	teq	r5, ip
 80008be:	f47f af25 	bne.w	800070c <__aeabi_dmul+0x234>
 80008c2:	4610      	mov	r0, r2
 80008c4:	4619      	mov	r1, r3
 80008c6:	e72c      	b.n	8000722 <__aeabi_dmul+0x24a>
 80008c8:	ea95 0f0c 	teq	r5, ip
 80008cc:	d106      	bne.n	80008dc <__aeabi_ddiv+0x1b0>
 80008ce:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008d2:	f43f aefd 	beq.w	80006d0 <__aeabi_dmul+0x1f8>
 80008d6:	4610      	mov	r0, r2
 80008d8:	4619      	mov	r1, r3
 80008da:	e722      	b.n	8000722 <__aeabi_dmul+0x24a>
 80008dc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80008e0:	bf18      	it	ne
 80008e2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80008e6:	f47f aec5 	bne.w	8000674 <__aeabi_dmul+0x19c>
 80008ea:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80008ee:	f47f af0d 	bne.w	800070c <__aeabi_dmul+0x234>
 80008f2:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80008f6:	f47f aeeb 	bne.w	80006d0 <__aeabi_dmul+0x1f8>
 80008fa:	e712      	b.n	8000722 <__aeabi_dmul+0x24a>

080008fc <__gedf2>:
 80008fc:	f04f 3cff 	mov.w	ip, #4294967295
 8000900:	e006      	b.n	8000910 <__cmpdf2+0x4>
 8000902:	bf00      	nop

08000904 <__ledf2>:
 8000904:	f04f 0c01 	mov.w	ip, #1
 8000908:	e002      	b.n	8000910 <__cmpdf2+0x4>
 800090a:	bf00      	nop

0800090c <__cmpdf2>:
 800090c:	f04f 0c01 	mov.w	ip, #1
 8000910:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000914:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000918:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 800091c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000920:	bf18      	it	ne
 8000922:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000926:	d01b      	beq.n	8000960 <__cmpdf2+0x54>
 8000928:	b001      	add	sp, #4
 800092a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 800092e:	bf0c      	ite	eq
 8000930:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000934:	ea91 0f03 	teqne	r1, r3
 8000938:	bf02      	ittt	eq
 800093a:	ea90 0f02 	teqeq	r0, r2
 800093e:	2000      	moveq	r0, #0
 8000940:	4770      	bxeq	lr
 8000942:	f110 0f00 	cmn.w	r0, #0
 8000946:	ea91 0f03 	teq	r1, r3
 800094a:	bf58      	it	pl
 800094c:	4299      	cmppl	r1, r3
 800094e:	bf08      	it	eq
 8000950:	4290      	cmpeq	r0, r2
 8000952:	bf2c      	ite	cs
 8000954:	17d8      	asrcs	r0, r3, #31
 8000956:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 800095a:	f040 0001 	orr.w	r0, r0, #1
 800095e:	4770      	bx	lr
 8000960:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000964:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000968:	d102      	bne.n	8000970 <__cmpdf2+0x64>
 800096a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 800096e:	d107      	bne.n	8000980 <__cmpdf2+0x74>
 8000970:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000974:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000978:	d1d6      	bne.n	8000928 <__cmpdf2+0x1c>
 800097a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 800097e:	d0d3      	beq.n	8000928 <__cmpdf2+0x1c>
 8000980:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000984:	4770      	bx	lr
 8000986:	bf00      	nop

08000988 <__aeabi_cdrcmple>:
 8000988:	4684      	mov	ip, r0
 800098a:	4610      	mov	r0, r2
 800098c:	4662      	mov	r2, ip
 800098e:	468c      	mov	ip, r1
 8000990:	4619      	mov	r1, r3
 8000992:	4663      	mov	r3, ip
 8000994:	e000      	b.n	8000998 <__aeabi_cdcmpeq>
 8000996:	bf00      	nop

08000998 <__aeabi_cdcmpeq>:
 8000998:	b501      	push	{r0, lr}
 800099a:	f7ff ffb7 	bl	800090c <__cmpdf2>
 800099e:	2800      	cmp	r0, #0
 80009a0:	bf48      	it	mi
 80009a2:	f110 0f00 	cmnmi.w	r0, #0
 80009a6:	bd01      	pop	{r0, pc}

080009a8 <__aeabi_dcmpeq>:
 80009a8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009ac:	f7ff fff4 	bl	8000998 <__aeabi_cdcmpeq>
 80009b0:	bf0c      	ite	eq
 80009b2:	2001      	moveq	r0, #1
 80009b4:	2000      	movne	r0, #0
 80009b6:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ba:	bf00      	nop

080009bc <__aeabi_dcmplt>:
 80009bc:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009c0:	f7ff ffea 	bl	8000998 <__aeabi_cdcmpeq>
 80009c4:	bf34      	ite	cc
 80009c6:	2001      	movcc	r0, #1
 80009c8:	2000      	movcs	r0, #0
 80009ca:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ce:	bf00      	nop

080009d0 <__aeabi_dcmple>:
 80009d0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009d4:	f7ff ffe0 	bl	8000998 <__aeabi_cdcmpeq>
 80009d8:	bf94      	ite	ls
 80009da:	2001      	movls	r0, #1
 80009dc:	2000      	movhi	r0, #0
 80009de:	f85d fb08 	ldr.w	pc, [sp], #8
 80009e2:	bf00      	nop

080009e4 <__aeabi_dcmpge>:
 80009e4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009e8:	f7ff ffce 	bl	8000988 <__aeabi_cdrcmple>
 80009ec:	bf94      	ite	ls
 80009ee:	2001      	movls	r0, #1
 80009f0:	2000      	movhi	r0, #0
 80009f2:	f85d fb08 	ldr.w	pc, [sp], #8
 80009f6:	bf00      	nop

080009f8 <__aeabi_dcmpgt>:
 80009f8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009fc:	f7ff ffc4 	bl	8000988 <__aeabi_cdrcmple>
 8000a00:	bf34      	ite	cc
 8000a02:	2001      	movcc	r0, #1
 8000a04:	2000      	movcs	r0, #0
 8000a06:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a0a:	bf00      	nop

08000a0c <__aeabi_dcmpun>:
 8000a0c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a10:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a14:	d102      	bne.n	8000a1c <__aeabi_dcmpun+0x10>
 8000a16:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a1a:	d10a      	bne.n	8000a32 <__aeabi_dcmpun+0x26>
 8000a1c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a20:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a24:	d102      	bne.n	8000a2c <__aeabi_dcmpun+0x20>
 8000a26:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a2a:	d102      	bne.n	8000a32 <__aeabi_dcmpun+0x26>
 8000a2c:	f04f 0000 	mov.w	r0, #0
 8000a30:	4770      	bx	lr
 8000a32:	f04f 0001 	mov.w	r0, #1
 8000a36:	4770      	bx	lr

08000a38 <__aeabi_d2iz>:
 8000a38:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a3c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000a40:	d215      	bcs.n	8000a6e <__aeabi_d2iz+0x36>
 8000a42:	d511      	bpl.n	8000a68 <__aeabi_d2iz+0x30>
 8000a44:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000a48:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a4c:	d912      	bls.n	8000a74 <__aeabi_d2iz+0x3c>
 8000a4e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a52:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000a56:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a5a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000a5e:	fa23 f002 	lsr.w	r0, r3, r2
 8000a62:	bf18      	it	ne
 8000a64:	4240      	negne	r0, r0
 8000a66:	4770      	bx	lr
 8000a68:	f04f 0000 	mov.w	r0, #0
 8000a6c:	4770      	bx	lr
 8000a6e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000a72:	d105      	bne.n	8000a80 <__aeabi_d2iz+0x48>
 8000a74:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000a78:	bf08      	it	eq
 8000a7a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000a7e:	4770      	bx	lr
 8000a80:	f04f 0000 	mov.w	r0, #0
 8000a84:	4770      	bx	lr
 8000a86:	bf00      	nop

08000a88 <__aeabi_d2uiz>:
 8000a88:	004a      	lsls	r2, r1, #1
 8000a8a:	d211      	bcs.n	8000ab0 <__aeabi_d2uiz+0x28>
 8000a8c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000a90:	d211      	bcs.n	8000ab6 <__aeabi_d2uiz+0x2e>
 8000a92:	d50d      	bpl.n	8000ab0 <__aeabi_d2uiz+0x28>
 8000a94:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000a98:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a9c:	d40e      	bmi.n	8000abc <__aeabi_d2uiz+0x34>
 8000a9e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000aa2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000aa6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000aaa:	fa23 f002 	lsr.w	r0, r3, r2
 8000aae:	4770      	bx	lr
 8000ab0:	f04f 0000 	mov.w	r0, #0
 8000ab4:	4770      	bx	lr
 8000ab6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000aba:	d102      	bne.n	8000ac2 <__aeabi_d2uiz+0x3a>
 8000abc:	f04f 30ff 	mov.w	r0, #4294967295
 8000ac0:	4770      	bx	lr
 8000ac2:	f04f 0000 	mov.w	r0, #0
 8000ac6:	4770      	bx	lr

08000ac8 <__aeabi_d2f>:
 8000ac8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000acc:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000ad0:	bf24      	itt	cs
 8000ad2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000ad6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000ada:	d90d      	bls.n	8000af8 <__aeabi_d2f+0x30>
 8000adc:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000ae0:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000ae4:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000ae8:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000aec:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000af0:	bf08      	it	eq
 8000af2:	f020 0001 	biceq.w	r0, r0, #1
 8000af6:	4770      	bx	lr
 8000af8:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000afc:	d121      	bne.n	8000b42 <__aeabi_d2f+0x7a>
 8000afe:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000b02:	bfbc      	itt	lt
 8000b04:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000b08:	4770      	bxlt	lr
 8000b0a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000b0e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000b12:	f1c2 0218 	rsb	r2, r2, #24
 8000b16:	f1c2 0c20 	rsb	ip, r2, #32
 8000b1a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000b1e:	fa20 f002 	lsr.w	r0, r0, r2
 8000b22:	bf18      	it	ne
 8000b24:	f040 0001 	orrne.w	r0, r0, #1
 8000b28:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b2c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000b30:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000b34:	ea40 000c 	orr.w	r0, r0, ip
 8000b38:	fa23 f302 	lsr.w	r3, r3, r2
 8000b3c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000b40:	e7cc      	b.n	8000adc <__aeabi_d2f+0x14>
 8000b42:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000b46:	d107      	bne.n	8000b58 <__aeabi_d2f+0x90>
 8000b48:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000b4c:	bf1e      	ittt	ne
 8000b4e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000b52:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000b56:	4770      	bxne	lr
 8000b58:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000b5c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000b60:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000b64:	4770      	bx	lr
 8000b66:	bf00      	nop

08000b68 <__aeabi_frsub>:
 8000b68:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
 8000b6c:	e002      	b.n	8000b74 <__addsf3>
 8000b6e:	bf00      	nop

08000b70 <__aeabi_fsub>:
 8000b70:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

08000b74 <__addsf3>:
 8000b74:	0042      	lsls	r2, r0, #1
 8000b76:	bf1f      	itttt	ne
 8000b78:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000b7c:	ea92 0f03 	teqne	r2, r3
 8000b80:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000b84:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000b88:	d06a      	beq.n	8000c60 <__addsf3+0xec>
 8000b8a:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000b8e:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8000b92:	bfc1      	itttt	gt
 8000b94:	18d2      	addgt	r2, r2, r3
 8000b96:	4041      	eorgt	r1, r0
 8000b98:	4048      	eorgt	r0, r1
 8000b9a:	4041      	eorgt	r1, r0
 8000b9c:	bfb8      	it	lt
 8000b9e:	425b      	neglt	r3, r3
 8000ba0:	2b19      	cmp	r3, #25
 8000ba2:	bf88      	it	hi
 8000ba4:	4770      	bxhi	lr
 8000ba6:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 8000baa:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000bae:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 8000bb2:	bf18      	it	ne
 8000bb4:	4240      	negne	r0, r0
 8000bb6:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000bba:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 8000bbe:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 8000bc2:	bf18      	it	ne
 8000bc4:	4249      	negne	r1, r1
 8000bc6:	ea92 0f03 	teq	r2, r3
 8000bca:	d03f      	beq.n	8000c4c <__addsf3+0xd8>
 8000bcc:	f1a2 0201 	sub.w	r2, r2, #1
 8000bd0:	fa41 fc03 	asr.w	ip, r1, r3
 8000bd4:	eb10 000c 	adds.w	r0, r0, ip
 8000bd8:	f1c3 0320 	rsb	r3, r3, #32
 8000bdc:	fa01 f103 	lsl.w	r1, r1, r3
 8000be0:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000be4:	d502      	bpl.n	8000bec <__addsf3+0x78>
 8000be6:	4249      	negs	r1, r1
 8000be8:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8000bec:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 8000bf0:	d313      	bcc.n	8000c1a <__addsf3+0xa6>
 8000bf2:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8000bf6:	d306      	bcc.n	8000c06 <__addsf3+0x92>
 8000bf8:	0840      	lsrs	r0, r0, #1
 8000bfa:	ea4f 0131 	mov.w	r1, r1, rrx
 8000bfe:	f102 0201 	add.w	r2, r2, #1
 8000c02:	2afe      	cmp	r2, #254	; 0xfe
 8000c04:	d251      	bcs.n	8000caa <__addsf3+0x136>
 8000c06:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
 8000c0a:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000c0e:	bf08      	it	eq
 8000c10:	f020 0001 	biceq.w	r0, r0, #1
 8000c14:	ea40 0003 	orr.w	r0, r0, r3
 8000c18:	4770      	bx	lr
 8000c1a:	0049      	lsls	r1, r1, #1
 8000c1c:	eb40 0000 	adc.w	r0, r0, r0
 8000c20:	3a01      	subs	r2, #1
 8000c22:	bf28      	it	cs
 8000c24:	f5b0 0f00 	cmpcs.w	r0, #8388608	; 0x800000
 8000c28:	d2ed      	bcs.n	8000c06 <__addsf3+0x92>
 8000c2a:	fab0 fc80 	clz	ip, r0
 8000c2e:	f1ac 0c08 	sub.w	ip, ip, #8
 8000c32:	ebb2 020c 	subs.w	r2, r2, ip
 8000c36:	fa00 f00c 	lsl.w	r0, r0, ip
 8000c3a:	bfaa      	itet	ge
 8000c3c:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000c40:	4252      	neglt	r2, r2
 8000c42:	4318      	orrge	r0, r3
 8000c44:	bfbc      	itt	lt
 8000c46:	40d0      	lsrlt	r0, r2
 8000c48:	4318      	orrlt	r0, r3
 8000c4a:	4770      	bx	lr
 8000c4c:	f092 0f00 	teq	r2, #0
 8000c50:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
 8000c54:	bf06      	itte	eq
 8000c56:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
 8000c5a:	3201      	addeq	r2, #1
 8000c5c:	3b01      	subne	r3, #1
 8000c5e:	e7b5      	b.n	8000bcc <__addsf3+0x58>
 8000c60:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000c64:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000c68:	bf18      	it	ne
 8000c6a:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000c6e:	d021      	beq.n	8000cb4 <__addsf3+0x140>
 8000c70:	ea92 0f03 	teq	r2, r3
 8000c74:	d004      	beq.n	8000c80 <__addsf3+0x10c>
 8000c76:	f092 0f00 	teq	r2, #0
 8000c7a:	bf08      	it	eq
 8000c7c:	4608      	moveq	r0, r1
 8000c7e:	4770      	bx	lr
 8000c80:	ea90 0f01 	teq	r0, r1
 8000c84:	bf1c      	itt	ne
 8000c86:	2000      	movne	r0, #0
 8000c88:	4770      	bxne	lr
 8000c8a:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
 8000c8e:	d104      	bne.n	8000c9a <__addsf3+0x126>
 8000c90:	0040      	lsls	r0, r0, #1
 8000c92:	bf28      	it	cs
 8000c94:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
 8000c98:	4770      	bx	lr
 8000c9a:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
 8000c9e:	bf3c      	itt	cc
 8000ca0:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
 8000ca4:	4770      	bxcc	lr
 8000ca6:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000caa:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
 8000cae:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000cb2:	4770      	bx	lr
 8000cb4:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000cb8:	bf16      	itet	ne
 8000cba:	4608      	movne	r0, r1
 8000cbc:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8000cc0:	4601      	movne	r1, r0
 8000cc2:	0242      	lsls	r2, r0, #9
 8000cc4:	bf06      	itte	eq
 8000cc6:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8000cca:	ea90 0f01 	teqeq	r0, r1
 8000cce:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
 8000cd2:	4770      	bx	lr

08000cd4 <__aeabi_ui2f>:
 8000cd4:	f04f 0300 	mov.w	r3, #0
 8000cd8:	e004      	b.n	8000ce4 <__aeabi_i2f+0x8>
 8000cda:	bf00      	nop

08000cdc <__aeabi_i2f>:
 8000cdc:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
 8000ce0:	bf48      	it	mi
 8000ce2:	4240      	negmi	r0, r0
 8000ce4:	ea5f 0c00 	movs.w	ip, r0
 8000ce8:	bf08      	it	eq
 8000cea:	4770      	bxeq	lr
 8000cec:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
 8000cf0:	4601      	mov	r1, r0
 8000cf2:	f04f 0000 	mov.w	r0, #0
 8000cf6:	e01c      	b.n	8000d32 <__aeabi_l2f+0x2a>

08000cf8 <__aeabi_ul2f>:
 8000cf8:	ea50 0201 	orrs.w	r2, r0, r1
 8000cfc:	bf08      	it	eq
 8000cfe:	4770      	bxeq	lr
 8000d00:	f04f 0300 	mov.w	r3, #0
 8000d04:	e00a      	b.n	8000d1c <__aeabi_l2f+0x14>
 8000d06:	bf00      	nop

08000d08 <__aeabi_l2f>:
 8000d08:	ea50 0201 	orrs.w	r2, r0, r1
 8000d0c:	bf08      	it	eq
 8000d0e:	4770      	bxeq	lr
 8000d10:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
 8000d14:	d502      	bpl.n	8000d1c <__aeabi_l2f+0x14>
 8000d16:	4240      	negs	r0, r0
 8000d18:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000d1c:	ea5f 0c01 	movs.w	ip, r1
 8000d20:	bf02      	ittt	eq
 8000d22:	4684      	moveq	ip, r0
 8000d24:	4601      	moveq	r1, r0
 8000d26:	2000      	moveq	r0, #0
 8000d28:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
 8000d2c:	bf08      	it	eq
 8000d2e:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
 8000d32:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 8000d36:	fabc f28c 	clz	r2, ip
 8000d3a:	3a08      	subs	r2, #8
 8000d3c:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000d40:	db10      	blt.n	8000d64 <__aeabi_l2f+0x5c>
 8000d42:	fa01 fc02 	lsl.w	ip, r1, r2
 8000d46:	4463      	add	r3, ip
 8000d48:	fa00 fc02 	lsl.w	ip, r0, r2
 8000d4c:	f1c2 0220 	rsb	r2, r2, #32
 8000d50:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000d54:	fa20 f202 	lsr.w	r2, r0, r2
 8000d58:	eb43 0002 	adc.w	r0, r3, r2
 8000d5c:	bf08      	it	eq
 8000d5e:	f020 0001 	biceq.w	r0, r0, #1
 8000d62:	4770      	bx	lr
 8000d64:	f102 0220 	add.w	r2, r2, #32
 8000d68:	fa01 fc02 	lsl.w	ip, r1, r2
 8000d6c:	f1c2 0220 	rsb	r2, r2, #32
 8000d70:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000d74:	fa21 f202 	lsr.w	r2, r1, r2
 8000d78:	eb43 0002 	adc.w	r0, r3, r2
 8000d7c:	bf08      	it	eq
 8000d7e:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000d82:	4770      	bx	lr

08000d84 <__aeabi_d2lz>:
 8000d84:	b538      	push	{r3, r4, r5, lr}
 8000d86:	460c      	mov	r4, r1
 8000d88:	4605      	mov	r5, r0
 8000d8a:	4621      	mov	r1, r4
 8000d8c:	4628      	mov	r0, r5
 8000d8e:	2200      	movs	r2, #0
 8000d90:	2300      	movs	r3, #0
 8000d92:	f7ff fe13 	bl	80009bc <__aeabi_dcmplt>
 8000d96:	b928      	cbnz	r0, 8000da4 <__aeabi_d2lz+0x20>
 8000d98:	4628      	mov	r0, r5
 8000d9a:	4621      	mov	r1, r4
 8000d9c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000da0:	f000 b80a 	b.w	8000db8 <__aeabi_d2ulz>
 8000da4:	4628      	mov	r0, r5
 8000da6:	f104 4100 	add.w	r1, r4, #2147483648	; 0x80000000
 8000daa:	f000 f805 	bl	8000db8 <__aeabi_d2ulz>
 8000dae:	4240      	negs	r0, r0
 8000db0:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000db4:	bd38      	pop	{r3, r4, r5, pc}
 8000db6:	bf00      	nop

08000db8 <__aeabi_d2ulz>:
 8000db8:	b5d0      	push	{r4, r6, r7, lr}
 8000dba:	2200      	movs	r2, #0
 8000dbc:	4b0b      	ldr	r3, [pc, #44]	; (8000dec <__aeabi_d2ulz+0x34>)
 8000dbe:	4606      	mov	r6, r0
 8000dc0:	460f      	mov	r7, r1
 8000dc2:	f7ff fb89 	bl	80004d8 <__aeabi_dmul>
 8000dc6:	f7ff fe5f 	bl	8000a88 <__aeabi_d2uiz>
 8000dca:	4604      	mov	r4, r0
 8000dcc:	f7ff fb0a 	bl	80003e4 <__aeabi_ui2d>
 8000dd0:	2200      	movs	r2, #0
 8000dd2:	4b07      	ldr	r3, [pc, #28]	; (8000df0 <__aeabi_d2ulz+0x38>)
 8000dd4:	f7ff fb80 	bl	80004d8 <__aeabi_dmul>
 8000dd8:	4602      	mov	r2, r0
 8000dda:	460b      	mov	r3, r1
 8000ddc:	4630      	mov	r0, r6
 8000dde:	4639      	mov	r1, r7
 8000de0:	f7ff f9c2 	bl	8000168 <__aeabi_dsub>
 8000de4:	f7ff fe50 	bl	8000a88 <__aeabi_d2uiz>
 8000de8:	4621      	mov	r1, r4
 8000dea:	bdd0      	pop	{r4, r6, r7, pc}
 8000dec:	3df00000 	.word	0x3df00000
 8000df0:	41f00000 	.word	0x41f00000

08000df4 <lcd_init>:
extern I2C_HandleTypeDef hi2c1;

#define SLAVE_ADDRESS_LCD 0x4E

void lcd_init (void)
{
 8000df4:	b580      	push	{r7, lr}
 8000df6:	af00      	add	r7, sp, #0
	// 4 bit set
	HAL_Delay(20);  // wait for >15ms
 8000df8:	2014      	movs	r0, #20
 8000dfa:	f000 fdf1 	bl	80019e0 <HAL_Delay>
	lcd_send_command (0x30);
 8000dfe:	2030      	movs	r0, #48	; 0x30
 8000e00:	f000 f832 	bl	8000e68 <lcd_send_command>
	HAL_Delay(5);  // wait for >4.1ms
 8000e04:	2005      	movs	r0, #5
 8000e06:	f000 fdeb 	bl	80019e0 <HAL_Delay>
	lcd_send_command (0x30);
 8000e0a:	2030      	movs	r0, #48	; 0x30
 8000e0c:	f000 f82c 	bl	8000e68 <lcd_send_command>
	HAL_Delay(1);  // wait for >100us
 8000e10:	2001      	movs	r0, #1
 8000e12:	f000 fde5 	bl	80019e0 <HAL_Delay>
	lcd_send_command (0x30);
 8000e16:	2030      	movs	r0, #48	; 0x30
 8000e18:	f000 f826 	bl	8000e68 <lcd_send_command>
	HAL_Delay(10);
 8000e1c:	200a      	movs	r0, #10
 8000e1e:	f000 fddf 	bl	80019e0 <HAL_Delay>
	lcd_send_command (0x20);  // 4bit mode
 8000e22:	2020      	movs	r0, #32
 8000e24:	f000 f820 	bl	8000e68 <lcd_send_command>
	HAL_Delay(10);
 8000e28:	200a      	movs	r0, #10
 8000e2a:	f000 fdd9 	bl	80019e0 <HAL_Delay>
	// set display
	lcd_send_command (0x28); // Function set: DL=0 (4 bit mode), N = 1 (2 line display) F = 0 (5x8 characters)
 8000e2e:	2028      	movs	r0, #40	; 0x28
 8000e30:	f000 f81a 	bl	8000e68 <lcd_send_command>
	HAL_Delay(1);
 8000e34:	2001      	movs	r0, #1
 8000e36:	f000 fdd3 	bl	80019e0 <HAL_Delay>
	lcd_send_command (0x08); //Display on/off control: D=0,C=0, B=0  ---> display off
 8000e3a:	2008      	movs	r0, #8
 8000e3c:	f000 f814 	bl	8000e68 <lcd_send_command>
	HAL_Delay(1);
 8000e40:	2001      	movs	r0, #1
 8000e42:	f000 fdcd 	bl	80019e0 <HAL_Delay>
	lcd_send_command (0x01);  // clear display
 8000e46:	2001      	movs	r0, #1
 8000e48:	f000 f80e 	bl	8000e68 <lcd_send_command>
	HAL_Delay(2);
 8000e4c:	2002      	movs	r0, #2
 8000e4e:	f000 fdc7 	bl	80019e0 <HAL_Delay>
	lcd_send_command (0x06); //Entry mode set: I/D = 1 (increment cursor), SH = 0 (no shift)
 8000e52:	2006      	movs	r0, #6
 8000e54:	f000 f808 	bl	8000e68 <lcd_send_command>
	HAL_Delay(1);
 8000e58:	2001      	movs	r0, #1
 8000e5a:	f000 fdc1 	bl	80019e0 <HAL_Delay>
	lcd_send_command (0x0C); //Display on/off control: D = 1, C, B = 0
 8000e5e:	200c      	movs	r0, #12
 8000e60:	f000 f802 	bl	8000e68 <lcd_send_command>
}
 8000e64:	bf00      	nop
 8000e66:	bd80      	pop	{r7, pc}

08000e68 <lcd_send_command>:

void lcd_send_command (char cmd)
{
 8000e68:	b580      	push	{r7, lr}
 8000e6a:	b086      	sub	sp, #24
 8000e6c:	af02      	add	r7, sp, #8
 8000e6e:	4603      	mov	r3, r0
 8000e70:	71fb      	strb	r3, [r7, #7]
  char data_u, data_l;
	uint8_t data_t[4];
	data_u = (cmd&0xf0);
 8000e72:	79fb      	ldrb	r3, [r7, #7]
 8000e74:	f023 030f 	bic.w	r3, r3, #15
 8000e78:	73fb      	strb	r3, [r7, #15]
	data_l = ((cmd<<4)&0xf0);
 8000e7a:	79fb      	ldrb	r3, [r7, #7]
 8000e7c:	011b      	lsls	r3, r3, #4
 8000e7e:	73bb      	strb	r3, [r7, #14]
	data_t[0] = data_u|0x0C;  // E =1, RS =0, R/W =0
 8000e80:	7bfb      	ldrb	r3, [r7, #15]
 8000e82:	f043 030c 	orr.w	r3, r3, #12
 8000e86:	b2db      	uxtb	r3, r3
 8000e88:	723b      	strb	r3, [r7, #8]
	data_t[1] = data_u|0x08;  // E =0, RS =0
 8000e8a:	7bfb      	ldrb	r3, [r7, #15]
 8000e8c:	f043 0308 	orr.w	r3, r3, #8
 8000e90:	b2db      	uxtb	r3, r3
 8000e92:	727b      	strb	r3, [r7, #9]
	data_t[2] = data_l|0x0C;  // E =1, RS =0
 8000e94:	7bbb      	ldrb	r3, [r7, #14]
 8000e96:	f043 030c 	orr.w	r3, r3, #12
 8000e9a:	b2db      	uxtb	r3, r3
 8000e9c:	72bb      	strb	r3, [r7, #10]
	data_t[3] = data_l|0x08;  // E =0, RS =0
 8000e9e:	7bbb      	ldrb	r3, [r7, #14]
 8000ea0:	f043 0308 	orr.w	r3, r3, #8
 8000ea4:	b2db      	uxtb	r3, r3
 8000ea6:	72fb      	strb	r3, [r7, #11]
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 8000ea8:	f107 0208 	add.w	r2, r7, #8
 8000eac:	2364      	movs	r3, #100	; 0x64
 8000eae:	9300      	str	r3, [sp, #0]
 8000eb0:	2304      	movs	r3, #4
 8000eb2:	214e      	movs	r1, #78	; 0x4e
 8000eb4:	4803      	ldr	r0, [pc, #12]	; (8000ec4 <lcd_send_command+0x5c>)
 8000eb6:	f001 f993 	bl	80021e0 <HAL_I2C_Master_Transmit>
}
 8000eba:	bf00      	nop
 8000ebc:	3710      	adds	r7, #16
 8000ebe:	46bd      	mov	sp, r7
 8000ec0:	bd80      	pop	{r7, pc}
 8000ec2:	bf00      	nop
 8000ec4:	20000214 	.word	0x20000214

08000ec8 <lcd_send_data>:

void lcd_send_data (char data)
{
 8000ec8:	b580      	push	{r7, lr}
 8000eca:	b086      	sub	sp, #24
 8000ecc:	af02      	add	r7, sp, #8
 8000ece:	4603      	mov	r3, r0
 8000ed0:	71fb      	strb	r3, [r7, #7]
	char data_u, data_l;
	uint8_t data_t[4];
	data_u = (data&0xf0);
 8000ed2:	79fb      	ldrb	r3, [r7, #7]
 8000ed4:	f023 030f 	bic.w	r3, r3, #15
 8000ed8:	73fb      	strb	r3, [r7, #15]
	data_l = ((data<<4)&0xf0);
 8000eda:	79fb      	ldrb	r3, [r7, #7]
 8000edc:	011b      	lsls	r3, r3, #4
 8000ede:	73bb      	strb	r3, [r7, #14]
	data_t[0] = data_u|0x0D;  // E =1, RS =1, R/W =0
 8000ee0:	7bfb      	ldrb	r3, [r7, #15]
 8000ee2:	f043 030d 	orr.w	r3, r3, #13
 8000ee6:	b2db      	uxtb	r3, r3
 8000ee8:	723b      	strb	r3, [r7, #8]
	data_t[1] = data_u|0x09;  // E =0, RS =1
 8000eea:	7bfb      	ldrb	r3, [r7, #15]
 8000eec:	f043 0309 	orr.w	r3, r3, #9
 8000ef0:	b2db      	uxtb	r3, r3
 8000ef2:	727b      	strb	r3, [r7, #9]
	data_t[2] = data_l|0x0D;  // E =1, RS =1
 8000ef4:	7bbb      	ldrb	r3, [r7, #14]
 8000ef6:	f043 030d 	orr.w	r3, r3, #13
 8000efa:	b2db      	uxtb	r3, r3
 8000efc:	72bb      	strb	r3, [r7, #10]
	data_t[3] = data_l|0x09;  // E =0, RS =1
 8000efe:	7bbb      	ldrb	r3, [r7, #14]
 8000f00:	f043 0309 	orr.w	r3, r3, #9
 8000f04:	b2db      	uxtb	r3, r3
 8000f06:	72fb      	strb	r3, [r7, #11]
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 8000f08:	f107 0208 	add.w	r2, r7, #8
 8000f0c:	2364      	movs	r3, #100	; 0x64
 8000f0e:	9300      	str	r3, [sp, #0]
 8000f10:	2304      	movs	r3, #4
 8000f12:	214e      	movs	r1, #78	; 0x4e
 8000f14:	4803      	ldr	r0, [pc, #12]	; (8000f24 <lcd_send_data+0x5c>)
 8000f16:	f001 f963 	bl	80021e0 <HAL_I2C_Master_Transmit>
}
 8000f1a:	bf00      	nop
 8000f1c:	3710      	adds	r7, #16
 8000f1e:	46bd      	mov	sp, r7
 8000f20:	bd80      	pop	{r7, pc}
 8000f22:	bf00      	nop
 8000f24:	20000214 	.word	0x20000214

08000f28 <lcd_clear>:

void lcd_clear (void)
{
 8000f28:	b580      	push	{r7, lr}
 8000f2a:	af00      	add	r7, sp, #0
	lcd_send_command(0x01);
 8000f2c:	2001      	movs	r0, #1
 8000f2e:	f7ff ff9b 	bl	8000e68 <lcd_send_command>
	HAL_Delay(2);
 8000f32:	2002      	movs	r0, #2
 8000f34:	f000 fd54 	bl	80019e0 <HAL_Delay>
}
 8000f38:	bf00      	nop
 8000f3a:	bd80      	pop	{r7, pc}

08000f3c <lcd_put_cur>:

void lcd_put_cur(int row, int col)
{
 8000f3c:	b580      	push	{r7, lr}
 8000f3e:	b082      	sub	sp, #8
 8000f40:	af00      	add	r7, sp, #0
 8000f42:	6078      	str	r0, [r7, #4]
 8000f44:	6039      	str	r1, [r7, #0]
    switch (row)
 8000f46:	687b      	ldr	r3, [r7, #4]
 8000f48:	2b00      	cmp	r3, #0
 8000f4a:	d003      	beq.n	8000f54 <lcd_put_cur+0x18>
 8000f4c:	687b      	ldr	r3, [r7, #4]
 8000f4e:	2b01      	cmp	r3, #1
 8000f50:	d005      	beq.n	8000f5e <lcd_put_cur+0x22>
 8000f52:	e009      	b.n	8000f68 <lcd_put_cur+0x2c>
    {
        case 0:
            col |= 0x80; // DDRAM address row 1
 8000f54:	683b      	ldr	r3, [r7, #0]
 8000f56:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000f5a:	603b      	str	r3, [r7, #0]
            break;
 8000f5c:	e004      	b.n	8000f68 <lcd_put_cur+0x2c>
        case 1:
            col |= 0xC0; // DDRAM address row 2
 8000f5e:	683b      	ldr	r3, [r7, #0]
 8000f60:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8000f64:	603b      	str	r3, [r7, #0]
            break;
 8000f66:	bf00      	nop
    }

    lcd_send_command (col);
 8000f68:	683b      	ldr	r3, [r7, #0]
 8000f6a:	b2db      	uxtb	r3, r3
 8000f6c:	4618      	mov	r0, r3
 8000f6e:	f7ff ff7b 	bl	8000e68 <lcd_send_command>
}
 8000f72:	bf00      	nop
 8000f74:	3708      	adds	r7, #8
 8000f76:	46bd      	mov	sp, r7
 8000f78:	bd80      	pop	{r7, pc}

08000f7a <lcd_send_string>:



void lcd_send_string (char *str)
{
 8000f7a:	b580      	push	{r7, lr}
 8000f7c:	b082      	sub	sp, #8
 8000f7e:	af00      	add	r7, sp, #0
 8000f80:	6078      	str	r0, [r7, #4]
	while (*str) lcd_send_data (*str++);
 8000f82:	e006      	b.n	8000f92 <lcd_send_string+0x18>
 8000f84:	687b      	ldr	r3, [r7, #4]
 8000f86:	1c5a      	adds	r2, r3, #1
 8000f88:	607a      	str	r2, [r7, #4]
 8000f8a:	781b      	ldrb	r3, [r3, #0]
 8000f8c:	4618      	mov	r0, r3
 8000f8e:	f7ff ff9b 	bl	8000ec8 <lcd_send_data>
 8000f92:	687b      	ldr	r3, [r7, #4]
 8000f94:	781b      	ldrb	r3, [r3, #0]
 8000f96:	2b00      	cmp	r3, #0
 8000f98:	d1f4      	bne.n	8000f84 <lcd_send_string+0xa>
}
 8000f9a:	bf00      	nop
 8000f9c:	bf00      	nop
 8000f9e:	3708      	adds	r7, #8
 8000fa0:	46bd      	mov	sp, r7
 8000fa2:	bd80      	pop	{r7, pc}

08000fa4 <delay>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void delay(uint16_t us)
{
 8000fa4:	b480      	push	{r7}
 8000fa6:	b083      	sub	sp, #12
 8000fa8:	af00      	add	r7, sp, #0
 8000faa:	4603      	mov	r3, r0
 8000fac:	80fb      	strh	r3, [r7, #6]
	__HAL_TIM_SET_COUNTER(&htim1,0);
 8000fae:	4b08      	ldr	r3, [pc, #32]	; (8000fd0 <delay+0x2c>)
 8000fb0:	681b      	ldr	r3, [r3, #0]
 8000fb2:	2200      	movs	r2, #0
 8000fb4:	625a      	str	r2, [r3, #36]	; 0x24
	while(__HAL_TIM_GET_COUNTER(&htim1)<us);
 8000fb6:	bf00      	nop
 8000fb8:	4b05      	ldr	r3, [pc, #20]	; (8000fd0 <delay+0x2c>)
 8000fba:	681b      	ldr	r3, [r3, #0]
 8000fbc:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8000fbe:	88fb      	ldrh	r3, [r7, #6]
 8000fc0:	429a      	cmp	r2, r3
 8000fc2:	d3f9      	bcc.n	8000fb8 <delay+0x14>
}
 8000fc4:	bf00      	nop
 8000fc6:	bf00      	nop
 8000fc8:	370c      	adds	r7, #12
 8000fca:	46bd      	mov	sp, r7
 8000fcc:	bc80      	pop	{r7}
 8000fce:	4770      	bx	lr
 8000fd0:	20000270 	.word	0x20000270

08000fd4 <Display_Temp>:
/************************** Display value ***********************************/
void Display_Temp (float Temp)
{
 8000fd4:	b580      	push	{r7, lr}
 8000fd6:	b086      	sub	sp, #24
 8000fd8:	af00      	add	r7, sp, #0
 8000fda:	6078      	str	r0, [r7, #4]
	char str[16] = {0};
 8000fdc:	2300      	movs	r3, #0
 8000fde:	60bb      	str	r3, [r7, #8]
 8000fe0:	f107 030c 	add.w	r3, r7, #12
 8000fe4:	2200      	movs	r2, #0
 8000fe6:	601a      	str	r2, [r3, #0]
 8000fe8:	605a      	str	r2, [r3, #4]
 8000fea:	609a      	str	r2, [r3, #8]
    lcd_put_cur(0,0);
 8000fec:	2100      	movs	r1, #0
 8000fee:	2000      	movs	r0, #0
 8000ff0:	f7ff ffa4 	bl	8000f3c <lcd_put_cur>
    sprintf(str, "TEMP: %.2f ",Temp);
 8000ff4:	6878      	ldr	r0, [r7, #4]
 8000ff6:	f7ff fa17 	bl	8000428 <__aeabi_f2d>
 8000ffa:	4602      	mov	r2, r0
 8000ffc:	460b      	mov	r3, r1
 8000ffe:	f107 0008 	add.w	r0, r7, #8
 8001002:	4907      	ldr	r1, [pc, #28]	; (8001020 <Display_Temp+0x4c>)
 8001004:	f003 f954 	bl	80042b0 <siprintf>
    lcd_send_string(str);
 8001008:	f107 0308 	add.w	r3, r7, #8
 800100c:	4618      	mov	r0, r3
 800100e:	f7ff ffb4 	bl	8000f7a <lcd_send_string>
    lcd_send_data('C');
 8001012:	2043      	movs	r0, #67	; 0x43
 8001014:	f7ff ff58 	bl	8000ec8 <lcd_send_data>
}
 8001018:	bf00      	nop
 800101a:	3718      	adds	r7, #24
 800101c:	46bd      	mov	sp, r7
 800101e:	bd80      	pop	{r7, pc}
 8001020:	08007df0 	.word	0x08007df0

08001024 <Display_Hmd>:

void Display_Hmd (float Hmd)
{
 8001024:	b580      	push	{r7, lr}
 8001026:	b086      	sub	sp, #24
 8001028:	af00      	add	r7, sp, #0
 800102a:	6078      	str	r0, [r7, #4]
	char str[16] = {0};
 800102c:	2300      	movs	r3, #0
 800102e:	60bb      	str	r3, [r7, #8]
 8001030:	f107 030c 	add.w	r3, r7, #12
 8001034:	2200      	movs	r2, #0
 8001036:	601a      	str	r2, [r3, #0]
 8001038:	605a      	str	r2, [r3, #4]
 800103a:	609a      	str	r2, [r3, #8]
    lcd_put_cur(1,0);
 800103c:	2100      	movs	r1, #0
 800103e:	2001      	movs	r0, #1
 8001040:	f7ff ff7c 	bl	8000f3c <lcd_put_cur>
    sprintf(str, "HMD: %.2f ",Hmd);
 8001044:	6878      	ldr	r0, [r7, #4]
 8001046:	f7ff f9ef 	bl	8000428 <__aeabi_f2d>
 800104a:	4602      	mov	r2, r0
 800104c:	460b      	mov	r3, r1
 800104e:	f107 0008 	add.w	r0, r7, #8
 8001052:	4907      	ldr	r1, [pc, #28]	; (8001070 <Display_Hmd+0x4c>)
 8001054:	f003 f92c 	bl	80042b0 <siprintf>
    lcd_send_string(str);
 8001058:	f107 0308 	add.w	r3, r7, #8
 800105c:	4618      	mov	r0, r3
 800105e:	f7ff ff8c 	bl	8000f7a <lcd_send_string>
  	lcd_send_data('%');
 8001062:	2025      	movs	r0, #37	; 0x25
 8001064:	f7ff ff30 	bl	8000ec8 <lcd_send_data>
}
 8001068:	bf00      	nop
 800106a:	3718      	adds	r7, #24
 800106c:	46bd      	mov	sp, r7
 800106e:	bd80      	pop	{r7, pc}
 8001070:	08007dfc 	.word	0x08007dfc

08001074 <Set_Pin_Output>:
/************************** Set pin *********************************/



void Set_Pin_Output (GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8001074:	b580      	push	{r7, lr}
 8001076:	b086      	sub	sp, #24
 8001078:	af00      	add	r7, sp, #0
 800107a:	6078      	str	r0, [r7, #4]
 800107c:	460b      	mov	r3, r1
 800107e:	807b      	strh	r3, [r7, #2]
	GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001080:	f107 0308 	add.w	r3, r7, #8
 8001084:	2200      	movs	r2, #0
 8001086:	601a      	str	r2, [r3, #0]
 8001088:	605a      	str	r2, [r3, #4]
 800108a:	609a      	str	r2, [r3, #8]
 800108c:	60da      	str	r2, [r3, #12]
	GPIO_InitStruct.Pin = GPIO_Pin;
 800108e:	887b      	ldrh	r3, [r7, #2]
 8001090:	60bb      	str	r3, [r7, #8]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001092:	2301      	movs	r3, #1
 8001094:	60fb      	str	r3, [r7, #12]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001096:	2302      	movs	r3, #2
 8001098:	617b      	str	r3, [r7, #20]
	HAL_GPIO_Init(GPIOx, &GPIO_InitStruct);
 800109a:	f107 0308 	add.w	r3, r7, #8
 800109e:	4619      	mov	r1, r3
 80010a0:	6878      	ldr	r0, [r7, #4]
 80010a2:	f000 fda5 	bl	8001bf0 <HAL_GPIO_Init>
}
 80010a6:	bf00      	nop
 80010a8:	3718      	adds	r7, #24
 80010aa:	46bd      	mov	sp, r7
 80010ac:	bd80      	pop	{r7, pc}

080010ae <Set_Pin_Input>:

void Set_Pin_Input (GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 80010ae:	b580      	push	{r7, lr}
 80010b0:	b086      	sub	sp, #24
 80010b2:	af00      	add	r7, sp, #0
 80010b4:	6078      	str	r0, [r7, #4]
 80010b6:	460b      	mov	r3, r1
 80010b8:	807b      	strh	r3, [r7, #2]
	GPIO_InitTypeDef GPIO_InitStruct = {0};
 80010ba:	f107 0308 	add.w	r3, r7, #8
 80010be:	2200      	movs	r2, #0
 80010c0:	601a      	str	r2, [r3, #0]
 80010c2:	605a      	str	r2, [r3, #4]
 80010c4:	609a      	str	r2, [r3, #8]
 80010c6:	60da      	str	r2, [r3, #12]
	GPIO_InitStruct.Pin = GPIO_Pin;
 80010c8:	887b      	ldrh	r3, [r7, #2]
 80010ca:	60bb      	str	r3, [r7, #8]
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80010cc:	2300      	movs	r3, #0
 80010ce:	60fb      	str	r3, [r7, #12]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010d0:	2300      	movs	r3, #0
 80010d2:	613b      	str	r3, [r7, #16]
	HAL_GPIO_Init(GPIOx, &GPIO_InitStruct);
 80010d4:	f107 0308 	add.w	r3, r7, #8
 80010d8:	4619      	mov	r1, r3
 80010da:	6878      	ldr	r0, [r7, #4]
 80010dc:	f000 fd88 	bl	8001bf0 <HAL_GPIO_Init>
}
 80010e0:	bf00      	nop
 80010e2:	3718      	adds	r7, #24
 80010e4:	46bd      	mov	sp, r7
 80010e6:	bd80      	pop	{r7, pc}

080010e8 <DHT11_Start>:

#define DHT11_PORT GPIOA
#define DHT11_PIN GPIO_PIN_1

void DHT11_Start (void)
{
 80010e8:	b580      	push	{r7, lr}
 80010ea:	af00      	add	r7, sp, #0
	Set_Pin_Output (DHT11_PORT, DHT11_PIN);  // set the pin as output
 80010ec:	2102      	movs	r1, #2
 80010ee:	4811      	ldr	r0, [pc, #68]	; (8001134 <DHT11_Start+0x4c>)
 80010f0:	f7ff ffc0 	bl	8001074 <Set_Pin_Output>
	HAL_GPIO_WritePin(DHT11_PORT, DHT11_PIN, 1);// prepare to communicate
 80010f4:	2201      	movs	r2, #1
 80010f6:	2102      	movs	r1, #2
 80010f8:	480e      	ldr	r0, [pc, #56]	; (8001134 <DHT11_Start+0x4c>)
 80010fa:	f000 ff14 	bl	8001f26 <HAL_GPIO_WritePin>
	delay(1000);
 80010fe:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001102:	f7ff ff4f 	bl	8000fa4 <delay>
	HAL_GPIO_WritePin (DHT11_PORT, DHT11_PIN, 0);   // MCU pull down voltage
 8001106:	2200      	movs	r2, #0
 8001108:	2102      	movs	r1, #2
 800110a:	480a      	ldr	r0, [pc, #40]	; (8001134 <DHT11_Start+0x4c>)
 800110c:	f000 ff0b 	bl	8001f26 <HAL_GPIO_WritePin>
	delay (18000);   // wait for 18ms
 8001110:	f244 6050 	movw	r0, #18000	; 0x4650
 8001114:	f7ff ff46 	bl	8000fa4 <delay>
    HAL_GPIO_WritePin (DHT11_PORT, DHT11_PIN, 1);   // MCU pull up voltage
 8001118:	2201      	movs	r2, #1
 800111a:	2102      	movs	r1, #2
 800111c:	4805      	ldr	r0, [pc, #20]	; (8001134 <DHT11_Start+0x4c>)
 800111e:	f000 ff02 	bl	8001f26 <HAL_GPIO_WritePin>
    delay (20);   // wait for 20us
 8001122:	2014      	movs	r0, #20
 8001124:	f7ff ff3e 	bl	8000fa4 <delay>
	Set_Pin_Input(DHT11_PORT, DHT11_PIN);    // set as input
 8001128:	2102      	movs	r1, #2
 800112a:	4802      	ldr	r0, [pc, #8]	; (8001134 <DHT11_Start+0x4c>)
 800112c:	f7ff ffbf 	bl	80010ae <Set_Pin_Input>
}
 8001130:	bf00      	nop
 8001132:	bd80      	pop	{r7, pc}
 8001134:	40010800 	.word	0x40010800

08001138 <DHT11_Check_Response>:

uint8_t DHT11_Check_Response (void)
{
 8001138:	b580      	push	{r7, lr}
 800113a:	b082      	sub	sp, #8
 800113c:	af00      	add	r7, sp, #0
	uint8_t check = 0;
 800113e:	2300      	movs	r3, #0
 8001140:	71fb      	strb	r3, [r7, #7]
	delay (40);
 8001142:	2028      	movs	r0, #40	; 0x28
 8001144:	f7ff ff2e 	bl	8000fa4 <delay>
	if (!(HAL_GPIO_ReadPin (DHT11_PORT, DHT11_PIN))) // DHT response
 8001148:	2102      	movs	r1, #2
 800114a:	4811      	ldr	r0, [pc, #68]	; (8001190 <DHT11_Check_Response+0x58>)
 800114c:	f000 fed4 	bl	8001ef8 <HAL_GPIO_ReadPin>
 8001150:	4603      	mov	r3, r0
 8001152:	2b00      	cmp	r3, #0
 8001154:	d10e      	bne.n	8001174 <DHT11_Check_Response+0x3c>
	{
		delay (80);
 8001156:	2050      	movs	r0, #80	; 0x50
 8001158:	f7ff ff24 	bl	8000fa4 <delay>
		if ((HAL_GPIO_ReadPin (DHT11_PORT, DHT11_PIN))) check = 1;
 800115c:	2102      	movs	r1, #2
 800115e:	480c      	ldr	r0, [pc, #48]	; (8001190 <DHT11_Check_Response+0x58>)
 8001160:	f000 feca 	bl	8001ef8 <HAL_GPIO_ReadPin>
 8001164:	4603      	mov	r3, r0
 8001166:	2b00      	cmp	r3, #0
 8001168:	d002      	beq.n	8001170 <DHT11_Check_Response+0x38>
 800116a:	2301      	movs	r3, #1
 800116c:	71fb      	strb	r3, [r7, #7]
 800116e:	e001      	b.n	8001174 <DHT11_Check_Response+0x3c>
		else check = -1;
 8001170:	23ff      	movs	r3, #255	; 0xff
 8001172:	71fb      	strb	r3, [r7, #7]
	}
	while ((HAL_GPIO_ReadPin (DHT11_PORT, DHT11_PIN)));   // wait for the pin to go low
 8001174:	bf00      	nop
 8001176:	2102      	movs	r1, #2
 8001178:	4805      	ldr	r0, [pc, #20]	; (8001190 <DHT11_Check_Response+0x58>)
 800117a:	f000 febd 	bl	8001ef8 <HAL_GPIO_ReadPin>
 800117e:	4603      	mov	r3, r0
 8001180:	2b00      	cmp	r3, #0
 8001182:	d1f8      	bne.n	8001176 <DHT11_Check_Response+0x3e>

	return check;
 8001184:	79fb      	ldrb	r3, [r7, #7]
}
 8001186:	4618      	mov	r0, r3
 8001188:	3708      	adds	r7, #8
 800118a:	46bd      	mov	sp, r7
 800118c:	bd80      	pop	{r7, pc}
 800118e:	bf00      	nop
 8001190:	40010800 	.word	0x40010800

08001194 <DHT11_Read>:

uint8_t DHT11_Read (void)
{
 8001194:	b580      	push	{r7, lr}
 8001196:	b082      	sub	sp, #8
 8001198:	af00      	add	r7, sp, #0
	uint8_t i,j;
	for (j=0;j<8;j++)
 800119a:	2300      	movs	r3, #0
 800119c:	71bb      	strb	r3, [r7, #6]
 800119e:	e037      	b.n	8001210 <DHT11_Read+0x7c>
	{
		while (!(HAL_GPIO_ReadPin (DHT11_PORT, DHT11_PIN)));   // wait for the pin to go high
 80011a0:	bf00      	nop
 80011a2:	2102      	movs	r1, #2
 80011a4:	481e      	ldr	r0, [pc, #120]	; (8001220 <DHT11_Read+0x8c>)
 80011a6:	f000 fea7 	bl	8001ef8 <HAL_GPIO_ReadPin>
 80011aa:	4603      	mov	r3, r0
 80011ac:	2b00      	cmp	r3, #0
 80011ae:	d0f8      	beq.n	80011a2 <DHT11_Read+0xe>
		delay (40);   // wait for 40 us
 80011b0:	2028      	movs	r0, #40	; 0x28
 80011b2:	f7ff fef7 	bl	8000fa4 <delay>
		if (!(HAL_GPIO_ReadPin (DHT11_PORT, DHT11_PIN)))   // if the pin is low
 80011b6:	2102      	movs	r1, #2
 80011b8:	4819      	ldr	r0, [pc, #100]	; (8001220 <DHT11_Read+0x8c>)
 80011ba:	f000 fe9d 	bl	8001ef8 <HAL_GPIO_ReadPin>
 80011be:	4603      	mov	r3, r0
 80011c0:	2b00      	cmp	r3, #0
 80011c2:	d10e      	bne.n	80011e2 <DHT11_Read+0x4e>
		{
			i &= ~(1<<(7-j));   // write 0
 80011c4:	79bb      	ldrb	r3, [r7, #6]
 80011c6:	f1c3 0307 	rsb	r3, r3, #7
 80011ca:	2201      	movs	r2, #1
 80011cc:	fa02 f303 	lsl.w	r3, r2, r3
 80011d0:	b25b      	sxtb	r3, r3
 80011d2:	43db      	mvns	r3, r3
 80011d4:	b25a      	sxtb	r2, r3
 80011d6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80011da:	4013      	ands	r3, r2
 80011dc:	b25b      	sxtb	r3, r3
 80011de:	71fb      	strb	r3, [r7, #7]
 80011e0:	e00b      	b.n	80011fa <DHT11_Read+0x66>
		}
		else i |= (1<<(7-j));  // write 1
 80011e2:	79bb      	ldrb	r3, [r7, #6]
 80011e4:	f1c3 0307 	rsb	r3, r3, #7
 80011e8:	2201      	movs	r2, #1
 80011ea:	fa02 f303 	lsl.w	r3, r2, r3
 80011ee:	b25a      	sxtb	r2, r3
 80011f0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80011f4:	4313      	orrs	r3, r2
 80011f6:	b25b      	sxtb	r3, r3
 80011f8:	71fb      	strb	r3, [r7, #7]
		while ((HAL_GPIO_ReadPin (DHT11_PORT, DHT11_PIN)));  // wait for the pin to go low
 80011fa:	bf00      	nop
 80011fc:	2102      	movs	r1, #2
 80011fe:	4808      	ldr	r0, [pc, #32]	; (8001220 <DHT11_Read+0x8c>)
 8001200:	f000 fe7a 	bl	8001ef8 <HAL_GPIO_ReadPin>
 8001204:	4603      	mov	r3, r0
 8001206:	2b00      	cmp	r3, #0
 8001208:	d1f8      	bne.n	80011fc <DHT11_Read+0x68>
	for (j=0;j<8;j++)
 800120a:	79bb      	ldrb	r3, [r7, #6]
 800120c:	3301      	adds	r3, #1
 800120e:	71bb      	strb	r3, [r7, #6]
 8001210:	79bb      	ldrb	r3, [r7, #6]
 8001212:	2b07      	cmp	r3, #7
 8001214:	d9c4      	bls.n	80011a0 <DHT11_Read+0xc>
	}
	return i;
 8001216:	79fb      	ldrb	r3, [r7, #7]
}
 8001218:	4618      	mov	r0, r3
 800121a:	3708      	adds	r7, #8
 800121c:	46bd      	mov	sp, r7
 800121e:	bd80      	pop	{r7, pc}
 8001220:	40010800 	.word	0x40010800

08001224 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001224:	b580      	push	{r7, lr}
 8001226:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001228:	f000 fb78 	bl	800191c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800122c:	f000 f8ae 	bl	800138c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001230:	f000 f970 	bl	8001514 <MX_GPIO_Init>
  MX_I2C1_Init();
 8001234:	f000 f8f0 	bl	8001418 <MX_I2C1_Init>
  MX_TIM1_Init();
 8001238:	f000 f91c 	bl	8001474 <MX_TIM1_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_Base_Start(&htim1);
 800123c:	4844      	ldr	r0, [pc, #272]	; (8001350 <main+0x12c>)
 800123e:	f001 ff2b 	bl	8003098 <HAL_TIM_Base_Start>

  lcd_init();
 8001242:	f7ff fdd7 	bl	8000df4 <lcd_init>
  lcd_send_string("Waiting...");
 8001246:	4843      	ldr	r0, [pc, #268]	; (8001354 <main+0x130>)
 8001248:	f7ff fe97 	bl	8000f7a <lcd_send_string>
  HAL_Delay(2000);
 800124c:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8001250:	f000 fbc6 	bl	80019e0 <HAL_Delay>
  lcd_clear();
 8001254:	f7ff fe68 	bl	8000f28 <lcd_clear>
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */


	  DHT11_Start();
 8001258:	f7ff ff46 	bl	80010e8 <DHT11_Start>
	  check = DHT11_Check_Response();
 800125c:	f7ff ff6c 	bl	8001138 <DHT11_Check_Response>
 8001260:	4603      	mov	r3, r0
 8001262:	461a      	mov	r2, r3
 8001264:	4b3c      	ldr	r3, [pc, #240]	; (8001358 <main+0x134>)
 8001266:	701a      	strb	r2, [r3, #0]
	  if (check == 1)
 8001268:	4b3b      	ldr	r3, [pc, #236]	; (8001358 <main+0x134>)
 800126a:	781b      	ldrb	r3, [r3, #0]
 800126c:	2b01      	cmp	r3, #1
 800126e:	d15b      	bne.n	8001328 <main+0x104>
	  {
		  Hmd_byte1 = DHT11_Read();
 8001270:	f7ff ff90 	bl	8001194 <DHT11_Read>
 8001274:	4603      	mov	r3, r0
 8001276:	461a      	mov	r2, r3
 8001278:	4b38      	ldr	r3, [pc, #224]	; (800135c <main+0x138>)
 800127a:	701a      	strb	r2, [r3, #0]
		  Hmd_byte2 = DHT11_Read();
 800127c:	f7ff ff8a 	bl	8001194 <DHT11_Read>
 8001280:	4603      	mov	r3, r0
 8001282:	461a      	mov	r2, r3
 8001284:	4b36      	ldr	r3, [pc, #216]	; (8001360 <main+0x13c>)
 8001286:	701a      	strb	r2, [r3, #0]
		  Temp_byte1 = DHT11_Read();
 8001288:	f7ff ff84 	bl	8001194 <DHT11_Read>
 800128c:	4603      	mov	r3, r0
 800128e:	461a      	mov	r2, r3
 8001290:	4b34      	ldr	r3, [pc, #208]	; (8001364 <main+0x140>)
 8001292:	701a      	strb	r2, [r3, #0]
		  Temp_byte2 = DHT11_Read();
 8001294:	f7ff ff7e 	bl	8001194 <DHT11_Read>
 8001298:	4603      	mov	r3, r0
 800129a:	461a      	mov	r2, r3
 800129c:	4b32      	ldr	r3, [pc, #200]	; (8001368 <main+0x144>)
 800129e:	701a      	strb	r2, [r3, #0]
		  SUM = DHT11_Read();
 80012a0:	f7ff ff78 	bl	8001194 <DHT11_Read>
 80012a4:	4603      	mov	r3, r0
 80012a6:	461a      	mov	r2, r3
 80012a8:	4b30      	ldr	r3, [pc, #192]	; (800136c <main+0x148>)
 80012aa:	701a      	strb	r2, [r3, #0]
		  TEMP = Temp_byte1;
 80012ac:	4b2d      	ldr	r3, [pc, #180]	; (8001364 <main+0x140>)
 80012ae:	781b      	ldrb	r3, [r3, #0]
 80012b0:	b29a      	uxth	r2, r3
 80012b2:	4b2f      	ldr	r3, [pc, #188]	; (8001370 <main+0x14c>)
 80012b4:	801a      	strh	r2, [r3, #0]
		  HMD = Hmd_byte1;
 80012b6:	4b29      	ldr	r3, [pc, #164]	; (800135c <main+0x138>)
 80012b8:	781b      	ldrb	r3, [r3, #0]
 80012ba:	b29a      	uxth	r2, r3
 80012bc:	4b2d      	ldr	r3, [pc, #180]	; (8001374 <main+0x150>)
 80012be:	801a      	strh	r2, [r3, #0]
		  if(SUM != Hmd_byte1 + Hmd_byte2 + Temp_byte1 + Temp_byte2){
 80012c0:	4b2a      	ldr	r3, [pc, #168]	; (800136c <main+0x148>)
 80012c2:	781b      	ldrb	r3, [r3, #0]
 80012c4:	4619      	mov	r1, r3
 80012c6:	4b25      	ldr	r3, [pc, #148]	; (800135c <main+0x138>)
 80012c8:	781b      	ldrb	r3, [r3, #0]
 80012ca:	461a      	mov	r2, r3
 80012cc:	4b24      	ldr	r3, [pc, #144]	; (8001360 <main+0x13c>)
 80012ce:	781b      	ldrb	r3, [r3, #0]
 80012d0:	4413      	add	r3, r2
 80012d2:	4a24      	ldr	r2, [pc, #144]	; (8001364 <main+0x140>)
 80012d4:	7812      	ldrb	r2, [r2, #0]
 80012d6:	4413      	add	r3, r2
 80012d8:	4a23      	ldr	r2, [pc, #140]	; (8001368 <main+0x144>)
 80012da:	7812      	ldrb	r2, [r2, #0]
 80012dc:	4413      	add	r3, r2
 80012de:	4299      	cmp	r1, r3
 80012e0:	d007      	beq.n	80012f2 <main+0xce>
			  lcd_put_cur(0,0);
 80012e2:	2100      	movs	r1, #0
 80012e4:	2000      	movs	r0, #0
 80012e6:	f7ff fe29 	bl	8000f3c <lcd_put_cur>
			  lcd_send_string("DHT11 Wrong");
 80012ea:	4823      	ldr	r0, [pc, #140]	; (8001378 <main+0x154>)
 80012ec:	f7ff fe45 	bl	8000f7a <lcd_send_string>
 80012f0:	e028      	b.n	8001344 <main+0x120>
		  }
		  else {
		  Temperature=(float) TEMP;
 80012f2:	4b1f      	ldr	r3, [pc, #124]	; (8001370 <main+0x14c>)
 80012f4:	881b      	ldrh	r3, [r3, #0]
 80012f6:	4618      	mov	r0, r3
 80012f8:	f7ff fcec 	bl	8000cd4 <__aeabi_ui2f>
 80012fc:	4603      	mov	r3, r0
 80012fe:	4a1f      	ldr	r2, [pc, #124]	; (800137c <main+0x158>)
 8001300:	6013      	str	r3, [r2, #0]
		  Humidity=(float) HMD;
 8001302:	4b1c      	ldr	r3, [pc, #112]	; (8001374 <main+0x150>)
 8001304:	881b      	ldrh	r3, [r3, #0]
 8001306:	4618      	mov	r0, r3
 8001308:	f7ff fce4 	bl	8000cd4 <__aeabi_ui2f>
 800130c:	4603      	mov	r3, r0
 800130e:	4a1c      	ldr	r2, [pc, #112]	; (8001380 <main+0x15c>)
 8001310:	6013      	str	r3, [r2, #0]
		  Display_Temp(Temperature);
 8001312:	4b1a      	ldr	r3, [pc, #104]	; (800137c <main+0x158>)
 8001314:	681b      	ldr	r3, [r3, #0]
 8001316:	4618      	mov	r0, r3
 8001318:	f7ff fe5c 	bl	8000fd4 <Display_Temp>
		  Display_Hmd(Humidity);
 800131c:	4b18      	ldr	r3, [pc, #96]	; (8001380 <main+0x15c>)
 800131e:	681b      	ldr	r3, [r3, #0]
 8001320:	4618      	mov	r0, r3
 8001322:	f7ff fe7f 	bl	8001024 <Display_Hmd>
 8001326:	e00d      	b.n	8001344 <main+0x120>
		  }
	  }
	  else {
		  lcd_put_cur(0,0);
 8001328:	2100      	movs	r1, #0
 800132a:	2000      	movs	r0, #0
 800132c:	f7ff fe06 	bl	8000f3c <lcd_put_cur>
		  lcd_send_string("Error DHT11");
 8001330:	4814      	ldr	r0, [pc, #80]	; (8001384 <main+0x160>)
 8001332:	f7ff fe22 	bl	8000f7a <lcd_send_string>
		  lcd_put_cur(1,0);
 8001336:	2100      	movs	r1, #0
 8001338:	2001      	movs	r0, #1
 800133a:	f7ff fdff 	bl	8000f3c <lcd_put_cur>
		  lcd_send_string("No response");
 800133e:	4812      	ldr	r0, [pc, #72]	; (8001388 <main+0x164>)
 8001340:	f7ff fe1b 	bl	8000f7a <lcd_send_string>
	  }

	  HAL_Delay(1000);
 8001344:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001348:	f000 fb4a 	bl	80019e0 <HAL_Delay>
	  DHT11_Start();
 800134c:	e784      	b.n	8001258 <main+0x34>
 800134e:	bf00      	nop
 8001350:	20000270 	.word	0x20000270
 8001354:	08007e08 	.word	0x08007e08
 8001358:	2000026a 	.word	0x2000026a
 800135c:	20000210 	.word	0x20000210
 8001360:	20000211 	.word	0x20000211
 8001364:	2000026b 	.word	0x2000026b
 8001368:	200002b9 	.word	0x200002b9
 800136c:	200002b8 	.word	0x200002b8
 8001370:	20000268 	.word	0x20000268
 8001374:	2000026c 	.word	0x2000026c
 8001378:	08007e14 	.word	0x08007e14
 800137c:	200001fc 	.word	0x200001fc
 8001380:	20000200 	.word	0x20000200
 8001384:	08007e20 	.word	0x08007e20
 8001388:	08007e2c 	.word	0x08007e2c

0800138c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800138c:	b580      	push	{r7, lr}
 800138e:	b090      	sub	sp, #64	; 0x40
 8001390:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001392:	f107 0318 	add.w	r3, r7, #24
 8001396:	2228      	movs	r2, #40	; 0x28
 8001398:	2100      	movs	r1, #0
 800139a:	4618      	mov	r0, r3
 800139c:	f002 f90a 	bl	80035b4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80013a0:	1d3b      	adds	r3, r7, #4
 80013a2:	2200      	movs	r2, #0
 80013a4:	601a      	str	r2, [r3, #0]
 80013a6:	605a      	str	r2, [r3, #4]
 80013a8:	609a      	str	r2, [r3, #8]
 80013aa:	60da      	str	r2, [r3, #12]
 80013ac:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80013ae:	2301      	movs	r3, #1
 80013b0:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80013b2:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80013b6:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 80013b8:	2300      	movs	r3, #0
 80013ba:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80013bc:	2301      	movs	r3, #1
 80013be:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80013c0:	2302      	movs	r3, #2
 80013c2:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80013c4:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80013c8:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 80013ca:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 80013ce:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80013d0:	f107 0318 	add.w	r3, r7, #24
 80013d4:	4618      	mov	r0, r3
 80013d6:	f001 fa09 	bl	80027ec <HAL_RCC_OscConfig>
 80013da:	4603      	mov	r3, r0
 80013dc:	2b00      	cmp	r3, #0
 80013de:	d001      	beq.n	80013e4 <SystemClock_Config+0x58>
  {
    Error_Handler();
 80013e0:	f000 f8e2 	bl	80015a8 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80013e4:	230f      	movs	r3, #15
 80013e6:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80013e8:	2302      	movs	r3, #2
 80013ea:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80013ec:	2300      	movs	r3, #0
 80013ee:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80013f0:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80013f4:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80013f6:	2300      	movs	r3, #0
 80013f8:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80013fa:	1d3b      	adds	r3, r7, #4
 80013fc:	2102      	movs	r1, #2
 80013fe:	4618      	mov	r0, r3
 8001400:	f001 fc74 	bl	8002cec <HAL_RCC_ClockConfig>
 8001404:	4603      	mov	r3, r0
 8001406:	2b00      	cmp	r3, #0
 8001408:	d001      	beq.n	800140e <SystemClock_Config+0x82>
  {
    Error_Handler();
 800140a:	f000 f8cd 	bl	80015a8 <Error_Handler>
  }
}
 800140e:	bf00      	nop
 8001410:	3740      	adds	r7, #64	; 0x40
 8001412:	46bd      	mov	sp, r7
 8001414:	bd80      	pop	{r7, pc}
	...

08001418 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8001418:	b580      	push	{r7, lr}
 800141a:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 800141c:	4b12      	ldr	r3, [pc, #72]	; (8001468 <MX_I2C1_Init+0x50>)
 800141e:	4a13      	ldr	r2, [pc, #76]	; (800146c <MX_I2C1_Init+0x54>)
 8001420:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 8001422:	4b11      	ldr	r3, [pc, #68]	; (8001468 <MX_I2C1_Init+0x50>)
 8001424:	4a12      	ldr	r2, [pc, #72]	; (8001470 <MX_I2C1_Init+0x58>)
 8001426:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8001428:	4b0f      	ldr	r3, [pc, #60]	; (8001468 <MX_I2C1_Init+0x50>)
 800142a:	2200      	movs	r2, #0
 800142c:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 800142e:	4b0e      	ldr	r3, [pc, #56]	; (8001468 <MX_I2C1_Init+0x50>)
 8001430:	2200      	movs	r2, #0
 8001432:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001434:	4b0c      	ldr	r3, [pc, #48]	; (8001468 <MX_I2C1_Init+0x50>)
 8001436:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800143a:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 800143c:	4b0a      	ldr	r3, [pc, #40]	; (8001468 <MX_I2C1_Init+0x50>)
 800143e:	2200      	movs	r2, #0
 8001440:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8001442:	4b09      	ldr	r3, [pc, #36]	; (8001468 <MX_I2C1_Init+0x50>)
 8001444:	2200      	movs	r2, #0
 8001446:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001448:	4b07      	ldr	r3, [pc, #28]	; (8001468 <MX_I2C1_Init+0x50>)
 800144a:	2200      	movs	r2, #0
 800144c:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800144e:	4b06      	ldr	r3, [pc, #24]	; (8001468 <MX_I2C1_Init+0x50>)
 8001450:	2200      	movs	r2, #0
 8001452:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8001454:	4804      	ldr	r0, [pc, #16]	; (8001468 <MX_I2C1_Init+0x50>)
 8001456:	f000 fd7f 	bl	8001f58 <HAL_I2C_Init>
 800145a:	4603      	mov	r3, r0
 800145c:	2b00      	cmp	r3, #0
 800145e:	d001      	beq.n	8001464 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8001460:	f000 f8a2 	bl	80015a8 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8001464:	bf00      	nop
 8001466:	bd80      	pop	{r7, pc}
 8001468:	20000214 	.word	0x20000214
 800146c:	40005400 	.word	0x40005400
 8001470:	000186a0 	.word	0x000186a0

08001474 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8001474:	b580      	push	{r7, lr}
 8001476:	b086      	sub	sp, #24
 8001478:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800147a:	f107 0308 	add.w	r3, r7, #8
 800147e:	2200      	movs	r2, #0
 8001480:	601a      	str	r2, [r3, #0]
 8001482:	605a      	str	r2, [r3, #4]
 8001484:	609a      	str	r2, [r3, #8]
 8001486:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001488:	463b      	mov	r3, r7
 800148a:	2200      	movs	r2, #0
 800148c:	601a      	str	r2, [r3, #0]
 800148e:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8001490:	4b1e      	ldr	r3, [pc, #120]	; (800150c <MX_TIM1_Init+0x98>)
 8001492:	4a1f      	ldr	r2, [pc, #124]	; (8001510 <MX_TIM1_Init+0x9c>)
 8001494:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 72-1;
 8001496:	4b1d      	ldr	r3, [pc, #116]	; (800150c <MX_TIM1_Init+0x98>)
 8001498:	2247      	movs	r2, #71	; 0x47
 800149a:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 800149c:	4b1b      	ldr	r3, [pc, #108]	; (800150c <MX_TIM1_Init+0x98>)
 800149e:	2200      	movs	r2, #0
 80014a0:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 0xffff-1;
 80014a2:	4b1a      	ldr	r3, [pc, #104]	; (800150c <MX_TIM1_Init+0x98>)
 80014a4:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 80014a8:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80014aa:	4b18      	ldr	r3, [pc, #96]	; (800150c <MX_TIM1_Init+0x98>)
 80014ac:	2200      	movs	r2, #0
 80014ae:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 80014b0:	4b16      	ldr	r3, [pc, #88]	; (800150c <MX_TIM1_Init+0x98>)
 80014b2:	2200      	movs	r2, #0
 80014b4:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80014b6:	4b15      	ldr	r3, [pc, #84]	; (800150c <MX_TIM1_Init+0x98>)
 80014b8:	2200      	movs	r2, #0
 80014ba:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 80014bc:	4813      	ldr	r0, [pc, #76]	; (800150c <MX_TIM1_Init+0x98>)
 80014be:	f001 fd9b 	bl	8002ff8 <HAL_TIM_Base_Init>
 80014c2:	4603      	mov	r3, r0
 80014c4:	2b00      	cmp	r3, #0
 80014c6:	d001      	beq.n	80014cc <MX_TIM1_Init+0x58>
  {
    Error_Handler();
 80014c8:	f000 f86e 	bl	80015a8 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80014cc:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80014d0:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 80014d2:	f107 0308 	add.w	r3, r7, #8
 80014d6:	4619      	mov	r1, r3
 80014d8:	480c      	ldr	r0, [pc, #48]	; (800150c <MX_TIM1_Init+0x98>)
 80014da:	f001 fe27 	bl	800312c <HAL_TIM_ConfigClockSource>
 80014de:	4603      	mov	r3, r0
 80014e0:	2b00      	cmp	r3, #0
 80014e2:	d001      	beq.n	80014e8 <MX_TIM1_Init+0x74>
  {
    Error_Handler();
 80014e4:	f000 f860 	bl	80015a8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80014e8:	2300      	movs	r3, #0
 80014ea:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80014ec:	2300      	movs	r3, #0
 80014ee:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 80014f0:	463b      	mov	r3, r7
 80014f2:	4619      	mov	r1, r3
 80014f4:	4805      	ldr	r0, [pc, #20]	; (800150c <MX_TIM1_Init+0x98>)
 80014f6:	f001 ffd5 	bl	80034a4 <HAL_TIMEx_MasterConfigSynchronization>
 80014fa:	4603      	mov	r3, r0
 80014fc:	2b00      	cmp	r3, #0
 80014fe:	d001      	beq.n	8001504 <MX_TIM1_Init+0x90>
  {
    Error_Handler();
 8001500:	f000 f852 	bl	80015a8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 8001504:	bf00      	nop
 8001506:	3718      	adds	r7, #24
 8001508:	46bd      	mov	sp, r7
 800150a:	bd80      	pop	{r7, pc}
 800150c:	20000270 	.word	0x20000270
 8001510:	40012c00 	.word	0x40012c00

08001514 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001514:	b580      	push	{r7, lr}
 8001516:	b088      	sub	sp, #32
 8001518:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800151a:	f107 0310 	add.w	r3, r7, #16
 800151e:	2200      	movs	r2, #0
 8001520:	601a      	str	r2, [r3, #0]
 8001522:	605a      	str	r2, [r3, #4]
 8001524:	609a      	str	r2, [r3, #8]
 8001526:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001528:	4b1d      	ldr	r3, [pc, #116]	; (80015a0 <MX_GPIO_Init+0x8c>)
 800152a:	699b      	ldr	r3, [r3, #24]
 800152c:	4a1c      	ldr	r2, [pc, #112]	; (80015a0 <MX_GPIO_Init+0x8c>)
 800152e:	f043 0320 	orr.w	r3, r3, #32
 8001532:	6193      	str	r3, [r2, #24]
 8001534:	4b1a      	ldr	r3, [pc, #104]	; (80015a0 <MX_GPIO_Init+0x8c>)
 8001536:	699b      	ldr	r3, [r3, #24]
 8001538:	f003 0320 	and.w	r3, r3, #32
 800153c:	60fb      	str	r3, [r7, #12]
 800153e:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001540:	4b17      	ldr	r3, [pc, #92]	; (80015a0 <MX_GPIO_Init+0x8c>)
 8001542:	699b      	ldr	r3, [r3, #24]
 8001544:	4a16      	ldr	r2, [pc, #88]	; (80015a0 <MX_GPIO_Init+0x8c>)
 8001546:	f043 0304 	orr.w	r3, r3, #4
 800154a:	6193      	str	r3, [r2, #24]
 800154c:	4b14      	ldr	r3, [pc, #80]	; (80015a0 <MX_GPIO_Init+0x8c>)
 800154e:	699b      	ldr	r3, [r3, #24]
 8001550:	f003 0304 	and.w	r3, r3, #4
 8001554:	60bb      	str	r3, [r7, #8]
 8001556:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001558:	4b11      	ldr	r3, [pc, #68]	; (80015a0 <MX_GPIO_Init+0x8c>)
 800155a:	699b      	ldr	r3, [r3, #24]
 800155c:	4a10      	ldr	r2, [pc, #64]	; (80015a0 <MX_GPIO_Init+0x8c>)
 800155e:	f043 0308 	orr.w	r3, r3, #8
 8001562:	6193      	str	r3, [r2, #24]
 8001564:	4b0e      	ldr	r3, [pc, #56]	; (80015a0 <MX_GPIO_Init+0x8c>)
 8001566:	699b      	ldr	r3, [r3, #24]
 8001568:	f003 0308 	and.w	r3, r3, #8
 800156c:	607b      	str	r3, [r7, #4]
 800156e:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_1, GPIO_PIN_RESET);
 8001570:	2200      	movs	r2, #0
 8001572:	2102      	movs	r1, #2
 8001574:	480b      	ldr	r0, [pc, #44]	; (80015a4 <MX_GPIO_Init+0x90>)
 8001576:	f000 fcd6 	bl	8001f26 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PA1 */
  GPIO_InitStruct.Pin = GPIO_PIN_1;
 800157a:	2302      	movs	r3, #2
 800157c:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800157e:	2301      	movs	r3, #1
 8001580:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001582:	2300      	movs	r3, #0
 8001584:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001586:	2302      	movs	r3, #2
 8001588:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800158a:	f107 0310 	add.w	r3, r7, #16
 800158e:	4619      	mov	r1, r3
 8001590:	4804      	ldr	r0, [pc, #16]	; (80015a4 <MX_GPIO_Init+0x90>)
 8001592:	f000 fb2d 	bl	8001bf0 <HAL_GPIO_Init>

}
 8001596:	bf00      	nop
 8001598:	3720      	adds	r7, #32
 800159a:	46bd      	mov	sp, r7
 800159c:	bd80      	pop	{r7, pc}
 800159e:	bf00      	nop
 80015a0:	40021000 	.word	0x40021000
 80015a4:	40010800 	.word	0x40010800

080015a8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80015a8:	b480      	push	{r7}
 80015aa:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80015ac:	b672      	cpsid	i
}
 80015ae:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80015b0:	e7fe      	b.n	80015b0 <Error_Handler+0x8>
	...

080015b4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80015b4:	b480      	push	{r7}
 80015b6:	b085      	sub	sp, #20
 80015b8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 80015ba:	4b15      	ldr	r3, [pc, #84]	; (8001610 <HAL_MspInit+0x5c>)
 80015bc:	699b      	ldr	r3, [r3, #24]
 80015be:	4a14      	ldr	r2, [pc, #80]	; (8001610 <HAL_MspInit+0x5c>)
 80015c0:	f043 0301 	orr.w	r3, r3, #1
 80015c4:	6193      	str	r3, [r2, #24]
 80015c6:	4b12      	ldr	r3, [pc, #72]	; (8001610 <HAL_MspInit+0x5c>)
 80015c8:	699b      	ldr	r3, [r3, #24]
 80015ca:	f003 0301 	and.w	r3, r3, #1
 80015ce:	60bb      	str	r3, [r7, #8]
 80015d0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 80015d2:	4b0f      	ldr	r3, [pc, #60]	; (8001610 <HAL_MspInit+0x5c>)
 80015d4:	69db      	ldr	r3, [r3, #28]
 80015d6:	4a0e      	ldr	r2, [pc, #56]	; (8001610 <HAL_MspInit+0x5c>)
 80015d8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80015dc:	61d3      	str	r3, [r2, #28]
 80015de:	4b0c      	ldr	r3, [pc, #48]	; (8001610 <HAL_MspInit+0x5c>)
 80015e0:	69db      	ldr	r3, [r3, #28]
 80015e2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80015e6:	607b      	str	r3, [r7, #4]
 80015e8:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 80015ea:	4b0a      	ldr	r3, [pc, #40]	; (8001614 <HAL_MspInit+0x60>)
 80015ec:	685b      	ldr	r3, [r3, #4]
 80015ee:	60fb      	str	r3, [r7, #12]
 80015f0:	68fb      	ldr	r3, [r7, #12]
 80015f2:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 80015f6:	60fb      	str	r3, [r7, #12]
 80015f8:	68fb      	ldr	r3, [r7, #12]
 80015fa:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80015fe:	60fb      	str	r3, [r7, #12]
 8001600:	4a04      	ldr	r2, [pc, #16]	; (8001614 <HAL_MspInit+0x60>)
 8001602:	68fb      	ldr	r3, [r7, #12]
 8001604:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001606:	bf00      	nop
 8001608:	3714      	adds	r7, #20
 800160a:	46bd      	mov	sp, r7
 800160c:	bc80      	pop	{r7}
 800160e:	4770      	bx	lr
 8001610:	40021000 	.word	0x40021000
 8001614:	40010000 	.word	0x40010000

08001618 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001618:	b580      	push	{r7, lr}
 800161a:	b08a      	sub	sp, #40	; 0x28
 800161c:	af00      	add	r7, sp, #0
 800161e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001620:	f107 0314 	add.w	r3, r7, #20
 8001624:	2200      	movs	r2, #0
 8001626:	601a      	str	r2, [r3, #0]
 8001628:	605a      	str	r2, [r3, #4]
 800162a:	609a      	str	r2, [r3, #8]
 800162c:	60da      	str	r2, [r3, #12]
  if(hi2c->Instance==I2C1)
 800162e:	687b      	ldr	r3, [r7, #4]
 8001630:	681b      	ldr	r3, [r3, #0]
 8001632:	4a1d      	ldr	r2, [pc, #116]	; (80016a8 <HAL_I2C_MspInit+0x90>)
 8001634:	4293      	cmp	r3, r2
 8001636:	d132      	bne.n	800169e <HAL_I2C_MspInit+0x86>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001638:	4b1c      	ldr	r3, [pc, #112]	; (80016ac <HAL_I2C_MspInit+0x94>)
 800163a:	699b      	ldr	r3, [r3, #24]
 800163c:	4a1b      	ldr	r2, [pc, #108]	; (80016ac <HAL_I2C_MspInit+0x94>)
 800163e:	f043 0308 	orr.w	r3, r3, #8
 8001642:	6193      	str	r3, [r2, #24]
 8001644:	4b19      	ldr	r3, [pc, #100]	; (80016ac <HAL_I2C_MspInit+0x94>)
 8001646:	699b      	ldr	r3, [r3, #24]
 8001648:	f003 0308 	and.w	r3, r3, #8
 800164c:	613b      	str	r3, [r7, #16]
 800164e:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8001650:	f44f 7340 	mov.w	r3, #768	; 0x300
 8001654:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001656:	2312      	movs	r3, #18
 8001658:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800165a:	2303      	movs	r3, #3
 800165c:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800165e:	f107 0314 	add.w	r3, r7, #20
 8001662:	4619      	mov	r1, r3
 8001664:	4812      	ldr	r0, [pc, #72]	; (80016b0 <HAL_I2C_MspInit+0x98>)
 8001666:	f000 fac3 	bl	8001bf0 <HAL_GPIO_Init>

    __HAL_AFIO_REMAP_I2C1_ENABLE();
 800166a:	4b12      	ldr	r3, [pc, #72]	; (80016b4 <HAL_I2C_MspInit+0x9c>)
 800166c:	685b      	ldr	r3, [r3, #4]
 800166e:	627b      	str	r3, [r7, #36]	; 0x24
 8001670:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001672:	f043 63e0 	orr.w	r3, r3, #117440512	; 0x7000000
 8001676:	627b      	str	r3, [r7, #36]	; 0x24
 8001678:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800167a:	f043 0302 	orr.w	r3, r3, #2
 800167e:	627b      	str	r3, [r7, #36]	; 0x24
 8001680:	4a0c      	ldr	r2, [pc, #48]	; (80016b4 <HAL_I2C_MspInit+0x9c>)
 8001682:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001684:	6053      	str	r3, [r2, #4]

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001686:	4b09      	ldr	r3, [pc, #36]	; (80016ac <HAL_I2C_MspInit+0x94>)
 8001688:	69db      	ldr	r3, [r3, #28]
 800168a:	4a08      	ldr	r2, [pc, #32]	; (80016ac <HAL_I2C_MspInit+0x94>)
 800168c:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001690:	61d3      	str	r3, [r2, #28]
 8001692:	4b06      	ldr	r3, [pc, #24]	; (80016ac <HAL_I2C_MspInit+0x94>)
 8001694:	69db      	ldr	r3, [r3, #28]
 8001696:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800169a:	60fb      	str	r3, [r7, #12]
 800169c:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 800169e:	bf00      	nop
 80016a0:	3728      	adds	r7, #40	; 0x28
 80016a2:	46bd      	mov	sp, r7
 80016a4:	bd80      	pop	{r7, pc}
 80016a6:	bf00      	nop
 80016a8:	40005400 	.word	0x40005400
 80016ac:	40021000 	.word	0x40021000
 80016b0:	40010c00 	.word	0x40010c00
 80016b4:	40010000 	.word	0x40010000

080016b8 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80016b8:	b480      	push	{r7}
 80016ba:	b085      	sub	sp, #20
 80016bc:	af00      	add	r7, sp, #0
 80016be:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 80016c0:	687b      	ldr	r3, [r7, #4]
 80016c2:	681b      	ldr	r3, [r3, #0]
 80016c4:	4a09      	ldr	r2, [pc, #36]	; (80016ec <HAL_TIM_Base_MspInit+0x34>)
 80016c6:	4293      	cmp	r3, r2
 80016c8:	d10b      	bne.n	80016e2 <HAL_TIM_Base_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 80016ca:	4b09      	ldr	r3, [pc, #36]	; (80016f0 <HAL_TIM_Base_MspInit+0x38>)
 80016cc:	699b      	ldr	r3, [r3, #24]
 80016ce:	4a08      	ldr	r2, [pc, #32]	; (80016f0 <HAL_TIM_Base_MspInit+0x38>)
 80016d0:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80016d4:	6193      	str	r3, [r2, #24]
 80016d6:	4b06      	ldr	r3, [pc, #24]	; (80016f0 <HAL_TIM_Base_MspInit+0x38>)
 80016d8:	699b      	ldr	r3, [r3, #24]
 80016da:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80016de:	60fb      	str	r3, [r7, #12]
 80016e0:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }

}
 80016e2:	bf00      	nop
 80016e4:	3714      	adds	r7, #20
 80016e6:	46bd      	mov	sp, r7
 80016e8:	bc80      	pop	{r7}
 80016ea:	4770      	bx	lr
 80016ec:	40012c00 	.word	0x40012c00
 80016f0:	40021000 	.word	0x40021000

080016f4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80016f4:	b480      	push	{r7}
 80016f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80016f8:	e7fe      	b.n	80016f8 <NMI_Handler+0x4>

080016fa <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80016fa:	b480      	push	{r7}
 80016fc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80016fe:	e7fe      	b.n	80016fe <HardFault_Handler+0x4>

08001700 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001700:	b480      	push	{r7}
 8001702:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001704:	e7fe      	b.n	8001704 <MemManage_Handler+0x4>

08001706 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001706:	b480      	push	{r7}
 8001708:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800170a:	e7fe      	b.n	800170a <BusFault_Handler+0x4>

0800170c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800170c:	b480      	push	{r7}
 800170e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001710:	e7fe      	b.n	8001710 <UsageFault_Handler+0x4>

08001712 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001712:	b480      	push	{r7}
 8001714:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001716:	bf00      	nop
 8001718:	46bd      	mov	sp, r7
 800171a:	bc80      	pop	{r7}
 800171c:	4770      	bx	lr

0800171e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800171e:	b480      	push	{r7}
 8001720:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001722:	bf00      	nop
 8001724:	46bd      	mov	sp, r7
 8001726:	bc80      	pop	{r7}
 8001728:	4770      	bx	lr

0800172a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800172a:	b480      	push	{r7}
 800172c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800172e:	bf00      	nop
 8001730:	46bd      	mov	sp, r7
 8001732:	bc80      	pop	{r7}
 8001734:	4770      	bx	lr

08001736 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001736:	b580      	push	{r7, lr}
 8001738:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800173a:	f000 f935 	bl	80019a8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800173e:	bf00      	nop
 8001740:	bd80      	pop	{r7, pc}

08001742 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001742:	b480      	push	{r7}
 8001744:	af00      	add	r7, sp, #0
	return 1;
 8001746:	2301      	movs	r3, #1
}
 8001748:	4618      	mov	r0, r3
 800174a:	46bd      	mov	sp, r7
 800174c:	bc80      	pop	{r7}
 800174e:	4770      	bx	lr

08001750 <_kill>:

int _kill(int pid, int sig)
{
 8001750:	b580      	push	{r7, lr}
 8001752:	b082      	sub	sp, #8
 8001754:	af00      	add	r7, sp, #0
 8001756:	6078      	str	r0, [r7, #4]
 8001758:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 800175a:	f001 ff01 	bl	8003560 <__errno>
 800175e:	4603      	mov	r3, r0
 8001760:	2216      	movs	r2, #22
 8001762:	601a      	str	r2, [r3, #0]
	return -1;
 8001764:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001768:	4618      	mov	r0, r3
 800176a:	3708      	adds	r7, #8
 800176c:	46bd      	mov	sp, r7
 800176e:	bd80      	pop	{r7, pc}

08001770 <_exit>:

void _exit (int status)
{
 8001770:	b580      	push	{r7, lr}
 8001772:	b082      	sub	sp, #8
 8001774:	af00      	add	r7, sp, #0
 8001776:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8001778:	f04f 31ff 	mov.w	r1, #4294967295
 800177c:	6878      	ldr	r0, [r7, #4]
 800177e:	f7ff ffe7 	bl	8001750 <_kill>
	while (1) {}		/* Make sure we hang here */
 8001782:	e7fe      	b.n	8001782 <_exit+0x12>

08001784 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001784:	b580      	push	{r7, lr}
 8001786:	b086      	sub	sp, #24
 8001788:	af00      	add	r7, sp, #0
 800178a:	60f8      	str	r0, [r7, #12]
 800178c:	60b9      	str	r1, [r7, #8]
 800178e:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001790:	2300      	movs	r3, #0
 8001792:	617b      	str	r3, [r7, #20]
 8001794:	e00a      	b.n	80017ac <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8001796:	f3af 8000 	nop.w
 800179a:	4601      	mov	r1, r0
 800179c:	68bb      	ldr	r3, [r7, #8]
 800179e:	1c5a      	adds	r2, r3, #1
 80017a0:	60ba      	str	r2, [r7, #8]
 80017a2:	b2ca      	uxtb	r2, r1
 80017a4:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80017a6:	697b      	ldr	r3, [r7, #20]
 80017a8:	3301      	adds	r3, #1
 80017aa:	617b      	str	r3, [r7, #20]
 80017ac:	697a      	ldr	r2, [r7, #20]
 80017ae:	687b      	ldr	r3, [r7, #4]
 80017b0:	429a      	cmp	r2, r3
 80017b2:	dbf0      	blt.n	8001796 <_read+0x12>
	}

return len;
 80017b4:	687b      	ldr	r3, [r7, #4]
}
 80017b6:	4618      	mov	r0, r3
 80017b8:	3718      	adds	r7, #24
 80017ba:	46bd      	mov	sp, r7
 80017bc:	bd80      	pop	{r7, pc}

080017be <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80017be:	b580      	push	{r7, lr}
 80017c0:	b086      	sub	sp, #24
 80017c2:	af00      	add	r7, sp, #0
 80017c4:	60f8      	str	r0, [r7, #12]
 80017c6:	60b9      	str	r1, [r7, #8]
 80017c8:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80017ca:	2300      	movs	r3, #0
 80017cc:	617b      	str	r3, [r7, #20]
 80017ce:	e009      	b.n	80017e4 <_write+0x26>
	{
		__io_putchar(*ptr++);
 80017d0:	68bb      	ldr	r3, [r7, #8]
 80017d2:	1c5a      	adds	r2, r3, #1
 80017d4:	60ba      	str	r2, [r7, #8]
 80017d6:	781b      	ldrb	r3, [r3, #0]
 80017d8:	4618      	mov	r0, r3
 80017da:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80017de:	697b      	ldr	r3, [r7, #20]
 80017e0:	3301      	adds	r3, #1
 80017e2:	617b      	str	r3, [r7, #20]
 80017e4:	697a      	ldr	r2, [r7, #20]
 80017e6:	687b      	ldr	r3, [r7, #4]
 80017e8:	429a      	cmp	r2, r3
 80017ea:	dbf1      	blt.n	80017d0 <_write+0x12>
	}
	return len;
 80017ec:	687b      	ldr	r3, [r7, #4]
}
 80017ee:	4618      	mov	r0, r3
 80017f0:	3718      	adds	r7, #24
 80017f2:	46bd      	mov	sp, r7
 80017f4:	bd80      	pop	{r7, pc}

080017f6 <_close>:

int _close(int file)
{
 80017f6:	b480      	push	{r7}
 80017f8:	b083      	sub	sp, #12
 80017fa:	af00      	add	r7, sp, #0
 80017fc:	6078      	str	r0, [r7, #4]
	return -1;
 80017fe:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001802:	4618      	mov	r0, r3
 8001804:	370c      	adds	r7, #12
 8001806:	46bd      	mov	sp, r7
 8001808:	bc80      	pop	{r7}
 800180a:	4770      	bx	lr

0800180c <_fstat>:


int _fstat(int file, struct stat *st)
{
 800180c:	b480      	push	{r7}
 800180e:	b083      	sub	sp, #12
 8001810:	af00      	add	r7, sp, #0
 8001812:	6078      	str	r0, [r7, #4]
 8001814:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8001816:	683b      	ldr	r3, [r7, #0]
 8001818:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800181c:	605a      	str	r2, [r3, #4]
	return 0;
 800181e:	2300      	movs	r3, #0
}
 8001820:	4618      	mov	r0, r3
 8001822:	370c      	adds	r7, #12
 8001824:	46bd      	mov	sp, r7
 8001826:	bc80      	pop	{r7}
 8001828:	4770      	bx	lr

0800182a <_isatty>:

int _isatty(int file)
{
 800182a:	b480      	push	{r7}
 800182c:	b083      	sub	sp, #12
 800182e:	af00      	add	r7, sp, #0
 8001830:	6078      	str	r0, [r7, #4]
	return 1;
 8001832:	2301      	movs	r3, #1
}
 8001834:	4618      	mov	r0, r3
 8001836:	370c      	adds	r7, #12
 8001838:	46bd      	mov	sp, r7
 800183a:	bc80      	pop	{r7}
 800183c:	4770      	bx	lr

0800183e <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 800183e:	b480      	push	{r7}
 8001840:	b085      	sub	sp, #20
 8001842:	af00      	add	r7, sp, #0
 8001844:	60f8      	str	r0, [r7, #12]
 8001846:	60b9      	str	r1, [r7, #8]
 8001848:	607a      	str	r2, [r7, #4]
	return 0;
 800184a:	2300      	movs	r3, #0
}
 800184c:	4618      	mov	r0, r3
 800184e:	3714      	adds	r7, #20
 8001850:	46bd      	mov	sp, r7
 8001852:	bc80      	pop	{r7}
 8001854:	4770      	bx	lr
	...

08001858 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001858:	b580      	push	{r7, lr}
 800185a:	b086      	sub	sp, #24
 800185c:	af00      	add	r7, sp, #0
 800185e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001860:	4a14      	ldr	r2, [pc, #80]	; (80018b4 <_sbrk+0x5c>)
 8001862:	4b15      	ldr	r3, [pc, #84]	; (80018b8 <_sbrk+0x60>)
 8001864:	1ad3      	subs	r3, r2, r3
 8001866:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001868:	697b      	ldr	r3, [r7, #20]
 800186a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800186c:	4b13      	ldr	r3, [pc, #76]	; (80018bc <_sbrk+0x64>)
 800186e:	681b      	ldr	r3, [r3, #0]
 8001870:	2b00      	cmp	r3, #0
 8001872:	d102      	bne.n	800187a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001874:	4b11      	ldr	r3, [pc, #68]	; (80018bc <_sbrk+0x64>)
 8001876:	4a12      	ldr	r2, [pc, #72]	; (80018c0 <_sbrk+0x68>)
 8001878:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800187a:	4b10      	ldr	r3, [pc, #64]	; (80018bc <_sbrk+0x64>)
 800187c:	681a      	ldr	r2, [r3, #0]
 800187e:	687b      	ldr	r3, [r7, #4]
 8001880:	4413      	add	r3, r2
 8001882:	693a      	ldr	r2, [r7, #16]
 8001884:	429a      	cmp	r2, r3
 8001886:	d207      	bcs.n	8001898 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001888:	f001 fe6a 	bl	8003560 <__errno>
 800188c:	4603      	mov	r3, r0
 800188e:	220c      	movs	r2, #12
 8001890:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001892:	f04f 33ff 	mov.w	r3, #4294967295
 8001896:	e009      	b.n	80018ac <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001898:	4b08      	ldr	r3, [pc, #32]	; (80018bc <_sbrk+0x64>)
 800189a:	681b      	ldr	r3, [r3, #0]
 800189c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800189e:	4b07      	ldr	r3, [pc, #28]	; (80018bc <_sbrk+0x64>)
 80018a0:	681a      	ldr	r2, [r3, #0]
 80018a2:	687b      	ldr	r3, [r7, #4]
 80018a4:	4413      	add	r3, r2
 80018a6:	4a05      	ldr	r2, [pc, #20]	; (80018bc <_sbrk+0x64>)
 80018a8:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80018aa:	68fb      	ldr	r3, [r7, #12]
}
 80018ac:	4618      	mov	r0, r3
 80018ae:	3718      	adds	r7, #24
 80018b0:	46bd      	mov	sp, r7
 80018b2:	bd80      	pop	{r7, pc}
 80018b4:	20005000 	.word	0x20005000
 80018b8:	00000400 	.word	0x00000400
 80018bc:	20000204 	.word	0x20000204
 80018c0:	200002d0 	.word	0x200002d0

080018c4 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80018c4:	b480      	push	{r7}
 80018c6:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80018c8:	bf00      	nop
 80018ca:	46bd      	mov	sp, r7
 80018cc:	bc80      	pop	{r7}
 80018ce:	4770      	bx	lr

080018d0 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80018d0:	480c      	ldr	r0, [pc, #48]	; (8001904 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 80018d2:	490d      	ldr	r1, [pc, #52]	; (8001908 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 80018d4:	4a0d      	ldr	r2, [pc, #52]	; (800190c <LoopFillZerobss+0x1a>)
  movs r3, #0
 80018d6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80018d8:	e002      	b.n	80018e0 <LoopCopyDataInit>

080018da <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80018da:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80018dc:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80018de:	3304      	adds	r3, #4

080018e0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80018e0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80018e2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80018e4:	d3f9      	bcc.n	80018da <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80018e6:	4a0a      	ldr	r2, [pc, #40]	; (8001910 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 80018e8:	4c0a      	ldr	r4, [pc, #40]	; (8001914 <LoopFillZerobss+0x22>)
  movs r3, #0
 80018ea:	2300      	movs	r3, #0
  b LoopFillZerobss
 80018ec:	e001      	b.n	80018f2 <LoopFillZerobss>

080018ee <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80018ee:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80018f0:	3204      	adds	r2, #4

080018f2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80018f2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80018f4:	d3fb      	bcc.n	80018ee <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 80018f6:	f7ff ffe5 	bl	80018c4 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80018fa:	f001 fe37 	bl	800356c <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80018fe:	f7ff fc91 	bl	8001224 <main>
  bx lr
 8001902:	4770      	bx	lr
  ldr r0, =_sdata
 8001904:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001908:	200001e0 	.word	0x200001e0
  ldr r2, =_sidata
 800190c:	0800831c 	.word	0x0800831c
  ldr r2, =_sbss
 8001910:	200001e0 	.word	0x200001e0
  ldr r4, =_ebss
 8001914:	200002d0 	.word	0x200002d0

08001918 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001918:	e7fe      	b.n	8001918 <ADC1_2_IRQHandler>
	...

0800191c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800191c:	b580      	push	{r7, lr}
 800191e:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001920:	4b08      	ldr	r3, [pc, #32]	; (8001944 <HAL_Init+0x28>)
 8001922:	681b      	ldr	r3, [r3, #0]
 8001924:	4a07      	ldr	r2, [pc, #28]	; (8001944 <HAL_Init+0x28>)
 8001926:	f043 0310 	orr.w	r3, r3, #16
 800192a:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800192c:	2003      	movs	r0, #3
 800192e:	f000 f92b 	bl	8001b88 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001932:	2000      	movs	r0, #0
 8001934:	f000 f808 	bl	8001948 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001938:	f7ff fe3c 	bl	80015b4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800193c:	2300      	movs	r3, #0
}
 800193e:	4618      	mov	r0, r3
 8001940:	bd80      	pop	{r7, pc}
 8001942:	bf00      	nop
 8001944:	40022000 	.word	0x40022000

08001948 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001948:	b580      	push	{r7, lr}
 800194a:	b082      	sub	sp, #8
 800194c:	af00      	add	r7, sp, #0
 800194e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001950:	4b12      	ldr	r3, [pc, #72]	; (800199c <HAL_InitTick+0x54>)
 8001952:	681a      	ldr	r2, [r3, #0]
 8001954:	4b12      	ldr	r3, [pc, #72]	; (80019a0 <HAL_InitTick+0x58>)
 8001956:	781b      	ldrb	r3, [r3, #0]
 8001958:	4619      	mov	r1, r3
 800195a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800195e:	fbb3 f3f1 	udiv	r3, r3, r1
 8001962:	fbb2 f3f3 	udiv	r3, r2, r3
 8001966:	4618      	mov	r0, r3
 8001968:	f000 f935 	bl	8001bd6 <HAL_SYSTICK_Config>
 800196c:	4603      	mov	r3, r0
 800196e:	2b00      	cmp	r3, #0
 8001970:	d001      	beq.n	8001976 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001972:	2301      	movs	r3, #1
 8001974:	e00e      	b.n	8001994 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001976:	687b      	ldr	r3, [r7, #4]
 8001978:	2b0f      	cmp	r3, #15
 800197a:	d80a      	bhi.n	8001992 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800197c:	2200      	movs	r2, #0
 800197e:	6879      	ldr	r1, [r7, #4]
 8001980:	f04f 30ff 	mov.w	r0, #4294967295
 8001984:	f000 f90b 	bl	8001b9e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001988:	4a06      	ldr	r2, [pc, #24]	; (80019a4 <HAL_InitTick+0x5c>)
 800198a:	687b      	ldr	r3, [r7, #4]
 800198c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800198e:	2300      	movs	r3, #0
 8001990:	e000      	b.n	8001994 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001992:	2301      	movs	r3, #1
}
 8001994:	4618      	mov	r0, r3
 8001996:	3708      	adds	r7, #8
 8001998:	46bd      	mov	sp, r7
 800199a:	bd80      	pop	{r7, pc}
 800199c:	20000000 	.word	0x20000000
 80019a0:	20000008 	.word	0x20000008
 80019a4:	20000004 	.word	0x20000004

080019a8 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80019a8:	b480      	push	{r7}
 80019aa:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80019ac:	4b05      	ldr	r3, [pc, #20]	; (80019c4 <HAL_IncTick+0x1c>)
 80019ae:	781b      	ldrb	r3, [r3, #0]
 80019b0:	461a      	mov	r2, r3
 80019b2:	4b05      	ldr	r3, [pc, #20]	; (80019c8 <HAL_IncTick+0x20>)
 80019b4:	681b      	ldr	r3, [r3, #0]
 80019b6:	4413      	add	r3, r2
 80019b8:	4a03      	ldr	r2, [pc, #12]	; (80019c8 <HAL_IncTick+0x20>)
 80019ba:	6013      	str	r3, [r2, #0]
}
 80019bc:	bf00      	nop
 80019be:	46bd      	mov	sp, r7
 80019c0:	bc80      	pop	{r7}
 80019c2:	4770      	bx	lr
 80019c4:	20000008 	.word	0x20000008
 80019c8:	200002bc 	.word	0x200002bc

080019cc <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80019cc:	b480      	push	{r7}
 80019ce:	af00      	add	r7, sp, #0
  return uwTick;
 80019d0:	4b02      	ldr	r3, [pc, #8]	; (80019dc <HAL_GetTick+0x10>)
 80019d2:	681b      	ldr	r3, [r3, #0]
}
 80019d4:	4618      	mov	r0, r3
 80019d6:	46bd      	mov	sp, r7
 80019d8:	bc80      	pop	{r7}
 80019da:	4770      	bx	lr
 80019dc:	200002bc 	.word	0x200002bc

080019e0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80019e0:	b580      	push	{r7, lr}
 80019e2:	b084      	sub	sp, #16
 80019e4:	af00      	add	r7, sp, #0
 80019e6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80019e8:	f7ff fff0 	bl	80019cc <HAL_GetTick>
 80019ec:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80019ee:	687b      	ldr	r3, [r7, #4]
 80019f0:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80019f2:	68fb      	ldr	r3, [r7, #12]
 80019f4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80019f8:	d005      	beq.n	8001a06 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80019fa:	4b0a      	ldr	r3, [pc, #40]	; (8001a24 <HAL_Delay+0x44>)
 80019fc:	781b      	ldrb	r3, [r3, #0]
 80019fe:	461a      	mov	r2, r3
 8001a00:	68fb      	ldr	r3, [r7, #12]
 8001a02:	4413      	add	r3, r2
 8001a04:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001a06:	bf00      	nop
 8001a08:	f7ff ffe0 	bl	80019cc <HAL_GetTick>
 8001a0c:	4602      	mov	r2, r0
 8001a0e:	68bb      	ldr	r3, [r7, #8]
 8001a10:	1ad3      	subs	r3, r2, r3
 8001a12:	68fa      	ldr	r2, [r7, #12]
 8001a14:	429a      	cmp	r2, r3
 8001a16:	d8f7      	bhi.n	8001a08 <HAL_Delay+0x28>
  {
  }
}
 8001a18:	bf00      	nop
 8001a1a:	bf00      	nop
 8001a1c:	3710      	adds	r7, #16
 8001a1e:	46bd      	mov	sp, r7
 8001a20:	bd80      	pop	{r7, pc}
 8001a22:	bf00      	nop
 8001a24:	20000008 	.word	0x20000008

08001a28 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001a28:	b480      	push	{r7}
 8001a2a:	b085      	sub	sp, #20
 8001a2c:	af00      	add	r7, sp, #0
 8001a2e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001a30:	687b      	ldr	r3, [r7, #4]
 8001a32:	f003 0307 	and.w	r3, r3, #7
 8001a36:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001a38:	4b0c      	ldr	r3, [pc, #48]	; (8001a6c <__NVIC_SetPriorityGrouping+0x44>)
 8001a3a:	68db      	ldr	r3, [r3, #12]
 8001a3c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001a3e:	68ba      	ldr	r2, [r7, #8]
 8001a40:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001a44:	4013      	ands	r3, r2
 8001a46:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8001a48:	68fb      	ldr	r3, [r7, #12]
 8001a4a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001a4c:	68bb      	ldr	r3, [r7, #8]
 8001a4e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001a50:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001a54:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001a58:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001a5a:	4a04      	ldr	r2, [pc, #16]	; (8001a6c <__NVIC_SetPriorityGrouping+0x44>)
 8001a5c:	68bb      	ldr	r3, [r7, #8]
 8001a5e:	60d3      	str	r3, [r2, #12]
}
 8001a60:	bf00      	nop
 8001a62:	3714      	adds	r7, #20
 8001a64:	46bd      	mov	sp, r7
 8001a66:	bc80      	pop	{r7}
 8001a68:	4770      	bx	lr
 8001a6a:	bf00      	nop
 8001a6c:	e000ed00 	.word	0xe000ed00

08001a70 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001a70:	b480      	push	{r7}
 8001a72:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001a74:	4b04      	ldr	r3, [pc, #16]	; (8001a88 <__NVIC_GetPriorityGrouping+0x18>)
 8001a76:	68db      	ldr	r3, [r3, #12]
 8001a78:	0a1b      	lsrs	r3, r3, #8
 8001a7a:	f003 0307 	and.w	r3, r3, #7
}
 8001a7e:	4618      	mov	r0, r3
 8001a80:	46bd      	mov	sp, r7
 8001a82:	bc80      	pop	{r7}
 8001a84:	4770      	bx	lr
 8001a86:	bf00      	nop
 8001a88:	e000ed00 	.word	0xe000ed00

08001a8c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001a8c:	b480      	push	{r7}
 8001a8e:	b083      	sub	sp, #12
 8001a90:	af00      	add	r7, sp, #0
 8001a92:	4603      	mov	r3, r0
 8001a94:	6039      	str	r1, [r7, #0]
 8001a96:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001a98:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001a9c:	2b00      	cmp	r3, #0
 8001a9e:	db0a      	blt.n	8001ab6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001aa0:	683b      	ldr	r3, [r7, #0]
 8001aa2:	b2da      	uxtb	r2, r3
 8001aa4:	490c      	ldr	r1, [pc, #48]	; (8001ad8 <__NVIC_SetPriority+0x4c>)
 8001aa6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001aaa:	0112      	lsls	r2, r2, #4
 8001aac:	b2d2      	uxtb	r2, r2
 8001aae:	440b      	add	r3, r1
 8001ab0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001ab4:	e00a      	b.n	8001acc <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001ab6:	683b      	ldr	r3, [r7, #0]
 8001ab8:	b2da      	uxtb	r2, r3
 8001aba:	4908      	ldr	r1, [pc, #32]	; (8001adc <__NVIC_SetPriority+0x50>)
 8001abc:	79fb      	ldrb	r3, [r7, #7]
 8001abe:	f003 030f 	and.w	r3, r3, #15
 8001ac2:	3b04      	subs	r3, #4
 8001ac4:	0112      	lsls	r2, r2, #4
 8001ac6:	b2d2      	uxtb	r2, r2
 8001ac8:	440b      	add	r3, r1
 8001aca:	761a      	strb	r2, [r3, #24]
}
 8001acc:	bf00      	nop
 8001ace:	370c      	adds	r7, #12
 8001ad0:	46bd      	mov	sp, r7
 8001ad2:	bc80      	pop	{r7}
 8001ad4:	4770      	bx	lr
 8001ad6:	bf00      	nop
 8001ad8:	e000e100 	.word	0xe000e100
 8001adc:	e000ed00 	.word	0xe000ed00

08001ae0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001ae0:	b480      	push	{r7}
 8001ae2:	b089      	sub	sp, #36	; 0x24
 8001ae4:	af00      	add	r7, sp, #0
 8001ae6:	60f8      	str	r0, [r7, #12]
 8001ae8:	60b9      	str	r1, [r7, #8]
 8001aea:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001aec:	68fb      	ldr	r3, [r7, #12]
 8001aee:	f003 0307 	and.w	r3, r3, #7
 8001af2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001af4:	69fb      	ldr	r3, [r7, #28]
 8001af6:	f1c3 0307 	rsb	r3, r3, #7
 8001afa:	2b04      	cmp	r3, #4
 8001afc:	bf28      	it	cs
 8001afe:	2304      	movcs	r3, #4
 8001b00:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001b02:	69fb      	ldr	r3, [r7, #28]
 8001b04:	3304      	adds	r3, #4
 8001b06:	2b06      	cmp	r3, #6
 8001b08:	d902      	bls.n	8001b10 <NVIC_EncodePriority+0x30>
 8001b0a:	69fb      	ldr	r3, [r7, #28]
 8001b0c:	3b03      	subs	r3, #3
 8001b0e:	e000      	b.n	8001b12 <NVIC_EncodePriority+0x32>
 8001b10:	2300      	movs	r3, #0
 8001b12:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001b14:	f04f 32ff 	mov.w	r2, #4294967295
 8001b18:	69bb      	ldr	r3, [r7, #24]
 8001b1a:	fa02 f303 	lsl.w	r3, r2, r3
 8001b1e:	43da      	mvns	r2, r3
 8001b20:	68bb      	ldr	r3, [r7, #8]
 8001b22:	401a      	ands	r2, r3
 8001b24:	697b      	ldr	r3, [r7, #20]
 8001b26:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001b28:	f04f 31ff 	mov.w	r1, #4294967295
 8001b2c:	697b      	ldr	r3, [r7, #20]
 8001b2e:	fa01 f303 	lsl.w	r3, r1, r3
 8001b32:	43d9      	mvns	r1, r3
 8001b34:	687b      	ldr	r3, [r7, #4]
 8001b36:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001b38:	4313      	orrs	r3, r2
         );
}
 8001b3a:	4618      	mov	r0, r3
 8001b3c:	3724      	adds	r7, #36	; 0x24
 8001b3e:	46bd      	mov	sp, r7
 8001b40:	bc80      	pop	{r7}
 8001b42:	4770      	bx	lr

08001b44 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001b44:	b580      	push	{r7, lr}
 8001b46:	b082      	sub	sp, #8
 8001b48:	af00      	add	r7, sp, #0
 8001b4a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001b4c:	687b      	ldr	r3, [r7, #4]
 8001b4e:	3b01      	subs	r3, #1
 8001b50:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001b54:	d301      	bcc.n	8001b5a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001b56:	2301      	movs	r3, #1
 8001b58:	e00f      	b.n	8001b7a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001b5a:	4a0a      	ldr	r2, [pc, #40]	; (8001b84 <SysTick_Config+0x40>)
 8001b5c:	687b      	ldr	r3, [r7, #4]
 8001b5e:	3b01      	subs	r3, #1
 8001b60:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001b62:	210f      	movs	r1, #15
 8001b64:	f04f 30ff 	mov.w	r0, #4294967295
 8001b68:	f7ff ff90 	bl	8001a8c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001b6c:	4b05      	ldr	r3, [pc, #20]	; (8001b84 <SysTick_Config+0x40>)
 8001b6e:	2200      	movs	r2, #0
 8001b70:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001b72:	4b04      	ldr	r3, [pc, #16]	; (8001b84 <SysTick_Config+0x40>)
 8001b74:	2207      	movs	r2, #7
 8001b76:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001b78:	2300      	movs	r3, #0
}
 8001b7a:	4618      	mov	r0, r3
 8001b7c:	3708      	adds	r7, #8
 8001b7e:	46bd      	mov	sp, r7
 8001b80:	bd80      	pop	{r7, pc}
 8001b82:	bf00      	nop
 8001b84:	e000e010 	.word	0xe000e010

08001b88 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001b88:	b580      	push	{r7, lr}
 8001b8a:	b082      	sub	sp, #8
 8001b8c:	af00      	add	r7, sp, #0
 8001b8e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001b90:	6878      	ldr	r0, [r7, #4]
 8001b92:	f7ff ff49 	bl	8001a28 <__NVIC_SetPriorityGrouping>
}
 8001b96:	bf00      	nop
 8001b98:	3708      	adds	r7, #8
 8001b9a:	46bd      	mov	sp, r7
 8001b9c:	bd80      	pop	{r7, pc}

08001b9e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001b9e:	b580      	push	{r7, lr}
 8001ba0:	b086      	sub	sp, #24
 8001ba2:	af00      	add	r7, sp, #0
 8001ba4:	4603      	mov	r3, r0
 8001ba6:	60b9      	str	r1, [r7, #8]
 8001ba8:	607a      	str	r2, [r7, #4]
 8001baa:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001bac:	2300      	movs	r3, #0
 8001bae:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001bb0:	f7ff ff5e 	bl	8001a70 <__NVIC_GetPriorityGrouping>
 8001bb4:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001bb6:	687a      	ldr	r2, [r7, #4]
 8001bb8:	68b9      	ldr	r1, [r7, #8]
 8001bba:	6978      	ldr	r0, [r7, #20]
 8001bbc:	f7ff ff90 	bl	8001ae0 <NVIC_EncodePriority>
 8001bc0:	4602      	mov	r2, r0
 8001bc2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001bc6:	4611      	mov	r1, r2
 8001bc8:	4618      	mov	r0, r3
 8001bca:	f7ff ff5f 	bl	8001a8c <__NVIC_SetPriority>
}
 8001bce:	bf00      	nop
 8001bd0:	3718      	adds	r7, #24
 8001bd2:	46bd      	mov	sp, r7
 8001bd4:	bd80      	pop	{r7, pc}

08001bd6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001bd6:	b580      	push	{r7, lr}
 8001bd8:	b082      	sub	sp, #8
 8001bda:	af00      	add	r7, sp, #0
 8001bdc:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001bde:	6878      	ldr	r0, [r7, #4]
 8001be0:	f7ff ffb0 	bl	8001b44 <SysTick_Config>
 8001be4:	4603      	mov	r3, r0
}
 8001be6:	4618      	mov	r0, r3
 8001be8:	3708      	adds	r7, #8
 8001bea:	46bd      	mov	sp, r7
 8001bec:	bd80      	pop	{r7, pc}
	...

08001bf0 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001bf0:	b480      	push	{r7}
 8001bf2:	b08b      	sub	sp, #44	; 0x2c
 8001bf4:	af00      	add	r7, sp, #0
 8001bf6:	6078      	str	r0, [r7, #4]
 8001bf8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001bfa:	2300      	movs	r3, #0
 8001bfc:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8001bfe:	2300      	movs	r3, #0
 8001c00:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001c02:	e169      	b.n	8001ed8 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8001c04:	2201      	movs	r2, #1
 8001c06:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c08:	fa02 f303 	lsl.w	r3, r2, r3
 8001c0c:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001c0e:	683b      	ldr	r3, [r7, #0]
 8001c10:	681b      	ldr	r3, [r3, #0]
 8001c12:	69fa      	ldr	r2, [r7, #28]
 8001c14:	4013      	ands	r3, r2
 8001c16:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8001c18:	69ba      	ldr	r2, [r7, #24]
 8001c1a:	69fb      	ldr	r3, [r7, #28]
 8001c1c:	429a      	cmp	r2, r3
 8001c1e:	f040 8158 	bne.w	8001ed2 <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8001c22:	683b      	ldr	r3, [r7, #0]
 8001c24:	685b      	ldr	r3, [r3, #4]
 8001c26:	4a9a      	ldr	r2, [pc, #616]	; (8001e90 <HAL_GPIO_Init+0x2a0>)
 8001c28:	4293      	cmp	r3, r2
 8001c2a:	d05e      	beq.n	8001cea <HAL_GPIO_Init+0xfa>
 8001c2c:	4a98      	ldr	r2, [pc, #608]	; (8001e90 <HAL_GPIO_Init+0x2a0>)
 8001c2e:	4293      	cmp	r3, r2
 8001c30:	d875      	bhi.n	8001d1e <HAL_GPIO_Init+0x12e>
 8001c32:	4a98      	ldr	r2, [pc, #608]	; (8001e94 <HAL_GPIO_Init+0x2a4>)
 8001c34:	4293      	cmp	r3, r2
 8001c36:	d058      	beq.n	8001cea <HAL_GPIO_Init+0xfa>
 8001c38:	4a96      	ldr	r2, [pc, #600]	; (8001e94 <HAL_GPIO_Init+0x2a4>)
 8001c3a:	4293      	cmp	r3, r2
 8001c3c:	d86f      	bhi.n	8001d1e <HAL_GPIO_Init+0x12e>
 8001c3e:	4a96      	ldr	r2, [pc, #600]	; (8001e98 <HAL_GPIO_Init+0x2a8>)
 8001c40:	4293      	cmp	r3, r2
 8001c42:	d052      	beq.n	8001cea <HAL_GPIO_Init+0xfa>
 8001c44:	4a94      	ldr	r2, [pc, #592]	; (8001e98 <HAL_GPIO_Init+0x2a8>)
 8001c46:	4293      	cmp	r3, r2
 8001c48:	d869      	bhi.n	8001d1e <HAL_GPIO_Init+0x12e>
 8001c4a:	4a94      	ldr	r2, [pc, #592]	; (8001e9c <HAL_GPIO_Init+0x2ac>)
 8001c4c:	4293      	cmp	r3, r2
 8001c4e:	d04c      	beq.n	8001cea <HAL_GPIO_Init+0xfa>
 8001c50:	4a92      	ldr	r2, [pc, #584]	; (8001e9c <HAL_GPIO_Init+0x2ac>)
 8001c52:	4293      	cmp	r3, r2
 8001c54:	d863      	bhi.n	8001d1e <HAL_GPIO_Init+0x12e>
 8001c56:	4a92      	ldr	r2, [pc, #584]	; (8001ea0 <HAL_GPIO_Init+0x2b0>)
 8001c58:	4293      	cmp	r3, r2
 8001c5a:	d046      	beq.n	8001cea <HAL_GPIO_Init+0xfa>
 8001c5c:	4a90      	ldr	r2, [pc, #576]	; (8001ea0 <HAL_GPIO_Init+0x2b0>)
 8001c5e:	4293      	cmp	r3, r2
 8001c60:	d85d      	bhi.n	8001d1e <HAL_GPIO_Init+0x12e>
 8001c62:	2b12      	cmp	r3, #18
 8001c64:	d82a      	bhi.n	8001cbc <HAL_GPIO_Init+0xcc>
 8001c66:	2b12      	cmp	r3, #18
 8001c68:	d859      	bhi.n	8001d1e <HAL_GPIO_Init+0x12e>
 8001c6a:	a201      	add	r2, pc, #4	; (adr r2, 8001c70 <HAL_GPIO_Init+0x80>)
 8001c6c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001c70:	08001ceb 	.word	0x08001ceb
 8001c74:	08001cc5 	.word	0x08001cc5
 8001c78:	08001cd7 	.word	0x08001cd7
 8001c7c:	08001d19 	.word	0x08001d19
 8001c80:	08001d1f 	.word	0x08001d1f
 8001c84:	08001d1f 	.word	0x08001d1f
 8001c88:	08001d1f 	.word	0x08001d1f
 8001c8c:	08001d1f 	.word	0x08001d1f
 8001c90:	08001d1f 	.word	0x08001d1f
 8001c94:	08001d1f 	.word	0x08001d1f
 8001c98:	08001d1f 	.word	0x08001d1f
 8001c9c:	08001d1f 	.word	0x08001d1f
 8001ca0:	08001d1f 	.word	0x08001d1f
 8001ca4:	08001d1f 	.word	0x08001d1f
 8001ca8:	08001d1f 	.word	0x08001d1f
 8001cac:	08001d1f 	.word	0x08001d1f
 8001cb0:	08001d1f 	.word	0x08001d1f
 8001cb4:	08001ccd 	.word	0x08001ccd
 8001cb8:	08001ce1 	.word	0x08001ce1
 8001cbc:	4a79      	ldr	r2, [pc, #484]	; (8001ea4 <HAL_GPIO_Init+0x2b4>)
 8001cbe:	4293      	cmp	r3, r2
 8001cc0:	d013      	beq.n	8001cea <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8001cc2:	e02c      	b.n	8001d1e <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8001cc4:	683b      	ldr	r3, [r7, #0]
 8001cc6:	68db      	ldr	r3, [r3, #12]
 8001cc8:	623b      	str	r3, [r7, #32]
          break;
 8001cca:	e029      	b.n	8001d20 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8001ccc:	683b      	ldr	r3, [r7, #0]
 8001cce:	68db      	ldr	r3, [r3, #12]
 8001cd0:	3304      	adds	r3, #4
 8001cd2:	623b      	str	r3, [r7, #32]
          break;
 8001cd4:	e024      	b.n	8001d20 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8001cd6:	683b      	ldr	r3, [r7, #0]
 8001cd8:	68db      	ldr	r3, [r3, #12]
 8001cda:	3308      	adds	r3, #8
 8001cdc:	623b      	str	r3, [r7, #32]
          break;
 8001cde:	e01f      	b.n	8001d20 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8001ce0:	683b      	ldr	r3, [r7, #0]
 8001ce2:	68db      	ldr	r3, [r3, #12]
 8001ce4:	330c      	adds	r3, #12
 8001ce6:	623b      	str	r3, [r7, #32]
          break;
 8001ce8:	e01a      	b.n	8001d20 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8001cea:	683b      	ldr	r3, [r7, #0]
 8001cec:	689b      	ldr	r3, [r3, #8]
 8001cee:	2b00      	cmp	r3, #0
 8001cf0:	d102      	bne.n	8001cf8 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8001cf2:	2304      	movs	r3, #4
 8001cf4:	623b      	str	r3, [r7, #32]
          break;
 8001cf6:	e013      	b.n	8001d20 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8001cf8:	683b      	ldr	r3, [r7, #0]
 8001cfa:	689b      	ldr	r3, [r3, #8]
 8001cfc:	2b01      	cmp	r3, #1
 8001cfe:	d105      	bne.n	8001d0c <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001d00:	2308      	movs	r3, #8
 8001d02:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8001d04:	687b      	ldr	r3, [r7, #4]
 8001d06:	69fa      	ldr	r2, [r7, #28]
 8001d08:	611a      	str	r2, [r3, #16]
          break;
 8001d0a:	e009      	b.n	8001d20 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001d0c:	2308      	movs	r3, #8
 8001d0e:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8001d10:	687b      	ldr	r3, [r7, #4]
 8001d12:	69fa      	ldr	r2, [r7, #28]
 8001d14:	615a      	str	r2, [r3, #20]
          break;
 8001d16:	e003      	b.n	8001d20 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8001d18:	2300      	movs	r3, #0
 8001d1a:	623b      	str	r3, [r7, #32]
          break;
 8001d1c:	e000      	b.n	8001d20 <HAL_GPIO_Init+0x130>
          break;
 8001d1e:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8001d20:	69bb      	ldr	r3, [r7, #24]
 8001d22:	2bff      	cmp	r3, #255	; 0xff
 8001d24:	d801      	bhi.n	8001d2a <HAL_GPIO_Init+0x13a>
 8001d26:	687b      	ldr	r3, [r7, #4]
 8001d28:	e001      	b.n	8001d2e <HAL_GPIO_Init+0x13e>
 8001d2a:	687b      	ldr	r3, [r7, #4]
 8001d2c:	3304      	adds	r3, #4
 8001d2e:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8001d30:	69bb      	ldr	r3, [r7, #24]
 8001d32:	2bff      	cmp	r3, #255	; 0xff
 8001d34:	d802      	bhi.n	8001d3c <HAL_GPIO_Init+0x14c>
 8001d36:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d38:	009b      	lsls	r3, r3, #2
 8001d3a:	e002      	b.n	8001d42 <HAL_GPIO_Init+0x152>
 8001d3c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d3e:	3b08      	subs	r3, #8
 8001d40:	009b      	lsls	r3, r3, #2
 8001d42:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8001d44:	697b      	ldr	r3, [r7, #20]
 8001d46:	681a      	ldr	r2, [r3, #0]
 8001d48:	210f      	movs	r1, #15
 8001d4a:	693b      	ldr	r3, [r7, #16]
 8001d4c:	fa01 f303 	lsl.w	r3, r1, r3
 8001d50:	43db      	mvns	r3, r3
 8001d52:	401a      	ands	r2, r3
 8001d54:	6a39      	ldr	r1, [r7, #32]
 8001d56:	693b      	ldr	r3, [r7, #16]
 8001d58:	fa01 f303 	lsl.w	r3, r1, r3
 8001d5c:	431a      	orrs	r2, r3
 8001d5e:	697b      	ldr	r3, [r7, #20]
 8001d60:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001d62:	683b      	ldr	r3, [r7, #0]
 8001d64:	685b      	ldr	r3, [r3, #4]
 8001d66:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001d6a:	2b00      	cmp	r3, #0
 8001d6c:	f000 80b1 	beq.w	8001ed2 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8001d70:	4b4d      	ldr	r3, [pc, #308]	; (8001ea8 <HAL_GPIO_Init+0x2b8>)
 8001d72:	699b      	ldr	r3, [r3, #24]
 8001d74:	4a4c      	ldr	r2, [pc, #304]	; (8001ea8 <HAL_GPIO_Init+0x2b8>)
 8001d76:	f043 0301 	orr.w	r3, r3, #1
 8001d7a:	6193      	str	r3, [r2, #24]
 8001d7c:	4b4a      	ldr	r3, [pc, #296]	; (8001ea8 <HAL_GPIO_Init+0x2b8>)
 8001d7e:	699b      	ldr	r3, [r3, #24]
 8001d80:	f003 0301 	and.w	r3, r3, #1
 8001d84:	60bb      	str	r3, [r7, #8]
 8001d86:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8001d88:	4a48      	ldr	r2, [pc, #288]	; (8001eac <HAL_GPIO_Init+0x2bc>)
 8001d8a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d8c:	089b      	lsrs	r3, r3, #2
 8001d8e:	3302      	adds	r3, #2
 8001d90:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001d94:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8001d96:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d98:	f003 0303 	and.w	r3, r3, #3
 8001d9c:	009b      	lsls	r3, r3, #2
 8001d9e:	220f      	movs	r2, #15
 8001da0:	fa02 f303 	lsl.w	r3, r2, r3
 8001da4:	43db      	mvns	r3, r3
 8001da6:	68fa      	ldr	r2, [r7, #12]
 8001da8:	4013      	ands	r3, r2
 8001daa:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8001dac:	687b      	ldr	r3, [r7, #4]
 8001dae:	4a40      	ldr	r2, [pc, #256]	; (8001eb0 <HAL_GPIO_Init+0x2c0>)
 8001db0:	4293      	cmp	r3, r2
 8001db2:	d013      	beq.n	8001ddc <HAL_GPIO_Init+0x1ec>
 8001db4:	687b      	ldr	r3, [r7, #4]
 8001db6:	4a3f      	ldr	r2, [pc, #252]	; (8001eb4 <HAL_GPIO_Init+0x2c4>)
 8001db8:	4293      	cmp	r3, r2
 8001dba:	d00d      	beq.n	8001dd8 <HAL_GPIO_Init+0x1e8>
 8001dbc:	687b      	ldr	r3, [r7, #4]
 8001dbe:	4a3e      	ldr	r2, [pc, #248]	; (8001eb8 <HAL_GPIO_Init+0x2c8>)
 8001dc0:	4293      	cmp	r3, r2
 8001dc2:	d007      	beq.n	8001dd4 <HAL_GPIO_Init+0x1e4>
 8001dc4:	687b      	ldr	r3, [r7, #4]
 8001dc6:	4a3d      	ldr	r2, [pc, #244]	; (8001ebc <HAL_GPIO_Init+0x2cc>)
 8001dc8:	4293      	cmp	r3, r2
 8001dca:	d101      	bne.n	8001dd0 <HAL_GPIO_Init+0x1e0>
 8001dcc:	2303      	movs	r3, #3
 8001dce:	e006      	b.n	8001dde <HAL_GPIO_Init+0x1ee>
 8001dd0:	2304      	movs	r3, #4
 8001dd2:	e004      	b.n	8001dde <HAL_GPIO_Init+0x1ee>
 8001dd4:	2302      	movs	r3, #2
 8001dd6:	e002      	b.n	8001dde <HAL_GPIO_Init+0x1ee>
 8001dd8:	2301      	movs	r3, #1
 8001dda:	e000      	b.n	8001dde <HAL_GPIO_Init+0x1ee>
 8001ddc:	2300      	movs	r3, #0
 8001dde:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001de0:	f002 0203 	and.w	r2, r2, #3
 8001de4:	0092      	lsls	r2, r2, #2
 8001de6:	4093      	lsls	r3, r2
 8001de8:	68fa      	ldr	r2, [r7, #12]
 8001dea:	4313      	orrs	r3, r2
 8001dec:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8001dee:	492f      	ldr	r1, [pc, #188]	; (8001eac <HAL_GPIO_Init+0x2bc>)
 8001df0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001df2:	089b      	lsrs	r3, r3, #2
 8001df4:	3302      	adds	r3, #2
 8001df6:	68fa      	ldr	r2, [r7, #12]
 8001df8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001dfc:	683b      	ldr	r3, [r7, #0]
 8001dfe:	685b      	ldr	r3, [r3, #4]
 8001e00:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001e04:	2b00      	cmp	r3, #0
 8001e06:	d006      	beq.n	8001e16 <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8001e08:	4b2d      	ldr	r3, [pc, #180]	; (8001ec0 <HAL_GPIO_Init+0x2d0>)
 8001e0a:	681a      	ldr	r2, [r3, #0]
 8001e0c:	492c      	ldr	r1, [pc, #176]	; (8001ec0 <HAL_GPIO_Init+0x2d0>)
 8001e0e:	69bb      	ldr	r3, [r7, #24]
 8001e10:	4313      	orrs	r3, r2
 8001e12:	600b      	str	r3, [r1, #0]
 8001e14:	e006      	b.n	8001e24 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8001e16:	4b2a      	ldr	r3, [pc, #168]	; (8001ec0 <HAL_GPIO_Init+0x2d0>)
 8001e18:	681a      	ldr	r2, [r3, #0]
 8001e1a:	69bb      	ldr	r3, [r7, #24]
 8001e1c:	43db      	mvns	r3, r3
 8001e1e:	4928      	ldr	r1, [pc, #160]	; (8001ec0 <HAL_GPIO_Init+0x2d0>)
 8001e20:	4013      	ands	r3, r2
 8001e22:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001e24:	683b      	ldr	r3, [r7, #0]
 8001e26:	685b      	ldr	r3, [r3, #4]
 8001e28:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001e2c:	2b00      	cmp	r3, #0
 8001e2e:	d006      	beq.n	8001e3e <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8001e30:	4b23      	ldr	r3, [pc, #140]	; (8001ec0 <HAL_GPIO_Init+0x2d0>)
 8001e32:	685a      	ldr	r2, [r3, #4]
 8001e34:	4922      	ldr	r1, [pc, #136]	; (8001ec0 <HAL_GPIO_Init+0x2d0>)
 8001e36:	69bb      	ldr	r3, [r7, #24]
 8001e38:	4313      	orrs	r3, r2
 8001e3a:	604b      	str	r3, [r1, #4]
 8001e3c:	e006      	b.n	8001e4c <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8001e3e:	4b20      	ldr	r3, [pc, #128]	; (8001ec0 <HAL_GPIO_Init+0x2d0>)
 8001e40:	685a      	ldr	r2, [r3, #4]
 8001e42:	69bb      	ldr	r3, [r7, #24]
 8001e44:	43db      	mvns	r3, r3
 8001e46:	491e      	ldr	r1, [pc, #120]	; (8001ec0 <HAL_GPIO_Init+0x2d0>)
 8001e48:	4013      	ands	r3, r2
 8001e4a:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001e4c:	683b      	ldr	r3, [r7, #0]
 8001e4e:	685b      	ldr	r3, [r3, #4]
 8001e50:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001e54:	2b00      	cmp	r3, #0
 8001e56:	d006      	beq.n	8001e66 <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8001e58:	4b19      	ldr	r3, [pc, #100]	; (8001ec0 <HAL_GPIO_Init+0x2d0>)
 8001e5a:	689a      	ldr	r2, [r3, #8]
 8001e5c:	4918      	ldr	r1, [pc, #96]	; (8001ec0 <HAL_GPIO_Init+0x2d0>)
 8001e5e:	69bb      	ldr	r3, [r7, #24]
 8001e60:	4313      	orrs	r3, r2
 8001e62:	608b      	str	r3, [r1, #8]
 8001e64:	e006      	b.n	8001e74 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8001e66:	4b16      	ldr	r3, [pc, #88]	; (8001ec0 <HAL_GPIO_Init+0x2d0>)
 8001e68:	689a      	ldr	r2, [r3, #8]
 8001e6a:	69bb      	ldr	r3, [r7, #24]
 8001e6c:	43db      	mvns	r3, r3
 8001e6e:	4914      	ldr	r1, [pc, #80]	; (8001ec0 <HAL_GPIO_Init+0x2d0>)
 8001e70:	4013      	ands	r3, r2
 8001e72:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001e74:	683b      	ldr	r3, [r7, #0]
 8001e76:	685b      	ldr	r3, [r3, #4]
 8001e78:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001e7c:	2b00      	cmp	r3, #0
 8001e7e:	d021      	beq.n	8001ec4 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8001e80:	4b0f      	ldr	r3, [pc, #60]	; (8001ec0 <HAL_GPIO_Init+0x2d0>)
 8001e82:	68da      	ldr	r2, [r3, #12]
 8001e84:	490e      	ldr	r1, [pc, #56]	; (8001ec0 <HAL_GPIO_Init+0x2d0>)
 8001e86:	69bb      	ldr	r3, [r7, #24]
 8001e88:	4313      	orrs	r3, r2
 8001e8a:	60cb      	str	r3, [r1, #12]
 8001e8c:	e021      	b.n	8001ed2 <HAL_GPIO_Init+0x2e2>
 8001e8e:	bf00      	nop
 8001e90:	10320000 	.word	0x10320000
 8001e94:	10310000 	.word	0x10310000
 8001e98:	10220000 	.word	0x10220000
 8001e9c:	10210000 	.word	0x10210000
 8001ea0:	10120000 	.word	0x10120000
 8001ea4:	10110000 	.word	0x10110000
 8001ea8:	40021000 	.word	0x40021000
 8001eac:	40010000 	.word	0x40010000
 8001eb0:	40010800 	.word	0x40010800
 8001eb4:	40010c00 	.word	0x40010c00
 8001eb8:	40011000 	.word	0x40011000
 8001ebc:	40011400 	.word	0x40011400
 8001ec0:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8001ec4:	4b0b      	ldr	r3, [pc, #44]	; (8001ef4 <HAL_GPIO_Init+0x304>)
 8001ec6:	68da      	ldr	r2, [r3, #12]
 8001ec8:	69bb      	ldr	r3, [r7, #24]
 8001eca:	43db      	mvns	r3, r3
 8001ecc:	4909      	ldr	r1, [pc, #36]	; (8001ef4 <HAL_GPIO_Init+0x304>)
 8001ece:	4013      	ands	r3, r2
 8001ed0:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 8001ed2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ed4:	3301      	adds	r3, #1
 8001ed6:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001ed8:	683b      	ldr	r3, [r7, #0]
 8001eda:	681a      	ldr	r2, [r3, #0]
 8001edc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ede:	fa22 f303 	lsr.w	r3, r2, r3
 8001ee2:	2b00      	cmp	r3, #0
 8001ee4:	f47f ae8e 	bne.w	8001c04 <HAL_GPIO_Init+0x14>
  }
}
 8001ee8:	bf00      	nop
 8001eea:	bf00      	nop
 8001eec:	372c      	adds	r7, #44	; 0x2c
 8001eee:	46bd      	mov	sp, r7
 8001ef0:	bc80      	pop	{r7}
 8001ef2:	4770      	bx	lr
 8001ef4:	40010400 	.word	0x40010400

08001ef8 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8001ef8:	b480      	push	{r7}
 8001efa:	b085      	sub	sp, #20
 8001efc:	af00      	add	r7, sp, #0
 8001efe:	6078      	str	r0, [r7, #4]
 8001f00:	460b      	mov	r3, r1
 8001f02:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8001f04:	687b      	ldr	r3, [r7, #4]
 8001f06:	689a      	ldr	r2, [r3, #8]
 8001f08:	887b      	ldrh	r3, [r7, #2]
 8001f0a:	4013      	ands	r3, r2
 8001f0c:	2b00      	cmp	r3, #0
 8001f0e:	d002      	beq.n	8001f16 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8001f10:	2301      	movs	r3, #1
 8001f12:	73fb      	strb	r3, [r7, #15]
 8001f14:	e001      	b.n	8001f1a <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8001f16:	2300      	movs	r3, #0
 8001f18:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8001f1a:	7bfb      	ldrb	r3, [r7, #15]
}
 8001f1c:	4618      	mov	r0, r3
 8001f1e:	3714      	adds	r7, #20
 8001f20:	46bd      	mov	sp, r7
 8001f22:	bc80      	pop	{r7}
 8001f24:	4770      	bx	lr

08001f26 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001f26:	b480      	push	{r7}
 8001f28:	b083      	sub	sp, #12
 8001f2a:	af00      	add	r7, sp, #0
 8001f2c:	6078      	str	r0, [r7, #4]
 8001f2e:	460b      	mov	r3, r1
 8001f30:	807b      	strh	r3, [r7, #2]
 8001f32:	4613      	mov	r3, r2
 8001f34:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001f36:	787b      	ldrb	r3, [r7, #1]
 8001f38:	2b00      	cmp	r3, #0
 8001f3a:	d003      	beq.n	8001f44 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001f3c:	887a      	ldrh	r2, [r7, #2]
 8001f3e:	687b      	ldr	r3, [r7, #4]
 8001f40:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8001f42:	e003      	b.n	8001f4c <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8001f44:	887b      	ldrh	r3, [r7, #2]
 8001f46:	041a      	lsls	r2, r3, #16
 8001f48:	687b      	ldr	r3, [r7, #4]
 8001f4a:	611a      	str	r2, [r3, #16]
}
 8001f4c:	bf00      	nop
 8001f4e:	370c      	adds	r7, #12
 8001f50:	46bd      	mov	sp, r7
 8001f52:	bc80      	pop	{r7}
 8001f54:	4770      	bx	lr
	...

08001f58 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8001f58:	b580      	push	{r7, lr}
 8001f5a:	b084      	sub	sp, #16
 8001f5c:	af00      	add	r7, sp, #0
 8001f5e:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8001f60:	687b      	ldr	r3, [r7, #4]
 8001f62:	2b00      	cmp	r3, #0
 8001f64:	d101      	bne.n	8001f6a <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8001f66:	2301      	movs	r3, #1
 8001f68:	e12b      	b.n	80021c2 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8001f6a:	687b      	ldr	r3, [r7, #4]
 8001f6c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001f70:	b2db      	uxtb	r3, r3
 8001f72:	2b00      	cmp	r3, #0
 8001f74:	d106      	bne.n	8001f84 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8001f76:	687b      	ldr	r3, [r7, #4]
 8001f78:	2200      	movs	r2, #0
 8001f7a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8001f7e:	6878      	ldr	r0, [r7, #4]
 8001f80:	f7ff fb4a 	bl	8001618 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8001f84:	687b      	ldr	r3, [r7, #4]
 8001f86:	2224      	movs	r2, #36	; 0x24
 8001f88:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8001f8c:	687b      	ldr	r3, [r7, #4]
 8001f8e:	681b      	ldr	r3, [r3, #0]
 8001f90:	681a      	ldr	r2, [r3, #0]
 8001f92:	687b      	ldr	r3, [r7, #4]
 8001f94:	681b      	ldr	r3, [r3, #0]
 8001f96:	f022 0201 	bic.w	r2, r2, #1
 8001f9a:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8001f9c:	687b      	ldr	r3, [r7, #4]
 8001f9e:	681b      	ldr	r3, [r3, #0]
 8001fa0:	681a      	ldr	r2, [r3, #0]
 8001fa2:	687b      	ldr	r3, [r7, #4]
 8001fa4:	681b      	ldr	r3, [r3, #0]
 8001fa6:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8001faa:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8001fac:	687b      	ldr	r3, [r7, #4]
 8001fae:	681b      	ldr	r3, [r3, #0]
 8001fb0:	681a      	ldr	r2, [r3, #0]
 8001fb2:	687b      	ldr	r3, [r7, #4]
 8001fb4:	681b      	ldr	r3, [r3, #0]
 8001fb6:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8001fba:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8001fbc:	f000 ffea 	bl	8002f94 <HAL_RCC_GetPCLK1Freq>
 8001fc0:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8001fc2:	687b      	ldr	r3, [r7, #4]
 8001fc4:	685b      	ldr	r3, [r3, #4]
 8001fc6:	4a81      	ldr	r2, [pc, #516]	; (80021cc <HAL_I2C_Init+0x274>)
 8001fc8:	4293      	cmp	r3, r2
 8001fca:	d807      	bhi.n	8001fdc <HAL_I2C_Init+0x84>
 8001fcc:	68fb      	ldr	r3, [r7, #12]
 8001fce:	4a80      	ldr	r2, [pc, #512]	; (80021d0 <HAL_I2C_Init+0x278>)
 8001fd0:	4293      	cmp	r3, r2
 8001fd2:	bf94      	ite	ls
 8001fd4:	2301      	movls	r3, #1
 8001fd6:	2300      	movhi	r3, #0
 8001fd8:	b2db      	uxtb	r3, r3
 8001fda:	e006      	b.n	8001fea <HAL_I2C_Init+0x92>
 8001fdc:	68fb      	ldr	r3, [r7, #12]
 8001fde:	4a7d      	ldr	r2, [pc, #500]	; (80021d4 <HAL_I2C_Init+0x27c>)
 8001fe0:	4293      	cmp	r3, r2
 8001fe2:	bf94      	ite	ls
 8001fe4:	2301      	movls	r3, #1
 8001fe6:	2300      	movhi	r3, #0
 8001fe8:	b2db      	uxtb	r3, r3
 8001fea:	2b00      	cmp	r3, #0
 8001fec:	d001      	beq.n	8001ff2 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8001fee:	2301      	movs	r3, #1
 8001ff0:	e0e7      	b.n	80021c2 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8001ff2:	68fb      	ldr	r3, [r7, #12]
 8001ff4:	4a78      	ldr	r2, [pc, #480]	; (80021d8 <HAL_I2C_Init+0x280>)
 8001ff6:	fba2 2303 	umull	r2, r3, r2, r3
 8001ffa:	0c9b      	lsrs	r3, r3, #18
 8001ffc:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8001ffe:	687b      	ldr	r3, [r7, #4]
 8002000:	681b      	ldr	r3, [r3, #0]
 8002002:	685b      	ldr	r3, [r3, #4]
 8002004:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8002008:	687b      	ldr	r3, [r7, #4]
 800200a:	681b      	ldr	r3, [r3, #0]
 800200c:	68ba      	ldr	r2, [r7, #8]
 800200e:	430a      	orrs	r2, r1
 8002010:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8002012:	687b      	ldr	r3, [r7, #4]
 8002014:	681b      	ldr	r3, [r3, #0]
 8002016:	6a1b      	ldr	r3, [r3, #32]
 8002018:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 800201c:	687b      	ldr	r3, [r7, #4]
 800201e:	685b      	ldr	r3, [r3, #4]
 8002020:	4a6a      	ldr	r2, [pc, #424]	; (80021cc <HAL_I2C_Init+0x274>)
 8002022:	4293      	cmp	r3, r2
 8002024:	d802      	bhi.n	800202c <HAL_I2C_Init+0xd4>
 8002026:	68bb      	ldr	r3, [r7, #8]
 8002028:	3301      	adds	r3, #1
 800202a:	e009      	b.n	8002040 <HAL_I2C_Init+0xe8>
 800202c:	68bb      	ldr	r3, [r7, #8]
 800202e:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8002032:	fb02 f303 	mul.w	r3, r2, r3
 8002036:	4a69      	ldr	r2, [pc, #420]	; (80021dc <HAL_I2C_Init+0x284>)
 8002038:	fba2 2303 	umull	r2, r3, r2, r3
 800203c:	099b      	lsrs	r3, r3, #6
 800203e:	3301      	adds	r3, #1
 8002040:	687a      	ldr	r2, [r7, #4]
 8002042:	6812      	ldr	r2, [r2, #0]
 8002044:	430b      	orrs	r3, r1
 8002046:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8002048:	687b      	ldr	r3, [r7, #4]
 800204a:	681b      	ldr	r3, [r3, #0]
 800204c:	69db      	ldr	r3, [r3, #28]
 800204e:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8002052:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8002056:	687b      	ldr	r3, [r7, #4]
 8002058:	685b      	ldr	r3, [r3, #4]
 800205a:	495c      	ldr	r1, [pc, #368]	; (80021cc <HAL_I2C_Init+0x274>)
 800205c:	428b      	cmp	r3, r1
 800205e:	d819      	bhi.n	8002094 <HAL_I2C_Init+0x13c>
 8002060:	68fb      	ldr	r3, [r7, #12]
 8002062:	1e59      	subs	r1, r3, #1
 8002064:	687b      	ldr	r3, [r7, #4]
 8002066:	685b      	ldr	r3, [r3, #4]
 8002068:	005b      	lsls	r3, r3, #1
 800206a:	fbb1 f3f3 	udiv	r3, r1, r3
 800206e:	1c59      	adds	r1, r3, #1
 8002070:	f640 73fc 	movw	r3, #4092	; 0xffc
 8002074:	400b      	ands	r3, r1
 8002076:	2b00      	cmp	r3, #0
 8002078:	d00a      	beq.n	8002090 <HAL_I2C_Init+0x138>
 800207a:	68fb      	ldr	r3, [r7, #12]
 800207c:	1e59      	subs	r1, r3, #1
 800207e:	687b      	ldr	r3, [r7, #4]
 8002080:	685b      	ldr	r3, [r3, #4]
 8002082:	005b      	lsls	r3, r3, #1
 8002084:	fbb1 f3f3 	udiv	r3, r1, r3
 8002088:	3301      	adds	r3, #1
 800208a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800208e:	e051      	b.n	8002134 <HAL_I2C_Init+0x1dc>
 8002090:	2304      	movs	r3, #4
 8002092:	e04f      	b.n	8002134 <HAL_I2C_Init+0x1dc>
 8002094:	687b      	ldr	r3, [r7, #4]
 8002096:	689b      	ldr	r3, [r3, #8]
 8002098:	2b00      	cmp	r3, #0
 800209a:	d111      	bne.n	80020c0 <HAL_I2C_Init+0x168>
 800209c:	68fb      	ldr	r3, [r7, #12]
 800209e:	1e58      	subs	r0, r3, #1
 80020a0:	687b      	ldr	r3, [r7, #4]
 80020a2:	6859      	ldr	r1, [r3, #4]
 80020a4:	460b      	mov	r3, r1
 80020a6:	005b      	lsls	r3, r3, #1
 80020a8:	440b      	add	r3, r1
 80020aa:	fbb0 f3f3 	udiv	r3, r0, r3
 80020ae:	3301      	adds	r3, #1
 80020b0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80020b4:	2b00      	cmp	r3, #0
 80020b6:	bf0c      	ite	eq
 80020b8:	2301      	moveq	r3, #1
 80020ba:	2300      	movne	r3, #0
 80020bc:	b2db      	uxtb	r3, r3
 80020be:	e012      	b.n	80020e6 <HAL_I2C_Init+0x18e>
 80020c0:	68fb      	ldr	r3, [r7, #12]
 80020c2:	1e58      	subs	r0, r3, #1
 80020c4:	687b      	ldr	r3, [r7, #4]
 80020c6:	6859      	ldr	r1, [r3, #4]
 80020c8:	460b      	mov	r3, r1
 80020ca:	009b      	lsls	r3, r3, #2
 80020cc:	440b      	add	r3, r1
 80020ce:	0099      	lsls	r1, r3, #2
 80020d0:	440b      	add	r3, r1
 80020d2:	fbb0 f3f3 	udiv	r3, r0, r3
 80020d6:	3301      	adds	r3, #1
 80020d8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80020dc:	2b00      	cmp	r3, #0
 80020de:	bf0c      	ite	eq
 80020e0:	2301      	moveq	r3, #1
 80020e2:	2300      	movne	r3, #0
 80020e4:	b2db      	uxtb	r3, r3
 80020e6:	2b00      	cmp	r3, #0
 80020e8:	d001      	beq.n	80020ee <HAL_I2C_Init+0x196>
 80020ea:	2301      	movs	r3, #1
 80020ec:	e022      	b.n	8002134 <HAL_I2C_Init+0x1dc>
 80020ee:	687b      	ldr	r3, [r7, #4]
 80020f0:	689b      	ldr	r3, [r3, #8]
 80020f2:	2b00      	cmp	r3, #0
 80020f4:	d10e      	bne.n	8002114 <HAL_I2C_Init+0x1bc>
 80020f6:	68fb      	ldr	r3, [r7, #12]
 80020f8:	1e58      	subs	r0, r3, #1
 80020fa:	687b      	ldr	r3, [r7, #4]
 80020fc:	6859      	ldr	r1, [r3, #4]
 80020fe:	460b      	mov	r3, r1
 8002100:	005b      	lsls	r3, r3, #1
 8002102:	440b      	add	r3, r1
 8002104:	fbb0 f3f3 	udiv	r3, r0, r3
 8002108:	3301      	adds	r3, #1
 800210a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800210e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002112:	e00f      	b.n	8002134 <HAL_I2C_Init+0x1dc>
 8002114:	68fb      	ldr	r3, [r7, #12]
 8002116:	1e58      	subs	r0, r3, #1
 8002118:	687b      	ldr	r3, [r7, #4]
 800211a:	6859      	ldr	r1, [r3, #4]
 800211c:	460b      	mov	r3, r1
 800211e:	009b      	lsls	r3, r3, #2
 8002120:	440b      	add	r3, r1
 8002122:	0099      	lsls	r1, r3, #2
 8002124:	440b      	add	r3, r1
 8002126:	fbb0 f3f3 	udiv	r3, r0, r3
 800212a:	3301      	adds	r3, #1
 800212c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002130:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8002134:	6879      	ldr	r1, [r7, #4]
 8002136:	6809      	ldr	r1, [r1, #0]
 8002138:	4313      	orrs	r3, r2
 800213a:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 800213c:	687b      	ldr	r3, [r7, #4]
 800213e:	681b      	ldr	r3, [r3, #0]
 8002140:	681b      	ldr	r3, [r3, #0]
 8002142:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8002146:	687b      	ldr	r3, [r7, #4]
 8002148:	69da      	ldr	r2, [r3, #28]
 800214a:	687b      	ldr	r3, [r7, #4]
 800214c:	6a1b      	ldr	r3, [r3, #32]
 800214e:	431a      	orrs	r2, r3
 8002150:	687b      	ldr	r3, [r7, #4]
 8002152:	681b      	ldr	r3, [r3, #0]
 8002154:	430a      	orrs	r2, r1
 8002156:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8002158:	687b      	ldr	r3, [r7, #4]
 800215a:	681b      	ldr	r3, [r3, #0]
 800215c:	689b      	ldr	r3, [r3, #8]
 800215e:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8002162:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8002166:	687a      	ldr	r2, [r7, #4]
 8002168:	6911      	ldr	r1, [r2, #16]
 800216a:	687a      	ldr	r2, [r7, #4]
 800216c:	68d2      	ldr	r2, [r2, #12]
 800216e:	4311      	orrs	r1, r2
 8002170:	687a      	ldr	r2, [r7, #4]
 8002172:	6812      	ldr	r2, [r2, #0]
 8002174:	430b      	orrs	r3, r1
 8002176:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8002178:	687b      	ldr	r3, [r7, #4]
 800217a:	681b      	ldr	r3, [r3, #0]
 800217c:	68db      	ldr	r3, [r3, #12]
 800217e:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8002182:	687b      	ldr	r3, [r7, #4]
 8002184:	695a      	ldr	r2, [r3, #20]
 8002186:	687b      	ldr	r3, [r7, #4]
 8002188:	699b      	ldr	r3, [r3, #24]
 800218a:	431a      	orrs	r2, r3
 800218c:	687b      	ldr	r3, [r7, #4]
 800218e:	681b      	ldr	r3, [r3, #0]
 8002190:	430a      	orrs	r2, r1
 8002192:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8002194:	687b      	ldr	r3, [r7, #4]
 8002196:	681b      	ldr	r3, [r3, #0]
 8002198:	681a      	ldr	r2, [r3, #0]
 800219a:	687b      	ldr	r3, [r7, #4]
 800219c:	681b      	ldr	r3, [r3, #0]
 800219e:	f042 0201 	orr.w	r2, r2, #1
 80021a2:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80021a4:	687b      	ldr	r3, [r7, #4]
 80021a6:	2200      	movs	r2, #0
 80021a8:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 80021aa:	687b      	ldr	r3, [r7, #4]
 80021ac:	2220      	movs	r2, #32
 80021ae:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 80021b2:	687b      	ldr	r3, [r7, #4]
 80021b4:	2200      	movs	r2, #0
 80021b6:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80021b8:	687b      	ldr	r3, [r7, #4]
 80021ba:	2200      	movs	r2, #0
 80021bc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80021c0:	2300      	movs	r3, #0
}
 80021c2:	4618      	mov	r0, r3
 80021c4:	3710      	adds	r7, #16
 80021c6:	46bd      	mov	sp, r7
 80021c8:	bd80      	pop	{r7, pc}
 80021ca:	bf00      	nop
 80021cc:	000186a0 	.word	0x000186a0
 80021d0:	001e847f 	.word	0x001e847f
 80021d4:	003d08ff 	.word	0x003d08ff
 80021d8:	431bde83 	.word	0x431bde83
 80021dc:	10624dd3 	.word	0x10624dd3

080021e0 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80021e0:	b580      	push	{r7, lr}
 80021e2:	b088      	sub	sp, #32
 80021e4:	af02      	add	r7, sp, #8
 80021e6:	60f8      	str	r0, [r7, #12]
 80021e8:	607a      	str	r2, [r7, #4]
 80021ea:	461a      	mov	r2, r3
 80021ec:	460b      	mov	r3, r1
 80021ee:	817b      	strh	r3, [r7, #10]
 80021f0:	4613      	mov	r3, r2
 80021f2:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80021f4:	f7ff fbea 	bl	80019cc <HAL_GetTick>
 80021f8:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 80021fa:	68fb      	ldr	r3, [r7, #12]
 80021fc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002200:	b2db      	uxtb	r3, r3
 8002202:	2b20      	cmp	r3, #32
 8002204:	f040 80e0 	bne.w	80023c8 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8002208:	697b      	ldr	r3, [r7, #20]
 800220a:	9300      	str	r3, [sp, #0]
 800220c:	2319      	movs	r3, #25
 800220e:	2201      	movs	r2, #1
 8002210:	4970      	ldr	r1, [pc, #448]	; (80023d4 <HAL_I2C_Master_Transmit+0x1f4>)
 8002212:	68f8      	ldr	r0, [r7, #12]
 8002214:	f000 f964 	bl	80024e0 <I2C_WaitOnFlagUntilTimeout>
 8002218:	4603      	mov	r3, r0
 800221a:	2b00      	cmp	r3, #0
 800221c:	d001      	beq.n	8002222 <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 800221e:	2302      	movs	r3, #2
 8002220:	e0d3      	b.n	80023ca <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002222:	68fb      	ldr	r3, [r7, #12]
 8002224:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002228:	2b01      	cmp	r3, #1
 800222a:	d101      	bne.n	8002230 <HAL_I2C_Master_Transmit+0x50>
 800222c:	2302      	movs	r3, #2
 800222e:	e0cc      	b.n	80023ca <HAL_I2C_Master_Transmit+0x1ea>
 8002230:	68fb      	ldr	r3, [r7, #12]
 8002232:	2201      	movs	r2, #1
 8002234:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8002238:	68fb      	ldr	r3, [r7, #12]
 800223a:	681b      	ldr	r3, [r3, #0]
 800223c:	681b      	ldr	r3, [r3, #0]
 800223e:	f003 0301 	and.w	r3, r3, #1
 8002242:	2b01      	cmp	r3, #1
 8002244:	d007      	beq.n	8002256 <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8002246:	68fb      	ldr	r3, [r7, #12]
 8002248:	681b      	ldr	r3, [r3, #0]
 800224a:	681a      	ldr	r2, [r3, #0]
 800224c:	68fb      	ldr	r3, [r7, #12]
 800224e:	681b      	ldr	r3, [r3, #0]
 8002250:	f042 0201 	orr.w	r2, r2, #1
 8002254:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002256:	68fb      	ldr	r3, [r7, #12]
 8002258:	681b      	ldr	r3, [r3, #0]
 800225a:	681a      	ldr	r2, [r3, #0]
 800225c:	68fb      	ldr	r3, [r7, #12]
 800225e:	681b      	ldr	r3, [r3, #0]
 8002260:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002264:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 8002266:	68fb      	ldr	r3, [r7, #12]
 8002268:	2221      	movs	r2, #33	; 0x21
 800226a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 800226e:	68fb      	ldr	r3, [r7, #12]
 8002270:	2210      	movs	r2, #16
 8002272:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8002276:	68fb      	ldr	r3, [r7, #12]
 8002278:	2200      	movs	r2, #0
 800227a:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800227c:	68fb      	ldr	r3, [r7, #12]
 800227e:	687a      	ldr	r2, [r7, #4]
 8002280:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8002282:	68fb      	ldr	r3, [r7, #12]
 8002284:	893a      	ldrh	r2, [r7, #8]
 8002286:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8002288:	68fb      	ldr	r3, [r7, #12]
 800228a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800228c:	b29a      	uxth	r2, r3
 800228e:	68fb      	ldr	r3, [r7, #12]
 8002290:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8002292:	68fb      	ldr	r3, [r7, #12]
 8002294:	4a50      	ldr	r2, [pc, #320]	; (80023d8 <HAL_I2C_Master_Transmit+0x1f8>)
 8002296:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8002298:	8979      	ldrh	r1, [r7, #10]
 800229a:	697b      	ldr	r3, [r7, #20]
 800229c:	6a3a      	ldr	r2, [r7, #32]
 800229e:	68f8      	ldr	r0, [r7, #12]
 80022a0:	f000 f89c 	bl	80023dc <I2C_MasterRequestWrite>
 80022a4:	4603      	mov	r3, r0
 80022a6:	2b00      	cmp	r3, #0
 80022a8:	d001      	beq.n	80022ae <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 80022aa:	2301      	movs	r3, #1
 80022ac:	e08d      	b.n	80023ca <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80022ae:	2300      	movs	r3, #0
 80022b0:	613b      	str	r3, [r7, #16]
 80022b2:	68fb      	ldr	r3, [r7, #12]
 80022b4:	681b      	ldr	r3, [r3, #0]
 80022b6:	695b      	ldr	r3, [r3, #20]
 80022b8:	613b      	str	r3, [r7, #16]
 80022ba:	68fb      	ldr	r3, [r7, #12]
 80022bc:	681b      	ldr	r3, [r3, #0]
 80022be:	699b      	ldr	r3, [r3, #24]
 80022c0:	613b      	str	r3, [r7, #16]
 80022c2:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 80022c4:	e066      	b.n	8002394 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80022c6:	697a      	ldr	r2, [r7, #20]
 80022c8:	6a39      	ldr	r1, [r7, #32]
 80022ca:	68f8      	ldr	r0, [r7, #12]
 80022cc:	f000 f9de 	bl	800268c <I2C_WaitOnTXEFlagUntilTimeout>
 80022d0:	4603      	mov	r3, r0
 80022d2:	2b00      	cmp	r3, #0
 80022d4:	d00d      	beq.n	80022f2 <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80022d6:	68fb      	ldr	r3, [r7, #12]
 80022d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80022da:	2b04      	cmp	r3, #4
 80022dc:	d107      	bne.n	80022ee <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80022de:	68fb      	ldr	r3, [r7, #12]
 80022e0:	681b      	ldr	r3, [r3, #0]
 80022e2:	681a      	ldr	r2, [r3, #0]
 80022e4:	68fb      	ldr	r3, [r7, #12]
 80022e6:	681b      	ldr	r3, [r3, #0]
 80022e8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80022ec:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 80022ee:	2301      	movs	r3, #1
 80022f0:	e06b      	b.n	80023ca <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 80022f2:	68fb      	ldr	r3, [r7, #12]
 80022f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80022f6:	781a      	ldrb	r2, [r3, #0]
 80022f8:	68fb      	ldr	r3, [r7, #12]
 80022fa:	681b      	ldr	r3, [r3, #0]
 80022fc:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80022fe:	68fb      	ldr	r3, [r7, #12]
 8002300:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002302:	1c5a      	adds	r2, r3, #1
 8002304:	68fb      	ldr	r3, [r7, #12]
 8002306:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8002308:	68fb      	ldr	r3, [r7, #12]
 800230a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800230c:	b29b      	uxth	r3, r3
 800230e:	3b01      	subs	r3, #1
 8002310:	b29a      	uxth	r2, r3
 8002312:	68fb      	ldr	r3, [r7, #12]
 8002314:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8002316:	68fb      	ldr	r3, [r7, #12]
 8002318:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800231a:	3b01      	subs	r3, #1
 800231c:	b29a      	uxth	r2, r3
 800231e:	68fb      	ldr	r3, [r7, #12]
 8002320:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8002322:	68fb      	ldr	r3, [r7, #12]
 8002324:	681b      	ldr	r3, [r3, #0]
 8002326:	695b      	ldr	r3, [r3, #20]
 8002328:	f003 0304 	and.w	r3, r3, #4
 800232c:	2b04      	cmp	r3, #4
 800232e:	d11b      	bne.n	8002368 <HAL_I2C_Master_Transmit+0x188>
 8002330:	68fb      	ldr	r3, [r7, #12]
 8002332:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002334:	2b00      	cmp	r3, #0
 8002336:	d017      	beq.n	8002368 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002338:	68fb      	ldr	r3, [r7, #12]
 800233a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800233c:	781a      	ldrb	r2, [r3, #0]
 800233e:	68fb      	ldr	r3, [r7, #12]
 8002340:	681b      	ldr	r3, [r3, #0]
 8002342:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8002344:	68fb      	ldr	r3, [r7, #12]
 8002346:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002348:	1c5a      	adds	r2, r3, #1
 800234a:	68fb      	ldr	r3, [r7, #12]
 800234c:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferCount--;
 800234e:	68fb      	ldr	r3, [r7, #12]
 8002350:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002352:	b29b      	uxth	r3, r3
 8002354:	3b01      	subs	r3, #1
 8002356:	b29a      	uxth	r2, r3
 8002358:	68fb      	ldr	r3, [r7, #12]
 800235a:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 800235c:	68fb      	ldr	r3, [r7, #12]
 800235e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002360:	3b01      	subs	r3, #1
 8002362:	b29a      	uxth	r2, r3
 8002364:	68fb      	ldr	r3, [r7, #12]
 8002366:	851a      	strh	r2, [r3, #40]	; 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002368:	697a      	ldr	r2, [r7, #20]
 800236a:	6a39      	ldr	r1, [r7, #32]
 800236c:	68f8      	ldr	r0, [r7, #12]
 800236e:	f000 f9ce 	bl	800270e <I2C_WaitOnBTFFlagUntilTimeout>
 8002372:	4603      	mov	r3, r0
 8002374:	2b00      	cmp	r3, #0
 8002376:	d00d      	beq.n	8002394 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002378:	68fb      	ldr	r3, [r7, #12]
 800237a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800237c:	2b04      	cmp	r3, #4
 800237e:	d107      	bne.n	8002390 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002380:	68fb      	ldr	r3, [r7, #12]
 8002382:	681b      	ldr	r3, [r3, #0]
 8002384:	681a      	ldr	r2, [r3, #0]
 8002386:	68fb      	ldr	r3, [r7, #12]
 8002388:	681b      	ldr	r3, [r3, #0]
 800238a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800238e:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8002390:	2301      	movs	r3, #1
 8002392:	e01a      	b.n	80023ca <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 8002394:	68fb      	ldr	r3, [r7, #12]
 8002396:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002398:	2b00      	cmp	r3, #0
 800239a:	d194      	bne.n	80022c6 <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800239c:	68fb      	ldr	r3, [r7, #12]
 800239e:	681b      	ldr	r3, [r3, #0]
 80023a0:	681a      	ldr	r2, [r3, #0]
 80023a2:	68fb      	ldr	r3, [r7, #12]
 80023a4:	681b      	ldr	r3, [r3, #0]
 80023a6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80023aa:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80023ac:	68fb      	ldr	r3, [r7, #12]
 80023ae:	2220      	movs	r2, #32
 80023b0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80023b4:	68fb      	ldr	r3, [r7, #12]
 80023b6:	2200      	movs	r2, #0
 80023b8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80023bc:	68fb      	ldr	r3, [r7, #12]
 80023be:	2200      	movs	r2, #0
 80023c0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 80023c4:	2300      	movs	r3, #0
 80023c6:	e000      	b.n	80023ca <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 80023c8:	2302      	movs	r3, #2
  }
}
 80023ca:	4618      	mov	r0, r3
 80023cc:	3718      	adds	r7, #24
 80023ce:	46bd      	mov	sp, r7
 80023d0:	bd80      	pop	{r7, pc}
 80023d2:	bf00      	nop
 80023d4:	00100002 	.word	0x00100002
 80023d8:	ffff0000 	.word	0xffff0000

080023dc <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 80023dc:	b580      	push	{r7, lr}
 80023de:	b088      	sub	sp, #32
 80023e0:	af02      	add	r7, sp, #8
 80023e2:	60f8      	str	r0, [r7, #12]
 80023e4:	607a      	str	r2, [r7, #4]
 80023e6:	603b      	str	r3, [r7, #0]
 80023e8:	460b      	mov	r3, r1
 80023ea:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 80023ec:	68fb      	ldr	r3, [r7, #12]
 80023ee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80023f0:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 80023f2:	697b      	ldr	r3, [r7, #20]
 80023f4:	2b08      	cmp	r3, #8
 80023f6:	d006      	beq.n	8002406 <I2C_MasterRequestWrite+0x2a>
 80023f8:	697b      	ldr	r3, [r7, #20]
 80023fa:	2b01      	cmp	r3, #1
 80023fc:	d003      	beq.n	8002406 <I2C_MasterRequestWrite+0x2a>
 80023fe:	697b      	ldr	r3, [r7, #20]
 8002400:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8002404:	d108      	bne.n	8002418 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002406:	68fb      	ldr	r3, [r7, #12]
 8002408:	681b      	ldr	r3, [r3, #0]
 800240a:	681a      	ldr	r2, [r3, #0]
 800240c:	68fb      	ldr	r3, [r7, #12]
 800240e:	681b      	ldr	r3, [r3, #0]
 8002410:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002414:	601a      	str	r2, [r3, #0]
 8002416:	e00b      	b.n	8002430 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 8002418:	68fb      	ldr	r3, [r7, #12]
 800241a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800241c:	2b12      	cmp	r3, #18
 800241e:	d107      	bne.n	8002430 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002420:	68fb      	ldr	r3, [r7, #12]
 8002422:	681b      	ldr	r3, [r3, #0]
 8002424:	681a      	ldr	r2, [r3, #0]
 8002426:	68fb      	ldr	r3, [r7, #12]
 8002428:	681b      	ldr	r3, [r3, #0]
 800242a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800242e:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8002430:	683b      	ldr	r3, [r7, #0]
 8002432:	9300      	str	r3, [sp, #0]
 8002434:	687b      	ldr	r3, [r7, #4]
 8002436:	2200      	movs	r2, #0
 8002438:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 800243c:	68f8      	ldr	r0, [r7, #12]
 800243e:	f000 f84f 	bl	80024e0 <I2C_WaitOnFlagUntilTimeout>
 8002442:	4603      	mov	r3, r0
 8002444:	2b00      	cmp	r3, #0
 8002446:	d00d      	beq.n	8002464 <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8002448:	68fb      	ldr	r3, [r7, #12]
 800244a:	681b      	ldr	r3, [r3, #0]
 800244c:	681b      	ldr	r3, [r3, #0]
 800244e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002452:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002456:	d103      	bne.n	8002460 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8002458:	68fb      	ldr	r3, [r7, #12]
 800245a:	f44f 7200 	mov.w	r2, #512	; 0x200
 800245e:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8002460:	2303      	movs	r3, #3
 8002462:	e035      	b.n	80024d0 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8002464:	68fb      	ldr	r3, [r7, #12]
 8002466:	691b      	ldr	r3, [r3, #16]
 8002468:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800246c:	d108      	bne.n	8002480 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800246e:	897b      	ldrh	r3, [r7, #10]
 8002470:	b2db      	uxtb	r3, r3
 8002472:	461a      	mov	r2, r3
 8002474:	68fb      	ldr	r3, [r7, #12]
 8002476:	681b      	ldr	r3, [r3, #0]
 8002478:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 800247c:	611a      	str	r2, [r3, #16]
 800247e:	e01b      	b.n	80024b8 <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8002480:	897b      	ldrh	r3, [r7, #10]
 8002482:	11db      	asrs	r3, r3, #7
 8002484:	b2db      	uxtb	r3, r3
 8002486:	f003 0306 	and.w	r3, r3, #6
 800248a:	b2db      	uxtb	r3, r3
 800248c:	f063 030f 	orn	r3, r3, #15
 8002490:	b2da      	uxtb	r2, r3
 8002492:	68fb      	ldr	r3, [r7, #12]
 8002494:	681b      	ldr	r3, [r3, #0]
 8002496:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8002498:	683b      	ldr	r3, [r7, #0]
 800249a:	687a      	ldr	r2, [r7, #4]
 800249c:	490e      	ldr	r1, [pc, #56]	; (80024d8 <I2C_MasterRequestWrite+0xfc>)
 800249e:	68f8      	ldr	r0, [r7, #12]
 80024a0:	f000 f875 	bl	800258e <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80024a4:	4603      	mov	r3, r0
 80024a6:	2b00      	cmp	r3, #0
 80024a8:	d001      	beq.n	80024ae <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 80024aa:	2301      	movs	r3, #1
 80024ac:	e010      	b.n	80024d0 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 80024ae:	897b      	ldrh	r3, [r7, #10]
 80024b0:	b2da      	uxtb	r2, r3
 80024b2:	68fb      	ldr	r3, [r7, #12]
 80024b4:	681b      	ldr	r3, [r3, #0]
 80024b6:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80024b8:	683b      	ldr	r3, [r7, #0]
 80024ba:	687a      	ldr	r2, [r7, #4]
 80024bc:	4907      	ldr	r1, [pc, #28]	; (80024dc <I2C_MasterRequestWrite+0x100>)
 80024be:	68f8      	ldr	r0, [r7, #12]
 80024c0:	f000 f865 	bl	800258e <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80024c4:	4603      	mov	r3, r0
 80024c6:	2b00      	cmp	r3, #0
 80024c8:	d001      	beq.n	80024ce <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 80024ca:	2301      	movs	r3, #1
 80024cc:	e000      	b.n	80024d0 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 80024ce:	2300      	movs	r3, #0
}
 80024d0:	4618      	mov	r0, r3
 80024d2:	3718      	adds	r7, #24
 80024d4:	46bd      	mov	sp, r7
 80024d6:	bd80      	pop	{r7, pc}
 80024d8:	00010008 	.word	0x00010008
 80024dc:	00010002 	.word	0x00010002

080024e0 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 80024e0:	b580      	push	{r7, lr}
 80024e2:	b084      	sub	sp, #16
 80024e4:	af00      	add	r7, sp, #0
 80024e6:	60f8      	str	r0, [r7, #12]
 80024e8:	60b9      	str	r1, [r7, #8]
 80024ea:	603b      	str	r3, [r7, #0]
 80024ec:	4613      	mov	r3, r2
 80024ee:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80024f0:	e025      	b.n	800253e <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80024f2:	683b      	ldr	r3, [r7, #0]
 80024f4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80024f8:	d021      	beq.n	800253e <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80024fa:	f7ff fa67 	bl	80019cc <HAL_GetTick>
 80024fe:	4602      	mov	r2, r0
 8002500:	69bb      	ldr	r3, [r7, #24]
 8002502:	1ad3      	subs	r3, r2, r3
 8002504:	683a      	ldr	r2, [r7, #0]
 8002506:	429a      	cmp	r2, r3
 8002508:	d302      	bcc.n	8002510 <I2C_WaitOnFlagUntilTimeout+0x30>
 800250a:	683b      	ldr	r3, [r7, #0]
 800250c:	2b00      	cmp	r3, #0
 800250e:	d116      	bne.n	800253e <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 8002510:	68fb      	ldr	r3, [r7, #12]
 8002512:	2200      	movs	r2, #0
 8002514:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 8002516:	68fb      	ldr	r3, [r7, #12]
 8002518:	2220      	movs	r2, #32
 800251a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 800251e:	68fb      	ldr	r3, [r7, #12]
 8002520:	2200      	movs	r2, #0
 8002522:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8002526:	68fb      	ldr	r3, [r7, #12]
 8002528:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800252a:	f043 0220 	orr.w	r2, r3, #32
 800252e:	68fb      	ldr	r3, [r7, #12]
 8002530:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002532:	68fb      	ldr	r3, [r7, #12]
 8002534:	2200      	movs	r2, #0
 8002536:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800253a:	2301      	movs	r3, #1
 800253c:	e023      	b.n	8002586 <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800253e:	68bb      	ldr	r3, [r7, #8]
 8002540:	0c1b      	lsrs	r3, r3, #16
 8002542:	b2db      	uxtb	r3, r3
 8002544:	2b01      	cmp	r3, #1
 8002546:	d10d      	bne.n	8002564 <I2C_WaitOnFlagUntilTimeout+0x84>
 8002548:	68fb      	ldr	r3, [r7, #12]
 800254a:	681b      	ldr	r3, [r3, #0]
 800254c:	695b      	ldr	r3, [r3, #20]
 800254e:	43da      	mvns	r2, r3
 8002550:	68bb      	ldr	r3, [r7, #8]
 8002552:	4013      	ands	r3, r2
 8002554:	b29b      	uxth	r3, r3
 8002556:	2b00      	cmp	r3, #0
 8002558:	bf0c      	ite	eq
 800255a:	2301      	moveq	r3, #1
 800255c:	2300      	movne	r3, #0
 800255e:	b2db      	uxtb	r3, r3
 8002560:	461a      	mov	r2, r3
 8002562:	e00c      	b.n	800257e <I2C_WaitOnFlagUntilTimeout+0x9e>
 8002564:	68fb      	ldr	r3, [r7, #12]
 8002566:	681b      	ldr	r3, [r3, #0]
 8002568:	699b      	ldr	r3, [r3, #24]
 800256a:	43da      	mvns	r2, r3
 800256c:	68bb      	ldr	r3, [r7, #8]
 800256e:	4013      	ands	r3, r2
 8002570:	b29b      	uxth	r3, r3
 8002572:	2b00      	cmp	r3, #0
 8002574:	bf0c      	ite	eq
 8002576:	2301      	moveq	r3, #1
 8002578:	2300      	movne	r3, #0
 800257a:	b2db      	uxtb	r3, r3
 800257c:	461a      	mov	r2, r3
 800257e:	79fb      	ldrb	r3, [r7, #7]
 8002580:	429a      	cmp	r2, r3
 8002582:	d0b6      	beq.n	80024f2 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8002584:	2300      	movs	r3, #0
}
 8002586:	4618      	mov	r0, r3
 8002588:	3710      	adds	r7, #16
 800258a:	46bd      	mov	sp, r7
 800258c:	bd80      	pop	{r7, pc}

0800258e <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 800258e:	b580      	push	{r7, lr}
 8002590:	b084      	sub	sp, #16
 8002592:	af00      	add	r7, sp, #0
 8002594:	60f8      	str	r0, [r7, #12]
 8002596:	60b9      	str	r1, [r7, #8]
 8002598:	607a      	str	r2, [r7, #4]
 800259a:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800259c:	e051      	b.n	8002642 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800259e:	68fb      	ldr	r3, [r7, #12]
 80025a0:	681b      	ldr	r3, [r3, #0]
 80025a2:	695b      	ldr	r3, [r3, #20]
 80025a4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80025a8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80025ac:	d123      	bne.n	80025f6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80025ae:	68fb      	ldr	r3, [r7, #12]
 80025b0:	681b      	ldr	r3, [r3, #0]
 80025b2:	681a      	ldr	r2, [r3, #0]
 80025b4:	68fb      	ldr	r3, [r7, #12]
 80025b6:	681b      	ldr	r3, [r3, #0]
 80025b8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80025bc:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80025be:	68fb      	ldr	r3, [r7, #12]
 80025c0:	681b      	ldr	r3, [r3, #0]
 80025c2:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80025c6:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 80025c8:	68fb      	ldr	r3, [r7, #12]
 80025ca:	2200      	movs	r2, #0
 80025cc:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80025ce:	68fb      	ldr	r3, [r7, #12]
 80025d0:	2220      	movs	r2, #32
 80025d2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80025d6:	68fb      	ldr	r3, [r7, #12]
 80025d8:	2200      	movs	r2, #0
 80025da:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80025de:	68fb      	ldr	r3, [r7, #12]
 80025e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80025e2:	f043 0204 	orr.w	r2, r3, #4
 80025e6:	68fb      	ldr	r3, [r7, #12]
 80025e8:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80025ea:	68fb      	ldr	r3, [r7, #12]
 80025ec:	2200      	movs	r2, #0
 80025ee:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 80025f2:	2301      	movs	r3, #1
 80025f4:	e046      	b.n	8002684 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80025f6:	687b      	ldr	r3, [r7, #4]
 80025f8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80025fc:	d021      	beq.n	8002642 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80025fe:	f7ff f9e5 	bl	80019cc <HAL_GetTick>
 8002602:	4602      	mov	r2, r0
 8002604:	683b      	ldr	r3, [r7, #0]
 8002606:	1ad3      	subs	r3, r2, r3
 8002608:	687a      	ldr	r2, [r7, #4]
 800260a:	429a      	cmp	r2, r3
 800260c:	d302      	bcc.n	8002614 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 800260e:	687b      	ldr	r3, [r7, #4]
 8002610:	2b00      	cmp	r3, #0
 8002612:	d116      	bne.n	8002642 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8002614:	68fb      	ldr	r3, [r7, #12]
 8002616:	2200      	movs	r2, #0
 8002618:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800261a:	68fb      	ldr	r3, [r7, #12]
 800261c:	2220      	movs	r2, #32
 800261e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002622:	68fb      	ldr	r3, [r7, #12]
 8002624:	2200      	movs	r2, #0
 8002626:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800262a:	68fb      	ldr	r3, [r7, #12]
 800262c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800262e:	f043 0220 	orr.w	r2, r3, #32
 8002632:	68fb      	ldr	r3, [r7, #12]
 8002634:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002636:	68fb      	ldr	r3, [r7, #12]
 8002638:	2200      	movs	r2, #0
 800263a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800263e:	2301      	movs	r3, #1
 8002640:	e020      	b.n	8002684 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8002642:	68bb      	ldr	r3, [r7, #8]
 8002644:	0c1b      	lsrs	r3, r3, #16
 8002646:	b2db      	uxtb	r3, r3
 8002648:	2b01      	cmp	r3, #1
 800264a:	d10c      	bne.n	8002666 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 800264c:	68fb      	ldr	r3, [r7, #12]
 800264e:	681b      	ldr	r3, [r3, #0]
 8002650:	695b      	ldr	r3, [r3, #20]
 8002652:	43da      	mvns	r2, r3
 8002654:	68bb      	ldr	r3, [r7, #8]
 8002656:	4013      	ands	r3, r2
 8002658:	b29b      	uxth	r3, r3
 800265a:	2b00      	cmp	r3, #0
 800265c:	bf14      	ite	ne
 800265e:	2301      	movne	r3, #1
 8002660:	2300      	moveq	r3, #0
 8002662:	b2db      	uxtb	r3, r3
 8002664:	e00b      	b.n	800267e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 8002666:	68fb      	ldr	r3, [r7, #12]
 8002668:	681b      	ldr	r3, [r3, #0]
 800266a:	699b      	ldr	r3, [r3, #24]
 800266c:	43da      	mvns	r2, r3
 800266e:	68bb      	ldr	r3, [r7, #8]
 8002670:	4013      	ands	r3, r2
 8002672:	b29b      	uxth	r3, r3
 8002674:	2b00      	cmp	r3, #0
 8002676:	bf14      	ite	ne
 8002678:	2301      	movne	r3, #1
 800267a:	2300      	moveq	r3, #0
 800267c:	b2db      	uxtb	r3, r3
 800267e:	2b00      	cmp	r3, #0
 8002680:	d18d      	bne.n	800259e <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 8002682:	2300      	movs	r3, #0
}
 8002684:	4618      	mov	r0, r3
 8002686:	3710      	adds	r7, #16
 8002688:	46bd      	mov	sp, r7
 800268a:	bd80      	pop	{r7, pc}

0800268c <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800268c:	b580      	push	{r7, lr}
 800268e:	b084      	sub	sp, #16
 8002690:	af00      	add	r7, sp, #0
 8002692:	60f8      	str	r0, [r7, #12]
 8002694:	60b9      	str	r1, [r7, #8]
 8002696:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8002698:	e02d      	b.n	80026f6 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800269a:	68f8      	ldr	r0, [r7, #12]
 800269c:	f000 f878 	bl	8002790 <I2C_IsAcknowledgeFailed>
 80026a0:	4603      	mov	r3, r0
 80026a2:	2b00      	cmp	r3, #0
 80026a4:	d001      	beq.n	80026aa <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80026a6:	2301      	movs	r3, #1
 80026a8:	e02d      	b.n	8002706 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80026aa:	68bb      	ldr	r3, [r7, #8]
 80026ac:	f1b3 3fff 	cmp.w	r3, #4294967295
 80026b0:	d021      	beq.n	80026f6 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80026b2:	f7ff f98b 	bl	80019cc <HAL_GetTick>
 80026b6:	4602      	mov	r2, r0
 80026b8:	687b      	ldr	r3, [r7, #4]
 80026ba:	1ad3      	subs	r3, r2, r3
 80026bc:	68ba      	ldr	r2, [r7, #8]
 80026be:	429a      	cmp	r2, r3
 80026c0:	d302      	bcc.n	80026c8 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 80026c2:	68bb      	ldr	r3, [r7, #8]
 80026c4:	2b00      	cmp	r3, #0
 80026c6:	d116      	bne.n	80026f6 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80026c8:	68fb      	ldr	r3, [r7, #12]
 80026ca:	2200      	movs	r2, #0
 80026cc:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80026ce:	68fb      	ldr	r3, [r7, #12]
 80026d0:	2220      	movs	r2, #32
 80026d2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80026d6:	68fb      	ldr	r3, [r7, #12]
 80026d8:	2200      	movs	r2, #0
 80026da:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80026de:	68fb      	ldr	r3, [r7, #12]
 80026e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80026e2:	f043 0220 	orr.w	r2, r3, #32
 80026e6:	68fb      	ldr	r3, [r7, #12]
 80026e8:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80026ea:	68fb      	ldr	r3, [r7, #12]
 80026ec:	2200      	movs	r2, #0
 80026ee:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80026f2:	2301      	movs	r3, #1
 80026f4:	e007      	b.n	8002706 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80026f6:	68fb      	ldr	r3, [r7, #12]
 80026f8:	681b      	ldr	r3, [r3, #0]
 80026fa:	695b      	ldr	r3, [r3, #20]
 80026fc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002700:	2b80      	cmp	r3, #128	; 0x80
 8002702:	d1ca      	bne.n	800269a <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8002704:	2300      	movs	r3, #0
}
 8002706:	4618      	mov	r0, r3
 8002708:	3710      	adds	r7, #16
 800270a:	46bd      	mov	sp, r7
 800270c:	bd80      	pop	{r7, pc}

0800270e <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800270e:	b580      	push	{r7, lr}
 8002710:	b084      	sub	sp, #16
 8002712:	af00      	add	r7, sp, #0
 8002714:	60f8      	str	r0, [r7, #12]
 8002716:	60b9      	str	r1, [r7, #8]
 8002718:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 800271a:	e02d      	b.n	8002778 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800271c:	68f8      	ldr	r0, [r7, #12]
 800271e:	f000 f837 	bl	8002790 <I2C_IsAcknowledgeFailed>
 8002722:	4603      	mov	r3, r0
 8002724:	2b00      	cmp	r3, #0
 8002726:	d001      	beq.n	800272c <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8002728:	2301      	movs	r3, #1
 800272a:	e02d      	b.n	8002788 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800272c:	68bb      	ldr	r3, [r7, #8]
 800272e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002732:	d021      	beq.n	8002778 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002734:	f7ff f94a 	bl	80019cc <HAL_GetTick>
 8002738:	4602      	mov	r2, r0
 800273a:	687b      	ldr	r3, [r7, #4]
 800273c:	1ad3      	subs	r3, r2, r3
 800273e:	68ba      	ldr	r2, [r7, #8]
 8002740:	429a      	cmp	r2, r3
 8002742:	d302      	bcc.n	800274a <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8002744:	68bb      	ldr	r3, [r7, #8]
 8002746:	2b00      	cmp	r3, #0
 8002748:	d116      	bne.n	8002778 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 800274a:	68fb      	ldr	r3, [r7, #12]
 800274c:	2200      	movs	r2, #0
 800274e:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8002750:	68fb      	ldr	r3, [r7, #12]
 8002752:	2220      	movs	r2, #32
 8002754:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002758:	68fb      	ldr	r3, [r7, #12]
 800275a:	2200      	movs	r2, #0
 800275c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002760:	68fb      	ldr	r3, [r7, #12]
 8002762:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002764:	f043 0220 	orr.w	r2, r3, #32
 8002768:	68fb      	ldr	r3, [r7, #12]
 800276a:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800276c:	68fb      	ldr	r3, [r7, #12]
 800276e:	2200      	movs	r2, #0
 8002770:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8002774:	2301      	movs	r3, #1
 8002776:	e007      	b.n	8002788 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8002778:	68fb      	ldr	r3, [r7, #12]
 800277a:	681b      	ldr	r3, [r3, #0]
 800277c:	695b      	ldr	r3, [r3, #20]
 800277e:	f003 0304 	and.w	r3, r3, #4
 8002782:	2b04      	cmp	r3, #4
 8002784:	d1ca      	bne.n	800271c <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8002786:	2300      	movs	r3, #0
}
 8002788:	4618      	mov	r0, r3
 800278a:	3710      	adds	r7, #16
 800278c:	46bd      	mov	sp, r7
 800278e:	bd80      	pop	{r7, pc}

08002790 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8002790:	b480      	push	{r7}
 8002792:	b083      	sub	sp, #12
 8002794:	af00      	add	r7, sp, #0
 8002796:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8002798:	687b      	ldr	r3, [r7, #4]
 800279a:	681b      	ldr	r3, [r3, #0]
 800279c:	695b      	ldr	r3, [r3, #20]
 800279e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80027a2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80027a6:	d11b      	bne.n	80027e0 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80027a8:	687b      	ldr	r3, [r7, #4]
 80027aa:	681b      	ldr	r3, [r3, #0]
 80027ac:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80027b0:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 80027b2:	687b      	ldr	r3, [r7, #4]
 80027b4:	2200      	movs	r2, #0
 80027b6:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 80027b8:	687b      	ldr	r3, [r7, #4]
 80027ba:	2220      	movs	r2, #32
 80027bc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 80027c0:	687b      	ldr	r3, [r7, #4]
 80027c2:	2200      	movs	r2, #0
 80027c4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80027c8:	687b      	ldr	r3, [r7, #4]
 80027ca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80027cc:	f043 0204 	orr.w	r2, r3, #4
 80027d0:	687b      	ldr	r3, [r7, #4]
 80027d2:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80027d4:	687b      	ldr	r3, [r7, #4]
 80027d6:	2200      	movs	r2, #0
 80027d8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 80027dc:	2301      	movs	r3, #1
 80027de:	e000      	b.n	80027e2 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 80027e0:	2300      	movs	r3, #0
}
 80027e2:	4618      	mov	r0, r3
 80027e4:	370c      	adds	r7, #12
 80027e6:	46bd      	mov	sp, r7
 80027e8:	bc80      	pop	{r7}
 80027ea:	4770      	bx	lr

080027ec <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80027ec:	b580      	push	{r7, lr}
 80027ee:	b086      	sub	sp, #24
 80027f0:	af00      	add	r7, sp, #0
 80027f2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80027f4:	687b      	ldr	r3, [r7, #4]
 80027f6:	2b00      	cmp	r3, #0
 80027f8:	d101      	bne.n	80027fe <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80027fa:	2301      	movs	r3, #1
 80027fc:	e26c      	b.n	8002cd8 <HAL_RCC_OscConfig+0x4ec>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80027fe:	687b      	ldr	r3, [r7, #4]
 8002800:	681b      	ldr	r3, [r3, #0]
 8002802:	f003 0301 	and.w	r3, r3, #1
 8002806:	2b00      	cmp	r3, #0
 8002808:	f000 8087 	beq.w	800291a <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 800280c:	4b92      	ldr	r3, [pc, #584]	; (8002a58 <HAL_RCC_OscConfig+0x26c>)
 800280e:	685b      	ldr	r3, [r3, #4]
 8002810:	f003 030c 	and.w	r3, r3, #12
 8002814:	2b04      	cmp	r3, #4
 8002816:	d00c      	beq.n	8002832 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8002818:	4b8f      	ldr	r3, [pc, #572]	; (8002a58 <HAL_RCC_OscConfig+0x26c>)
 800281a:	685b      	ldr	r3, [r3, #4]
 800281c:	f003 030c 	and.w	r3, r3, #12
 8002820:	2b08      	cmp	r3, #8
 8002822:	d112      	bne.n	800284a <HAL_RCC_OscConfig+0x5e>
 8002824:	4b8c      	ldr	r3, [pc, #560]	; (8002a58 <HAL_RCC_OscConfig+0x26c>)
 8002826:	685b      	ldr	r3, [r3, #4]
 8002828:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800282c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002830:	d10b      	bne.n	800284a <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002832:	4b89      	ldr	r3, [pc, #548]	; (8002a58 <HAL_RCC_OscConfig+0x26c>)
 8002834:	681b      	ldr	r3, [r3, #0]
 8002836:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800283a:	2b00      	cmp	r3, #0
 800283c:	d06c      	beq.n	8002918 <HAL_RCC_OscConfig+0x12c>
 800283e:	687b      	ldr	r3, [r7, #4]
 8002840:	685b      	ldr	r3, [r3, #4]
 8002842:	2b00      	cmp	r3, #0
 8002844:	d168      	bne.n	8002918 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8002846:	2301      	movs	r3, #1
 8002848:	e246      	b.n	8002cd8 <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800284a:	687b      	ldr	r3, [r7, #4]
 800284c:	685b      	ldr	r3, [r3, #4]
 800284e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002852:	d106      	bne.n	8002862 <HAL_RCC_OscConfig+0x76>
 8002854:	4b80      	ldr	r3, [pc, #512]	; (8002a58 <HAL_RCC_OscConfig+0x26c>)
 8002856:	681b      	ldr	r3, [r3, #0]
 8002858:	4a7f      	ldr	r2, [pc, #508]	; (8002a58 <HAL_RCC_OscConfig+0x26c>)
 800285a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800285e:	6013      	str	r3, [r2, #0]
 8002860:	e02e      	b.n	80028c0 <HAL_RCC_OscConfig+0xd4>
 8002862:	687b      	ldr	r3, [r7, #4]
 8002864:	685b      	ldr	r3, [r3, #4]
 8002866:	2b00      	cmp	r3, #0
 8002868:	d10c      	bne.n	8002884 <HAL_RCC_OscConfig+0x98>
 800286a:	4b7b      	ldr	r3, [pc, #492]	; (8002a58 <HAL_RCC_OscConfig+0x26c>)
 800286c:	681b      	ldr	r3, [r3, #0]
 800286e:	4a7a      	ldr	r2, [pc, #488]	; (8002a58 <HAL_RCC_OscConfig+0x26c>)
 8002870:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002874:	6013      	str	r3, [r2, #0]
 8002876:	4b78      	ldr	r3, [pc, #480]	; (8002a58 <HAL_RCC_OscConfig+0x26c>)
 8002878:	681b      	ldr	r3, [r3, #0]
 800287a:	4a77      	ldr	r2, [pc, #476]	; (8002a58 <HAL_RCC_OscConfig+0x26c>)
 800287c:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002880:	6013      	str	r3, [r2, #0]
 8002882:	e01d      	b.n	80028c0 <HAL_RCC_OscConfig+0xd4>
 8002884:	687b      	ldr	r3, [r7, #4]
 8002886:	685b      	ldr	r3, [r3, #4]
 8002888:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800288c:	d10c      	bne.n	80028a8 <HAL_RCC_OscConfig+0xbc>
 800288e:	4b72      	ldr	r3, [pc, #456]	; (8002a58 <HAL_RCC_OscConfig+0x26c>)
 8002890:	681b      	ldr	r3, [r3, #0]
 8002892:	4a71      	ldr	r2, [pc, #452]	; (8002a58 <HAL_RCC_OscConfig+0x26c>)
 8002894:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002898:	6013      	str	r3, [r2, #0]
 800289a:	4b6f      	ldr	r3, [pc, #444]	; (8002a58 <HAL_RCC_OscConfig+0x26c>)
 800289c:	681b      	ldr	r3, [r3, #0]
 800289e:	4a6e      	ldr	r2, [pc, #440]	; (8002a58 <HAL_RCC_OscConfig+0x26c>)
 80028a0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80028a4:	6013      	str	r3, [r2, #0]
 80028a6:	e00b      	b.n	80028c0 <HAL_RCC_OscConfig+0xd4>
 80028a8:	4b6b      	ldr	r3, [pc, #428]	; (8002a58 <HAL_RCC_OscConfig+0x26c>)
 80028aa:	681b      	ldr	r3, [r3, #0]
 80028ac:	4a6a      	ldr	r2, [pc, #424]	; (8002a58 <HAL_RCC_OscConfig+0x26c>)
 80028ae:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80028b2:	6013      	str	r3, [r2, #0]
 80028b4:	4b68      	ldr	r3, [pc, #416]	; (8002a58 <HAL_RCC_OscConfig+0x26c>)
 80028b6:	681b      	ldr	r3, [r3, #0]
 80028b8:	4a67      	ldr	r2, [pc, #412]	; (8002a58 <HAL_RCC_OscConfig+0x26c>)
 80028ba:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80028be:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80028c0:	687b      	ldr	r3, [r7, #4]
 80028c2:	685b      	ldr	r3, [r3, #4]
 80028c4:	2b00      	cmp	r3, #0
 80028c6:	d013      	beq.n	80028f0 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80028c8:	f7ff f880 	bl	80019cc <HAL_GetTick>
 80028cc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80028ce:	e008      	b.n	80028e2 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80028d0:	f7ff f87c 	bl	80019cc <HAL_GetTick>
 80028d4:	4602      	mov	r2, r0
 80028d6:	693b      	ldr	r3, [r7, #16]
 80028d8:	1ad3      	subs	r3, r2, r3
 80028da:	2b64      	cmp	r3, #100	; 0x64
 80028dc:	d901      	bls.n	80028e2 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 80028de:	2303      	movs	r3, #3
 80028e0:	e1fa      	b.n	8002cd8 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80028e2:	4b5d      	ldr	r3, [pc, #372]	; (8002a58 <HAL_RCC_OscConfig+0x26c>)
 80028e4:	681b      	ldr	r3, [r3, #0]
 80028e6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80028ea:	2b00      	cmp	r3, #0
 80028ec:	d0f0      	beq.n	80028d0 <HAL_RCC_OscConfig+0xe4>
 80028ee:	e014      	b.n	800291a <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80028f0:	f7ff f86c 	bl	80019cc <HAL_GetTick>
 80028f4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80028f6:	e008      	b.n	800290a <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80028f8:	f7ff f868 	bl	80019cc <HAL_GetTick>
 80028fc:	4602      	mov	r2, r0
 80028fe:	693b      	ldr	r3, [r7, #16]
 8002900:	1ad3      	subs	r3, r2, r3
 8002902:	2b64      	cmp	r3, #100	; 0x64
 8002904:	d901      	bls.n	800290a <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8002906:	2303      	movs	r3, #3
 8002908:	e1e6      	b.n	8002cd8 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800290a:	4b53      	ldr	r3, [pc, #332]	; (8002a58 <HAL_RCC_OscConfig+0x26c>)
 800290c:	681b      	ldr	r3, [r3, #0]
 800290e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002912:	2b00      	cmp	r3, #0
 8002914:	d1f0      	bne.n	80028f8 <HAL_RCC_OscConfig+0x10c>
 8002916:	e000      	b.n	800291a <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002918:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800291a:	687b      	ldr	r3, [r7, #4]
 800291c:	681b      	ldr	r3, [r3, #0]
 800291e:	f003 0302 	and.w	r3, r3, #2
 8002922:	2b00      	cmp	r3, #0
 8002924:	d063      	beq.n	80029ee <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8002926:	4b4c      	ldr	r3, [pc, #304]	; (8002a58 <HAL_RCC_OscConfig+0x26c>)
 8002928:	685b      	ldr	r3, [r3, #4]
 800292a:	f003 030c 	and.w	r3, r3, #12
 800292e:	2b00      	cmp	r3, #0
 8002930:	d00b      	beq.n	800294a <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8002932:	4b49      	ldr	r3, [pc, #292]	; (8002a58 <HAL_RCC_OscConfig+0x26c>)
 8002934:	685b      	ldr	r3, [r3, #4]
 8002936:	f003 030c 	and.w	r3, r3, #12
 800293a:	2b08      	cmp	r3, #8
 800293c:	d11c      	bne.n	8002978 <HAL_RCC_OscConfig+0x18c>
 800293e:	4b46      	ldr	r3, [pc, #280]	; (8002a58 <HAL_RCC_OscConfig+0x26c>)
 8002940:	685b      	ldr	r3, [r3, #4]
 8002942:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002946:	2b00      	cmp	r3, #0
 8002948:	d116      	bne.n	8002978 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800294a:	4b43      	ldr	r3, [pc, #268]	; (8002a58 <HAL_RCC_OscConfig+0x26c>)
 800294c:	681b      	ldr	r3, [r3, #0]
 800294e:	f003 0302 	and.w	r3, r3, #2
 8002952:	2b00      	cmp	r3, #0
 8002954:	d005      	beq.n	8002962 <HAL_RCC_OscConfig+0x176>
 8002956:	687b      	ldr	r3, [r7, #4]
 8002958:	691b      	ldr	r3, [r3, #16]
 800295a:	2b01      	cmp	r3, #1
 800295c:	d001      	beq.n	8002962 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 800295e:	2301      	movs	r3, #1
 8002960:	e1ba      	b.n	8002cd8 <HAL_RCC_OscConfig+0x4ec>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002962:	4b3d      	ldr	r3, [pc, #244]	; (8002a58 <HAL_RCC_OscConfig+0x26c>)
 8002964:	681b      	ldr	r3, [r3, #0]
 8002966:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800296a:	687b      	ldr	r3, [r7, #4]
 800296c:	695b      	ldr	r3, [r3, #20]
 800296e:	00db      	lsls	r3, r3, #3
 8002970:	4939      	ldr	r1, [pc, #228]	; (8002a58 <HAL_RCC_OscConfig+0x26c>)
 8002972:	4313      	orrs	r3, r2
 8002974:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002976:	e03a      	b.n	80029ee <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002978:	687b      	ldr	r3, [r7, #4]
 800297a:	691b      	ldr	r3, [r3, #16]
 800297c:	2b00      	cmp	r3, #0
 800297e:	d020      	beq.n	80029c2 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002980:	4b36      	ldr	r3, [pc, #216]	; (8002a5c <HAL_RCC_OscConfig+0x270>)
 8002982:	2201      	movs	r2, #1
 8002984:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002986:	f7ff f821 	bl	80019cc <HAL_GetTick>
 800298a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800298c:	e008      	b.n	80029a0 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800298e:	f7ff f81d 	bl	80019cc <HAL_GetTick>
 8002992:	4602      	mov	r2, r0
 8002994:	693b      	ldr	r3, [r7, #16]
 8002996:	1ad3      	subs	r3, r2, r3
 8002998:	2b02      	cmp	r3, #2
 800299a:	d901      	bls.n	80029a0 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 800299c:	2303      	movs	r3, #3
 800299e:	e19b      	b.n	8002cd8 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80029a0:	4b2d      	ldr	r3, [pc, #180]	; (8002a58 <HAL_RCC_OscConfig+0x26c>)
 80029a2:	681b      	ldr	r3, [r3, #0]
 80029a4:	f003 0302 	and.w	r3, r3, #2
 80029a8:	2b00      	cmp	r3, #0
 80029aa:	d0f0      	beq.n	800298e <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80029ac:	4b2a      	ldr	r3, [pc, #168]	; (8002a58 <HAL_RCC_OscConfig+0x26c>)
 80029ae:	681b      	ldr	r3, [r3, #0]
 80029b0:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80029b4:	687b      	ldr	r3, [r7, #4]
 80029b6:	695b      	ldr	r3, [r3, #20]
 80029b8:	00db      	lsls	r3, r3, #3
 80029ba:	4927      	ldr	r1, [pc, #156]	; (8002a58 <HAL_RCC_OscConfig+0x26c>)
 80029bc:	4313      	orrs	r3, r2
 80029be:	600b      	str	r3, [r1, #0]
 80029c0:	e015      	b.n	80029ee <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80029c2:	4b26      	ldr	r3, [pc, #152]	; (8002a5c <HAL_RCC_OscConfig+0x270>)
 80029c4:	2200      	movs	r2, #0
 80029c6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80029c8:	f7ff f800 	bl	80019cc <HAL_GetTick>
 80029cc:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80029ce:	e008      	b.n	80029e2 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80029d0:	f7fe fffc 	bl	80019cc <HAL_GetTick>
 80029d4:	4602      	mov	r2, r0
 80029d6:	693b      	ldr	r3, [r7, #16]
 80029d8:	1ad3      	subs	r3, r2, r3
 80029da:	2b02      	cmp	r3, #2
 80029dc:	d901      	bls.n	80029e2 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 80029de:	2303      	movs	r3, #3
 80029e0:	e17a      	b.n	8002cd8 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80029e2:	4b1d      	ldr	r3, [pc, #116]	; (8002a58 <HAL_RCC_OscConfig+0x26c>)
 80029e4:	681b      	ldr	r3, [r3, #0]
 80029e6:	f003 0302 	and.w	r3, r3, #2
 80029ea:	2b00      	cmp	r3, #0
 80029ec:	d1f0      	bne.n	80029d0 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80029ee:	687b      	ldr	r3, [r7, #4]
 80029f0:	681b      	ldr	r3, [r3, #0]
 80029f2:	f003 0308 	and.w	r3, r3, #8
 80029f6:	2b00      	cmp	r3, #0
 80029f8:	d03a      	beq.n	8002a70 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80029fa:	687b      	ldr	r3, [r7, #4]
 80029fc:	699b      	ldr	r3, [r3, #24]
 80029fe:	2b00      	cmp	r3, #0
 8002a00:	d019      	beq.n	8002a36 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002a02:	4b17      	ldr	r3, [pc, #92]	; (8002a60 <HAL_RCC_OscConfig+0x274>)
 8002a04:	2201      	movs	r2, #1
 8002a06:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002a08:	f7fe ffe0 	bl	80019cc <HAL_GetTick>
 8002a0c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002a0e:	e008      	b.n	8002a22 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002a10:	f7fe ffdc 	bl	80019cc <HAL_GetTick>
 8002a14:	4602      	mov	r2, r0
 8002a16:	693b      	ldr	r3, [r7, #16]
 8002a18:	1ad3      	subs	r3, r2, r3
 8002a1a:	2b02      	cmp	r3, #2
 8002a1c:	d901      	bls.n	8002a22 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8002a1e:	2303      	movs	r3, #3
 8002a20:	e15a      	b.n	8002cd8 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002a22:	4b0d      	ldr	r3, [pc, #52]	; (8002a58 <HAL_RCC_OscConfig+0x26c>)
 8002a24:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a26:	f003 0302 	and.w	r3, r3, #2
 8002a2a:	2b00      	cmp	r3, #0
 8002a2c:	d0f0      	beq.n	8002a10 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8002a2e:	2001      	movs	r0, #1
 8002a30:	f000 fac4 	bl	8002fbc <RCC_Delay>
 8002a34:	e01c      	b.n	8002a70 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002a36:	4b0a      	ldr	r3, [pc, #40]	; (8002a60 <HAL_RCC_OscConfig+0x274>)
 8002a38:	2200      	movs	r2, #0
 8002a3a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002a3c:	f7fe ffc6 	bl	80019cc <HAL_GetTick>
 8002a40:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002a42:	e00f      	b.n	8002a64 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002a44:	f7fe ffc2 	bl	80019cc <HAL_GetTick>
 8002a48:	4602      	mov	r2, r0
 8002a4a:	693b      	ldr	r3, [r7, #16]
 8002a4c:	1ad3      	subs	r3, r2, r3
 8002a4e:	2b02      	cmp	r3, #2
 8002a50:	d908      	bls.n	8002a64 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8002a52:	2303      	movs	r3, #3
 8002a54:	e140      	b.n	8002cd8 <HAL_RCC_OscConfig+0x4ec>
 8002a56:	bf00      	nop
 8002a58:	40021000 	.word	0x40021000
 8002a5c:	42420000 	.word	0x42420000
 8002a60:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002a64:	4b9e      	ldr	r3, [pc, #632]	; (8002ce0 <HAL_RCC_OscConfig+0x4f4>)
 8002a66:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a68:	f003 0302 	and.w	r3, r3, #2
 8002a6c:	2b00      	cmp	r3, #0
 8002a6e:	d1e9      	bne.n	8002a44 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002a70:	687b      	ldr	r3, [r7, #4]
 8002a72:	681b      	ldr	r3, [r3, #0]
 8002a74:	f003 0304 	and.w	r3, r3, #4
 8002a78:	2b00      	cmp	r3, #0
 8002a7a:	f000 80a6 	beq.w	8002bca <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002a7e:	2300      	movs	r3, #0
 8002a80:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002a82:	4b97      	ldr	r3, [pc, #604]	; (8002ce0 <HAL_RCC_OscConfig+0x4f4>)
 8002a84:	69db      	ldr	r3, [r3, #28]
 8002a86:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002a8a:	2b00      	cmp	r3, #0
 8002a8c:	d10d      	bne.n	8002aaa <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002a8e:	4b94      	ldr	r3, [pc, #592]	; (8002ce0 <HAL_RCC_OscConfig+0x4f4>)
 8002a90:	69db      	ldr	r3, [r3, #28]
 8002a92:	4a93      	ldr	r2, [pc, #588]	; (8002ce0 <HAL_RCC_OscConfig+0x4f4>)
 8002a94:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002a98:	61d3      	str	r3, [r2, #28]
 8002a9a:	4b91      	ldr	r3, [pc, #580]	; (8002ce0 <HAL_RCC_OscConfig+0x4f4>)
 8002a9c:	69db      	ldr	r3, [r3, #28]
 8002a9e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002aa2:	60bb      	str	r3, [r7, #8]
 8002aa4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002aa6:	2301      	movs	r3, #1
 8002aa8:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002aaa:	4b8e      	ldr	r3, [pc, #568]	; (8002ce4 <HAL_RCC_OscConfig+0x4f8>)
 8002aac:	681b      	ldr	r3, [r3, #0]
 8002aae:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002ab2:	2b00      	cmp	r3, #0
 8002ab4:	d118      	bne.n	8002ae8 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002ab6:	4b8b      	ldr	r3, [pc, #556]	; (8002ce4 <HAL_RCC_OscConfig+0x4f8>)
 8002ab8:	681b      	ldr	r3, [r3, #0]
 8002aba:	4a8a      	ldr	r2, [pc, #552]	; (8002ce4 <HAL_RCC_OscConfig+0x4f8>)
 8002abc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002ac0:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002ac2:	f7fe ff83 	bl	80019cc <HAL_GetTick>
 8002ac6:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002ac8:	e008      	b.n	8002adc <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002aca:	f7fe ff7f 	bl	80019cc <HAL_GetTick>
 8002ace:	4602      	mov	r2, r0
 8002ad0:	693b      	ldr	r3, [r7, #16]
 8002ad2:	1ad3      	subs	r3, r2, r3
 8002ad4:	2b64      	cmp	r3, #100	; 0x64
 8002ad6:	d901      	bls.n	8002adc <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8002ad8:	2303      	movs	r3, #3
 8002ada:	e0fd      	b.n	8002cd8 <HAL_RCC_OscConfig+0x4ec>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002adc:	4b81      	ldr	r3, [pc, #516]	; (8002ce4 <HAL_RCC_OscConfig+0x4f8>)
 8002ade:	681b      	ldr	r3, [r3, #0]
 8002ae0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002ae4:	2b00      	cmp	r3, #0
 8002ae6:	d0f0      	beq.n	8002aca <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002ae8:	687b      	ldr	r3, [r7, #4]
 8002aea:	68db      	ldr	r3, [r3, #12]
 8002aec:	2b01      	cmp	r3, #1
 8002aee:	d106      	bne.n	8002afe <HAL_RCC_OscConfig+0x312>
 8002af0:	4b7b      	ldr	r3, [pc, #492]	; (8002ce0 <HAL_RCC_OscConfig+0x4f4>)
 8002af2:	6a1b      	ldr	r3, [r3, #32]
 8002af4:	4a7a      	ldr	r2, [pc, #488]	; (8002ce0 <HAL_RCC_OscConfig+0x4f4>)
 8002af6:	f043 0301 	orr.w	r3, r3, #1
 8002afa:	6213      	str	r3, [r2, #32]
 8002afc:	e02d      	b.n	8002b5a <HAL_RCC_OscConfig+0x36e>
 8002afe:	687b      	ldr	r3, [r7, #4]
 8002b00:	68db      	ldr	r3, [r3, #12]
 8002b02:	2b00      	cmp	r3, #0
 8002b04:	d10c      	bne.n	8002b20 <HAL_RCC_OscConfig+0x334>
 8002b06:	4b76      	ldr	r3, [pc, #472]	; (8002ce0 <HAL_RCC_OscConfig+0x4f4>)
 8002b08:	6a1b      	ldr	r3, [r3, #32]
 8002b0a:	4a75      	ldr	r2, [pc, #468]	; (8002ce0 <HAL_RCC_OscConfig+0x4f4>)
 8002b0c:	f023 0301 	bic.w	r3, r3, #1
 8002b10:	6213      	str	r3, [r2, #32]
 8002b12:	4b73      	ldr	r3, [pc, #460]	; (8002ce0 <HAL_RCC_OscConfig+0x4f4>)
 8002b14:	6a1b      	ldr	r3, [r3, #32]
 8002b16:	4a72      	ldr	r2, [pc, #456]	; (8002ce0 <HAL_RCC_OscConfig+0x4f4>)
 8002b18:	f023 0304 	bic.w	r3, r3, #4
 8002b1c:	6213      	str	r3, [r2, #32]
 8002b1e:	e01c      	b.n	8002b5a <HAL_RCC_OscConfig+0x36e>
 8002b20:	687b      	ldr	r3, [r7, #4]
 8002b22:	68db      	ldr	r3, [r3, #12]
 8002b24:	2b05      	cmp	r3, #5
 8002b26:	d10c      	bne.n	8002b42 <HAL_RCC_OscConfig+0x356>
 8002b28:	4b6d      	ldr	r3, [pc, #436]	; (8002ce0 <HAL_RCC_OscConfig+0x4f4>)
 8002b2a:	6a1b      	ldr	r3, [r3, #32]
 8002b2c:	4a6c      	ldr	r2, [pc, #432]	; (8002ce0 <HAL_RCC_OscConfig+0x4f4>)
 8002b2e:	f043 0304 	orr.w	r3, r3, #4
 8002b32:	6213      	str	r3, [r2, #32]
 8002b34:	4b6a      	ldr	r3, [pc, #424]	; (8002ce0 <HAL_RCC_OscConfig+0x4f4>)
 8002b36:	6a1b      	ldr	r3, [r3, #32]
 8002b38:	4a69      	ldr	r2, [pc, #420]	; (8002ce0 <HAL_RCC_OscConfig+0x4f4>)
 8002b3a:	f043 0301 	orr.w	r3, r3, #1
 8002b3e:	6213      	str	r3, [r2, #32]
 8002b40:	e00b      	b.n	8002b5a <HAL_RCC_OscConfig+0x36e>
 8002b42:	4b67      	ldr	r3, [pc, #412]	; (8002ce0 <HAL_RCC_OscConfig+0x4f4>)
 8002b44:	6a1b      	ldr	r3, [r3, #32]
 8002b46:	4a66      	ldr	r2, [pc, #408]	; (8002ce0 <HAL_RCC_OscConfig+0x4f4>)
 8002b48:	f023 0301 	bic.w	r3, r3, #1
 8002b4c:	6213      	str	r3, [r2, #32]
 8002b4e:	4b64      	ldr	r3, [pc, #400]	; (8002ce0 <HAL_RCC_OscConfig+0x4f4>)
 8002b50:	6a1b      	ldr	r3, [r3, #32]
 8002b52:	4a63      	ldr	r2, [pc, #396]	; (8002ce0 <HAL_RCC_OscConfig+0x4f4>)
 8002b54:	f023 0304 	bic.w	r3, r3, #4
 8002b58:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002b5a:	687b      	ldr	r3, [r7, #4]
 8002b5c:	68db      	ldr	r3, [r3, #12]
 8002b5e:	2b00      	cmp	r3, #0
 8002b60:	d015      	beq.n	8002b8e <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002b62:	f7fe ff33 	bl	80019cc <HAL_GetTick>
 8002b66:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002b68:	e00a      	b.n	8002b80 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002b6a:	f7fe ff2f 	bl	80019cc <HAL_GetTick>
 8002b6e:	4602      	mov	r2, r0
 8002b70:	693b      	ldr	r3, [r7, #16]
 8002b72:	1ad3      	subs	r3, r2, r3
 8002b74:	f241 3288 	movw	r2, #5000	; 0x1388
 8002b78:	4293      	cmp	r3, r2
 8002b7a:	d901      	bls.n	8002b80 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8002b7c:	2303      	movs	r3, #3
 8002b7e:	e0ab      	b.n	8002cd8 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002b80:	4b57      	ldr	r3, [pc, #348]	; (8002ce0 <HAL_RCC_OscConfig+0x4f4>)
 8002b82:	6a1b      	ldr	r3, [r3, #32]
 8002b84:	f003 0302 	and.w	r3, r3, #2
 8002b88:	2b00      	cmp	r3, #0
 8002b8a:	d0ee      	beq.n	8002b6a <HAL_RCC_OscConfig+0x37e>
 8002b8c:	e014      	b.n	8002bb8 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002b8e:	f7fe ff1d 	bl	80019cc <HAL_GetTick>
 8002b92:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002b94:	e00a      	b.n	8002bac <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002b96:	f7fe ff19 	bl	80019cc <HAL_GetTick>
 8002b9a:	4602      	mov	r2, r0
 8002b9c:	693b      	ldr	r3, [r7, #16]
 8002b9e:	1ad3      	subs	r3, r2, r3
 8002ba0:	f241 3288 	movw	r2, #5000	; 0x1388
 8002ba4:	4293      	cmp	r3, r2
 8002ba6:	d901      	bls.n	8002bac <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8002ba8:	2303      	movs	r3, #3
 8002baa:	e095      	b.n	8002cd8 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002bac:	4b4c      	ldr	r3, [pc, #304]	; (8002ce0 <HAL_RCC_OscConfig+0x4f4>)
 8002bae:	6a1b      	ldr	r3, [r3, #32]
 8002bb0:	f003 0302 	and.w	r3, r3, #2
 8002bb4:	2b00      	cmp	r3, #0
 8002bb6:	d1ee      	bne.n	8002b96 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8002bb8:	7dfb      	ldrb	r3, [r7, #23]
 8002bba:	2b01      	cmp	r3, #1
 8002bbc:	d105      	bne.n	8002bca <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002bbe:	4b48      	ldr	r3, [pc, #288]	; (8002ce0 <HAL_RCC_OscConfig+0x4f4>)
 8002bc0:	69db      	ldr	r3, [r3, #28]
 8002bc2:	4a47      	ldr	r2, [pc, #284]	; (8002ce0 <HAL_RCC_OscConfig+0x4f4>)
 8002bc4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002bc8:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002bca:	687b      	ldr	r3, [r7, #4]
 8002bcc:	69db      	ldr	r3, [r3, #28]
 8002bce:	2b00      	cmp	r3, #0
 8002bd0:	f000 8081 	beq.w	8002cd6 <HAL_RCC_OscConfig+0x4ea>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002bd4:	4b42      	ldr	r3, [pc, #264]	; (8002ce0 <HAL_RCC_OscConfig+0x4f4>)
 8002bd6:	685b      	ldr	r3, [r3, #4]
 8002bd8:	f003 030c 	and.w	r3, r3, #12
 8002bdc:	2b08      	cmp	r3, #8
 8002bde:	d061      	beq.n	8002ca4 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002be0:	687b      	ldr	r3, [r7, #4]
 8002be2:	69db      	ldr	r3, [r3, #28]
 8002be4:	2b02      	cmp	r3, #2
 8002be6:	d146      	bne.n	8002c76 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002be8:	4b3f      	ldr	r3, [pc, #252]	; (8002ce8 <HAL_RCC_OscConfig+0x4fc>)
 8002bea:	2200      	movs	r2, #0
 8002bec:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002bee:	f7fe feed 	bl	80019cc <HAL_GetTick>
 8002bf2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002bf4:	e008      	b.n	8002c08 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002bf6:	f7fe fee9 	bl	80019cc <HAL_GetTick>
 8002bfa:	4602      	mov	r2, r0
 8002bfc:	693b      	ldr	r3, [r7, #16]
 8002bfe:	1ad3      	subs	r3, r2, r3
 8002c00:	2b02      	cmp	r3, #2
 8002c02:	d901      	bls.n	8002c08 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8002c04:	2303      	movs	r3, #3
 8002c06:	e067      	b.n	8002cd8 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002c08:	4b35      	ldr	r3, [pc, #212]	; (8002ce0 <HAL_RCC_OscConfig+0x4f4>)
 8002c0a:	681b      	ldr	r3, [r3, #0]
 8002c0c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002c10:	2b00      	cmp	r3, #0
 8002c12:	d1f0      	bne.n	8002bf6 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8002c14:	687b      	ldr	r3, [r7, #4]
 8002c16:	6a1b      	ldr	r3, [r3, #32]
 8002c18:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002c1c:	d108      	bne.n	8002c30 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8002c1e:	4b30      	ldr	r3, [pc, #192]	; (8002ce0 <HAL_RCC_OscConfig+0x4f4>)
 8002c20:	685b      	ldr	r3, [r3, #4]
 8002c22:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8002c26:	687b      	ldr	r3, [r7, #4]
 8002c28:	689b      	ldr	r3, [r3, #8]
 8002c2a:	492d      	ldr	r1, [pc, #180]	; (8002ce0 <HAL_RCC_OscConfig+0x4f4>)
 8002c2c:	4313      	orrs	r3, r2
 8002c2e:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002c30:	4b2b      	ldr	r3, [pc, #172]	; (8002ce0 <HAL_RCC_OscConfig+0x4f4>)
 8002c32:	685b      	ldr	r3, [r3, #4]
 8002c34:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8002c38:	687b      	ldr	r3, [r7, #4]
 8002c3a:	6a19      	ldr	r1, [r3, #32]
 8002c3c:	687b      	ldr	r3, [r7, #4]
 8002c3e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c40:	430b      	orrs	r3, r1
 8002c42:	4927      	ldr	r1, [pc, #156]	; (8002ce0 <HAL_RCC_OscConfig+0x4f4>)
 8002c44:	4313      	orrs	r3, r2
 8002c46:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002c48:	4b27      	ldr	r3, [pc, #156]	; (8002ce8 <HAL_RCC_OscConfig+0x4fc>)
 8002c4a:	2201      	movs	r2, #1
 8002c4c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002c4e:	f7fe febd 	bl	80019cc <HAL_GetTick>
 8002c52:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002c54:	e008      	b.n	8002c68 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002c56:	f7fe feb9 	bl	80019cc <HAL_GetTick>
 8002c5a:	4602      	mov	r2, r0
 8002c5c:	693b      	ldr	r3, [r7, #16]
 8002c5e:	1ad3      	subs	r3, r2, r3
 8002c60:	2b02      	cmp	r3, #2
 8002c62:	d901      	bls.n	8002c68 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8002c64:	2303      	movs	r3, #3
 8002c66:	e037      	b.n	8002cd8 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002c68:	4b1d      	ldr	r3, [pc, #116]	; (8002ce0 <HAL_RCC_OscConfig+0x4f4>)
 8002c6a:	681b      	ldr	r3, [r3, #0]
 8002c6c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002c70:	2b00      	cmp	r3, #0
 8002c72:	d0f0      	beq.n	8002c56 <HAL_RCC_OscConfig+0x46a>
 8002c74:	e02f      	b.n	8002cd6 <HAL_RCC_OscConfig+0x4ea>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002c76:	4b1c      	ldr	r3, [pc, #112]	; (8002ce8 <HAL_RCC_OscConfig+0x4fc>)
 8002c78:	2200      	movs	r2, #0
 8002c7a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002c7c:	f7fe fea6 	bl	80019cc <HAL_GetTick>
 8002c80:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002c82:	e008      	b.n	8002c96 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002c84:	f7fe fea2 	bl	80019cc <HAL_GetTick>
 8002c88:	4602      	mov	r2, r0
 8002c8a:	693b      	ldr	r3, [r7, #16]
 8002c8c:	1ad3      	subs	r3, r2, r3
 8002c8e:	2b02      	cmp	r3, #2
 8002c90:	d901      	bls.n	8002c96 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8002c92:	2303      	movs	r3, #3
 8002c94:	e020      	b.n	8002cd8 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002c96:	4b12      	ldr	r3, [pc, #72]	; (8002ce0 <HAL_RCC_OscConfig+0x4f4>)
 8002c98:	681b      	ldr	r3, [r3, #0]
 8002c9a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002c9e:	2b00      	cmp	r3, #0
 8002ca0:	d1f0      	bne.n	8002c84 <HAL_RCC_OscConfig+0x498>
 8002ca2:	e018      	b.n	8002cd6 <HAL_RCC_OscConfig+0x4ea>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002ca4:	687b      	ldr	r3, [r7, #4]
 8002ca6:	69db      	ldr	r3, [r3, #28]
 8002ca8:	2b01      	cmp	r3, #1
 8002caa:	d101      	bne.n	8002cb0 <HAL_RCC_OscConfig+0x4c4>
      {
        return HAL_ERROR;
 8002cac:	2301      	movs	r3, #1
 8002cae:	e013      	b.n	8002cd8 <HAL_RCC_OscConfig+0x4ec>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8002cb0:	4b0b      	ldr	r3, [pc, #44]	; (8002ce0 <HAL_RCC_OscConfig+0x4f4>)
 8002cb2:	685b      	ldr	r3, [r3, #4]
 8002cb4:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002cb6:	68fb      	ldr	r3, [r7, #12]
 8002cb8:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8002cbc:	687b      	ldr	r3, [r7, #4]
 8002cbe:	6a1b      	ldr	r3, [r3, #32]
 8002cc0:	429a      	cmp	r2, r3
 8002cc2:	d106      	bne.n	8002cd2 <HAL_RCC_OscConfig+0x4e6>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8002cc4:	68fb      	ldr	r3, [r7, #12]
 8002cc6:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8002cca:	687b      	ldr	r3, [r7, #4]
 8002ccc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002cce:	429a      	cmp	r2, r3
 8002cd0:	d001      	beq.n	8002cd6 <HAL_RCC_OscConfig+0x4ea>
        {
          return HAL_ERROR;
 8002cd2:	2301      	movs	r3, #1
 8002cd4:	e000      	b.n	8002cd8 <HAL_RCC_OscConfig+0x4ec>
        }
      }
    }
  }

  return HAL_OK;
 8002cd6:	2300      	movs	r3, #0
}
 8002cd8:	4618      	mov	r0, r3
 8002cda:	3718      	adds	r7, #24
 8002cdc:	46bd      	mov	sp, r7
 8002cde:	bd80      	pop	{r7, pc}
 8002ce0:	40021000 	.word	0x40021000
 8002ce4:	40007000 	.word	0x40007000
 8002ce8:	42420060 	.word	0x42420060

08002cec <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002cec:	b580      	push	{r7, lr}
 8002cee:	b084      	sub	sp, #16
 8002cf0:	af00      	add	r7, sp, #0
 8002cf2:	6078      	str	r0, [r7, #4]
 8002cf4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8002cf6:	687b      	ldr	r3, [r7, #4]
 8002cf8:	2b00      	cmp	r3, #0
 8002cfa:	d101      	bne.n	8002d00 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002cfc:	2301      	movs	r3, #1
 8002cfe:	e0d0      	b.n	8002ea2 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002d00:	4b6a      	ldr	r3, [pc, #424]	; (8002eac <HAL_RCC_ClockConfig+0x1c0>)
 8002d02:	681b      	ldr	r3, [r3, #0]
 8002d04:	f003 0307 	and.w	r3, r3, #7
 8002d08:	683a      	ldr	r2, [r7, #0]
 8002d0a:	429a      	cmp	r2, r3
 8002d0c:	d910      	bls.n	8002d30 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002d0e:	4b67      	ldr	r3, [pc, #412]	; (8002eac <HAL_RCC_ClockConfig+0x1c0>)
 8002d10:	681b      	ldr	r3, [r3, #0]
 8002d12:	f023 0207 	bic.w	r2, r3, #7
 8002d16:	4965      	ldr	r1, [pc, #404]	; (8002eac <HAL_RCC_ClockConfig+0x1c0>)
 8002d18:	683b      	ldr	r3, [r7, #0]
 8002d1a:	4313      	orrs	r3, r2
 8002d1c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002d1e:	4b63      	ldr	r3, [pc, #396]	; (8002eac <HAL_RCC_ClockConfig+0x1c0>)
 8002d20:	681b      	ldr	r3, [r3, #0]
 8002d22:	f003 0307 	and.w	r3, r3, #7
 8002d26:	683a      	ldr	r2, [r7, #0]
 8002d28:	429a      	cmp	r2, r3
 8002d2a:	d001      	beq.n	8002d30 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8002d2c:	2301      	movs	r3, #1
 8002d2e:	e0b8      	b.n	8002ea2 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002d30:	687b      	ldr	r3, [r7, #4]
 8002d32:	681b      	ldr	r3, [r3, #0]
 8002d34:	f003 0302 	and.w	r3, r3, #2
 8002d38:	2b00      	cmp	r3, #0
 8002d3a:	d020      	beq.n	8002d7e <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002d3c:	687b      	ldr	r3, [r7, #4]
 8002d3e:	681b      	ldr	r3, [r3, #0]
 8002d40:	f003 0304 	and.w	r3, r3, #4
 8002d44:	2b00      	cmp	r3, #0
 8002d46:	d005      	beq.n	8002d54 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002d48:	4b59      	ldr	r3, [pc, #356]	; (8002eb0 <HAL_RCC_ClockConfig+0x1c4>)
 8002d4a:	685b      	ldr	r3, [r3, #4]
 8002d4c:	4a58      	ldr	r2, [pc, #352]	; (8002eb0 <HAL_RCC_ClockConfig+0x1c4>)
 8002d4e:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8002d52:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002d54:	687b      	ldr	r3, [r7, #4]
 8002d56:	681b      	ldr	r3, [r3, #0]
 8002d58:	f003 0308 	and.w	r3, r3, #8
 8002d5c:	2b00      	cmp	r3, #0
 8002d5e:	d005      	beq.n	8002d6c <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002d60:	4b53      	ldr	r3, [pc, #332]	; (8002eb0 <HAL_RCC_ClockConfig+0x1c4>)
 8002d62:	685b      	ldr	r3, [r3, #4]
 8002d64:	4a52      	ldr	r2, [pc, #328]	; (8002eb0 <HAL_RCC_ClockConfig+0x1c4>)
 8002d66:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8002d6a:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002d6c:	4b50      	ldr	r3, [pc, #320]	; (8002eb0 <HAL_RCC_ClockConfig+0x1c4>)
 8002d6e:	685b      	ldr	r3, [r3, #4]
 8002d70:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002d74:	687b      	ldr	r3, [r7, #4]
 8002d76:	689b      	ldr	r3, [r3, #8]
 8002d78:	494d      	ldr	r1, [pc, #308]	; (8002eb0 <HAL_RCC_ClockConfig+0x1c4>)
 8002d7a:	4313      	orrs	r3, r2
 8002d7c:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002d7e:	687b      	ldr	r3, [r7, #4]
 8002d80:	681b      	ldr	r3, [r3, #0]
 8002d82:	f003 0301 	and.w	r3, r3, #1
 8002d86:	2b00      	cmp	r3, #0
 8002d88:	d040      	beq.n	8002e0c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002d8a:	687b      	ldr	r3, [r7, #4]
 8002d8c:	685b      	ldr	r3, [r3, #4]
 8002d8e:	2b01      	cmp	r3, #1
 8002d90:	d107      	bne.n	8002da2 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002d92:	4b47      	ldr	r3, [pc, #284]	; (8002eb0 <HAL_RCC_ClockConfig+0x1c4>)
 8002d94:	681b      	ldr	r3, [r3, #0]
 8002d96:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002d9a:	2b00      	cmp	r3, #0
 8002d9c:	d115      	bne.n	8002dca <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002d9e:	2301      	movs	r3, #1
 8002da0:	e07f      	b.n	8002ea2 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002da2:	687b      	ldr	r3, [r7, #4]
 8002da4:	685b      	ldr	r3, [r3, #4]
 8002da6:	2b02      	cmp	r3, #2
 8002da8:	d107      	bne.n	8002dba <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002daa:	4b41      	ldr	r3, [pc, #260]	; (8002eb0 <HAL_RCC_ClockConfig+0x1c4>)
 8002dac:	681b      	ldr	r3, [r3, #0]
 8002dae:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002db2:	2b00      	cmp	r3, #0
 8002db4:	d109      	bne.n	8002dca <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002db6:	2301      	movs	r3, #1
 8002db8:	e073      	b.n	8002ea2 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002dba:	4b3d      	ldr	r3, [pc, #244]	; (8002eb0 <HAL_RCC_ClockConfig+0x1c4>)
 8002dbc:	681b      	ldr	r3, [r3, #0]
 8002dbe:	f003 0302 	and.w	r3, r3, #2
 8002dc2:	2b00      	cmp	r3, #0
 8002dc4:	d101      	bne.n	8002dca <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002dc6:	2301      	movs	r3, #1
 8002dc8:	e06b      	b.n	8002ea2 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002dca:	4b39      	ldr	r3, [pc, #228]	; (8002eb0 <HAL_RCC_ClockConfig+0x1c4>)
 8002dcc:	685b      	ldr	r3, [r3, #4]
 8002dce:	f023 0203 	bic.w	r2, r3, #3
 8002dd2:	687b      	ldr	r3, [r7, #4]
 8002dd4:	685b      	ldr	r3, [r3, #4]
 8002dd6:	4936      	ldr	r1, [pc, #216]	; (8002eb0 <HAL_RCC_ClockConfig+0x1c4>)
 8002dd8:	4313      	orrs	r3, r2
 8002dda:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002ddc:	f7fe fdf6 	bl	80019cc <HAL_GetTick>
 8002de0:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002de2:	e00a      	b.n	8002dfa <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002de4:	f7fe fdf2 	bl	80019cc <HAL_GetTick>
 8002de8:	4602      	mov	r2, r0
 8002dea:	68fb      	ldr	r3, [r7, #12]
 8002dec:	1ad3      	subs	r3, r2, r3
 8002dee:	f241 3288 	movw	r2, #5000	; 0x1388
 8002df2:	4293      	cmp	r3, r2
 8002df4:	d901      	bls.n	8002dfa <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002df6:	2303      	movs	r3, #3
 8002df8:	e053      	b.n	8002ea2 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002dfa:	4b2d      	ldr	r3, [pc, #180]	; (8002eb0 <HAL_RCC_ClockConfig+0x1c4>)
 8002dfc:	685b      	ldr	r3, [r3, #4]
 8002dfe:	f003 020c 	and.w	r2, r3, #12
 8002e02:	687b      	ldr	r3, [r7, #4]
 8002e04:	685b      	ldr	r3, [r3, #4]
 8002e06:	009b      	lsls	r3, r3, #2
 8002e08:	429a      	cmp	r2, r3
 8002e0a:	d1eb      	bne.n	8002de4 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002e0c:	4b27      	ldr	r3, [pc, #156]	; (8002eac <HAL_RCC_ClockConfig+0x1c0>)
 8002e0e:	681b      	ldr	r3, [r3, #0]
 8002e10:	f003 0307 	and.w	r3, r3, #7
 8002e14:	683a      	ldr	r2, [r7, #0]
 8002e16:	429a      	cmp	r2, r3
 8002e18:	d210      	bcs.n	8002e3c <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002e1a:	4b24      	ldr	r3, [pc, #144]	; (8002eac <HAL_RCC_ClockConfig+0x1c0>)
 8002e1c:	681b      	ldr	r3, [r3, #0]
 8002e1e:	f023 0207 	bic.w	r2, r3, #7
 8002e22:	4922      	ldr	r1, [pc, #136]	; (8002eac <HAL_RCC_ClockConfig+0x1c0>)
 8002e24:	683b      	ldr	r3, [r7, #0]
 8002e26:	4313      	orrs	r3, r2
 8002e28:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002e2a:	4b20      	ldr	r3, [pc, #128]	; (8002eac <HAL_RCC_ClockConfig+0x1c0>)
 8002e2c:	681b      	ldr	r3, [r3, #0]
 8002e2e:	f003 0307 	and.w	r3, r3, #7
 8002e32:	683a      	ldr	r2, [r7, #0]
 8002e34:	429a      	cmp	r2, r3
 8002e36:	d001      	beq.n	8002e3c <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8002e38:	2301      	movs	r3, #1
 8002e3a:	e032      	b.n	8002ea2 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002e3c:	687b      	ldr	r3, [r7, #4]
 8002e3e:	681b      	ldr	r3, [r3, #0]
 8002e40:	f003 0304 	and.w	r3, r3, #4
 8002e44:	2b00      	cmp	r3, #0
 8002e46:	d008      	beq.n	8002e5a <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002e48:	4b19      	ldr	r3, [pc, #100]	; (8002eb0 <HAL_RCC_ClockConfig+0x1c4>)
 8002e4a:	685b      	ldr	r3, [r3, #4]
 8002e4c:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002e50:	687b      	ldr	r3, [r7, #4]
 8002e52:	68db      	ldr	r3, [r3, #12]
 8002e54:	4916      	ldr	r1, [pc, #88]	; (8002eb0 <HAL_RCC_ClockConfig+0x1c4>)
 8002e56:	4313      	orrs	r3, r2
 8002e58:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002e5a:	687b      	ldr	r3, [r7, #4]
 8002e5c:	681b      	ldr	r3, [r3, #0]
 8002e5e:	f003 0308 	and.w	r3, r3, #8
 8002e62:	2b00      	cmp	r3, #0
 8002e64:	d009      	beq.n	8002e7a <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8002e66:	4b12      	ldr	r3, [pc, #72]	; (8002eb0 <HAL_RCC_ClockConfig+0x1c4>)
 8002e68:	685b      	ldr	r3, [r3, #4]
 8002e6a:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8002e6e:	687b      	ldr	r3, [r7, #4]
 8002e70:	691b      	ldr	r3, [r3, #16]
 8002e72:	00db      	lsls	r3, r3, #3
 8002e74:	490e      	ldr	r1, [pc, #56]	; (8002eb0 <HAL_RCC_ClockConfig+0x1c4>)
 8002e76:	4313      	orrs	r3, r2
 8002e78:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8002e7a:	f000 f821 	bl	8002ec0 <HAL_RCC_GetSysClockFreq>
 8002e7e:	4602      	mov	r2, r0
 8002e80:	4b0b      	ldr	r3, [pc, #44]	; (8002eb0 <HAL_RCC_ClockConfig+0x1c4>)
 8002e82:	685b      	ldr	r3, [r3, #4]
 8002e84:	091b      	lsrs	r3, r3, #4
 8002e86:	f003 030f 	and.w	r3, r3, #15
 8002e8a:	490a      	ldr	r1, [pc, #40]	; (8002eb4 <HAL_RCC_ClockConfig+0x1c8>)
 8002e8c:	5ccb      	ldrb	r3, [r1, r3]
 8002e8e:	fa22 f303 	lsr.w	r3, r2, r3
 8002e92:	4a09      	ldr	r2, [pc, #36]	; (8002eb8 <HAL_RCC_ClockConfig+0x1cc>)
 8002e94:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8002e96:	4b09      	ldr	r3, [pc, #36]	; (8002ebc <HAL_RCC_ClockConfig+0x1d0>)
 8002e98:	681b      	ldr	r3, [r3, #0]
 8002e9a:	4618      	mov	r0, r3
 8002e9c:	f7fe fd54 	bl	8001948 <HAL_InitTick>

  return HAL_OK;
 8002ea0:	2300      	movs	r3, #0
}
 8002ea2:	4618      	mov	r0, r3
 8002ea4:	3710      	adds	r7, #16
 8002ea6:	46bd      	mov	sp, r7
 8002ea8:	bd80      	pop	{r7, pc}
 8002eaa:	bf00      	nop
 8002eac:	40022000 	.word	0x40022000
 8002eb0:	40021000 	.word	0x40021000
 8002eb4:	08007e48 	.word	0x08007e48
 8002eb8:	20000000 	.word	0x20000000
 8002ebc:	20000004 	.word	0x20000004

08002ec0 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002ec0:	b490      	push	{r4, r7}
 8002ec2:	b08a      	sub	sp, #40	; 0x28
 8002ec4:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8002ec6:	4b2a      	ldr	r3, [pc, #168]	; (8002f70 <HAL_RCC_GetSysClockFreq+0xb0>)
 8002ec8:	1d3c      	adds	r4, r7, #4
 8002eca:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8002ecc:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8002ed0:	f240 2301 	movw	r3, #513	; 0x201
 8002ed4:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8002ed6:	2300      	movs	r3, #0
 8002ed8:	61fb      	str	r3, [r7, #28]
 8002eda:	2300      	movs	r3, #0
 8002edc:	61bb      	str	r3, [r7, #24]
 8002ede:	2300      	movs	r3, #0
 8002ee0:	627b      	str	r3, [r7, #36]	; 0x24
 8002ee2:	2300      	movs	r3, #0
 8002ee4:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8002ee6:	2300      	movs	r3, #0
 8002ee8:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8002eea:	4b22      	ldr	r3, [pc, #136]	; (8002f74 <HAL_RCC_GetSysClockFreq+0xb4>)
 8002eec:	685b      	ldr	r3, [r3, #4]
 8002eee:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8002ef0:	69fb      	ldr	r3, [r7, #28]
 8002ef2:	f003 030c 	and.w	r3, r3, #12
 8002ef6:	2b04      	cmp	r3, #4
 8002ef8:	d002      	beq.n	8002f00 <HAL_RCC_GetSysClockFreq+0x40>
 8002efa:	2b08      	cmp	r3, #8
 8002efc:	d003      	beq.n	8002f06 <HAL_RCC_GetSysClockFreq+0x46>
 8002efe:	e02d      	b.n	8002f5c <HAL_RCC_GetSysClockFreq+0x9c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8002f00:	4b1d      	ldr	r3, [pc, #116]	; (8002f78 <HAL_RCC_GetSysClockFreq+0xb8>)
 8002f02:	623b      	str	r3, [r7, #32]
      break;
 8002f04:	e02d      	b.n	8002f62 <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8002f06:	69fb      	ldr	r3, [r7, #28]
 8002f08:	0c9b      	lsrs	r3, r3, #18
 8002f0a:	f003 030f 	and.w	r3, r3, #15
 8002f0e:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8002f12:	4413      	add	r3, r2
 8002f14:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 8002f18:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8002f1a:	69fb      	ldr	r3, [r7, #28]
 8002f1c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002f20:	2b00      	cmp	r3, #0
 8002f22:	d013      	beq.n	8002f4c <HAL_RCC_GetSysClockFreq+0x8c>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8002f24:	4b13      	ldr	r3, [pc, #76]	; (8002f74 <HAL_RCC_GetSysClockFreq+0xb4>)
 8002f26:	685b      	ldr	r3, [r3, #4]
 8002f28:	0c5b      	lsrs	r3, r3, #17
 8002f2a:	f003 0301 	and.w	r3, r3, #1
 8002f2e:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8002f32:	4413      	add	r3, r2
 8002f34:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8002f38:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8002f3a:	697b      	ldr	r3, [r7, #20]
 8002f3c:	4a0e      	ldr	r2, [pc, #56]	; (8002f78 <HAL_RCC_GetSysClockFreq+0xb8>)
 8002f3e:	fb02 f203 	mul.w	r2, r2, r3
 8002f42:	69bb      	ldr	r3, [r7, #24]
 8002f44:	fbb2 f3f3 	udiv	r3, r2, r3
 8002f48:	627b      	str	r3, [r7, #36]	; 0x24
 8002f4a:	e004      	b.n	8002f56 <HAL_RCC_GetSysClockFreq+0x96>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8002f4c:	697b      	ldr	r3, [r7, #20]
 8002f4e:	4a0b      	ldr	r2, [pc, #44]	; (8002f7c <HAL_RCC_GetSysClockFreq+0xbc>)
 8002f50:	fb02 f303 	mul.w	r3, r2, r3
 8002f54:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 8002f56:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f58:	623b      	str	r3, [r7, #32]
      break;
 8002f5a:	e002      	b.n	8002f62 <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8002f5c:	4b06      	ldr	r3, [pc, #24]	; (8002f78 <HAL_RCC_GetSysClockFreq+0xb8>)
 8002f5e:	623b      	str	r3, [r7, #32]
      break;
 8002f60:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002f62:	6a3b      	ldr	r3, [r7, #32]
}
 8002f64:	4618      	mov	r0, r3
 8002f66:	3728      	adds	r7, #40	; 0x28
 8002f68:	46bd      	mov	sp, r7
 8002f6a:	bc90      	pop	{r4, r7}
 8002f6c:	4770      	bx	lr
 8002f6e:	bf00      	nop
 8002f70:	08007e38 	.word	0x08007e38
 8002f74:	40021000 	.word	0x40021000
 8002f78:	007a1200 	.word	0x007a1200
 8002f7c:	003d0900 	.word	0x003d0900

08002f80 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002f80:	b480      	push	{r7}
 8002f82:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002f84:	4b02      	ldr	r3, [pc, #8]	; (8002f90 <HAL_RCC_GetHCLKFreq+0x10>)
 8002f86:	681b      	ldr	r3, [r3, #0]
}
 8002f88:	4618      	mov	r0, r3
 8002f8a:	46bd      	mov	sp, r7
 8002f8c:	bc80      	pop	{r7}
 8002f8e:	4770      	bx	lr
 8002f90:	20000000 	.word	0x20000000

08002f94 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002f94:	b580      	push	{r7, lr}
 8002f96:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8002f98:	f7ff fff2 	bl	8002f80 <HAL_RCC_GetHCLKFreq>
 8002f9c:	4602      	mov	r2, r0
 8002f9e:	4b05      	ldr	r3, [pc, #20]	; (8002fb4 <HAL_RCC_GetPCLK1Freq+0x20>)
 8002fa0:	685b      	ldr	r3, [r3, #4]
 8002fa2:	0a1b      	lsrs	r3, r3, #8
 8002fa4:	f003 0307 	and.w	r3, r3, #7
 8002fa8:	4903      	ldr	r1, [pc, #12]	; (8002fb8 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002faa:	5ccb      	ldrb	r3, [r1, r3]
 8002fac:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002fb0:	4618      	mov	r0, r3
 8002fb2:	bd80      	pop	{r7, pc}
 8002fb4:	40021000 	.word	0x40021000
 8002fb8:	08007e58 	.word	0x08007e58

08002fbc <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8002fbc:	b480      	push	{r7}
 8002fbe:	b085      	sub	sp, #20
 8002fc0:	af00      	add	r7, sp, #0
 8002fc2:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8002fc4:	4b0a      	ldr	r3, [pc, #40]	; (8002ff0 <RCC_Delay+0x34>)
 8002fc6:	681b      	ldr	r3, [r3, #0]
 8002fc8:	4a0a      	ldr	r2, [pc, #40]	; (8002ff4 <RCC_Delay+0x38>)
 8002fca:	fba2 2303 	umull	r2, r3, r2, r3
 8002fce:	0a5b      	lsrs	r3, r3, #9
 8002fd0:	687a      	ldr	r2, [r7, #4]
 8002fd2:	fb02 f303 	mul.w	r3, r2, r3
 8002fd6:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8002fd8:	bf00      	nop
  }
  while (Delay --);
 8002fda:	68fb      	ldr	r3, [r7, #12]
 8002fdc:	1e5a      	subs	r2, r3, #1
 8002fde:	60fa      	str	r2, [r7, #12]
 8002fe0:	2b00      	cmp	r3, #0
 8002fe2:	d1f9      	bne.n	8002fd8 <RCC_Delay+0x1c>
}
 8002fe4:	bf00      	nop
 8002fe6:	bf00      	nop
 8002fe8:	3714      	adds	r7, #20
 8002fea:	46bd      	mov	sp, r7
 8002fec:	bc80      	pop	{r7}
 8002fee:	4770      	bx	lr
 8002ff0:	20000000 	.word	0x20000000
 8002ff4:	10624dd3 	.word	0x10624dd3

08002ff8 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002ff8:	b580      	push	{r7, lr}
 8002ffa:	b082      	sub	sp, #8
 8002ffc:	af00      	add	r7, sp, #0
 8002ffe:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003000:	687b      	ldr	r3, [r7, #4]
 8003002:	2b00      	cmp	r3, #0
 8003004:	d101      	bne.n	800300a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8003006:	2301      	movs	r3, #1
 8003008:	e041      	b.n	800308e <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800300a:	687b      	ldr	r3, [r7, #4]
 800300c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003010:	b2db      	uxtb	r3, r3
 8003012:	2b00      	cmp	r3, #0
 8003014:	d106      	bne.n	8003024 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003016:	687b      	ldr	r3, [r7, #4]
 8003018:	2200      	movs	r2, #0
 800301a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800301e:	6878      	ldr	r0, [r7, #4]
 8003020:	f7fe fb4a 	bl	80016b8 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003024:	687b      	ldr	r3, [r7, #4]
 8003026:	2202      	movs	r2, #2
 8003028:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800302c:	687b      	ldr	r3, [r7, #4]
 800302e:	681a      	ldr	r2, [r3, #0]
 8003030:	687b      	ldr	r3, [r7, #4]
 8003032:	3304      	adds	r3, #4
 8003034:	4619      	mov	r1, r3
 8003036:	4610      	mov	r0, r2
 8003038:	f000 f93c 	bl	80032b4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800303c:	687b      	ldr	r3, [r7, #4]
 800303e:	2201      	movs	r2, #1
 8003040:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003044:	687b      	ldr	r3, [r7, #4]
 8003046:	2201      	movs	r2, #1
 8003048:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800304c:	687b      	ldr	r3, [r7, #4]
 800304e:	2201      	movs	r2, #1
 8003050:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003054:	687b      	ldr	r3, [r7, #4]
 8003056:	2201      	movs	r2, #1
 8003058:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800305c:	687b      	ldr	r3, [r7, #4]
 800305e:	2201      	movs	r2, #1
 8003060:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003064:	687b      	ldr	r3, [r7, #4]
 8003066:	2201      	movs	r2, #1
 8003068:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800306c:	687b      	ldr	r3, [r7, #4]
 800306e:	2201      	movs	r2, #1
 8003070:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8003074:	687b      	ldr	r3, [r7, #4]
 8003076:	2201      	movs	r2, #1
 8003078:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800307c:	687b      	ldr	r3, [r7, #4]
 800307e:	2201      	movs	r2, #1
 8003080:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003084:	687b      	ldr	r3, [r7, #4]
 8003086:	2201      	movs	r2, #1
 8003088:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800308c:	2300      	movs	r3, #0
}
 800308e:	4618      	mov	r0, r3
 8003090:	3708      	adds	r7, #8
 8003092:	46bd      	mov	sp, r7
 8003094:	bd80      	pop	{r7, pc}
	...

08003098 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8003098:	b480      	push	{r7}
 800309a:	b085      	sub	sp, #20
 800309c:	af00      	add	r7, sp, #0
 800309e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80030a0:	687b      	ldr	r3, [r7, #4]
 80030a2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80030a6:	b2db      	uxtb	r3, r3
 80030a8:	2b01      	cmp	r3, #1
 80030aa:	d001      	beq.n	80030b0 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 80030ac:	2301      	movs	r3, #1
 80030ae:	e032      	b.n	8003116 <HAL_TIM_Base_Start+0x7e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80030b0:	687b      	ldr	r3, [r7, #4]
 80030b2:	2202      	movs	r2, #2
 80030b4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80030b8:	687b      	ldr	r3, [r7, #4]
 80030ba:	681b      	ldr	r3, [r3, #0]
 80030bc:	4a18      	ldr	r2, [pc, #96]	; (8003120 <HAL_TIM_Base_Start+0x88>)
 80030be:	4293      	cmp	r3, r2
 80030c0:	d00e      	beq.n	80030e0 <HAL_TIM_Base_Start+0x48>
 80030c2:	687b      	ldr	r3, [r7, #4]
 80030c4:	681b      	ldr	r3, [r3, #0]
 80030c6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80030ca:	d009      	beq.n	80030e0 <HAL_TIM_Base_Start+0x48>
 80030cc:	687b      	ldr	r3, [r7, #4]
 80030ce:	681b      	ldr	r3, [r3, #0]
 80030d0:	4a14      	ldr	r2, [pc, #80]	; (8003124 <HAL_TIM_Base_Start+0x8c>)
 80030d2:	4293      	cmp	r3, r2
 80030d4:	d004      	beq.n	80030e0 <HAL_TIM_Base_Start+0x48>
 80030d6:	687b      	ldr	r3, [r7, #4]
 80030d8:	681b      	ldr	r3, [r3, #0]
 80030da:	4a13      	ldr	r2, [pc, #76]	; (8003128 <HAL_TIM_Base_Start+0x90>)
 80030dc:	4293      	cmp	r3, r2
 80030de:	d111      	bne.n	8003104 <HAL_TIM_Base_Start+0x6c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80030e0:	687b      	ldr	r3, [r7, #4]
 80030e2:	681b      	ldr	r3, [r3, #0]
 80030e4:	689b      	ldr	r3, [r3, #8]
 80030e6:	f003 0307 	and.w	r3, r3, #7
 80030ea:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80030ec:	68fb      	ldr	r3, [r7, #12]
 80030ee:	2b06      	cmp	r3, #6
 80030f0:	d010      	beq.n	8003114 <HAL_TIM_Base_Start+0x7c>
    {
      __HAL_TIM_ENABLE(htim);
 80030f2:	687b      	ldr	r3, [r7, #4]
 80030f4:	681b      	ldr	r3, [r3, #0]
 80030f6:	681a      	ldr	r2, [r3, #0]
 80030f8:	687b      	ldr	r3, [r7, #4]
 80030fa:	681b      	ldr	r3, [r3, #0]
 80030fc:	f042 0201 	orr.w	r2, r2, #1
 8003100:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003102:	e007      	b.n	8003114 <HAL_TIM_Base_Start+0x7c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003104:	687b      	ldr	r3, [r7, #4]
 8003106:	681b      	ldr	r3, [r3, #0]
 8003108:	681a      	ldr	r2, [r3, #0]
 800310a:	687b      	ldr	r3, [r7, #4]
 800310c:	681b      	ldr	r3, [r3, #0]
 800310e:	f042 0201 	orr.w	r2, r2, #1
 8003112:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8003114:	2300      	movs	r3, #0
}
 8003116:	4618      	mov	r0, r3
 8003118:	3714      	adds	r7, #20
 800311a:	46bd      	mov	sp, r7
 800311c:	bc80      	pop	{r7}
 800311e:	4770      	bx	lr
 8003120:	40012c00 	.word	0x40012c00
 8003124:	40000400 	.word	0x40000400
 8003128:	40000800 	.word	0x40000800

0800312c <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800312c:	b580      	push	{r7, lr}
 800312e:	b084      	sub	sp, #16
 8003130:	af00      	add	r7, sp, #0
 8003132:	6078      	str	r0, [r7, #4]
 8003134:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8003136:	687b      	ldr	r3, [r7, #4]
 8003138:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800313c:	2b01      	cmp	r3, #1
 800313e:	d101      	bne.n	8003144 <HAL_TIM_ConfigClockSource+0x18>
 8003140:	2302      	movs	r3, #2
 8003142:	e0b3      	b.n	80032ac <HAL_TIM_ConfigClockSource+0x180>
 8003144:	687b      	ldr	r3, [r7, #4]
 8003146:	2201      	movs	r2, #1
 8003148:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800314c:	687b      	ldr	r3, [r7, #4]
 800314e:	2202      	movs	r2, #2
 8003150:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8003154:	687b      	ldr	r3, [r7, #4]
 8003156:	681b      	ldr	r3, [r3, #0]
 8003158:	689b      	ldr	r3, [r3, #8]
 800315a:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800315c:	68fb      	ldr	r3, [r7, #12]
 800315e:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8003162:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003164:	68fb      	ldr	r3, [r7, #12]
 8003166:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800316a:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 800316c:	687b      	ldr	r3, [r7, #4]
 800316e:	681b      	ldr	r3, [r3, #0]
 8003170:	68fa      	ldr	r2, [r7, #12]
 8003172:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8003174:	683b      	ldr	r3, [r7, #0]
 8003176:	681b      	ldr	r3, [r3, #0]
 8003178:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800317c:	d03e      	beq.n	80031fc <HAL_TIM_ConfigClockSource+0xd0>
 800317e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003182:	f200 8087 	bhi.w	8003294 <HAL_TIM_ConfigClockSource+0x168>
 8003186:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800318a:	f000 8085 	beq.w	8003298 <HAL_TIM_ConfigClockSource+0x16c>
 800318e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003192:	d87f      	bhi.n	8003294 <HAL_TIM_ConfigClockSource+0x168>
 8003194:	2b70      	cmp	r3, #112	; 0x70
 8003196:	d01a      	beq.n	80031ce <HAL_TIM_ConfigClockSource+0xa2>
 8003198:	2b70      	cmp	r3, #112	; 0x70
 800319a:	d87b      	bhi.n	8003294 <HAL_TIM_ConfigClockSource+0x168>
 800319c:	2b60      	cmp	r3, #96	; 0x60
 800319e:	d050      	beq.n	8003242 <HAL_TIM_ConfigClockSource+0x116>
 80031a0:	2b60      	cmp	r3, #96	; 0x60
 80031a2:	d877      	bhi.n	8003294 <HAL_TIM_ConfigClockSource+0x168>
 80031a4:	2b50      	cmp	r3, #80	; 0x50
 80031a6:	d03c      	beq.n	8003222 <HAL_TIM_ConfigClockSource+0xf6>
 80031a8:	2b50      	cmp	r3, #80	; 0x50
 80031aa:	d873      	bhi.n	8003294 <HAL_TIM_ConfigClockSource+0x168>
 80031ac:	2b40      	cmp	r3, #64	; 0x40
 80031ae:	d058      	beq.n	8003262 <HAL_TIM_ConfigClockSource+0x136>
 80031b0:	2b40      	cmp	r3, #64	; 0x40
 80031b2:	d86f      	bhi.n	8003294 <HAL_TIM_ConfigClockSource+0x168>
 80031b4:	2b30      	cmp	r3, #48	; 0x30
 80031b6:	d064      	beq.n	8003282 <HAL_TIM_ConfigClockSource+0x156>
 80031b8:	2b30      	cmp	r3, #48	; 0x30
 80031ba:	d86b      	bhi.n	8003294 <HAL_TIM_ConfigClockSource+0x168>
 80031bc:	2b20      	cmp	r3, #32
 80031be:	d060      	beq.n	8003282 <HAL_TIM_ConfigClockSource+0x156>
 80031c0:	2b20      	cmp	r3, #32
 80031c2:	d867      	bhi.n	8003294 <HAL_TIM_ConfigClockSource+0x168>
 80031c4:	2b00      	cmp	r3, #0
 80031c6:	d05c      	beq.n	8003282 <HAL_TIM_ConfigClockSource+0x156>
 80031c8:	2b10      	cmp	r3, #16
 80031ca:	d05a      	beq.n	8003282 <HAL_TIM_ConfigClockSource+0x156>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
        break;
      }

    default:
      break;
 80031cc:	e062      	b.n	8003294 <HAL_TIM_ConfigClockSource+0x168>
      TIM_ETR_SetConfig(htim->Instance,
 80031ce:	687b      	ldr	r3, [r7, #4]
 80031d0:	6818      	ldr	r0, [r3, #0]
 80031d2:	683b      	ldr	r3, [r7, #0]
 80031d4:	6899      	ldr	r1, [r3, #8]
 80031d6:	683b      	ldr	r3, [r7, #0]
 80031d8:	685a      	ldr	r2, [r3, #4]
 80031da:	683b      	ldr	r3, [r7, #0]
 80031dc:	68db      	ldr	r3, [r3, #12]
 80031de:	f000 f942 	bl	8003466 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 80031e2:	687b      	ldr	r3, [r7, #4]
 80031e4:	681b      	ldr	r3, [r3, #0]
 80031e6:	689b      	ldr	r3, [r3, #8]
 80031e8:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80031ea:	68fb      	ldr	r3, [r7, #12]
 80031ec:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 80031f0:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 80031f2:	687b      	ldr	r3, [r7, #4]
 80031f4:	681b      	ldr	r3, [r3, #0]
 80031f6:	68fa      	ldr	r2, [r7, #12]
 80031f8:	609a      	str	r2, [r3, #8]
      break;
 80031fa:	e04e      	b.n	800329a <HAL_TIM_ConfigClockSource+0x16e>
      TIM_ETR_SetConfig(htim->Instance,
 80031fc:	687b      	ldr	r3, [r7, #4]
 80031fe:	6818      	ldr	r0, [r3, #0]
 8003200:	683b      	ldr	r3, [r7, #0]
 8003202:	6899      	ldr	r1, [r3, #8]
 8003204:	683b      	ldr	r3, [r7, #0]
 8003206:	685a      	ldr	r2, [r3, #4]
 8003208:	683b      	ldr	r3, [r7, #0]
 800320a:	68db      	ldr	r3, [r3, #12]
 800320c:	f000 f92b 	bl	8003466 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8003210:	687b      	ldr	r3, [r7, #4]
 8003212:	681b      	ldr	r3, [r3, #0]
 8003214:	689a      	ldr	r2, [r3, #8]
 8003216:	687b      	ldr	r3, [r7, #4]
 8003218:	681b      	ldr	r3, [r3, #0]
 800321a:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800321e:	609a      	str	r2, [r3, #8]
      break;
 8003220:	e03b      	b.n	800329a <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8003222:	687b      	ldr	r3, [r7, #4]
 8003224:	6818      	ldr	r0, [r3, #0]
 8003226:	683b      	ldr	r3, [r7, #0]
 8003228:	6859      	ldr	r1, [r3, #4]
 800322a:	683b      	ldr	r3, [r7, #0]
 800322c:	68db      	ldr	r3, [r3, #12]
 800322e:	461a      	mov	r2, r3
 8003230:	f000 f8a2 	bl	8003378 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8003234:	687b      	ldr	r3, [r7, #4]
 8003236:	681b      	ldr	r3, [r3, #0]
 8003238:	2150      	movs	r1, #80	; 0x50
 800323a:	4618      	mov	r0, r3
 800323c:	f000 f8f9 	bl	8003432 <TIM_ITRx_SetConfig>
      break;
 8003240:	e02b      	b.n	800329a <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8003242:	687b      	ldr	r3, [r7, #4]
 8003244:	6818      	ldr	r0, [r3, #0]
 8003246:	683b      	ldr	r3, [r7, #0]
 8003248:	6859      	ldr	r1, [r3, #4]
 800324a:	683b      	ldr	r3, [r7, #0]
 800324c:	68db      	ldr	r3, [r3, #12]
 800324e:	461a      	mov	r2, r3
 8003250:	f000 f8c0 	bl	80033d4 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8003254:	687b      	ldr	r3, [r7, #4]
 8003256:	681b      	ldr	r3, [r3, #0]
 8003258:	2160      	movs	r1, #96	; 0x60
 800325a:	4618      	mov	r0, r3
 800325c:	f000 f8e9 	bl	8003432 <TIM_ITRx_SetConfig>
      break;
 8003260:	e01b      	b.n	800329a <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8003262:	687b      	ldr	r3, [r7, #4]
 8003264:	6818      	ldr	r0, [r3, #0]
 8003266:	683b      	ldr	r3, [r7, #0]
 8003268:	6859      	ldr	r1, [r3, #4]
 800326a:	683b      	ldr	r3, [r7, #0]
 800326c:	68db      	ldr	r3, [r3, #12]
 800326e:	461a      	mov	r2, r3
 8003270:	f000 f882 	bl	8003378 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8003274:	687b      	ldr	r3, [r7, #4]
 8003276:	681b      	ldr	r3, [r3, #0]
 8003278:	2140      	movs	r1, #64	; 0x40
 800327a:	4618      	mov	r0, r3
 800327c:	f000 f8d9 	bl	8003432 <TIM_ITRx_SetConfig>
      break;
 8003280:	e00b      	b.n	800329a <HAL_TIM_ConfigClockSource+0x16e>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8003282:	687b      	ldr	r3, [r7, #4]
 8003284:	681a      	ldr	r2, [r3, #0]
 8003286:	683b      	ldr	r3, [r7, #0]
 8003288:	681b      	ldr	r3, [r3, #0]
 800328a:	4619      	mov	r1, r3
 800328c:	4610      	mov	r0, r2
 800328e:	f000 f8d0 	bl	8003432 <TIM_ITRx_SetConfig>
        break;
 8003292:	e002      	b.n	800329a <HAL_TIM_ConfigClockSource+0x16e>
      break;
 8003294:	bf00      	nop
 8003296:	e000      	b.n	800329a <HAL_TIM_ConfigClockSource+0x16e>
      break;
 8003298:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800329a:	687b      	ldr	r3, [r7, #4]
 800329c:	2201      	movs	r2, #1
 800329e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80032a2:	687b      	ldr	r3, [r7, #4]
 80032a4:	2200      	movs	r2, #0
 80032a6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80032aa:	2300      	movs	r3, #0
}
 80032ac:	4618      	mov	r0, r3
 80032ae:	3710      	adds	r7, #16
 80032b0:	46bd      	mov	sp, r7
 80032b2:	bd80      	pop	{r7, pc}

080032b4 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80032b4:	b480      	push	{r7}
 80032b6:	b085      	sub	sp, #20
 80032b8:	af00      	add	r7, sp, #0
 80032ba:	6078      	str	r0, [r7, #4]
 80032bc:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80032be:	687b      	ldr	r3, [r7, #4]
 80032c0:	681b      	ldr	r3, [r3, #0]
 80032c2:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80032c4:	687b      	ldr	r3, [r7, #4]
 80032c6:	4a29      	ldr	r2, [pc, #164]	; (800336c <TIM_Base_SetConfig+0xb8>)
 80032c8:	4293      	cmp	r3, r2
 80032ca:	d00b      	beq.n	80032e4 <TIM_Base_SetConfig+0x30>
 80032cc:	687b      	ldr	r3, [r7, #4]
 80032ce:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80032d2:	d007      	beq.n	80032e4 <TIM_Base_SetConfig+0x30>
 80032d4:	687b      	ldr	r3, [r7, #4]
 80032d6:	4a26      	ldr	r2, [pc, #152]	; (8003370 <TIM_Base_SetConfig+0xbc>)
 80032d8:	4293      	cmp	r3, r2
 80032da:	d003      	beq.n	80032e4 <TIM_Base_SetConfig+0x30>
 80032dc:	687b      	ldr	r3, [r7, #4]
 80032de:	4a25      	ldr	r2, [pc, #148]	; (8003374 <TIM_Base_SetConfig+0xc0>)
 80032e0:	4293      	cmp	r3, r2
 80032e2:	d108      	bne.n	80032f6 <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80032e4:	68fb      	ldr	r3, [r7, #12]
 80032e6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80032ea:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80032ec:	683b      	ldr	r3, [r7, #0]
 80032ee:	685b      	ldr	r3, [r3, #4]
 80032f0:	68fa      	ldr	r2, [r7, #12]
 80032f2:	4313      	orrs	r3, r2
 80032f4:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80032f6:	687b      	ldr	r3, [r7, #4]
 80032f8:	4a1c      	ldr	r2, [pc, #112]	; (800336c <TIM_Base_SetConfig+0xb8>)
 80032fa:	4293      	cmp	r3, r2
 80032fc:	d00b      	beq.n	8003316 <TIM_Base_SetConfig+0x62>
 80032fe:	687b      	ldr	r3, [r7, #4]
 8003300:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003304:	d007      	beq.n	8003316 <TIM_Base_SetConfig+0x62>
 8003306:	687b      	ldr	r3, [r7, #4]
 8003308:	4a19      	ldr	r2, [pc, #100]	; (8003370 <TIM_Base_SetConfig+0xbc>)
 800330a:	4293      	cmp	r3, r2
 800330c:	d003      	beq.n	8003316 <TIM_Base_SetConfig+0x62>
 800330e:	687b      	ldr	r3, [r7, #4]
 8003310:	4a18      	ldr	r2, [pc, #96]	; (8003374 <TIM_Base_SetConfig+0xc0>)
 8003312:	4293      	cmp	r3, r2
 8003314:	d108      	bne.n	8003328 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8003316:	68fb      	ldr	r3, [r7, #12]
 8003318:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800331c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800331e:	683b      	ldr	r3, [r7, #0]
 8003320:	68db      	ldr	r3, [r3, #12]
 8003322:	68fa      	ldr	r2, [r7, #12]
 8003324:	4313      	orrs	r3, r2
 8003326:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003328:	68fb      	ldr	r3, [r7, #12]
 800332a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800332e:	683b      	ldr	r3, [r7, #0]
 8003330:	695b      	ldr	r3, [r3, #20]
 8003332:	4313      	orrs	r3, r2
 8003334:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8003336:	687b      	ldr	r3, [r7, #4]
 8003338:	68fa      	ldr	r2, [r7, #12]
 800333a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800333c:	683b      	ldr	r3, [r7, #0]
 800333e:	689a      	ldr	r2, [r3, #8]
 8003340:	687b      	ldr	r3, [r7, #4]
 8003342:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003344:	683b      	ldr	r3, [r7, #0]
 8003346:	681a      	ldr	r2, [r3, #0]
 8003348:	687b      	ldr	r3, [r7, #4]
 800334a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800334c:	687b      	ldr	r3, [r7, #4]
 800334e:	4a07      	ldr	r2, [pc, #28]	; (800336c <TIM_Base_SetConfig+0xb8>)
 8003350:	4293      	cmp	r3, r2
 8003352:	d103      	bne.n	800335c <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003354:	683b      	ldr	r3, [r7, #0]
 8003356:	691a      	ldr	r2, [r3, #16]
 8003358:	687b      	ldr	r3, [r7, #4]
 800335a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800335c:	687b      	ldr	r3, [r7, #4]
 800335e:	2201      	movs	r2, #1
 8003360:	615a      	str	r2, [r3, #20]
}
 8003362:	bf00      	nop
 8003364:	3714      	adds	r7, #20
 8003366:	46bd      	mov	sp, r7
 8003368:	bc80      	pop	{r7}
 800336a:	4770      	bx	lr
 800336c:	40012c00 	.word	0x40012c00
 8003370:	40000400 	.word	0x40000400
 8003374:	40000800 	.word	0x40000800

08003378 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003378:	b480      	push	{r7}
 800337a:	b087      	sub	sp, #28
 800337c:	af00      	add	r7, sp, #0
 800337e:	60f8      	str	r0, [r7, #12]
 8003380:	60b9      	str	r1, [r7, #8]
 8003382:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8003384:	68fb      	ldr	r3, [r7, #12]
 8003386:	6a1b      	ldr	r3, [r3, #32]
 8003388:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800338a:	68fb      	ldr	r3, [r7, #12]
 800338c:	6a1b      	ldr	r3, [r3, #32]
 800338e:	f023 0201 	bic.w	r2, r3, #1
 8003392:	68fb      	ldr	r3, [r7, #12]
 8003394:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003396:	68fb      	ldr	r3, [r7, #12]
 8003398:	699b      	ldr	r3, [r3, #24]
 800339a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800339c:	693b      	ldr	r3, [r7, #16]
 800339e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80033a2:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80033a4:	687b      	ldr	r3, [r7, #4]
 80033a6:	011b      	lsls	r3, r3, #4
 80033a8:	693a      	ldr	r2, [r7, #16]
 80033aa:	4313      	orrs	r3, r2
 80033ac:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80033ae:	697b      	ldr	r3, [r7, #20]
 80033b0:	f023 030a 	bic.w	r3, r3, #10
 80033b4:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80033b6:	697a      	ldr	r2, [r7, #20]
 80033b8:	68bb      	ldr	r3, [r7, #8]
 80033ba:	4313      	orrs	r3, r2
 80033bc:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80033be:	68fb      	ldr	r3, [r7, #12]
 80033c0:	693a      	ldr	r2, [r7, #16]
 80033c2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80033c4:	68fb      	ldr	r3, [r7, #12]
 80033c6:	697a      	ldr	r2, [r7, #20]
 80033c8:	621a      	str	r2, [r3, #32]
}
 80033ca:	bf00      	nop
 80033cc:	371c      	adds	r7, #28
 80033ce:	46bd      	mov	sp, r7
 80033d0:	bc80      	pop	{r7}
 80033d2:	4770      	bx	lr

080033d4 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80033d4:	b480      	push	{r7}
 80033d6:	b087      	sub	sp, #28
 80033d8:	af00      	add	r7, sp, #0
 80033da:	60f8      	str	r0, [r7, #12]
 80033dc:	60b9      	str	r1, [r7, #8]
 80033de:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80033e0:	68fb      	ldr	r3, [r7, #12]
 80033e2:	6a1b      	ldr	r3, [r3, #32]
 80033e4:	f023 0210 	bic.w	r2, r3, #16
 80033e8:	68fb      	ldr	r3, [r7, #12]
 80033ea:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80033ec:	68fb      	ldr	r3, [r7, #12]
 80033ee:	699b      	ldr	r3, [r3, #24]
 80033f0:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80033f2:	68fb      	ldr	r3, [r7, #12]
 80033f4:	6a1b      	ldr	r3, [r3, #32]
 80033f6:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80033f8:	697b      	ldr	r3, [r7, #20]
 80033fa:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80033fe:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8003400:	687b      	ldr	r3, [r7, #4]
 8003402:	031b      	lsls	r3, r3, #12
 8003404:	697a      	ldr	r2, [r7, #20]
 8003406:	4313      	orrs	r3, r2
 8003408:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800340a:	693b      	ldr	r3, [r7, #16]
 800340c:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8003410:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8003412:	68bb      	ldr	r3, [r7, #8]
 8003414:	011b      	lsls	r3, r3, #4
 8003416:	693a      	ldr	r2, [r7, #16]
 8003418:	4313      	orrs	r3, r2
 800341a:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800341c:	68fb      	ldr	r3, [r7, #12]
 800341e:	697a      	ldr	r2, [r7, #20]
 8003420:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003422:	68fb      	ldr	r3, [r7, #12]
 8003424:	693a      	ldr	r2, [r7, #16]
 8003426:	621a      	str	r2, [r3, #32]
}
 8003428:	bf00      	nop
 800342a:	371c      	adds	r7, #28
 800342c:	46bd      	mov	sp, r7
 800342e:	bc80      	pop	{r7}
 8003430:	4770      	bx	lr

08003432 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8003432:	b480      	push	{r7}
 8003434:	b085      	sub	sp, #20
 8003436:	af00      	add	r7, sp, #0
 8003438:	6078      	str	r0, [r7, #4]
 800343a:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800343c:	687b      	ldr	r3, [r7, #4]
 800343e:	689b      	ldr	r3, [r3, #8]
 8003440:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8003442:	68fb      	ldr	r3, [r7, #12]
 8003444:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003448:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800344a:	683a      	ldr	r2, [r7, #0]
 800344c:	68fb      	ldr	r3, [r7, #12]
 800344e:	4313      	orrs	r3, r2
 8003450:	f043 0307 	orr.w	r3, r3, #7
 8003454:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003456:	687b      	ldr	r3, [r7, #4]
 8003458:	68fa      	ldr	r2, [r7, #12]
 800345a:	609a      	str	r2, [r3, #8]
}
 800345c:	bf00      	nop
 800345e:	3714      	adds	r7, #20
 8003460:	46bd      	mov	sp, r7
 8003462:	bc80      	pop	{r7}
 8003464:	4770      	bx	lr

08003466 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8003466:	b480      	push	{r7}
 8003468:	b087      	sub	sp, #28
 800346a:	af00      	add	r7, sp, #0
 800346c:	60f8      	str	r0, [r7, #12]
 800346e:	60b9      	str	r1, [r7, #8]
 8003470:	607a      	str	r2, [r7, #4]
 8003472:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8003474:	68fb      	ldr	r3, [r7, #12]
 8003476:	689b      	ldr	r3, [r3, #8]
 8003478:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800347a:	697b      	ldr	r3, [r7, #20]
 800347c:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8003480:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8003482:	683b      	ldr	r3, [r7, #0]
 8003484:	021a      	lsls	r2, r3, #8
 8003486:	687b      	ldr	r3, [r7, #4]
 8003488:	431a      	orrs	r2, r3
 800348a:	68bb      	ldr	r3, [r7, #8]
 800348c:	4313      	orrs	r3, r2
 800348e:	697a      	ldr	r2, [r7, #20]
 8003490:	4313      	orrs	r3, r2
 8003492:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003494:	68fb      	ldr	r3, [r7, #12]
 8003496:	697a      	ldr	r2, [r7, #20]
 8003498:	609a      	str	r2, [r3, #8]
}
 800349a:	bf00      	nop
 800349c:	371c      	adds	r7, #28
 800349e:	46bd      	mov	sp, r7
 80034a0:	bc80      	pop	{r7}
 80034a2:	4770      	bx	lr

080034a4 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 80034a4:	b480      	push	{r7}
 80034a6:	b085      	sub	sp, #20
 80034a8:	af00      	add	r7, sp, #0
 80034aa:	6078      	str	r0, [r7, #4]
 80034ac:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80034ae:	687b      	ldr	r3, [r7, #4]
 80034b0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80034b4:	2b01      	cmp	r3, #1
 80034b6:	d101      	bne.n	80034bc <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80034b8:	2302      	movs	r3, #2
 80034ba:	e046      	b.n	800354a <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 80034bc:	687b      	ldr	r3, [r7, #4]
 80034be:	2201      	movs	r2, #1
 80034c0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80034c4:	687b      	ldr	r3, [r7, #4]
 80034c6:	2202      	movs	r2, #2
 80034c8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80034cc:	687b      	ldr	r3, [r7, #4]
 80034ce:	681b      	ldr	r3, [r3, #0]
 80034d0:	685b      	ldr	r3, [r3, #4]
 80034d2:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80034d4:	687b      	ldr	r3, [r7, #4]
 80034d6:	681b      	ldr	r3, [r3, #0]
 80034d8:	689b      	ldr	r3, [r3, #8]
 80034da:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80034dc:	68fb      	ldr	r3, [r7, #12]
 80034de:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80034e2:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80034e4:	683b      	ldr	r3, [r7, #0]
 80034e6:	681b      	ldr	r3, [r3, #0]
 80034e8:	68fa      	ldr	r2, [r7, #12]
 80034ea:	4313      	orrs	r3, r2
 80034ec:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80034ee:	687b      	ldr	r3, [r7, #4]
 80034f0:	681b      	ldr	r3, [r3, #0]
 80034f2:	68fa      	ldr	r2, [r7, #12]
 80034f4:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80034f6:	687b      	ldr	r3, [r7, #4]
 80034f8:	681b      	ldr	r3, [r3, #0]
 80034fa:	4a16      	ldr	r2, [pc, #88]	; (8003554 <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 80034fc:	4293      	cmp	r3, r2
 80034fe:	d00e      	beq.n	800351e <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8003500:	687b      	ldr	r3, [r7, #4]
 8003502:	681b      	ldr	r3, [r3, #0]
 8003504:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003508:	d009      	beq.n	800351e <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 800350a:	687b      	ldr	r3, [r7, #4]
 800350c:	681b      	ldr	r3, [r3, #0]
 800350e:	4a12      	ldr	r2, [pc, #72]	; (8003558 <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 8003510:	4293      	cmp	r3, r2
 8003512:	d004      	beq.n	800351e <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8003514:	687b      	ldr	r3, [r7, #4]
 8003516:	681b      	ldr	r3, [r3, #0]
 8003518:	4a10      	ldr	r2, [pc, #64]	; (800355c <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 800351a:	4293      	cmp	r3, r2
 800351c:	d10c      	bne.n	8003538 <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800351e:	68bb      	ldr	r3, [r7, #8]
 8003520:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003524:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8003526:	683b      	ldr	r3, [r7, #0]
 8003528:	685b      	ldr	r3, [r3, #4]
 800352a:	68ba      	ldr	r2, [r7, #8]
 800352c:	4313      	orrs	r3, r2
 800352e:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8003530:	687b      	ldr	r3, [r7, #4]
 8003532:	681b      	ldr	r3, [r3, #0]
 8003534:	68ba      	ldr	r2, [r7, #8]
 8003536:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8003538:	687b      	ldr	r3, [r7, #4]
 800353a:	2201      	movs	r2, #1
 800353c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003540:	687b      	ldr	r3, [r7, #4]
 8003542:	2200      	movs	r2, #0
 8003544:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8003548:	2300      	movs	r3, #0
}
 800354a:	4618      	mov	r0, r3
 800354c:	3714      	adds	r7, #20
 800354e:	46bd      	mov	sp, r7
 8003550:	bc80      	pop	{r7}
 8003552:	4770      	bx	lr
 8003554:	40012c00 	.word	0x40012c00
 8003558:	40000400 	.word	0x40000400
 800355c:	40000800 	.word	0x40000800

08003560 <__errno>:
 8003560:	4b01      	ldr	r3, [pc, #4]	; (8003568 <__errno+0x8>)
 8003562:	6818      	ldr	r0, [r3, #0]
 8003564:	4770      	bx	lr
 8003566:	bf00      	nop
 8003568:	2000000c 	.word	0x2000000c

0800356c <__libc_init_array>:
 800356c:	b570      	push	{r4, r5, r6, lr}
 800356e:	2600      	movs	r6, #0
 8003570:	4d0c      	ldr	r5, [pc, #48]	; (80035a4 <__libc_init_array+0x38>)
 8003572:	4c0d      	ldr	r4, [pc, #52]	; (80035a8 <__libc_init_array+0x3c>)
 8003574:	1b64      	subs	r4, r4, r5
 8003576:	10a4      	asrs	r4, r4, #2
 8003578:	42a6      	cmp	r6, r4
 800357a:	d109      	bne.n	8003590 <__libc_init_array+0x24>
 800357c:	f004 fc2a 	bl	8007dd4 <_init>
 8003580:	2600      	movs	r6, #0
 8003582:	4d0a      	ldr	r5, [pc, #40]	; (80035ac <__libc_init_array+0x40>)
 8003584:	4c0a      	ldr	r4, [pc, #40]	; (80035b0 <__libc_init_array+0x44>)
 8003586:	1b64      	subs	r4, r4, r5
 8003588:	10a4      	asrs	r4, r4, #2
 800358a:	42a6      	cmp	r6, r4
 800358c:	d105      	bne.n	800359a <__libc_init_array+0x2e>
 800358e:	bd70      	pop	{r4, r5, r6, pc}
 8003590:	f855 3b04 	ldr.w	r3, [r5], #4
 8003594:	4798      	blx	r3
 8003596:	3601      	adds	r6, #1
 8003598:	e7ee      	b.n	8003578 <__libc_init_array+0xc>
 800359a:	f855 3b04 	ldr.w	r3, [r5], #4
 800359e:	4798      	blx	r3
 80035a0:	3601      	adds	r6, #1
 80035a2:	e7f2      	b.n	800358a <__libc_init_array+0x1e>
 80035a4:	08008314 	.word	0x08008314
 80035a8:	08008314 	.word	0x08008314
 80035ac:	08008314 	.word	0x08008314
 80035b0:	08008318 	.word	0x08008318

080035b4 <memset>:
 80035b4:	4603      	mov	r3, r0
 80035b6:	4402      	add	r2, r0
 80035b8:	4293      	cmp	r3, r2
 80035ba:	d100      	bne.n	80035be <memset+0xa>
 80035bc:	4770      	bx	lr
 80035be:	f803 1b01 	strb.w	r1, [r3], #1
 80035c2:	e7f9      	b.n	80035b8 <memset+0x4>

080035c4 <__cvt>:
 80035c4:	2b00      	cmp	r3, #0
 80035c6:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80035ca:	461f      	mov	r7, r3
 80035cc:	bfbb      	ittet	lt
 80035ce:	f103 4300 	addlt.w	r3, r3, #2147483648	; 0x80000000
 80035d2:	461f      	movlt	r7, r3
 80035d4:	2300      	movge	r3, #0
 80035d6:	232d      	movlt	r3, #45	; 0x2d
 80035d8:	b088      	sub	sp, #32
 80035da:	4614      	mov	r4, r2
 80035dc:	9a12      	ldr	r2, [sp, #72]	; 0x48
 80035de:	9d10      	ldr	r5, [sp, #64]	; 0x40
 80035e0:	7013      	strb	r3, [r2, #0]
 80035e2:	9b14      	ldr	r3, [sp, #80]	; 0x50
 80035e4:	f8dd a04c 	ldr.w	sl, [sp, #76]	; 0x4c
 80035e8:	f023 0820 	bic.w	r8, r3, #32
 80035ec:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 80035f0:	d005      	beq.n	80035fe <__cvt+0x3a>
 80035f2:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 80035f6:	d100      	bne.n	80035fa <__cvt+0x36>
 80035f8:	3501      	adds	r5, #1
 80035fa:	2302      	movs	r3, #2
 80035fc:	e000      	b.n	8003600 <__cvt+0x3c>
 80035fe:	2303      	movs	r3, #3
 8003600:	aa07      	add	r2, sp, #28
 8003602:	9204      	str	r2, [sp, #16]
 8003604:	aa06      	add	r2, sp, #24
 8003606:	e9cd a202 	strd	sl, r2, [sp, #8]
 800360a:	e9cd 3500 	strd	r3, r5, [sp]
 800360e:	4622      	mov	r2, r4
 8003610:	463b      	mov	r3, r7
 8003612:	f001 fda1 	bl	8005158 <_dtoa_r>
 8003616:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 800361a:	4606      	mov	r6, r0
 800361c:	d102      	bne.n	8003624 <__cvt+0x60>
 800361e:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8003620:	07db      	lsls	r3, r3, #31
 8003622:	d522      	bpl.n	800366a <__cvt+0xa6>
 8003624:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8003628:	eb06 0905 	add.w	r9, r6, r5
 800362c:	d110      	bne.n	8003650 <__cvt+0x8c>
 800362e:	7833      	ldrb	r3, [r6, #0]
 8003630:	2b30      	cmp	r3, #48	; 0x30
 8003632:	d10a      	bne.n	800364a <__cvt+0x86>
 8003634:	2200      	movs	r2, #0
 8003636:	2300      	movs	r3, #0
 8003638:	4620      	mov	r0, r4
 800363a:	4639      	mov	r1, r7
 800363c:	f7fd f9b4 	bl	80009a8 <__aeabi_dcmpeq>
 8003640:	b918      	cbnz	r0, 800364a <__cvt+0x86>
 8003642:	f1c5 0501 	rsb	r5, r5, #1
 8003646:	f8ca 5000 	str.w	r5, [sl]
 800364a:	f8da 3000 	ldr.w	r3, [sl]
 800364e:	4499      	add	r9, r3
 8003650:	2200      	movs	r2, #0
 8003652:	2300      	movs	r3, #0
 8003654:	4620      	mov	r0, r4
 8003656:	4639      	mov	r1, r7
 8003658:	f7fd f9a6 	bl	80009a8 <__aeabi_dcmpeq>
 800365c:	b108      	cbz	r0, 8003662 <__cvt+0x9e>
 800365e:	f8cd 901c 	str.w	r9, [sp, #28]
 8003662:	2230      	movs	r2, #48	; 0x30
 8003664:	9b07      	ldr	r3, [sp, #28]
 8003666:	454b      	cmp	r3, r9
 8003668:	d307      	bcc.n	800367a <__cvt+0xb6>
 800366a:	4630      	mov	r0, r6
 800366c:	9b07      	ldr	r3, [sp, #28]
 800366e:	9a15      	ldr	r2, [sp, #84]	; 0x54
 8003670:	1b9b      	subs	r3, r3, r6
 8003672:	6013      	str	r3, [r2, #0]
 8003674:	b008      	add	sp, #32
 8003676:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800367a:	1c59      	adds	r1, r3, #1
 800367c:	9107      	str	r1, [sp, #28]
 800367e:	701a      	strb	r2, [r3, #0]
 8003680:	e7f0      	b.n	8003664 <__cvt+0xa0>

08003682 <__exponent>:
 8003682:	4603      	mov	r3, r0
 8003684:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8003686:	2900      	cmp	r1, #0
 8003688:	f803 2b02 	strb.w	r2, [r3], #2
 800368c:	bfb6      	itet	lt
 800368e:	222d      	movlt	r2, #45	; 0x2d
 8003690:	222b      	movge	r2, #43	; 0x2b
 8003692:	4249      	neglt	r1, r1
 8003694:	2909      	cmp	r1, #9
 8003696:	7042      	strb	r2, [r0, #1]
 8003698:	dd2b      	ble.n	80036f2 <__exponent+0x70>
 800369a:	f10d 0407 	add.w	r4, sp, #7
 800369e:	46a4      	mov	ip, r4
 80036a0:	270a      	movs	r7, #10
 80036a2:	fb91 f6f7 	sdiv	r6, r1, r7
 80036a6:	460a      	mov	r2, r1
 80036a8:	46a6      	mov	lr, r4
 80036aa:	fb07 1516 	mls	r5, r7, r6, r1
 80036ae:	2a63      	cmp	r2, #99	; 0x63
 80036b0:	f105 0530 	add.w	r5, r5, #48	; 0x30
 80036b4:	4631      	mov	r1, r6
 80036b6:	f104 34ff 	add.w	r4, r4, #4294967295
 80036ba:	f80e 5c01 	strb.w	r5, [lr, #-1]
 80036be:	dcf0      	bgt.n	80036a2 <__exponent+0x20>
 80036c0:	3130      	adds	r1, #48	; 0x30
 80036c2:	f1ae 0502 	sub.w	r5, lr, #2
 80036c6:	f804 1c01 	strb.w	r1, [r4, #-1]
 80036ca:	4629      	mov	r1, r5
 80036cc:	1c44      	adds	r4, r0, #1
 80036ce:	4561      	cmp	r1, ip
 80036d0:	d30a      	bcc.n	80036e8 <__exponent+0x66>
 80036d2:	f10d 0209 	add.w	r2, sp, #9
 80036d6:	eba2 020e 	sub.w	r2, r2, lr
 80036da:	4565      	cmp	r5, ip
 80036dc:	bf88      	it	hi
 80036de:	2200      	movhi	r2, #0
 80036e0:	4413      	add	r3, r2
 80036e2:	1a18      	subs	r0, r3, r0
 80036e4:	b003      	add	sp, #12
 80036e6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80036e8:	f811 2b01 	ldrb.w	r2, [r1], #1
 80036ec:	f804 2f01 	strb.w	r2, [r4, #1]!
 80036f0:	e7ed      	b.n	80036ce <__exponent+0x4c>
 80036f2:	2330      	movs	r3, #48	; 0x30
 80036f4:	3130      	adds	r1, #48	; 0x30
 80036f6:	7083      	strb	r3, [r0, #2]
 80036f8:	70c1      	strb	r1, [r0, #3]
 80036fa:	1d03      	adds	r3, r0, #4
 80036fc:	e7f1      	b.n	80036e2 <__exponent+0x60>
	...

08003700 <_printf_float>:
 8003700:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003704:	b091      	sub	sp, #68	; 0x44
 8003706:	460c      	mov	r4, r1
 8003708:	f8dd 8068 	ldr.w	r8, [sp, #104]	; 0x68
 800370c:	4616      	mov	r6, r2
 800370e:	461f      	mov	r7, r3
 8003710:	4605      	mov	r5, r0
 8003712:	f002 fe75 	bl	8006400 <_localeconv_r>
 8003716:	6803      	ldr	r3, [r0, #0]
 8003718:	4618      	mov	r0, r3
 800371a:	9309      	str	r3, [sp, #36]	; 0x24
 800371c:	f7fc fd18 	bl	8000150 <strlen>
 8003720:	2300      	movs	r3, #0
 8003722:	930e      	str	r3, [sp, #56]	; 0x38
 8003724:	f8d8 3000 	ldr.w	r3, [r8]
 8003728:	900a      	str	r0, [sp, #40]	; 0x28
 800372a:	3307      	adds	r3, #7
 800372c:	f023 0307 	bic.w	r3, r3, #7
 8003730:	f103 0208 	add.w	r2, r3, #8
 8003734:	f894 9018 	ldrb.w	r9, [r4, #24]
 8003738:	f8d4 b000 	ldr.w	fp, [r4]
 800373c:	f8c8 2000 	str.w	r2, [r8]
 8003740:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003744:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 8003748:	e9d4 8a12 	ldrd	r8, sl, [r4, #72]	; 0x48
 800374c:	f02a 4300 	bic.w	r3, sl, #2147483648	; 0x80000000
 8003750:	930b      	str	r3, [sp, #44]	; 0x2c
 8003752:	f04f 32ff 	mov.w	r2, #4294967295
 8003756:	4640      	mov	r0, r8
 8003758:	4b9c      	ldr	r3, [pc, #624]	; (80039cc <_printf_float+0x2cc>)
 800375a:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800375c:	f7fd f956 	bl	8000a0c <__aeabi_dcmpun>
 8003760:	bb70      	cbnz	r0, 80037c0 <_printf_float+0xc0>
 8003762:	f04f 32ff 	mov.w	r2, #4294967295
 8003766:	4640      	mov	r0, r8
 8003768:	4b98      	ldr	r3, [pc, #608]	; (80039cc <_printf_float+0x2cc>)
 800376a:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800376c:	f7fd f930 	bl	80009d0 <__aeabi_dcmple>
 8003770:	bb30      	cbnz	r0, 80037c0 <_printf_float+0xc0>
 8003772:	2200      	movs	r2, #0
 8003774:	2300      	movs	r3, #0
 8003776:	4640      	mov	r0, r8
 8003778:	4651      	mov	r1, sl
 800377a:	f7fd f91f 	bl	80009bc <__aeabi_dcmplt>
 800377e:	b110      	cbz	r0, 8003786 <_printf_float+0x86>
 8003780:	232d      	movs	r3, #45	; 0x2d
 8003782:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8003786:	4b92      	ldr	r3, [pc, #584]	; (80039d0 <_printf_float+0x2d0>)
 8003788:	4892      	ldr	r0, [pc, #584]	; (80039d4 <_printf_float+0x2d4>)
 800378a:	f1b9 0f47 	cmp.w	r9, #71	; 0x47
 800378e:	bf94      	ite	ls
 8003790:	4698      	movls	r8, r3
 8003792:	4680      	movhi	r8, r0
 8003794:	2303      	movs	r3, #3
 8003796:	f04f 0a00 	mov.w	sl, #0
 800379a:	6123      	str	r3, [r4, #16]
 800379c:	f02b 0304 	bic.w	r3, fp, #4
 80037a0:	6023      	str	r3, [r4, #0]
 80037a2:	4633      	mov	r3, r6
 80037a4:	4621      	mov	r1, r4
 80037a6:	4628      	mov	r0, r5
 80037a8:	9700      	str	r7, [sp, #0]
 80037aa:	aa0f      	add	r2, sp, #60	; 0x3c
 80037ac:	f000 f9d4 	bl	8003b58 <_printf_common>
 80037b0:	3001      	adds	r0, #1
 80037b2:	f040 8090 	bne.w	80038d6 <_printf_float+0x1d6>
 80037b6:	f04f 30ff 	mov.w	r0, #4294967295
 80037ba:	b011      	add	sp, #68	; 0x44
 80037bc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80037c0:	4642      	mov	r2, r8
 80037c2:	4653      	mov	r3, sl
 80037c4:	4640      	mov	r0, r8
 80037c6:	4651      	mov	r1, sl
 80037c8:	f7fd f920 	bl	8000a0c <__aeabi_dcmpun>
 80037cc:	b148      	cbz	r0, 80037e2 <_printf_float+0xe2>
 80037ce:	f1ba 0f00 	cmp.w	sl, #0
 80037d2:	bfb8      	it	lt
 80037d4:	232d      	movlt	r3, #45	; 0x2d
 80037d6:	4880      	ldr	r0, [pc, #512]	; (80039d8 <_printf_float+0x2d8>)
 80037d8:	bfb8      	it	lt
 80037da:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 80037de:	4b7f      	ldr	r3, [pc, #508]	; (80039dc <_printf_float+0x2dc>)
 80037e0:	e7d3      	b.n	800378a <_printf_float+0x8a>
 80037e2:	6863      	ldr	r3, [r4, #4]
 80037e4:	f009 01df 	and.w	r1, r9, #223	; 0xdf
 80037e8:	1c5a      	adds	r2, r3, #1
 80037ea:	d142      	bne.n	8003872 <_printf_float+0x172>
 80037ec:	2306      	movs	r3, #6
 80037ee:	6063      	str	r3, [r4, #4]
 80037f0:	2200      	movs	r2, #0
 80037f2:	9206      	str	r2, [sp, #24]
 80037f4:	aa0e      	add	r2, sp, #56	; 0x38
 80037f6:	e9cd 9204 	strd	r9, r2, [sp, #16]
 80037fa:	aa0d      	add	r2, sp, #52	; 0x34
 80037fc:	f44b 6380 	orr.w	r3, fp, #1024	; 0x400
 8003800:	9203      	str	r2, [sp, #12]
 8003802:	f10d 0233 	add.w	r2, sp, #51	; 0x33
 8003806:	e9cd 3201 	strd	r3, r2, [sp, #4]
 800380a:	6023      	str	r3, [r4, #0]
 800380c:	6863      	ldr	r3, [r4, #4]
 800380e:	4642      	mov	r2, r8
 8003810:	9300      	str	r3, [sp, #0]
 8003812:	4628      	mov	r0, r5
 8003814:	4653      	mov	r3, sl
 8003816:	910b      	str	r1, [sp, #44]	; 0x2c
 8003818:	f7ff fed4 	bl	80035c4 <__cvt>
 800381c:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800381e:	4680      	mov	r8, r0
 8003820:	2947      	cmp	r1, #71	; 0x47
 8003822:	990d      	ldr	r1, [sp, #52]	; 0x34
 8003824:	d108      	bne.n	8003838 <_printf_float+0x138>
 8003826:	1cc8      	adds	r0, r1, #3
 8003828:	db02      	blt.n	8003830 <_printf_float+0x130>
 800382a:	6863      	ldr	r3, [r4, #4]
 800382c:	4299      	cmp	r1, r3
 800382e:	dd40      	ble.n	80038b2 <_printf_float+0x1b2>
 8003830:	f1a9 0902 	sub.w	r9, r9, #2
 8003834:	fa5f f989 	uxtb.w	r9, r9
 8003838:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 800383c:	d81f      	bhi.n	800387e <_printf_float+0x17e>
 800383e:	464a      	mov	r2, r9
 8003840:	3901      	subs	r1, #1
 8003842:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8003846:	910d      	str	r1, [sp, #52]	; 0x34
 8003848:	f7ff ff1b 	bl	8003682 <__exponent>
 800384c:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800384e:	4682      	mov	sl, r0
 8003850:	1813      	adds	r3, r2, r0
 8003852:	2a01      	cmp	r2, #1
 8003854:	6123      	str	r3, [r4, #16]
 8003856:	dc02      	bgt.n	800385e <_printf_float+0x15e>
 8003858:	6822      	ldr	r2, [r4, #0]
 800385a:	07d2      	lsls	r2, r2, #31
 800385c:	d501      	bpl.n	8003862 <_printf_float+0x162>
 800385e:	3301      	adds	r3, #1
 8003860:	6123      	str	r3, [r4, #16]
 8003862:	f89d 3033 	ldrb.w	r3, [sp, #51]	; 0x33
 8003866:	2b00      	cmp	r3, #0
 8003868:	d09b      	beq.n	80037a2 <_printf_float+0xa2>
 800386a:	232d      	movs	r3, #45	; 0x2d
 800386c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8003870:	e797      	b.n	80037a2 <_printf_float+0xa2>
 8003872:	2947      	cmp	r1, #71	; 0x47
 8003874:	d1bc      	bne.n	80037f0 <_printf_float+0xf0>
 8003876:	2b00      	cmp	r3, #0
 8003878:	d1ba      	bne.n	80037f0 <_printf_float+0xf0>
 800387a:	2301      	movs	r3, #1
 800387c:	e7b7      	b.n	80037ee <_printf_float+0xee>
 800387e:	f1b9 0f66 	cmp.w	r9, #102	; 0x66
 8003882:	d118      	bne.n	80038b6 <_printf_float+0x1b6>
 8003884:	2900      	cmp	r1, #0
 8003886:	6863      	ldr	r3, [r4, #4]
 8003888:	dd0b      	ble.n	80038a2 <_printf_float+0x1a2>
 800388a:	6121      	str	r1, [r4, #16]
 800388c:	b913      	cbnz	r3, 8003894 <_printf_float+0x194>
 800388e:	6822      	ldr	r2, [r4, #0]
 8003890:	07d0      	lsls	r0, r2, #31
 8003892:	d502      	bpl.n	800389a <_printf_float+0x19a>
 8003894:	3301      	adds	r3, #1
 8003896:	440b      	add	r3, r1
 8003898:	6123      	str	r3, [r4, #16]
 800389a:	f04f 0a00 	mov.w	sl, #0
 800389e:	65a1      	str	r1, [r4, #88]	; 0x58
 80038a0:	e7df      	b.n	8003862 <_printf_float+0x162>
 80038a2:	b913      	cbnz	r3, 80038aa <_printf_float+0x1aa>
 80038a4:	6822      	ldr	r2, [r4, #0]
 80038a6:	07d2      	lsls	r2, r2, #31
 80038a8:	d501      	bpl.n	80038ae <_printf_float+0x1ae>
 80038aa:	3302      	adds	r3, #2
 80038ac:	e7f4      	b.n	8003898 <_printf_float+0x198>
 80038ae:	2301      	movs	r3, #1
 80038b0:	e7f2      	b.n	8003898 <_printf_float+0x198>
 80038b2:	f04f 0967 	mov.w	r9, #103	; 0x67
 80038b6:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80038b8:	4299      	cmp	r1, r3
 80038ba:	db05      	blt.n	80038c8 <_printf_float+0x1c8>
 80038bc:	6823      	ldr	r3, [r4, #0]
 80038be:	6121      	str	r1, [r4, #16]
 80038c0:	07d8      	lsls	r0, r3, #31
 80038c2:	d5ea      	bpl.n	800389a <_printf_float+0x19a>
 80038c4:	1c4b      	adds	r3, r1, #1
 80038c6:	e7e7      	b.n	8003898 <_printf_float+0x198>
 80038c8:	2900      	cmp	r1, #0
 80038ca:	bfcc      	ite	gt
 80038cc:	2201      	movgt	r2, #1
 80038ce:	f1c1 0202 	rsble	r2, r1, #2
 80038d2:	4413      	add	r3, r2
 80038d4:	e7e0      	b.n	8003898 <_printf_float+0x198>
 80038d6:	6823      	ldr	r3, [r4, #0]
 80038d8:	055a      	lsls	r2, r3, #21
 80038da:	d407      	bmi.n	80038ec <_printf_float+0x1ec>
 80038dc:	6923      	ldr	r3, [r4, #16]
 80038de:	4642      	mov	r2, r8
 80038e0:	4631      	mov	r1, r6
 80038e2:	4628      	mov	r0, r5
 80038e4:	47b8      	blx	r7
 80038e6:	3001      	adds	r0, #1
 80038e8:	d12b      	bne.n	8003942 <_printf_float+0x242>
 80038ea:	e764      	b.n	80037b6 <_printf_float+0xb6>
 80038ec:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 80038f0:	f240 80dd 	bls.w	8003aae <_printf_float+0x3ae>
 80038f4:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 80038f8:	2200      	movs	r2, #0
 80038fa:	2300      	movs	r3, #0
 80038fc:	f7fd f854 	bl	80009a8 <__aeabi_dcmpeq>
 8003900:	2800      	cmp	r0, #0
 8003902:	d033      	beq.n	800396c <_printf_float+0x26c>
 8003904:	2301      	movs	r3, #1
 8003906:	4631      	mov	r1, r6
 8003908:	4628      	mov	r0, r5
 800390a:	4a35      	ldr	r2, [pc, #212]	; (80039e0 <_printf_float+0x2e0>)
 800390c:	47b8      	blx	r7
 800390e:	3001      	adds	r0, #1
 8003910:	f43f af51 	beq.w	80037b6 <_printf_float+0xb6>
 8003914:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 8003918:	429a      	cmp	r2, r3
 800391a:	db02      	blt.n	8003922 <_printf_float+0x222>
 800391c:	6823      	ldr	r3, [r4, #0]
 800391e:	07d8      	lsls	r0, r3, #31
 8003920:	d50f      	bpl.n	8003942 <_printf_float+0x242>
 8003922:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8003926:	4631      	mov	r1, r6
 8003928:	4628      	mov	r0, r5
 800392a:	47b8      	blx	r7
 800392c:	3001      	adds	r0, #1
 800392e:	f43f af42 	beq.w	80037b6 <_printf_float+0xb6>
 8003932:	f04f 0800 	mov.w	r8, #0
 8003936:	f104 091a 	add.w	r9, r4, #26
 800393a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800393c:	3b01      	subs	r3, #1
 800393e:	4543      	cmp	r3, r8
 8003940:	dc09      	bgt.n	8003956 <_printf_float+0x256>
 8003942:	6823      	ldr	r3, [r4, #0]
 8003944:	079b      	lsls	r3, r3, #30
 8003946:	f100 8102 	bmi.w	8003b4e <_printf_float+0x44e>
 800394a:	68e0      	ldr	r0, [r4, #12]
 800394c:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800394e:	4298      	cmp	r0, r3
 8003950:	bfb8      	it	lt
 8003952:	4618      	movlt	r0, r3
 8003954:	e731      	b.n	80037ba <_printf_float+0xba>
 8003956:	2301      	movs	r3, #1
 8003958:	464a      	mov	r2, r9
 800395a:	4631      	mov	r1, r6
 800395c:	4628      	mov	r0, r5
 800395e:	47b8      	blx	r7
 8003960:	3001      	adds	r0, #1
 8003962:	f43f af28 	beq.w	80037b6 <_printf_float+0xb6>
 8003966:	f108 0801 	add.w	r8, r8, #1
 800396a:	e7e6      	b.n	800393a <_printf_float+0x23a>
 800396c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800396e:	2b00      	cmp	r3, #0
 8003970:	dc38      	bgt.n	80039e4 <_printf_float+0x2e4>
 8003972:	2301      	movs	r3, #1
 8003974:	4631      	mov	r1, r6
 8003976:	4628      	mov	r0, r5
 8003978:	4a19      	ldr	r2, [pc, #100]	; (80039e0 <_printf_float+0x2e0>)
 800397a:	47b8      	blx	r7
 800397c:	3001      	adds	r0, #1
 800397e:	f43f af1a 	beq.w	80037b6 <_printf_float+0xb6>
 8003982:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 8003986:	4313      	orrs	r3, r2
 8003988:	d102      	bne.n	8003990 <_printf_float+0x290>
 800398a:	6823      	ldr	r3, [r4, #0]
 800398c:	07d9      	lsls	r1, r3, #31
 800398e:	d5d8      	bpl.n	8003942 <_printf_float+0x242>
 8003990:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8003994:	4631      	mov	r1, r6
 8003996:	4628      	mov	r0, r5
 8003998:	47b8      	blx	r7
 800399a:	3001      	adds	r0, #1
 800399c:	f43f af0b 	beq.w	80037b6 <_printf_float+0xb6>
 80039a0:	f04f 0900 	mov.w	r9, #0
 80039a4:	f104 0a1a 	add.w	sl, r4, #26
 80039a8:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80039aa:	425b      	negs	r3, r3
 80039ac:	454b      	cmp	r3, r9
 80039ae:	dc01      	bgt.n	80039b4 <_printf_float+0x2b4>
 80039b0:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80039b2:	e794      	b.n	80038de <_printf_float+0x1de>
 80039b4:	2301      	movs	r3, #1
 80039b6:	4652      	mov	r2, sl
 80039b8:	4631      	mov	r1, r6
 80039ba:	4628      	mov	r0, r5
 80039bc:	47b8      	blx	r7
 80039be:	3001      	adds	r0, #1
 80039c0:	f43f aef9 	beq.w	80037b6 <_printf_float+0xb6>
 80039c4:	f109 0901 	add.w	r9, r9, #1
 80039c8:	e7ee      	b.n	80039a8 <_printf_float+0x2a8>
 80039ca:	bf00      	nop
 80039cc:	7fefffff 	.word	0x7fefffff
 80039d0:	08007e64 	.word	0x08007e64
 80039d4:	08007e68 	.word	0x08007e68
 80039d8:	08007e70 	.word	0x08007e70
 80039dc:	08007e6c 	.word	0x08007e6c
 80039e0:	08007e74 	.word	0x08007e74
 80039e4:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80039e6:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80039e8:	429a      	cmp	r2, r3
 80039ea:	bfa8      	it	ge
 80039ec:	461a      	movge	r2, r3
 80039ee:	2a00      	cmp	r2, #0
 80039f0:	4691      	mov	r9, r2
 80039f2:	dc37      	bgt.n	8003a64 <_printf_float+0x364>
 80039f4:	f04f 0b00 	mov.w	fp, #0
 80039f8:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80039fc:	f104 021a 	add.w	r2, r4, #26
 8003a00:	f8d4 a058 	ldr.w	sl, [r4, #88]	; 0x58
 8003a04:	ebaa 0309 	sub.w	r3, sl, r9
 8003a08:	455b      	cmp	r3, fp
 8003a0a:	dc33      	bgt.n	8003a74 <_printf_float+0x374>
 8003a0c:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 8003a10:	429a      	cmp	r2, r3
 8003a12:	db3b      	blt.n	8003a8c <_printf_float+0x38c>
 8003a14:	6823      	ldr	r3, [r4, #0]
 8003a16:	07da      	lsls	r2, r3, #31
 8003a18:	d438      	bmi.n	8003a8c <_printf_float+0x38c>
 8003a1a:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8003a1c:	990d      	ldr	r1, [sp, #52]	; 0x34
 8003a1e:	eba2 030a 	sub.w	r3, r2, sl
 8003a22:	eba2 0901 	sub.w	r9, r2, r1
 8003a26:	4599      	cmp	r9, r3
 8003a28:	bfa8      	it	ge
 8003a2a:	4699      	movge	r9, r3
 8003a2c:	f1b9 0f00 	cmp.w	r9, #0
 8003a30:	dc34      	bgt.n	8003a9c <_printf_float+0x39c>
 8003a32:	f04f 0800 	mov.w	r8, #0
 8003a36:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8003a3a:	f104 0a1a 	add.w	sl, r4, #26
 8003a3e:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 8003a42:	1a9b      	subs	r3, r3, r2
 8003a44:	eba3 0309 	sub.w	r3, r3, r9
 8003a48:	4543      	cmp	r3, r8
 8003a4a:	f77f af7a 	ble.w	8003942 <_printf_float+0x242>
 8003a4e:	2301      	movs	r3, #1
 8003a50:	4652      	mov	r2, sl
 8003a52:	4631      	mov	r1, r6
 8003a54:	4628      	mov	r0, r5
 8003a56:	47b8      	blx	r7
 8003a58:	3001      	adds	r0, #1
 8003a5a:	f43f aeac 	beq.w	80037b6 <_printf_float+0xb6>
 8003a5e:	f108 0801 	add.w	r8, r8, #1
 8003a62:	e7ec      	b.n	8003a3e <_printf_float+0x33e>
 8003a64:	4613      	mov	r3, r2
 8003a66:	4631      	mov	r1, r6
 8003a68:	4642      	mov	r2, r8
 8003a6a:	4628      	mov	r0, r5
 8003a6c:	47b8      	blx	r7
 8003a6e:	3001      	adds	r0, #1
 8003a70:	d1c0      	bne.n	80039f4 <_printf_float+0x2f4>
 8003a72:	e6a0      	b.n	80037b6 <_printf_float+0xb6>
 8003a74:	2301      	movs	r3, #1
 8003a76:	4631      	mov	r1, r6
 8003a78:	4628      	mov	r0, r5
 8003a7a:	920b      	str	r2, [sp, #44]	; 0x2c
 8003a7c:	47b8      	blx	r7
 8003a7e:	3001      	adds	r0, #1
 8003a80:	f43f ae99 	beq.w	80037b6 <_printf_float+0xb6>
 8003a84:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8003a86:	f10b 0b01 	add.w	fp, fp, #1
 8003a8a:	e7b9      	b.n	8003a00 <_printf_float+0x300>
 8003a8c:	4631      	mov	r1, r6
 8003a8e:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8003a92:	4628      	mov	r0, r5
 8003a94:	47b8      	blx	r7
 8003a96:	3001      	adds	r0, #1
 8003a98:	d1bf      	bne.n	8003a1a <_printf_float+0x31a>
 8003a9a:	e68c      	b.n	80037b6 <_printf_float+0xb6>
 8003a9c:	464b      	mov	r3, r9
 8003a9e:	4631      	mov	r1, r6
 8003aa0:	4628      	mov	r0, r5
 8003aa2:	eb08 020a 	add.w	r2, r8, sl
 8003aa6:	47b8      	blx	r7
 8003aa8:	3001      	adds	r0, #1
 8003aaa:	d1c2      	bne.n	8003a32 <_printf_float+0x332>
 8003aac:	e683      	b.n	80037b6 <_printf_float+0xb6>
 8003aae:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8003ab0:	2a01      	cmp	r2, #1
 8003ab2:	dc01      	bgt.n	8003ab8 <_printf_float+0x3b8>
 8003ab4:	07db      	lsls	r3, r3, #31
 8003ab6:	d537      	bpl.n	8003b28 <_printf_float+0x428>
 8003ab8:	2301      	movs	r3, #1
 8003aba:	4642      	mov	r2, r8
 8003abc:	4631      	mov	r1, r6
 8003abe:	4628      	mov	r0, r5
 8003ac0:	47b8      	blx	r7
 8003ac2:	3001      	adds	r0, #1
 8003ac4:	f43f ae77 	beq.w	80037b6 <_printf_float+0xb6>
 8003ac8:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8003acc:	4631      	mov	r1, r6
 8003ace:	4628      	mov	r0, r5
 8003ad0:	47b8      	blx	r7
 8003ad2:	3001      	adds	r0, #1
 8003ad4:	f43f ae6f 	beq.w	80037b6 <_printf_float+0xb6>
 8003ad8:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8003adc:	2200      	movs	r2, #0
 8003ade:	2300      	movs	r3, #0
 8003ae0:	f7fc ff62 	bl	80009a8 <__aeabi_dcmpeq>
 8003ae4:	b9d8      	cbnz	r0, 8003b1e <_printf_float+0x41e>
 8003ae6:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8003ae8:	f108 0201 	add.w	r2, r8, #1
 8003aec:	3b01      	subs	r3, #1
 8003aee:	4631      	mov	r1, r6
 8003af0:	4628      	mov	r0, r5
 8003af2:	47b8      	blx	r7
 8003af4:	3001      	adds	r0, #1
 8003af6:	d10e      	bne.n	8003b16 <_printf_float+0x416>
 8003af8:	e65d      	b.n	80037b6 <_printf_float+0xb6>
 8003afa:	2301      	movs	r3, #1
 8003afc:	464a      	mov	r2, r9
 8003afe:	4631      	mov	r1, r6
 8003b00:	4628      	mov	r0, r5
 8003b02:	47b8      	blx	r7
 8003b04:	3001      	adds	r0, #1
 8003b06:	f43f ae56 	beq.w	80037b6 <_printf_float+0xb6>
 8003b0a:	f108 0801 	add.w	r8, r8, #1
 8003b0e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8003b10:	3b01      	subs	r3, #1
 8003b12:	4543      	cmp	r3, r8
 8003b14:	dcf1      	bgt.n	8003afa <_printf_float+0x3fa>
 8003b16:	4653      	mov	r3, sl
 8003b18:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8003b1c:	e6e0      	b.n	80038e0 <_printf_float+0x1e0>
 8003b1e:	f04f 0800 	mov.w	r8, #0
 8003b22:	f104 091a 	add.w	r9, r4, #26
 8003b26:	e7f2      	b.n	8003b0e <_printf_float+0x40e>
 8003b28:	2301      	movs	r3, #1
 8003b2a:	4642      	mov	r2, r8
 8003b2c:	e7df      	b.n	8003aee <_printf_float+0x3ee>
 8003b2e:	2301      	movs	r3, #1
 8003b30:	464a      	mov	r2, r9
 8003b32:	4631      	mov	r1, r6
 8003b34:	4628      	mov	r0, r5
 8003b36:	47b8      	blx	r7
 8003b38:	3001      	adds	r0, #1
 8003b3a:	f43f ae3c 	beq.w	80037b6 <_printf_float+0xb6>
 8003b3e:	f108 0801 	add.w	r8, r8, #1
 8003b42:	68e3      	ldr	r3, [r4, #12]
 8003b44:	990f      	ldr	r1, [sp, #60]	; 0x3c
 8003b46:	1a5b      	subs	r3, r3, r1
 8003b48:	4543      	cmp	r3, r8
 8003b4a:	dcf0      	bgt.n	8003b2e <_printf_float+0x42e>
 8003b4c:	e6fd      	b.n	800394a <_printf_float+0x24a>
 8003b4e:	f04f 0800 	mov.w	r8, #0
 8003b52:	f104 0919 	add.w	r9, r4, #25
 8003b56:	e7f4      	b.n	8003b42 <_printf_float+0x442>

08003b58 <_printf_common>:
 8003b58:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003b5c:	4616      	mov	r6, r2
 8003b5e:	4699      	mov	r9, r3
 8003b60:	688a      	ldr	r2, [r1, #8]
 8003b62:	690b      	ldr	r3, [r1, #16]
 8003b64:	4607      	mov	r7, r0
 8003b66:	4293      	cmp	r3, r2
 8003b68:	bfb8      	it	lt
 8003b6a:	4613      	movlt	r3, r2
 8003b6c:	6033      	str	r3, [r6, #0]
 8003b6e:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8003b72:	460c      	mov	r4, r1
 8003b74:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8003b78:	b10a      	cbz	r2, 8003b7e <_printf_common+0x26>
 8003b7a:	3301      	adds	r3, #1
 8003b7c:	6033      	str	r3, [r6, #0]
 8003b7e:	6823      	ldr	r3, [r4, #0]
 8003b80:	0699      	lsls	r1, r3, #26
 8003b82:	bf42      	ittt	mi
 8003b84:	6833      	ldrmi	r3, [r6, #0]
 8003b86:	3302      	addmi	r3, #2
 8003b88:	6033      	strmi	r3, [r6, #0]
 8003b8a:	6825      	ldr	r5, [r4, #0]
 8003b8c:	f015 0506 	ands.w	r5, r5, #6
 8003b90:	d106      	bne.n	8003ba0 <_printf_common+0x48>
 8003b92:	f104 0a19 	add.w	sl, r4, #25
 8003b96:	68e3      	ldr	r3, [r4, #12]
 8003b98:	6832      	ldr	r2, [r6, #0]
 8003b9a:	1a9b      	subs	r3, r3, r2
 8003b9c:	42ab      	cmp	r3, r5
 8003b9e:	dc28      	bgt.n	8003bf2 <_printf_common+0x9a>
 8003ba0:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8003ba4:	1e13      	subs	r3, r2, #0
 8003ba6:	6822      	ldr	r2, [r4, #0]
 8003ba8:	bf18      	it	ne
 8003baa:	2301      	movne	r3, #1
 8003bac:	0692      	lsls	r2, r2, #26
 8003bae:	d42d      	bmi.n	8003c0c <_printf_common+0xb4>
 8003bb0:	4649      	mov	r1, r9
 8003bb2:	4638      	mov	r0, r7
 8003bb4:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8003bb8:	47c0      	blx	r8
 8003bba:	3001      	adds	r0, #1
 8003bbc:	d020      	beq.n	8003c00 <_printf_common+0xa8>
 8003bbe:	6823      	ldr	r3, [r4, #0]
 8003bc0:	68e5      	ldr	r5, [r4, #12]
 8003bc2:	f003 0306 	and.w	r3, r3, #6
 8003bc6:	2b04      	cmp	r3, #4
 8003bc8:	bf18      	it	ne
 8003bca:	2500      	movne	r5, #0
 8003bcc:	6832      	ldr	r2, [r6, #0]
 8003bce:	f04f 0600 	mov.w	r6, #0
 8003bd2:	68a3      	ldr	r3, [r4, #8]
 8003bd4:	bf08      	it	eq
 8003bd6:	1aad      	subeq	r5, r5, r2
 8003bd8:	6922      	ldr	r2, [r4, #16]
 8003bda:	bf08      	it	eq
 8003bdc:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8003be0:	4293      	cmp	r3, r2
 8003be2:	bfc4      	itt	gt
 8003be4:	1a9b      	subgt	r3, r3, r2
 8003be6:	18ed      	addgt	r5, r5, r3
 8003be8:	341a      	adds	r4, #26
 8003bea:	42b5      	cmp	r5, r6
 8003bec:	d11a      	bne.n	8003c24 <_printf_common+0xcc>
 8003bee:	2000      	movs	r0, #0
 8003bf0:	e008      	b.n	8003c04 <_printf_common+0xac>
 8003bf2:	2301      	movs	r3, #1
 8003bf4:	4652      	mov	r2, sl
 8003bf6:	4649      	mov	r1, r9
 8003bf8:	4638      	mov	r0, r7
 8003bfa:	47c0      	blx	r8
 8003bfc:	3001      	adds	r0, #1
 8003bfe:	d103      	bne.n	8003c08 <_printf_common+0xb0>
 8003c00:	f04f 30ff 	mov.w	r0, #4294967295
 8003c04:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003c08:	3501      	adds	r5, #1
 8003c0a:	e7c4      	b.n	8003b96 <_printf_common+0x3e>
 8003c0c:	2030      	movs	r0, #48	; 0x30
 8003c0e:	18e1      	adds	r1, r4, r3
 8003c10:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8003c14:	1c5a      	adds	r2, r3, #1
 8003c16:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8003c1a:	4422      	add	r2, r4
 8003c1c:	3302      	adds	r3, #2
 8003c1e:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8003c22:	e7c5      	b.n	8003bb0 <_printf_common+0x58>
 8003c24:	2301      	movs	r3, #1
 8003c26:	4622      	mov	r2, r4
 8003c28:	4649      	mov	r1, r9
 8003c2a:	4638      	mov	r0, r7
 8003c2c:	47c0      	blx	r8
 8003c2e:	3001      	adds	r0, #1
 8003c30:	d0e6      	beq.n	8003c00 <_printf_common+0xa8>
 8003c32:	3601      	adds	r6, #1
 8003c34:	e7d9      	b.n	8003bea <_printf_common+0x92>
	...

08003c38 <_printf_i>:
 8003c38:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8003c3c:	460c      	mov	r4, r1
 8003c3e:	7e27      	ldrb	r7, [r4, #24]
 8003c40:	4691      	mov	r9, r2
 8003c42:	2f78      	cmp	r7, #120	; 0x78
 8003c44:	4680      	mov	r8, r0
 8003c46:	469a      	mov	sl, r3
 8003c48:	990c      	ldr	r1, [sp, #48]	; 0x30
 8003c4a:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8003c4e:	d807      	bhi.n	8003c60 <_printf_i+0x28>
 8003c50:	2f62      	cmp	r7, #98	; 0x62
 8003c52:	d80a      	bhi.n	8003c6a <_printf_i+0x32>
 8003c54:	2f00      	cmp	r7, #0
 8003c56:	f000 80d9 	beq.w	8003e0c <_printf_i+0x1d4>
 8003c5a:	2f58      	cmp	r7, #88	; 0x58
 8003c5c:	f000 80a4 	beq.w	8003da8 <_printf_i+0x170>
 8003c60:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8003c64:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8003c68:	e03a      	b.n	8003ce0 <_printf_i+0xa8>
 8003c6a:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8003c6e:	2b15      	cmp	r3, #21
 8003c70:	d8f6      	bhi.n	8003c60 <_printf_i+0x28>
 8003c72:	a001      	add	r0, pc, #4	; (adr r0, 8003c78 <_printf_i+0x40>)
 8003c74:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 8003c78:	08003cd1 	.word	0x08003cd1
 8003c7c:	08003ce5 	.word	0x08003ce5
 8003c80:	08003c61 	.word	0x08003c61
 8003c84:	08003c61 	.word	0x08003c61
 8003c88:	08003c61 	.word	0x08003c61
 8003c8c:	08003c61 	.word	0x08003c61
 8003c90:	08003ce5 	.word	0x08003ce5
 8003c94:	08003c61 	.word	0x08003c61
 8003c98:	08003c61 	.word	0x08003c61
 8003c9c:	08003c61 	.word	0x08003c61
 8003ca0:	08003c61 	.word	0x08003c61
 8003ca4:	08003df3 	.word	0x08003df3
 8003ca8:	08003d15 	.word	0x08003d15
 8003cac:	08003dd5 	.word	0x08003dd5
 8003cb0:	08003c61 	.word	0x08003c61
 8003cb4:	08003c61 	.word	0x08003c61
 8003cb8:	08003e15 	.word	0x08003e15
 8003cbc:	08003c61 	.word	0x08003c61
 8003cc0:	08003d15 	.word	0x08003d15
 8003cc4:	08003c61 	.word	0x08003c61
 8003cc8:	08003c61 	.word	0x08003c61
 8003ccc:	08003ddd 	.word	0x08003ddd
 8003cd0:	680b      	ldr	r3, [r1, #0]
 8003cd2:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8003cd6:	1d1a      	adds	r2, r3, #4
 8003cd8:	681b      	ldr	r3, [r3, #0]
 8003cda:	600a      	str	r2, [r1, #0]
 8003cdc:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8003ce0:	2301      	movs	r3, #1
 8003ce2:	e0a4      	b.n	8003e2e <_printf_i+0x1f6>
 8003ce4:	6825      	ldr	r5, [r4, #0]
 8003ce6:	6808      	ldr	r0, [r1, #0]
 8003ce8:	062e      	lsls	r6, r5, #24
 8003cea:	f100 0304 	add.w	r3, r0, #4
 8003cee:	d50a      	bpl.n	8003d06 <_printf_i+0xce>
 8003cf0:	6805      	ldr	r5, [r0, #0]
 8003cf2:	600b      	str	r3, [r1, #0]
 8003cf4:	2d00      	cmp	r5, #0
 8003cf6:	da03      	bge.n	8003d00 <_printf_i+0xc8>
 8003cf8:	232d      	movs	r3, #45	; 0x2d
 8003cfa:	426d      	negs	r5, r5
 8003cfc:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8003d00:	230a      	movs	r3, #10
 8003d02:	485e      	ldr	r0, [pc, #376]	; (8003e7c <_printf_i+0x244>)
 8003d04:	e019      	b.n	8003d3a <_printf_i+0x102>
 8003d06:	f015 0f40 	tst.w	r5, #64	; 0x40
 8003d0a:	6805      	ldr	r5, [r0, #0]
 8003d0c:	600b      	str	r3, [r1, #0]
 8003d0e:	bf18      	it	ne
 8003d10:	b22d      	sxthne	r5, r5
 8003d12:	e7ef      	b.n	8003cf4 <_printf_i+0xbc>
 8003d14:	680b      	ldr	r3, [r1, #0]
 8003d16:	6825      	ldr	r5, [r4, #0]
 8003d18:	1d18      	adds	r0, r3, #4
 8003d1a:	6008      	str	r0, [r1, #0]
 8003d1c:	0628      	lsls	r0, r5, #24
 8003d1e:	d501      	bpl.n	8003d24 <_printf_i+0xec>
 8003d20:	681d      	ldr	r5, [r3, #0]
 8003d22:	e002      	b.n	8003d2a <_printf_i+0xf2>
 8003d24:	0669      	lsls	r1, r5, #25
 8003d26:	d5fb      	bpl.n	8003d20 <_printf_i+0xe8>
 8003d28:	881d      	ldrh	r5, [r3, #0]
 8003d2a:	2f6f      	cmp	r7, #111	; 0x6f
 8003d2c:	bf0c      	ite	eq
 8003d2e:	2308      	moveq	r3, #8
 8003d30:	230a      	movne	r3, #10
 8003d32:	4852      	ldr	r0, [pc, #328]	; (8003e7c <_printf_i+0x244>)
 8003d34:	2100      	movs	r1, #0
 8003d36:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8003d3a:	6866      	ldr	r6, [r4, #4]
 8003d3c:	2e00      	cmp	r6, #0
 8003d3e:	bfa8      	it	ge
 8003d40:	6821      	ldrge	r1, [r4, #0]
 8003d42:	60a6      	str	r6, [r4, #8]
 8003d44:	bfa4      	itt	ge
 8003d46:	f021 0104 	bicge.w	r1, r1, #4
 8003d4a:	6021      	strge	r1, [r4, #0]
 8003d4c:	b90d      	cbnz	r5, 8003d52 <_printf_i+0x11a>
 8003d4e:	2e00      	cmp	r6, #0
 8003d50:	d04d      	beq.n	8003dee <_printf_i+0x1b6>
 8003d52:	4616      	mov	r6, r2
 8003d54:	fbb5 f1f3 	udiv	r1, r5, r3
 8003d58:	fb03 5711 	mls	r7, r3, r1, r5
 8003d5c:	5dc7      	ldrb	r7, [r0, r7]
 8003d5e:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8003d62:	462f      	mov	r7, r5
 8003d64:	42bb      	cmp	r3, r7
 8003d66:	460d      	mov	r5, r1
 8003d68:	d9f4      	bls.n	8003d54 <_printf_i+0x11c>
 8003d6a:	2b08      	cmp	r3, #8
 8003d6c:	d10b      	bne.n	8003d86 <_printf_i+0x14e>
 8003d6e:	6823      	ldr	r3, [r4, #0]
 8003d70:	07df      	lsls	r7, r3, #31
 8003d72:	d508      	bpl.n	8003d86 <_printf_i+0x14e>
 8003d74:	6923      	ldr	r3, [r4, #16]
 8003d76:	6861      	ldr	r1, [r4, #4]
 8003d78:	4299      	cmp	r1, r3
 8003d7a:	bfde      	ittt	le
 8003d7c:	2330      	movle	r3, #48	; 0x30
 8003d7e:	f806 3c01 	strble.w	r3, [r6, #-1]
 8003d82:	f106 36ff 	addle.w	r6, r6, #4294967295
 8003d86:	1b92      	subs	r2, r2, r6
 8003d88:	6122      	str	r2, [r4, #16]
 8003d8a:	464b      	mov	r3, r9
 8003d8c:	4621      	mov	r1, r4
 8003d8e:	4640      	mov	r0, r8
 8003d90:	f8cd a000 	str.w	sl, [sp]
 8003d94:	aa03      	add	r2, sp, #12
 8003d96:	f7ff fedf 	bl	8003b58 <_printf_common>
 8003d9a:	3001      	adds	r0, #1
 8003d9c:	d14c      	bne.n	8003e38 <_printf_i+0x200>
 8003d9e:	f04f 30ff 	mov.w	r0, #4294967295
 8003da2:	b004      	add	sp, #16
 8003da4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003da8:	4834      	ldr	r0, [pc, #208]	; (8003e7c <_printf_i+0x244>)
 8003daa:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8003dae:	680e      	ldr	r6, [r1, #0]
 8003db0:	6823      	ldr	r3, [r4, #0]
 8003db2:	f856 5b04 	ldr.w	r5, [r6], #4
 8003db6:	061f      	lsls	r7, r3, #24
 8003db8:	600e      	str	r6, [r1, #0]
 8003dba:	d514      	bpl.n	8003de6 <_printf_i+0x1ae>
 8003dbc:	07d9      	lsls	r1, r3, #31
 8003dbe:	bf44      	itt	mi
 8003dc0:	f043 0320 	orrmi.w	r3, r3, #32
 8003dc4:	6023      	strmi	r3, [r4, #0]
 8003dc6:	b91d      	cbnz	r5, 8003dd0 <_printf_i+0x198>
 8003dc8:	6823      	ldr	r3, [r4, #0]
 8003dca:	f023 0320 	bic.w	r3, r3, #32
 8003dce:	6023      	str	r3, [r4, #0]
 8003dd0:	2310      	movs	r3, #16
 8003dd2:	e7af      	b.n	8003d34 <_printf_i+0xfc>
 8003dd4:	6823      	ldr	r3, [r4, #0]
 8003dd6:	f043 0320 	orr.w	r3, r3, #32
 8003dda:	6023      	str	r3, [r4, #0]
 8003ddc:	2378      	movs	r3, #120	; 0x78
 8003dde:	4828      	ldr	r0, [pc, #160]	; (8003e80 <_printf_i+0x248>)
 8003de0:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8003de4:	e7e3      	b.n	8003dae <_printf_i+0x176>
 8003de6:	065e      	lsls	r6, r3, #25
 8003de8:	bf48      	it	mi
 8003dea:	b2ad      	uxthmi	r5, r5
 8003dec:	e7e6      	b.n	8003dbc <_printf_i+0x184>
 8003dee:	4616      	mov	r6, r2
 8003df0:	e7bb      	b.n	8003d6a <_printf_i+0x132>
 8003df2:	680b      	ldr	r3, [r1, #0]
 8003df4:	6826      	ldr	r6, [r4, #0]
 8003df6:	1d1d      	adds	r5, r3, #4
 8003df8:	6960      	ldr	r0, [r4, #20]
 8003dfa:	600d      	str	r5, [r1, #0]
 8003dfc:	0635      	lsls	r5, r6, #24
 8003dfe:	681b      	ldr	r3, [r3, #0]
 8003e00:	d501      	bpl.n	8003e06 <_printf_i+0x1ce>
 8003e02:	6018      	str	r0, [r3, #0]
 8003e04:	e002      	b.n	8003e0c <_printf_i+0x1d4>
 8003e06:	0671      	lsls	r1, r6, #25
 8003e08:	d5fb      	bpl.n	8003e02 <_printf_i+0x1ca>
 8003e0a:	8018      	strh	r0, [r3, #0]
 8003e0c:	2300      	movs	r3, #0
 8003e0e:	4616      	mov	r6, r2
 8003e10:	6123      	str	r3, [r4, #16]
 8003e12:	e7ba      	b.n	8003d8a <_printf_i+0x152>
 8003e14:	680b      	ldr	r3, [r1, #0]
 8003e16:	1d1a      	adds	r2, r3, #4
 8003e18:	600a      	str	r2, [r1, #0]
 8003e1a:	681e      	ldr	r6, [r3, #0]
 8003e1c:	2100      	movs	r1, #0
 8003e1e:	4630      	mov	r0, r6
 8003e20:	6862      	ldr	r2, [r4, #4]
 8003e22:	f002 fb0b 	bl	800643c <memchr>
 8003e26:	b108      	cbz	r0, 8003e2c <_printf_i+0x1f4>
 8003e28:	1b80      	subs	r0, r0, r6
 8003e2a:	6060      	str	r0, [r4, #4]
 8003e2c:	6863      	ldr	r3, [r4, #4]
 8003e2e:	6123      	str	r3, [r4, #16]
 8003e30:	2300      	movs	r3, #0
 8003e32:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8003e36:	e7a8      	b.n	8003d8a <_printf_i+0x152>
 8003e38:	4632      	mov	r2, r6
 8003e3a:	4649      	mov	r1, r9
 8003e3c:	4640      	mov	r0, r8
 8003e3e:	6923      	ldr	r3, [r4, #16]
 8003e40:	47d0      	blx	sl
 8003e42:	3001      	adds	r0, #1
 8003e44:	d0ab      	beq.n	8003d9e <_printf_i+0x166>
 8003e46:	6823      	ldr	r3, [r4, #0]
 8003e48:	079b      	lsls	r3, r3, #30
 8003e4a:	d413      	bmi.n	8003e74 <_printf_i+0x23c>
 8003e4c:	68e0      	ldr	r0, [r4, #12]
 8003e4e:	9b03      	ldr	r3, [sp, #12]
 8003e50:	4298      	cmp	r0, r3
 8003e52:	bfb8      	it	lt
 8003e54:	4618      	movlt	r0, r3
 8003e56:	e7a4      	b.n	8003da2 <_printf_i+0x16a>
 8003e58:	2301      	movs	r3, #1
 8003e5a:	4632      	mov	r2, r6
 8003e5c:	4649      	mov	r1, r9
 8003e5e:	4640      	mov	r0, r8
 8003e60:	47d0      	blx	sl
 8003e62:	3001      	adds	r0, #1
 8003e64:	d09b      	beq.n	8003d9e <_printf_i+0x166>
 8003e66:	3501      	adds	r5, #1
 8003e68:	68e3      	ldr	r3, [r4, #12]
 8003e6a:	9903      	ldr	r1, [sp, #12]
 8003e6c:	1a5b      	subs	r3, r3, r1
 8003e6e:	42ab      	cmp	r3, r5
 8003e70:	dcf2      	bgt.n	8003e58 <_printf_i+0x220>
 8003e72:	e7eb      	b.n	8003e4c <_printf_i+0x214>
 8003e74:	2500      	movs	r5, #0
 8003e76:	f104 0619 	add.w	r6, r4, #25
 8003e7a:	e7f5      	b.n	8003e68 <_printf_i+0x230>
 8003e7c:	08007e76 	.word	0x08007e76
 8003e80:	08007e87 	.word	0x08007e87

08003e84 <_scanf_float>:
 8003e84:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003e88:	b087      	sub	sp, #28
 8003e8a:	9303      	str	r3, [sp, #12]
 8003e8c:	688b      	ldr	r3, [r1, #8]
 8003e8e:	4617      	mov	r7, r2
 8003e90:	1e5a      	subs	r2, r3, #1
 8003e92:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 8003e96:	bf85      	ittet	hi
 8003e98:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 8003e9c:	195b      	addhi	r3, r3, r5
 8003e9e:	2300      	movls	r3, #0
 8003ea0:	9302      	strhi	r3, [sp, #8]
 8003ea2:	bf88      	it	hi
 8003ea4:	f240 135d 	movwhi	r3, #349	; 0x15d
 8003ea8:	468b      	mov	fp, r1
 8003eaa:	f04f 0500 	mov.w	r5, #0
 8003eae:	bf8c      	ite	hi
 8003eb0:	608b      	strhi	r3, [r1, #8]
 8003eb2:	9302      	strls	r3, [sp, #8]
 8003eb4:	680b      	ldr	r3, [r1, #0]
 8003eb6:	4680      	mov	r8, r0
 8003eb8:	f443 63f0 	orr.w	r3, r3, #1920	; 0x780
 8003ebc:	f84b 3b1c 	str.w	r3, [fp], #28
 8003ec0:	460c      	mov	r4, r1
 8003ec2:	465e      	mov	r6, fp
 8003ec4:	46aa      	mov	sl, r5
 8003ec6:	46a9      	mov	r9, r5
 8003ec8:	e9cd 5504 	strd	r5, r5, [sp, #16]
 8003ecc:	9501      	str	r5, [sp, #4]
 8003ece:	68a2      	ldr	r2, [r4, #8]
 8003ed0:	b152      	cbz	r2, 8003ee8 <_scanf_float+0x64>
 8003ed2:	683b      	ldr	r3, [r7, #0]
 8003ed4:	781b      	ldrb	r3, [r3, #0]
 8003ed6:	2b4e      	cmp	r3, #78	; 0x4e
 8003ed8:	d864      	bhi.n	8003fa4 <_scanf_float+0x120>
 8003eda:	2b40      	cmp	r3, #64	; 0x40
 8003edc:	d83c      	bhi.n	8003f58 <_scanf_float+0xd4>
 8003ede:	f1a3 012b 	sub.w	r1, r3, #43	; 0x2b
 8003ee2:	b2c8      	uxtb	r0, r1
 8003ee4:	280e      	cmp	r0, #14
 8003ee6:	d93a      	bls.n	8003f5e <_scanf_float+0xda>
 8003ee8:	f1b9 0f00 	cmp.w	r9, #0
 8003eec:	d003      	beq.n	8003ef6 <_scanf_float+0x72>
 8003eee:	6823      	ldr	r3, [r4, #0]
 8003ef0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003ef4:	6023      	str	r3, [r4, #0]
 8003ef6:	f10a 3aff 	add.w	sl, sl, #4294967295
 8003efa:	f1ba 0f01 	cmp.w	sl, #1
 8003efe:	f200 8113 	bhi.w	8004128 <_scanf_float+0x2a4>
 8003f02:	455e      	cmp	r6, fp
 8003f04:	f200 8105 	bhi.w	8004112 <_scanf_float+0x28e>
 8003f08:	2501      	movs	r5, #1
 8003f0a:	4628      	mov	r0, r5
 8003f0c:	b007      	add	sp, #28
 8003f0e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003f12:	f1a3 0261 	sub.w	r2, r3, #97	; 0x61
 8003f16:	2a0d      	cmp	r2, #13
 8003f18:	d8e6      	bhi.n	8003ee8 <_scanf_float+0x64>
 8003f1a:	a101      	add	r1, pc, #4	; (adr r1, 8003f20 <_scanf_float+0x9c>)
 8003f1c:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 8003f20:	0800405f 	.word	0x0800405f
 8003f24:	08003ee9 	.word	0x08003ee9
 8003f28:	08003ee9 	.word	0x08003ee9
 8003f2c:	08003ee9 	.word	0x08003ee9
 8003f30:	080040bf 	.word	0x080040bf
 8003f34:	08004097 	.word	0x08004097
 8003f38:	08003ee9 	.word	0x08003ee9
 8003f3c:	08003ee9 	.word	0x08003ee9
 8003f40:	0800406d 	.word	0x0800406d
 8003f44:	08003ee9 	.word	0x08003ee9
 8003f48:	08003ee9 	.word	0x08003ee9
 8003f4c:	08003ee9 	.word	0x08003ee9
 8003f50:	08003ee9 	.word	0x08003ee9
 8003f54:	08004025 	.word	0x08004025
 8003f58:	f1a3 0241 	sub.w	r2, r3, #65	; 0x41
 8003f5c:	e7db      	b.n	8003f16 <_scanf_float+0x92>
 8003f5e:	290e      	cmp	r1, #14
 8003f60:	d8c2      	bhi.n	8003ee8 <_scanf_float+0x64>
 8003f62:	a001      	add	r0, pc, #4	; (adr r0, 8003f68 <_scanf_float+0xe4>)
 8003f64:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 8003f68:	08004017 	.word	0x08004017
 8003f6c:	08003ee9 	.word	0x08003ee9
 8003f70:	08004017 	.word	0x08004017
 8003f74:	080040ab 	.word	0x080040ab
 8003f78:	08003ee9 	.word	0x08003ee9
 8003f7c:	08003fc5 	.word	0x08003fc5
 8003f80:	08004001 	.word	0x08004001
 8003f84:	08004001 	.word	0x08004001
 8003f88:	08004001 	.word	0x08004001
 8003f8c:	08004001 	.word	0x08004001
 8003f90:	08004001 	.word	0x08004001
 8003f94:	08004001 	.word	0x08004001
 8003f98:	08004001 	.word	0x08004001
 8003f9c:	08004001 	.word	0x08004001
 8003fa0:	08004001 	.word	0x08004001
 8003fa4:	2b6e      	cmp	r3, #110	; 0x6e
 8003fa6:	d809      	bhi.n	8003fbc <_scanf_float+0x138>
 8003fa8:	2b60      	cmp	r3, #96	; 0x60
 8003faa:	d8b2      	bhi.n	8003f12 <_scanf_float+0x8e>
 8003fac:	2b54      	cmp	r3, #84	; 0x54
 8003fae:	d077      	beq.n	80040a0 <_scanf_float+0x21c>
 8003fb0:	2b59      	cmp	r3, #89	; 0x59
 8003fb2:	d199      	bne.n	8003ee8 <_scanf_float+0x64>
 8003fb4:	2d07      	cmp	r5, #7
 8003fb6:	d197      	bne.n	8003ee8 <_scanf_float+0x64>
 8003fb8:	2508      	movs	r5, #8
 8003fba:	e029      	b.n	8004010 <_scanf_float+0x18c>
 8003fbc:	2b74      	cmp	r3, #116	; 0x74
 8003fbe:	d06f      	beq.n	80040a0 <_scanf_float+0x21c>
 8003fc0:	2b79      	cmp	r3, #121	; 0x79
 8003fc2:	e7f6      	b.n	8003fb2 <_scanf_float+0x12e>
 8003fc4:	6821      	ldr	r1, [r4, #0]
 8003fc6:	05c8      	lsls	r0, r1, #23
 8003fc8:	d51a      	bpl.n	8004000 <_scanf_float+0x17c>
 8003fca:	9b02      	ldr	r3, [sp, #8]
 8003fcc:	f021 0180 	bic.w	r1, r1, #128	; 0x80
 8003fd0:	6021      	str	r1, [r4, #0]
 8003fd2:	f109 0901 	add.w	r9, r9, #1
 8003fd6:	b11b      	cbz	r3, 8003fe0 <_scanf_float+0x15c>
 8003fd8:	3b01      	subs	r3, #1
 8003fda:	3201      	adds	r2, #1
 8003fdc:	9302      	str	r3, [sp, #8]
 8003fde:	60a2      	str	r2, [r4, #8]
 8003fe0:	68a3      	ldr	r3, [r4, #8]
 8003fe2:	3b01      	subs	r3, #1
 8003fe4:	60a3      	str	r3, [r4, #8]
 8003fe6:	6923      	ldr	r3, [r4, #16]
 8003fe8:	3301      	adds	r3, #1
 8003fea:	6123      	str	r3, [r4, #16]
 8003fec:	687b      	ldr	r3, [r7, #4]
 8003fee:	3b01      	subs	r3, #1
 8003ff0:	2b00      	cmp	r3, #0
 8003ff2:	607b      	str	r3, [r7, #4]
 8003ff4:	f340 8084 	ble.w	8004100 <_scanf_float+0x27c>
 8003ff8:	683b      	ldr	r3, [r7, #0]
 8003ffa:	3301      	adds	r3, #1
 8003ffc:	603b      	str	r3, [r7, #0]
 8003ffe:	e766      	b.n	8003ece <_scanf_float+0x4a>
 8004000:	eb1a 0f05 	cmn.w	sl, r5
 8004004:	f47f af70 	bne.w	8003ee8 <_scanf_float+0x64>
 8004008:	6822      	ldr	r2, [r4, #0]
 800400a:	f422 72c0 	bic.w	r2, r2, #384	; 0x180
 800400e:	6022      	str	r2, [r4, #0]
 8004010:	f806 3b01 	strb.w	r3, [r6], #1
 8004014:	e7e4      	b.n	8003fe0 <_scanf_float+0x15c>
 8004016:	6822      	ldr	r2, [r4, #0]
 8004018:	0610      	lsls	r0, r2, #24
 800401a:	f57f af65 	bpl.w	8003ee8 <_scanf_float+0x64>
 800401e:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8004022:	e7f4      	b.n	800400e <_scanf_float+0x18a>
 8004024:	f1ba 0f00 	cmp.w	sl, #0
 8004028:	d10e      	bne.n	8004048 <_scanf_float+0x1c4>
 800402a:	f1b9 0f00 	cmp.w	r9, #0
 800402e:	d10e      	bne.n	800404e <_scanf_float+0x1ca>
 8004030:	6822      	ldr	r2, [r4, #0]
 8004032:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 8004036:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 800403a:	d108      	bne.n	800404e <_scanf_float+0x1ca>
 800403c:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 8004040:	f04f 0a01 	mov.w	sl, #1
 8004044:	6022      	str	r2, [r4, #0]
 8004046:	e7e3      	b.n	8004010 <_scanf_float+0x18c>
 8004048:	f1ba 0f02 	cmp.w	sl, #2
 800404c:	d055      	beq.n	80040fa <_scanf_float+0x276>
 800404e:	2d01      	cmp	r5, #1
 8004050:	d002      	beq.n	8004058 <_scanf_float+0x1d4>
 8004052:	2d04      	cmp	r5, #4
 8004054:	f47f af48 	bne.w	8003ee8 <_scanf_float+0x64>
 8004058:	3501      	adds	r5, #1
 800405a:	b2ed      	uxtb	r5, r5
 800405c:	e7d8      	b.n	8004010 <_scanf_float+0x18c>
 800405e:	f1ba 0f01 	cmp.w	sl, #1
 8004062:	f47f af41 	bne.w	8003ee8 <_scanf_float+0x64>
 8004066:	f04f 0a02 	mov.w	sl, #2
 800406a:	e7d1      	b.n	8004010 <_scanf_float+0x18c>
 800406c:	b97d      	cbnz	r5, 800408e <_scanf_float+0x20a>
 800406e:	f1b9 0f00 	cmp.w	r9, #0
 8004072:	f47f af3c 	bne.w	8003eee <_scanf_float+0x6a>
 8004076:	6822      	ldr	r2, [r4, #0]
 8004078:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 800407c:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 8004080:	f47f af39 	bne.w	8003ef6 <_scanf_float+0x72>
 8004084:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 8004088:	2501      	movs	r5, #1
 800408a:	6022      	str	r2, [r4, #0]
 800408c:	e7c0      	b.n	8004010 <_scanf_float+0x18c>
 800408e:	2d03      	cmp	r5, #3
 8004090:	d0e2      	beq.n	8004058 <_scanf_float+0x1d4>
 8004092:	2d05      	cmp	r5, #5
 8004094:	e7de      	b.n	8004054 <_scanf_float+0x1d0>
 8004096:	2d02      	cmp	r5, #2
 8004098:	f47f af26 	bne.w	8003ee8 <_scanf_float+0x64>
 800409c:	2503      	movs	r5, #3
 800409e:	e7b7      	b.n	8004010 <_scanf_float+0x18c>
 80040a0:	2d06      	cmp	r5, #6
 80040a2:	f47f af21 	bne.w	8003ee8 <_scanf_float+0x64>
 80040a6:	2507      	movs	r5, #7
 80040a8:	e7b2      	b.n	8004010 <_scanf_float+0x18c>
 80040aa:	6822      	ldr	r2, [r4, #0]
 80040ac:	0591      	lsls	r1, r2, #22
 80040ae:	f57f af1b 	bpl.w	8003ee8 <_scanf_float+0x64>
 80040b2:	f422 7220 	bic.w	r2, r2, #640	; 0x280
 80040b6:	6022      	str	r2, [r4, #0]
 80040b8:	f8cd 9004 	str.w	r9, [sp, #4]
 80040bc:	e7a8      	b.n	8004010 <_scanf_float+0x18c>
 80040be:	6822      	ldr	r2, [r4, #0]
 80040c0:	f402 61a0 	and.w	r1, r2, #1280	; 0x500
 80040c4:	f5b1 6f80 	cmp.w	r1, #1024	; 0x400
 80040c8:	d006      	beq.n	80040d8 <_scanf_float+0x254>
 80040ca:	0550      	lsls	r0, r2, #21
 80040cc:	f57f af0c 	bpl.w	8003ee8 <_scanf_float+0x64>
 80040d0:	f1b9 0f00 	cmp.w	r9, #0
 80040d4:	f43f af0f 	beq.w	8003ef6 <_scanf_float+0x72>
 80040d8:	0591      	lsls	r1, r2, #22
 80040da:	bf58      	it	pl
 80040dc:	9901      	ldrpl	r1, [sp, #4]
 80040de:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 80040e2:	bf58      	it	pl
 80040e4:	eba9 0101 	subpl.w	r1, r9, r1
 80040e8:	f442 72c0 	orr.w	r2, r2, #384	; 0x180
 80040ec:	f04f 0900 	mov.w	r9, #0
 80040f0:	bf58      	it	pl
 80040f2:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 80040f6:	6022      	str	r2, [r4, #0]
 80040f8:	e78a      	b.n	8004010 <_scanf_float+0x18c>
 80040fa:	f04f 0a03 	mov.w	sl, #3
 80040fe:	e787      	b.n	8004010 <_scanf_float+0x18c>
 8004100:	4639      	mov	r1, r7
 8004102:	4640      	mov	r0, r8
 8004104:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 8004108:	4798      	blx	r3
 800410a:	2800      	cmp	r0, #0
 800410c:	f43f aedf 	beq.w	8003ece <_scanf_float+0x4a>
 8004110:	e6ea      	b.n	8003ee8 <_scanf_float+0x64>
 8004112:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8004116:	463a      	mov	r2, r7
 8004118:	4640      	mov	r0, r8
 800411a:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800411e:	4798      	blx	r3
 8004120:	6923      	ldr	r3, [r4, #16]
 8004122:	3b01      	subs	r3, #1
 8004124:	6123      	str	r3, [r4, #16]
 8004126:	e6ec      	b.n	8003f02 <_scanf_float+0x7e>
 8004128:	1e6b      	subs	r3, r5, #1
 800412a:	2b06      	cmp	r3, #6
 800412c:	d825      	bhi.n	800417a <_scanf_float+0x2f6>
 800412e:	2d02      	cmp	r5, #2
 8004130:	d836      	bhi.n	80041a0 <_scanf_float+0x31c>
 8004132:	455e      	cmp	r6, fp
 8004134:	f67f aee8 	bls.w	8003f08 <_scanf_float+0x84>
 8004138:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800413c:	463a      	mov	r2, r7
 800413e:	4640      	mov	r0, r8
 8004140:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8004144:	4798      	blx	r3
 8004146:	6923      	ldr	r3, [r4, #16]
 8004148:	3b01      	subs	r3, #1
 800414a:	6123      	str	r3, [r4, #16]
 800414c:	e7f1      	b.n	8004132 <_scanf_float+0x2ae>
 800414e:	9802      	ldr	r0, [sp, #8]
 8004150:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8004154:	f810 1d01 	ldrb.w	r1, [r0, #-1]!
 8004158:	463a      	mov	r2, r7
 800415a:	9002      	str	r0, [sp, #8]
 800415c:	4640      	mov	r0, r8
 800415e:	4798      	blx	r3
 8004160:	6923      	ldr	r3, [r4, #16]
 8004162:	3b01      	subs	r3, #1
 8004164:	6123      	str	r3, [r4, #16]
 8004166:	f10a 3aff 	add.w	sl, sl, #4294967295
 800416a:	fa5f fa8a 	uxtb.w	sl, sl
 800416e:	f1ba 0f02 	cmp.w	sl, #2
 8004172:	d1ec      	bne.n	800414e <_scanf_float+0x2ca>
 8004174:	3d03      	subs	r5, #3
 8004176:	b2ed      	uxtb	r5, r5
 8004178:	1b76      	subs	r6, r6, r5
 800417a:	6823      	ldr	r3, [r4, #0]
 800417c:	05da      	lsls	r2, r3, #23
 800417e:	d52f      	bpl.n	80041e0 <_scanf_float+0x35c>
 8004180:	055b      	lsls	r3, r3, #21
 8004182:	d510      	bpl.n	80041a6 <_scanf_float+0x322>
 8004184:	455e      	cmp	r6, fp
 8004186:	f67f aebf 	bls.w	8003f08 <_scanf_float+0x84>
 800418a:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800418e:	463a      	mov	r2, r7
 8004190:	4640      	mov	r0, r8
 8004192:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8004196:	4798      	blx	r3
 8004198:	6923      	ldr	r3, [r4, #16]
 800419a:	3b01      	subs	r3, #1
 800419c:	6123      	str	r3, [r4, #16]
 800419e:	e7f1      	b.n	8004184 <_scanf_float+0x300>
 80041a0:	46aa      	mov	sl, r5
 80041a2:	9602      	str	r6, [sp, #8]
 80041a4:	e7df      	b.n	8004166 <_scanf_float+0x2e2>
 80041a6:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 80041aa:	6923      	ldr	r3, [r4, #16]
 80041ac:	2965      	cmp	r1, #101	; 0x65
 80041ae:	f103 33ff 	add.w	r3, r3, #4294967295
 80041b2:	f106 35ff 	add.w	r5, r6, #4294967295
 80041b6:	6123      	str	r3, [r4, #16]
 80041b8:	d00c      	beq.n	80041d4 <_scanf_float+0x350>
 80041ba:	2945      	cmp	r1, #69	; 0x45
 80041bc:	d00a      	beq.n	80041d4 <_scanf_float+0x350>
 80041be:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 80041c2:	463a      	mov	r2, r7
 80041c4:	4640      	mov	r0, r8
 80041c6:	4798      	blx	r3
 80041c8:	6923      	ldr	r3, [r4, #16]
 80041ca:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 80041ce:	3b01      	subs	r3, #1
 80041d0:	1eb5      	subs	r5, r6, #2
 80041d2:	6123      	str	r3, [r4, #16]
 80041d4:	463a      	mov	r2, r7
 80041d6:	4640      	mov	r0, r8
 80041d8:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 80041dc:	4798      	blx	r3
 80041de:	462e      	mov	r6, r5
 80041e0:	6825      	ldr	r5, [r4, #0]
 80041e2:	f015 0510 	ands.w	r5, r5, #16
 80041e6:	d159      	bne.n	800429c <_scanf_float+0x418>
 80041e8:	7035      	strb	r5, [r6, #0]
 80041ea:	6823      	ldr	r3, [r4, #0]
 80041ec:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80041f0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80041f4:	d11c      	bne.n	8004230 <_scanf_float+0x3ac>
 80041f6:	9b01      	ldr	r3, [sp, #4]
 80041f8:	454b      	cmp	r3, r9
 80041fa:	eba3 0209 	sub.w	r2, r3, r9
 80041fe:	d124      	bne.n	800424a <_scanf_float+0x3c6>
 8004200:	2200      	movs	r2, #0
 8004202:	4659      	mov	r1, fp
 8004204:	4640      	mov	r0, r8
 8004206:	f000 fe8b 	bl	8004f20 <_strtod_r>
 800420a:	f8d4 c000 	ldr.w	ip, [r4]
 800420e:	9b03      	ldr	r3, [sp, #12]
 8004210:	f01c 0f02 	tst.w	ip, #2
 8004214:	4606      	mov	r6, r0
 8004216:	460f      	mov	r7, r1
 8004218:	681b      	ldr	r3, [r3, #0]
 800421a:	d021      	beq.n	8004260 <_scanf_float+0x3dc>
 800421c:	9903      	ldr	r1, [sp, #12]
 800421e:	1d1a      	adds	r2, r3, #4
 8004220:	600a      	str	r2, [r1, #0]
 8004222:	681b      	ldr	r3, [r3, #0]
 8004224:	e9c3 6700 	strd	r6, r7, [r3]
 8004228:	68e3      	ldr	r3, [r4, #12]
 800422a:	3301      	adds	r3, #1
 800422c:	60e3      	str	r3, [r4, #12]
 800422e:	e66c      	b.n	8003f0a <_scanf_float+0x86>
 8004230:	9b04      	ldr	r3, [sp, #16]
 8004232:	2b00      	cmp	r3, #0
 8004234:	d0e4      	beq.n	8004200 <_scanf_float+0x37c>
 8004236:	9905      	ldr	r1, [sp, #20]
 8004238:	230a      	movs	r3, #10
 800423a:	462a      	mov	r2, r5
 800423c:	4640      	mov	r0, r8
 800423e:	3101      	adds	r1, #1
 8004240:	f000 fefa 	bl	8005038 <_strtol_r>
 8004244:	9b04      	ldr	r3, [sp, #16]
 8004246:	9e05      	ldr	r6, [sp, #20]
 8004248:	1ac2      	subs	r2, r0, r3
 800424a:	f204 136f 	addw	r3, r4, #367	; 0x16f
 800424e:	429e      	cmp	r6, r3
 8004250:	bf28      	it	cs
 8004252:	f504 76b7 	addcs.w	r6, r4, #366	; 0x16e
 8004256:	4630      	mov	r0, r6
 8004258:	4911      	ldr	r1, [pc, #68]	; (80042a0 <_scanf_float+0x41c>)
 800425a:	f000 f829 	bl	80042b0 <siprintf>
 800425e:	e7cf      	b.n	8004200 <_scanf_float+0x37c>
 8004260:	f01c 0f04 	tst.w	ip, #4
 8004264:	f103 0e04 	add.w	lr, r3, #4
 8004268:	d003      	beq.n	8004272 <_scanf_float+0x3ee>
 800426a:	9903      	ldr	r1, [sp, #12]
 800426c:	f8c1 e000 	str.w	lr, [r1]
 8004270:	e7d7      	b.n	8004222 <_scanf_float+0x39e>
 8004272:	9a03      	ldr	r2, [sp, #12]
 8004274:	f8c2 e000 	str.w	lr, [r2]
 8004278:	f8d3 8000 	ldr.w	r8, [r3]
 800427c:	4602      	mov	r2, r0
 800427e:	460b      	mov	r3, r1
 8004280:	f7fc fbc4 	bl	8000a0c <__aeabi_dcmpun>
 8004284:	b128      	cbz	r0, 8004292 <_scanf_float+0x40e>
 8004286:	4807      	ldr	r0, [pc, #28]	; (80042a4 <_scanf_float+0x420>)
 8004288:	f000 f80e 	bl	80042a8 <nanf>
 800428c:	f8c8 0000 	str.w	r0, [r8]
 8004290:	e7ca      	b.n	8004228 <_scanf_float+0x3a4>
 8004292:	4630      	mov	r0, r6
 8004294:	4639      	mov	r1, r7
 8004296:	f7fc fc17 	bl	8000ac8 <__aeabi_d2f>
 800429a:	e7f7      	b.n	800428c <_scanf_float+0x408>
 800429c:	2500      	movs	r5, #0
 800429e:	e634      	b.n	8003f0a <_scanf_float+0x86>
 80042a0:	08007e98 	.word	0x08007e98
 80042a4:	080082b0 	.word	0x080082b0

080042a8 <nanf>:
 80042a8:	4800      	ldr	r0, [pc, #0]	; (80042ac <nanf+0x4>)
 80042aa:	4770      	bx	lr
 80042ac:	7fc00000 	.word	0x7fc00000

080042b0 <siprintf>:
 80042b0:	b40e      	push	{r1, r2, r3}
 80042b2:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 80042b6:	b500      	push	{lr}
 80042b8:	b09c      	sub	sp, #112	; 0x70
 80042ba:	ab1d      	add	r3, sp, #116	; 0x74
 80042bc:	9002      	str	r0, [sp, #8]
 80042be:	9006      	str	r0, [sp, #24]
 80042c0:	9107      	str	r1, [sp, #28]
 80042c2:	9104      	str	r1, [sp, #16]
 80042c4:	4808      	ldr	r0, [pc, #32]	; (80042e8 <siprintf+0x38>)
 80042c6:	4909      	ldr	r1, [pc, #36]	; (80042ec <siprintf+0x3c>)
 80042c8:	f853 2b04 	ldr.w	r2, [r3], #4
 80042cc:	9105      	str	r1, [sp, #20]
 80042ce:	6800      	ldr	r0, [r0, #0]
 80042d0:	a902      	add	r1, sp, #8
 80042d2:	9301      	str	r3, [sp, #4]
 80042d4:	f002 fe96 	bl	8007004 <_svfiprintf_r>
 80042d8:	2200      	movs	r2, #0
 80042da:	9b02      	ldr	r3, [sp, #8]
 80042dc:	701a      	strb	r2, [r3, #0]
 80042de:	b01c      	add	sp, #112	; 0x70
 80042e0:	f85d eb04 	ldr.w	lr, [sp], #4
 80042e4:	b003      	add	sp, #12
 80042e6:	4770      	bx	lr
 80042e8:	2000000c 	.word	0x2000000c
 80042ec:	ffff0208 	.word	0xffff0208

080042f0 <sulp>:
 80042f0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80042f4:	460f      	mov	r7, r1
 80042f6:	4690      	mov	r8, r2
 80042f8:	f002 fc2c 	bl	8006b54 <__ulp>
 80042fc:	4604      	mov	r4, r0
 80042fe:	460d      	mov	r5, r1
 8004300:	f1b8 0f00 	cmp.w	r8, #0
 8004304:	d011      	beq.n	800432a <sulp+0x3a>
 8004306:	f3c7 530a 	ubfx	r3, r7, #20, #11
 800430a:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 800430e:	2b00      	cmp	r3, #0
 8004310:	dd0b      	ble.n	800432a <sulp+0x3a>
 8004312:	2400      	movs	r4, #0
 8004314:	051b      	lsls	r3, r3, #20
 8004316:	f103 557f 	add.w	r5, r3, #1069547520	; 0x3fc00000
 800431a:	f505 1540 	add.w	r5, r5, #3145728	; 0x300000
 800431e:	4622      	mov	r2, r4
 8004320:	462b      	mov	r3, r5
 8004322:	f7fc f8d9 	bl	80004d8 <__aeabi_dmul>
 8004326:	4604      	mov	r4, r0
 8004328:	460d      	mov	r5, r1
 800432a:	4620      	mov	r0, r4
 800432c:	4629      	mov	r1, r5
 800432e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8004332:	0000      	movs	r0, r0
 8004334:	0000      	movs	r0, r0
	...

08004338 <_strtod_l>:
 8004338:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800433c:	469b      	mov	fp, r3
 800433e:	2300      	movs	r3, #0
 8004340:	b0a1      	sub	sp, #132	; 0x84
 8004342:	931c      	str	r3, [sp, #112]	; 0x70
 8004344:	4ba1      	ldr	r3, [pc, #644]	; (80045cc <_strtod_l+0x294>)
 8004346:	4682      	mov	sl, r0
 8004348:	681f      	ldr	r7, [r3, #0]
 800434a:	460e      	mov	r6, r1
 800434c:	4638      	mov	r0, r7
 800434e:	9217      	str	r2, [sp, #92]	; 0x5c
 8004350:	f7fb fefe 	bl	8000150 <strlen>
 8004354:	f04f 0800 	mov.w	r8, #0
 8004358:	4604      	mov	r4, r0
 800435a:	f04f 0900 	mov.w	r9, #0
 800435e:	961b      	str	r6, [sp, #108]	; 0x6c
 8004360:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8004362:	781a      	ldrb	r2, [r3, #0]
 8004364:	2a2b      	cmp	r2, #43	; 0x2b
 8004366:	d04c      	beq.n	8004402 <_strtod_l+0xca>
 8004368:	d83a      	bhi.n	80043e0 <_strtod_l+0xa8>
 800436a:	2a0d      	cmp	r2, #13
 800436c:	d833      	bhi.n	80043d6 <_strtod_l+0x9e>
 800436e:	2a08      	cmp	r2, #8
 8004370:	d833      	bhi.n	80043da <_strtod_l+0xa2>
 8004372:	2a00      	cmp	r2, #0
 8004374:	d03d      	beq.n	80043f2 <_strtod_l+0xba>
 8004376:	2300      	movs	r3, #0
 8004378:	930c      	str	r3, [sp, #48]	; 0x30
 800437a:	9d1b      	ldr	r5, [sp, #108]	; 0x6c
 800437c:	782b      	ldrb	r3, [r5, #0]
 800437e:	2b30      	cmp	r3, #48	; 0x30
 8004380:	f040 80af 	bne.w	80044e2 <_strtod_l+0x1aa>
 8004384:	786b      	ldrb	r3, [r5, #1]
 8004386:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 800438a:	2b58      	cmp	r3, #88	; 0x58
 800438c:	d16c      	bne.n	8004468 <_strtod_l+0x130>
 800438e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8004390:	4650      	mov	r0, sl
 8004392:	9301      	str	r3, [sp, #4]
 8004394:	ab1c      	add	r3, sp, #112	; 0x70
 8004396:	9300      	str	r3, [sp, #0]
 8004398:	4a8d      	ldr	r2, [pc, #564]	; (80045d0 <_strtod_l+0x298>)
 800439a:	f8cd b008 	str.w	fp, [sp, #8]
 800439e:	ab1d      	add	r3, sp, #116	; 0x74
 80043a0:	a91b      	add	r1, sp, #108	; 0x6c
 80043a2:	f001 fd2f 	bl	8005e04 <__gethex>
 80043a6:	f010 0607 	ands.w	r6, r0, #7
 80043aa:	4604      	mov	r4, r0
 80043ac:	d005      	beq.n	80043ba <_strtod_l+0x82>
 80043ae:	2e06      	cmp	r6, #6
 80043b0:	d129      	bne.n	8004406 <_strtod_l+0xce>
 80043b2:	2300      	movs	r3, #0
 80043b4:	3501      	adds	r5, #1
 80043b6:	951b      	str	r5, [sp, #108]	; 0x6c
 80043b8:	930c      	str	r3, [sp, #48]	; 0x30
 80043ba:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 80043bc:	2b00      	cmp	r3, #0
 80043be:	f040 8596 	bne.w	8004eee <_strtod_l+0xbb6>
 80043c2:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80043c4:	b1d3      	cbz	r3, 80043fc <_strtod_l+0xc4>
 80043c6:	4642      	mov	r2, r8
 80043c8:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 80043cc:	4610      	mov	r0, r2
 80043ce:	4619      	mov	r1, r3
 80043d0:	b021      	add	sp, #132	; 0x84
 80043d2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80043d6:	2a20      	cmp	r2, #32
 80043d8:	d1cd      	bne.n	8004376 <_strtod_l+0x3e>
 80043da:	3301      	adds	r3, #1
 80043dc:	931b      	str	r3, [sp, #108]	; 0x6c
 80043de:	e7bf      	b.n	8004360 <_strtod_l+0x28>
 80043e0:	2a2d      	cmp	r2, #45	; 0x2d
 80043e2:	d1c8      	bne.n	8004376 <_strtod_l+0x3e>
 80043e4:	2201      	movs	r2, #1
 80043e6:	920c      	str	r2, [sp, #48]	; 0x30
 80043e8:	1c5a      	adds	r2, r3, #1
 80043ea:	921b      	str	r2, [sp, #108]	; 0x6c
 80043ec:	785b      	ldrb	r3, [r3, #1]
 80043ee:	2b00      	cmp	r3, #0
 80043f0:	d1c3      	bne.n	800437a <_strtod_l+0x42>
 80043f2:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 80043f4:	961b      	str	r6, [sp, #108]	; 0x6c
 80043f6:	2b00      	cmp	r3, #0
 80043f8:	f040 8577 	bne.w	8004eea <_strtod_l+0xbb2>
 80043fc:	4642      	mov	r2, r8
 80043fe:	464b      	mov	r3, r9
 8004400:	e7e4      	b.n	80043cc <_strtod_l+0x94>
 8004402:	2200      	movs	r2, #0
 8004404:	e7ef      	b.n	80043e6 <_strtod_l+0xae>
 8004406:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 8004408:	b13a      	cbz	r2, 800441a <_strtod_l+0xe2>
 800440a:	2135      	movs	r1, #53	; 0x35
 800440c:	a81e      	add	r0, sp, #120	; 0x78
 800440e:	f002 fca5 	bl	8006d5c <__copybits>
 8004412:	4650      	mov	r0, sl
 8004414:	991c      	ldr	r1, [sp, #112]	; 0x70
 8004416:	f002 f86d 	bl	80064f4 <_Bfree>
 800441a:	3e01      	subs	r6, #1
 800441c:	2e05      	cmp	r6, #5
 800441e:	d807      	bhi.n	8004430 <_strtod_l+0xf8>
 8004420:	e8df f006 	tbb	[pc, r6]
 8004424:	1d180b0e 	.word	0x1d180b0e
 8004428:	030e      	.short	0x030e
 800442a:	f04f 0900 	mov.w	r9, #0
 800442e:	46c8      	mov	r8, r9
 8004430:	0721      	lsls	r1, r4, #28
 8004432:	d5c2      	bpl.n	80043ba <_strtod_l+0x82>
 8004434:	f049 4900 	orr.w	r9, r9, #2147483648	; 0x80000000
 8004438:	e7bf      	b.n	80043ba <_strtod_l+0x82>
 800443a:	e9dd 891e 	ldrd	r8, r9, [sp, #120]	; 0x78
 800443e:	e7f7      	b.n	8004430 <_strtod_l+0xf8>
 8004440:	9a1d      	ldr	r2, [sp, #116]	; 0x74
 8004442:	e9dd 831e 	ldrd	r8, r3, [sp, #120]	; 0x78
 8004446:	f202 4233 	addw	r2, r2, #1075	; 0x433
 800444a:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 800444e:	ea43 5902 	orr.w	r9, r3, r2, lsl #20
 8004452:	e7ed      	b.n	8004430 <_strtod_l+0xf8>
 8004454:	f04f 0800 	mov.w	r8, #0
 8004458:	f8df 9178 	ldr.w	r9, [pc, #376]	; 80045d4 <_strtod_l+0x29c>
 800445c:	e7e8      	b.n	8004430 <_strtod_l+0xf8>
 800445e:	f06f 4900 	mvn.w	r9, #2147483648	; 0x80000000
 8004462:	f04f 38ff 	mov.w	r8, #4294967295
 8004466:	e7e3      	b.n	8004430 <_strtod_l+0xf8>
 8004468:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800446a:	1c5a      	adds	r2, r3, #1
 800446c:	921b      	str	r2, [sp, #108]	; 0x6c
 800446e:	785b      	ldrb	r3, [r3, #1]
 8004470:	2b30      	cmp	r3, #48	; 0x30
 8004472:	d0f9      	beq.n	8004468 <_strtod_l+0x130>
 8004474:	2b00      	cmp	r3, #0
 8004476:	d0a0      	beq.n	80043ba <_strtod_l+0x82>
 8004478:	2301      	movs	r3, #1
 800447a:	9307      	str	r3, [sp, #28]
 800447c:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800447e:	220a      	movs	r2, #10
 8004480:	9308      	str	r3, [sp, #32]
 8004482:	2300      	movs	r3, #0
 8004484:	469b      	mov	fp, r3
 8004486:	e9cd 3305 	strd	r3, r3, [sp, #20]
 800448a:	981b      	ldr	r0, [sp, #108]	; 0x6c
 800448c:	7805      	ldrb	r5, [r0, #0]
 800448e:	f1a5 0330 	sub.w	r3, r5, #48	; 0x30
 8004492:	b2d9      	uxtb	r1, r3
 8004494:	2909      	cmp	r1, #9
 8004496:	d926      	bls.n	80044e6 <_strtod_l+0x1ae>
 8004498:	4622      	mov	r2, r4
 800449a:	4639      	mov	r1, r7
 800449c:	f002 fec8 	bl	8007230 <strncmp>
 80044a0:	2800      	cmp	r0, #0
 80044a2:	d032      	beq.n	800450a <_strtod_l+0x1d2>
 80044a4:	2000      	movs	r0, #0
 80044a6:	462b      	mov	r3, r5
 80044a8:	465c      	mov	r4, fp
 80044aa:	4602      	mov	r2, r0
 80044ac:	9004      	str	r0, [sp, #16]
 80044ae:	2b65      	cmp	r3, #101	; 0x65
 80044b0:	d001      	beq.n	80044b6 <_strtod_l+0x17e>
 80044b2:	2b45      	cmp	r3, #69	; 0x45
 80044b4:	d113      	bne.n	80044de <_strtod_l+0x1a6>
 80044b6:	b91c      	cbnz	r4, 80044c0 <_strtod_l+0x188>
 80044b8:	9b07      	ldr	r3, [sp, #28]
 80044ba:	4303      	orrs	r3, r0
 80044bc:	d099      	beq.n	80043f2 <_strtod_l+0xba>
 80044be:	2400      	movs	r4, #0
 80044c0:	9e1b      	ldr	r6, [sp, #108]	; 0x6c
 80044c2:	1c73      	adds	r3, r6, #1
 80044c4:	931b      	str	r3, [sp, #108]	; 0x6c
 80044c6:	7873      	ldrb	r3, [r6, #1]
 80044c8:	2b2b      	cmp	r3, #43	; 0x2b
 80044ca:	d078      	beq.n	80045be <_strtod_l+0x286>
 80044cc:	2b2d      	cmp	r3, #45	; 0x2d
 80044ce:	d07b      	beq.n	80045c8 <_strtod_l+0x290>
 80044d0:	2700      	movs	r7, #0
 80044d2:	f1a3 0130 	sub.w	r1, r3, #48	; 0x30
 80044d6:	2909      	cmp	r1, #9
 80044d8:	f240 8082 	bls.w	80045e0 <_strtod_l+0x2a8>
 80044dc:	961b      	str	r6, [sp, #108]	; 0x6c
 80044de:	2500      	movs	r5, #0
 80044e0:	e09e      	b.n	8004620 <_strtod_l+0x2e8>
 80044e2:	2300      	movs	r3, #0
 80044e4:	e7c9      	b.n	800447a <_strtod_l+0x142>
 80044e6:	f1bb 0f08 	cmp.w	fp, #8
 80044ea:	bfd5      	itete	le
 80044ec:	9906      	ldrle	r1, [sp, #24]
 80044ee:	9905      	ldrgt	r1, [sp, #20]
 80044f0:	fb02 3301 	mlale	r3, r2, r1, r3
 80044f4:	fb02 3301 	mlagt	r3, r2, r1, r3
 80044f8:	f100 0001 	add.w	r0, r0, #1
 80044fc:	bfd4      	ite	le
 80044fe:	9306      	strle	r3, [sp, #24]
 8004500:	9305      	strgt	r3, [sp, #20]
 8004502:	f10b 0b01 	add.w	fp, fp, #1
 8004506:	901b      	str	r0, [sp, #108]	; 0x6c
 8004508:	e7bf      	b.n	800448a <_strtod_l+0x152>
 800450a:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800450c:	191a      	adds	r2, r3, r4
 800450e:	921b      	str	r2, [sp, #108]	; 0x6c
 8004510:	5d1b      	ldrb	r3, [r3, r4]
 8004512:	f1bb 0f00 	cmp.w	fp, #0
 8004516:	d036      	beq.n	8004586 <_strtod_l+0x24e>
 8004518:	465c      	mov	r4, fp
 800451a:	9004      	str	r0, [sp, #16]
 800451c:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
 8004520:	2a09      	cmp	r2, #9
 8004522:	d912      	bls.n	800454a <_strtod_l+0x212>
 8004524:	2201      	movs	r2, #1
 8004526:	e7c2      	b.n	80044ae <_strtod_l+0x176>
 8004528:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800452a:	3001      	adds	r0, #1
 800452c:	1c5a      	adds	r2, r3, #1
 800452e:	921b      	str	r2, [sp, #108]	; 0x6c
 8004530:	785b      	ldrb	r3, [r3, #1]
 8004532:	2b30      	cmp	r3, #48	; 0x30
 8004534:	d0f8      	beq.n	8004528 <_strtod_l+0x1f0>
 8004536:	f1a3 0231 	sub.w	r2, r3, #49	; 0x31
 800453a:	2a08      	cmp	r2, #8
 800453c:	f200 84dc 	bhi.w	8004ef8 <_strtod_l+0xbc0>
 8004540:	9004      	str	r0, [sp, #16]
 8004542:	2000      	movs	r0, #0
 8004544:	4604      	mov	r4, r0
 8004546:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
 8004548:	9208      	str	r2, [sp, #32]
 800454a:	3b30      	subs	r3, #48	; 0x30
 800454c:	f100 0201 	add.w	r2, r0, #1
 8004550:	d013      	beq.n	800457a <_strtod_l+0x242>
 8004552:	9904      	ldr	r1, [sp, #16]
 8004554:	1905      	adds	r5, r0, r4
 8004556:	4411      	add	r1, r2
 8004558:	9104      	str	r1, [sp, #16]
 800455a:	4622      	mov	r2, r4
 800455c:	210a      	movs	r1, #10
 800455e:	42aa      	cmp	r2, r5
 8004560:	d113      	bne.n	800458a <_strtod_l+0x252>
 8004562:	1822      	adds	r2, r4, r0
 8004564:	2a08      	cmp	r2, #8
 8004566:	f104 0401 	add.w	r4, r4, #1
 800456a:	4404      	add	r4, r0
 800456c:	dc1b      	bgt.n	80045a6 <_strtod_l+0x26e>
 800456e:	220a      	movs	r2, #10
 8004570:	9906      	ldr	r1, [sp, #24]
 8004572:	fb02 3301 	mla	r3, r2, r1, r3
 8004576:	9306      	str	r3, [sp, #24]
 8004578:	2200      	movs	r2, #0
 800457a:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800457c:	4610      	mov	r0, r2
 800457e:	1c59      	adds	r1, r3, #1
 8004580:	911b      	str	r1, [sp, #108]	; 0x6c
 8004582:	785b      	ldrb	r3, [r3, #1]
 8004584:	e7ca      	b.n	800451c <_strtod_l+0x1e4>
 8004586:	4658      	mov	r0, fp
 8004588:	e7d3      	b.n	8004532 <_strtod_l+0x1fa>
 800458a:	2a08      	cmp	r2, #8
 800458c:	dc04      	bgt.n	8004598 <_strtod_l+0x260>
 800458e:	9f06      	ldr	r7, [sp, #24]
 8004590:	434f      	muls	r7, r1
 8004592:	9706      	str	r7, [sp, #24]
 8004594:	3201      	adds	r2, #1
 8004596:	e7e2      	b.n	800455e <_strtod_l+0x226>
 8004598:	1c57      	adds	r7, r2, #1
 800459a:	2f10      	cmp	r7, #16
 800459c:	bfde      	ittt	le
 800459e:	9f05      	ldrle	r7, [sp, #20]
 80045a0:	434f      	mulle	r7, r1
 80045a2:	9705      	strle	r7, [sp, #20]
 80045a4:	e7f6      	b.n	8004594 <_strtod_l+0x25c>
 80045a6:	2c10      	cmp	r4, #16
 80045a8:	bfdf      	itttt	le
 80045aa:	220a      	movle	r2, #10
 80045ac:	9905      	ldrle	r1, [sp, #20]
 80045ae:	fb02 3301 	mlale	r3, r2, r1, r3
 80045b2:	9305      	strle	r3, [sp, #20]
 80045b4:	e7e0      	b.n	8004578 <_strtod_l+0x240>
 80045b6:	2300      	movs	r3, #0
 80045b8:	2201      	movs	r2, #1
 80045ba:	9304      	str	r3, [sp, #16]
 80045bc:	e77c      	b.n	80044b8 <_strtod_l+0x180>
 80045be:	2700      	movs	r7, #0
 80045c0:	1cb3      	adds	r3, r6, #2
 80045c2:	931b      	str	r3, [sp, #108]	; 0x6c
 80045c4:	78b3      	ldrb	r3, [r6, #2]
 80045c6:	e784      	b.n	80044d2 <_strtod_l+0x19a>
 80045c8:	2701      	movs	r7, #1
 80045ca:	e7f9      	b.n	80045c0 <_strtod_l+0x288>
 80045cc:	080080f0 	.word	0x080080f0
 80045d0:	08007ea0 	.word	0x08007ea0
 80045d4:	7ff00000 	.word	0x7ff00000
 80045d8:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 80045da:	1c59      	adds	r1, r3, #1
 80045dc:	911b      	str	r1, [sp, #108]	; 0x6c
 80045de:	785b      	ldrb	r3, [r3, #1]
 80045e0:	2b30      	cmp	r3, #48	; 0x30
 80045e2:	d0f9      	beq.n	80045d8 <_strtod_l+0x2a0>
 80045e4:	f1a3 0131 	sub.w	r1, r3, #49	; 0x31
 80045e8:	2908      	cmp	r1, #8
 80045ea:	f63f af78 	bhi.w	80044de <_strtod_l+0x1a6>
 80045ee:	f04f 0e0a 	mov.w	lr, #10
 80045f2:	f1a3 0c30 	sub.w	ip, r3, #48	; 0x30
 80045f6:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 80045f8:	9309      	str	r3, [sp, #36]	; 0x24
 80045fa:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 80045fc:	1c59      	adds	r1, r3, #1
 80045fe:	911b      	str	r1, [sp, #108]	; 0x6c
 8004600:	785b      	ldrb	r3, [r3, #1]
 8004602:	f1a3 0530 	sub.w	r5, r3, #48	; 0x30
 8004606:	2d09      	cmp	r5, #9
 8004608:	d935      	bls.n	8004676 <_strtod_l+0x33e>
 800460a:	9d09      	ldr	r5, [sp, #36]	; 0x24
 800460c:	1b49      	subs	r1, r1, r5
 800460e:	2908      	cmp	r1, #8
 8004610:	f644 651f 	movw	r5, #19999	; 0x4e1f
 8004614:	dc02      	bgt.n	800461c <_strtod_l+0x2e4>
 8004616:	4565      	cmp	r5, ip
 8004618:	bfa8      	it	ge
 800461a:	4665      	movge	r5, ip
 800461c:	b107      	cbz	r7, 8004620 <_strtod_l+0x2e8>
 800461e:	426d      	negs	r5, r5
 8004620:	2c00      	cmp	r4, #0
 8004622:	d14c      	bne.n	80046be <_strtod_l+0x386>
 8004624:	9907      	ldr	r1, [sp, #28]
 8004626:	4301      	orrs	r1, r0
 8004628:	f47f aec7 	bne.w	80043ba <_strtod_l+0x82>
 800462c:	2a00      	cmp	r2, #0
 800462e:	f47f aee0 	bne.w	80043f2 <_strtod_l+0xba>
 8004632:	2b69      	cmp	r3, #105	; 0x69
 8004634:	d026      	beq.n	8004684 <_strtod_l+0x34c>
 8004636:	dc23      	bgt.n	8004680 <_strtod_l+0x348>
 8004638:	2b49      	cmp	r3, #73	; 0x49
 800463a:	d023      	beq.n	8004684 <_strtod_l+0x34c>
 800463c:	2b4e      	cmp	r3, #78	; 0x4e
 800463e:	f47f aed8 	bne.w	80043f2 <_strtod_l+0xba>
 8004642:	499c      	ldr	r1, [pc, #624]	; (80048b4 <_strtod_l+0x57c>)
 8004644:	a81b      	add	r0, sp, #108	; 0x6c
 8004646:	f001 fe2b 	bl	80062a0 <__match>
 800464a:	2800      	cmp	r0, #0
 800464c:	f43f aed1 	beq.w	80043f2 <_strtod_l+0xba>
 8004650:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8004652:	781b      	ldrb	r3, [r3, #0]
 8004654:	2b28      	cmp	r3, #40	; 0x28
 8004656:	d12c      	bne.n	80046b2 <_strtod_l+0x37a>
 8004658:	4997      	ldr	r1, [pc, #604]	; (80048b8 <_strtod_l+0x580>)
 800465a:	aa1e      	add	r2, sp, #120	; 0x78
 800465c:	a81b      	add	r0, sp, #108	; 0x6c
 800465e:	f001 fe33 	bl	80062c8 <__hexnan>
 8004662:	2805      	cmp	r0, #5
 8004664:	d125      	bne.n	80046b2 <_strtod_l+0x37a>
 8004666:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 8004668:	f8dd 8078 	ldr.w	r8, [sp, #120]	; 0x78
 800466c:	f043 49ff 	orr.w	r9, r3, #2139095040	; 0x7f800000
 8004670:	f449 09e0 	orr.w	r9, r9, #7340032	; 0x700000
 8004674:	e6a1      	b.n	80043ba <_strtod_l+0x82>
 8004676:	fb0e 3c0c 	mla	ip, lr, ip, r3
 800467a:	f1ac 0c30 	sub.w	ip, ip, #48	; 0x30
 800467e:	e7bc      	b.n	80045fa <_strtod_l+0x2c2>
 8004680:	2b6e      	cmp	r3, #110	; 0x6e
 8004682:	e7dc      	b.n	800463e <_strtod_l+0x306>
 8004684:	498d      	ldr	r1, [pc, #564]	; (80048bc <_strtod_l+0x584>)
 8004686:	a81b      	add	r0, sp, #108	; 0x6c
 8004688:	f001 fe0a 	bl	80062a0 <__match>
 800468c:	2800      	cmp	r0, #0
 800468e:	f43f aeb0 	beq.w	80043f2 <_strtod_l+0xba>
 8004692:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8004694:	498a      	ldr	r1, [pc, #552]	; (80048c0 <_strtod_l+0x588>)
 8004696:	3b01      	subs	r3, #1
 8004698:	a81b      	add	r0, sp, #108	; 0x6c
 800469a:	931b      	str	r3, [sp, #108]	; 0x6c
 800469c:	f001 fe00 	bl	80062a0 <__match>
 80046a0:	b910      	cbnz	r0, 80046a8 <_strtod_l+0x370>
 80046a2:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 80046a4:	3301      	adds	r3, #1
 80046a6:	931b      	str	r3, [sp, #108]	; 0x6c
 80046a8:	f04f 0800 	mov.w	r8, #0
 80046ac:	f8df 9220 	ldr.w	r9, [pc, #544]	; 80048d0 <_strtod_l+0x598>
 80046b0:	e683      	b.n	80043ba <_strtod_l+0x82>
 80046b2:	4884      	ldr	r0, [pc, #528]	; (80048c4 <_strtod_l+0x58c>)
 80046b4:	f002 fda6 	bl	8007204 <nan>
 80046b8:	4680      	mov	r8, r0
 80046ba:	4689      	mov	r9, r1
 80046bc:	e67d      	b.n	80043ba <_strtod_l+0x82>
 80046be:	9b04      	ldr	r3, [sp, #16]
 80046c0:	f1bb 0f00 	cmp.w	fp, #0
 80046c4:	bf08      	it	eq
 80046c6:	46a3      	moveq	fp, r4
 80046c8:	1aeb      	subs	r3, r5, r3
 80046ca:	2c10      	cmp	r4, #16
 80046cc:	9806      	ldr	r0, [sp, #24]
 80046ce:	4626      	mov	r6, r4
 80046d0:	9307      	str	r3, [sp, #28]
 80046d2:	bfa8      	it	ge
 80046d4:	2610      	movge	r6, #16
 80046d6:	f7fb fe85 	bl	80003e4 <__aeabi_ui2d>
 80046da:	2c09      	cmp	r4, #9
 80046dc:	4680      	mov	r8, r0
 80046de:	4689      	mov	r9, r1
 80046e0:	dd13      	ble.n	800470a <_strtod_l+0x3d2>
 80046e2:	4b79      	ldr	r3, [pc, #484]	; (80048c8 <_strtod_l+0x590>)
 80046e4:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 80046e8:	e953 2312 	ldrd	r2, r3, [r3, #-72]	; 0x48
 80046ec:	f7fb fef4 	bl	80004d8 <__aeabi_dmul>
 80046f0:	4680      	mov	r8, r0
 80046f2:	9805      	ldr	r0, [sp, #20]
 80046f4:	4689      	mov	r9, r1
 80046f6:	f7fb fe75 	bl	80003e4 <__aeabi_ui2d>
 80046fa:	4602      	mov	r2, r0
 80046fc:	460b      	mov	r3, r1
 80046fe:	4640      	mov	r0, r8
 8004700:	4649      	mov	r1, r9
 8004702:	f7fb fd33 	bl	800016c <__adddf3>
 8004706:	4680      	mov	r8, r0
 8004708:	4689      	mov	r9, r1
 800470a:	2c0f      	cmp	r4, #15
 800470c:	dc36      	bgt.n	800477c <_strtod_l+0x444>
 800470e:	9b07      	ldr	r3, [sp, #28]
 8004710:	2b00      	cmp	r3, #0
 8004712:	f43f ae52 	beq.w	80043ba <_strtod_l+0x82>
 8004716:	dd22      	ble.n	800475e <_strtod_l+0x426>
 8004718:	2b16      	cmp	r3, #22
 800471a:	dc09      	bgt.n	8004730 <_strtod_l+0x3f8>
 800471c:	4c6a      	ldr	r4, [pc, #424]	; (80048c8 <_strtod_l+0x590>)
 800471e:	4642      	mov	r2, r8
 8004720:	eb04 04c3 	add.w	r4, r4, r3, lsl #3
 8004724:	464b      	mov	r3, r9
 8004726:	e9d4 0100 	ldrd	r0, r1, [r4]
 800472a:	f7fb fed5 	bl	80004d8 <__aeabi_dmul>
 800472e:	e7c3      	b.n	80046b8 <_strtod_l+0x380>
 8004730:	9a07      	ldr	r2, [sp, #28]
 8004732:	f1c4 0325 	rsb	r3, r4, #37	; 0x25
 8004736:	4293      	cmp	r3, r2
 8004738:	db20      	blt.n	800477c <_strtod_l+0x444>
 800473a:	4d63      	ldr	r5, [pc, #396]	; (80048c8 <_strtod_l+0x590>)
 800473c:	f1c4 040f 	rsb	r4, r4, #15
 8004740:	eb05 01c4 	add.w	r1, r5, r4, lsl #3
 8004744:	4642      	mov	r2, r8
 8004746:	e9d1 0100 	ldrd	r0, r1, [r1]
 800474a:	464b      	mov	r3, r9
 800474c:	f7fb fec4 	bl	80004d8 <__aeabi_dmul>
 8004750:	9b07      	ldr	r3, [sp, #28]
 8004752:	1b1c      	subs	r4, r3, r4
 8004754:	eb05 05c4 	add.w	r5, r5, r4, lsl #3
 8004758:	e9d5 2300 	ldrd	r2, r3, [r5]
 800475c:	e7e5      	b.n	800472a <_strtod_l+0x3f2>
 800475e:	9b07      	ldr	r3, [sp, #28]
 8004760:	3316      	adds	r3, #22
 8004762:	db0b      	blt.n	800477c <_strtod_l+0x444>
 8004764:	9b04      	ldr	r3, [sp, #16]
 8004766:	4a58      	ldr	r2, [pc, #352]	; (80048c8 <_strtod_l+0x590>)
 8004768:	1b5d      	subs	r5, r3, r5
 800476a:	eb02 05c5 	add.w	r5, r2, r5, lsl #3
 800476e:	4640      	mov	r0, r8
 8004770:	e9d5 2300 	ldrd	r2, r3, [r5]
 8004774:	4649      	mov	r1, r9
 8004776:	f7fb ffd9 	bl	800072c <__aeabi_ddiv>
 800477a:	e79d      	b.n	80046b8 <_strtod_l+0x380>
 800477c:	9b07      	ldr	r3, [sp, #28]
 800477e:	1ba6      	subs	r6, r4, r6
 8004780:	441e      	add	r6, r3
 8004782:	2e00      	cmp	r6, #0
 8004784:	dd71      	ble.n	800486a <_strtod_l+0x532>
 8004786:	f016 030f 	ands.w	r3, r6, #15
 800478a:	d00a      	beq.n	80047a2 <_strtod_l+0x46a>
 800478c:	494e      	ldr	r1, [pc, #312]	; (80048c8 <_strtod_l+0x590>)
 800478e:	4642      	mov	r2, r8
 8004790:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 8004794:	e9d1 0100 	ldrd	r0, r1, [r1]
 8004798:	464b      	mov	r3, r9
 800479a:	f7fb fe9d 	bl	80004d8 <__aeabi_dmul>
 800479e:	4680      	mov	r8, r0
 80047a0:	4689      	mov	r9, r1
 80047a2:	f036 060f 	bics.w	r6, r6, #15
 80047a6:	d050      	beq.n	800484a <_strtod_l+0x512>
 80047a8:	f5b6 7f9a 	cmp.w	r6, #308	; 0x134
 80047ac:	dd27      	ble.n	80047fe <_strtod_l+0x4c6>
 80047ae:	f04f 0b00 	mov.w	fp, #0
 80047b2:	f8cd b010 	str.w	fp, [sp, #16]
 80047b6:	f8cd b020 	str.w	fp, [sp, #32]
 80047ba:	f8cd b018 	str.w	fp, [sp, #24]
 80047be:	2322      	movs	r3, #34	; 0x22
 80047c0:	f04f 0800 	mov.w	r8, #0
 80047c4:	f8df 9108 	ldr.w	r9, [pc, #264]	; 80048d0 <_strtod_l+0x598>
 80047c8:	f8ca 3000 	str.w	r3, [sl]
 80047cc:	9b08      	ldr	r3, [sp, #32]
 80047ce:	2b00      	cmp	r3, #0
 80047d0:	f43f adf3 	beq.w	80043ba <_strtod_l+0x82>
 80047d4:	4650      	mov	r0, sl
 80047d6:	991c      	ldr	r1, [sp, #112]	; 0x70
 80047d8:	f001 fe8c 	bl	80064f4 <_Bfree>
 80047dc:	4650      	mov	r0, sl
 80047de:	9906      	ldr	r1, [sp, #24]
 80047e0:	f001 fe88 	bl	80064f4 <_Bfree>
 80047e4:	4650      	mov	r0, sl
 80047e6:	9904      	ldr	r1, [sp, #16]
 80047e8:	f001 fe84 	bl	80064f4 <_Bfree>
 80047ec:	4650      	mov	r0, sl
 80047ee:	9908      	ldr	r1, [sp, #32]
 80047f0:	f001 fe80 	bl	80064f4 <_Bfree>
 80047f4:	4659      	mov	r1, fp
 80047f6:	4650      	mov	r0, sl
 80047f8:	f001 fe7c 	bl	80064f4 <_Bfree>
 80047fc:	e5dd      	b.n	80043ba <_strtod_l+0x82>
 80047fe:	2300      	movs	r3, #0
 8004800:	4640      	mov	r0, r8
 8004802:	4649      	mov	r1, r9
 8004804:	461f      	mov	r7, r3
 8004806:	1136      	asrs	r6, r6, #4
 8004808:	2e01      	cmp	r6, #1
 800480a:	dc21      	bgt.n	8004850 <_strtod_l+0x518>
 800480c:	b10b      	cbz	r3, 8004812 <_strtod_l+0x4da>
 800480e:	4680      	mov	r8, r0
 8004810:	4689      	mov	r9, r1
 8004812:	4b2e      	ldr	r3, [pc, #184]	; (80048cc <_strtod_l+0x594>)
 8004814:	f1a9 7954 	sub.w	r9, r9, #55574528	; 0x3500000
 8004818:	eb03 07c7 	add.w	r7, r3, r7, lsl #3
 800481c:	4642      	mov	r2, r8
 800481e:	e9d7 0100 	ldrd	r0, r1, [r7]
 8004822:	464b      	mov	r3, r9
 8004824:	f7fb fe58 	bl	80004d8 <__aeabi_dmul>
 8004828:	4b29      	ldr	r3, [pc, #164]	; (80048d0 <_strtod_l+0x598>)
 800482a:	460a      	mov	r2, r1
 800482c:	400b      	ands	r3, r1
 800482e:	4929      	ldr	r1, [pc, #164]	; (80048d4 <_strtod_l+0x59c>)
 8004830:	4680      	mov	r8, r0
 8004832:	428b      	cmp	r3, r1
 8004834:	d8bb      	bhi.n	80047ae <_strtod_l+0x476>
 8004836:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
 800483a:	428b      	cmp	r3, r1
 800483c:	bf86      	itte	hi
 800483e:	f04f 38ff 	movhi.w	r8, #4294967295
 8004842:	f8df 9094 	ldrhi.w	r9, [pc, #148]	; 80048d8 <_strtod_l+0x5a0>
 8004846:	f102 7954 	addls.w	r9, r2, #55574528	; 0x3500000
 800484a:	2300      	movs	r3, #0
 800484c:	9305      	str	r3, [sp, #20]
 800484e:	e07e      	b.n	800494e <_strtod_l+0x616>
 8004850:	07f2      	lsls	r2, r6, #31
 8004852:	d507      	bpl.n	8004864 <_strtod_l+0x52c>
 8004854:	4b1d      	ldr	r3, [pc, #116]	; (80048cc <_strtod_l+0x594>)
 8004856:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 800485a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800485e:	f7fb fe3b 	bl	80004d8 <__aeabi_dmul>
 8004862:	2301      	movs	r3, #1
 8004864:	3701      	adds	r7, #1
 8004866:	1076      	asrs	r6, r6, #1
 8004868:	e7ce      	b.n	8004808 <_strtod_l+0x4d0>
 800486a:	d0ee      	beq.n	800484a <_strtod_l+0x512>
 800486c:	4276      	negs	r6, r6
 800486e:	f016 020f 	ands.w	r2, r6, #15
 8004872:	d00a      	beq.n	800488a <_strtod_l+0x552>
 8004874:	4b14      	ldr	r3, [pc, #80]	; (80048c8 <_strtod_l+0x590>)
 8004876:	4640      	mov	r0, r8
 8004878:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800487c:	4649      	mov	r1, r9
 800487e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004882:	f7fb ff53 	bl	800072c <__aeabi_ddiv>
 8004886:	4680      	mov	r8, r0
 8004888:	4689      	mov	r9, r1
 800488a:	1136      	asrs	r6, r6, #4
 800488c:	d0dd      	beq.n	800484a <_strtod_l+0x512>
 800488e:	2e1f      	cmp	r6, #31
 8004890:	dd24      	ble.n	80048dc <_strtod_l+0x5a4>
 8004892:	f04f 0b00 	mov.w	fp, #0
 8004896:	f8cd b010 	str.w	fp, [sp, #16]
 800489a:	f8cd b020 	str.w	fp, [sp, #32]
 800489e:	f8cd b018 	str.w	fp, [sp, #24]
 80048a2:	2322      	movs	r3, #34	; 0x22
 80048a4:	f04f 0800 	mov.w	r8, #0
 80048a8:	f04f 0900 	mov.w	r9, #0
 80048ac:	f8ca 3000 	str.w	r3, [sl]
 80048b0:	e78c      	b.n	80047cc <_strtod_l+0x494>
 80048b2:	bf00      	nop
 80048b4:	08007e71 	.word	0x08007e71
 80048b8:	08007eb4 	.word	0x08007eb4
 80048bc:	08007e69 	.word	0x08007e69
 80048c0:	08007ff4 	.word	0x08007ff4
 80048c4:	080082b0 	.word	0x080082b0
 80048c8:	08008190 	.word	0x08008190
 80048cc:	08008168 	.word	0x08008168
 80048d0:	7ff00000 	.word	0x7ff00000
 80048d4:	7ca00000 	.word	0x7ca00000
 80048d8:	7fefffff 	.word	0x7fefffff
 80048dc:	f016 0310 	ands.w	r3, r6, #16
 80048e0:	bf18      	it	ne
 80048e2:	236a      	movne	r3, #106	; 0x6a
 80048e4:	4640      	mov	r0, r8
 80048e6:	9305      	str	r3, [sp, #20]
 80048e8:	4649      	mov	r1, r9
 80048ea:	2300      	movs	r3, #0
 80048ec:	4fb2      	ldr	r7, [pc, #712]	; (8004bb8 <_strtod_l+0x880>)
 80048ee:	07f2      	lsls	r2, r6, #31
 80048f0:	d504      	bpl.n	80048fc <_strtod_l+0x5c4>
 80048f2:	e9d7 2300 	ldrd	r2, r3, [r7]
 80048f6:	f7fb fdef 	bl	80004d8 <__aeabi_dmul>
 80048fa:	2301      	movs	r3, #1
 80048fc:	1076      	asrs	r6, r6, #1
 80048fe:	f107 0708 	add.w	r7, r7, #8
 8004902:	d1f4      	bne.n	80048ee <_strtod_l+0x5b6>
 8004904:	b10b      	cbz	r3, 800490a <_strtod_l+0x5d2>
 8004906:	4680      	mov	r8, r0
 8004908:	4689      	mov	r9, r1
 800490a:	9b05      	ldr	r3, [sp, #20]
 800490c:	b1bb      	cbz	r3, 800493e <_strtod_l+0x606>
 800490e:	f3c9 530a 	ubfx	r3, r9, #20, #11
 8004912:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 8004916:	2b00      	cmp	r3, #0
 8004918:	4649      	mov	r1, r9
 800491a:	dd10      	ble.n	800493e <_strtod_l+0x606>
 800491c:	2b1f      	cmp	r3, #31
 800491e:	f340 812b 	ble.w	8004b78 <_strtod_l+0x840>
 8004922:	2b34      	cmp	r3, #52	; 0x34
 8004924:	bfd8      	it	le
 8004926:	f04f 32ff 	movle.w	r2, #4294967295
 800492a:	f04f 0800 	mov.w	r8, #0
 800492e:	bfcf      	iteee	gt
 8004930:	f04f 795c 	movgt.w	r9, #57671680	; 0x3700000
 8004934:	3b20      	suble	r3, #32
 8004936:	fa02 f303 	lslle.w	r3, r2, r3
 800493a:	ea03 0901 	andle.w	r9, r3, r1
 800493e:	2200      	movs	r2, #0
 8004940:	2300      	movs	r3, #0
 8004942:	4640      	mov	r0, r8
 8004944:	4649      	mov	r1, r9
 8004946:	f7fc f82f 	bl	80009a8 <__aeabi_dcmpeq>
 800494a:	2800      	cmp	r0, #0
 800494c:	d1a1      	bne.n	8004892 <_strtod_l+0x55a>
 800494e:	9b06      	ldr	r3, [sp, #24]
 8004950:	465a      	mov	r2, fp
 8004952:	9300      	str	r3, [sp, #0]
 8004954:	4650      	mov	r0, sl
 8004956:	4623      	mov	r3, r4
 8004958:	9908      	ldr	r1, [sp, #32]
 800495a:	f001 fe37 	bl	80065cc <__s2b>
 800495e:	9008      	str	r0, [sp, #32]
 8004960:	2800      	cmp	r0, #0
 8004962:	f43f af24 	beq.w	80047ae <_strtod_l+0x476>
 8004966:	9b04      	ldr	r3, [sp, #16]
 8004968:	f04f 0b00 	mov.w	fp, #0
 800496c:	1b5d      	subs	r5, r3, r5
 800496e:	9b07      	ldr	r3, [sp, #28]
 8004970:	f8cd b010 	str.w	fp, [sp, #16]
 8004974:	2b00      	cmp	r3, #0
 8004976:	bfb4      	ite	lt
 8004978:	462b      	movlt	r3, r5
 800497a:	2300      	movge	r3, #0
 800497c:	930e      	str	r3, [sp, #56]	; 0x38
 800497e:	9b07      	ldr	r3, [sp, #28]
 8004980:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8004984:	9316      	str	r3, [sp, #88]	; 0x58
 8004986:	9b08      	ldr	r3, [sp, #32]
 8004988:	4650      	mov	r0, sl
 800498a:	6859      	ldr	r1, [r3, #4]
 800498c:	f001 fd72 	bl	8006474 <_Balloc>
 8004990:	9006      	str	r0, [sp, #24]
 8004992:	2800      	cmp	r0, #0
 8004994:	f43f af13 	beq.w	80047be <_strtod_l+0x486>
 8004998:	9b08      	ldr	r3, [sp, #32]
 800499a:	300c      	adds	r0, #12
 800499c:	691a      	ldr	r2, [r3, #16]
 800499e:	f103 010c 	add.w	r1, r3, #12
 80049a2:	3202      	adds	r2, #2
 80049a4:	0092      	lsls	r2, r2, #2
 80049a6:	f001 fd57 	bl	8006458 <memcpy>
 80049aa:	ab1e      	add	r3, sp, #120	; 0x78
 80049ac:	9301      	str	r3, [sp, #4]
 80049ae:	ab1d      	add	r3, sp, #116	; 0x74
 80049b0:	9300      	str	r3, [sp, #0]
 80049b2:	4642      	mov	r2, r8
 80049b4:	464b      	mov	r3, r9
 80049b6:	4650      	mov	r0, sl
 80049b8:	e9cd 890a 	strd	r8, r9, [sp, #40]	; 0x28
 80049bc:	f002 f944 	bl	8006c48 <__d2b>
 80049c0:	901c      	str	r0, [sp, #112]	; 0x70
 80049c2:	2800      	cmp	r0, #0
 80049c4:	f43f aefb 	beq.w	80047be <_strtod_l+0x486>
 80049c8:	2101      	movs	r1, #1
 80049ca:	4650      	mov	r0, sl
 80049cc:	f001 fe96 	bl	80066fc <__i2b>
 80049d0:	4603      	mov	r3, r0
 80049d2:	9004      	str	r0, [sp, #16]
 80049d4:	2800      	cmp	r0, #0
 80049d6:	f43f aef2 	beq.w	80047be <_strtod_l+0x486>
 80049da:	9d1d      	ldr	r5, [sp, #116]	; 0x74
 80049dc:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 80049de:	2d00      	cmp	r5, #0
 80049e0:	bfab      	itete	ge
 80049e2:	9b0e      	ldrge	r3, [sp, #56]	; 0x38
 80049e4:	9b16      	ldrlt	r3, [sp, #88]	; 0x58
 80049e6:	18ee      	addge	r6, r5, r3
 80049e8:	1b5c      	sublt	r4, r3, r5
 80049ea:	9b05      	ldr	r3, [sp, #20]
 80049ec:	bfa8      	it	ge
 80049ee:	9c16      	ldrge	r4, [sp, #88]	; 0x58
 80049f0:	eba5 0503 	sub.w	r5, r5, r3
 80049f4:	4415      	add	r5, r2
 80049f6:	4b71      	ldr	r3, [pc, #452]	; (8004bbc <_strtod_l+0x884>)
 80049f8:	f105 35ff 	add.w	r5, r5, #4294967295
 80049fc:	bfb8      	it	lt
 80049fe:	9e0e      	ldrlt	r6, [sp, #56]	; 0x38
 8004a00:	429d      	cmp	r5, r3
 8004a02:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 8004a06:	f280 80c9 	bge.w	8004b9c <_strtod_l+0x864>
 8004a0a:	1b5b      	subs	r3, r3, r5
 8004a0c:	2b1f      	cmp	r3, #31
 8004a0e:	f04f 0701 	mov.w	r7, #1
 8004a12:	eba2 0203 	sub.w	r2, r2, r3
 8004a16:	f300 80b6 	bgt.w	8004b86 <_strtod_l+0x84e>
 8004a1a:	2500      	movs	r5, #0
 8004a1c:	fa07 f303 	lsl.w	r3, r7, r3
 8004a20:	930f      	str	r3, [sp, #60]	; 0x3c
 8004a22:	18b7      	adds	r7, r6, r2
 8004a24:	9b05      	ldr	r3, [sp, #20]
 8004a26:	42be      	cmp	r6, r7
 8004a28:	4414      	add	r4, r2
 8004a2a:	441c      	add	r4, r3
 8004a2c:	4633      	mov	r3, r6
 8004a2e:	bfa8      	it	ge
 8004a30:	463b      	movge	r3, r7
 8004a32:	42a3      	cmp	r3, r4
 8004a34:	bfa8      	it	ge
 8004a36:	4623      	movge	r3, r4
 8004a38:	2b00      	cmp	r3, #0
 8004a3a:	bfc2      	ittt	gt
 8004a3c:	1aff      	subgt	r7, r7, r3
 8004a3e:	1ae4      	subgt	r4, r4, r3
 8004a40:	1af6      	subgt	r6, r6, r3
 8004a42:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8004a44:	2b00      	cmp	r3, #0
 8004a46:	dd17      	ble.n	8004a78 <_strtod_l+0x740>
 8004a48:	461a      	mov	r2, r3
 8004a4a:	4650      	mov	r0, sl
 8004a4c:	9904      	ldr	r1, [sp, #16]
 8004a4e:	f001 ff0f 	bl	8006870 <__pow5mult>
 8004a52:	9004      	str	r0, [sp, #16]
 8004a54:	2800      	cmp	r0, #0
 8004a56:	f43f aeb2 	beq.w	80047be <_strtod_l+0x486>
 8004a5a:	4601      	mov	r1, r0
 8004a5c:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 8004a5e:	4650      	mov	r0, sl
 8004a60:	f001 fe62 	bl	8006728 <__multiply>
 8004a64:	9009      	str	r0, [sp, #36]	; 0x24
 8004a66:	2800      	cmp	r0, #0
 8004a68:	f43f aea9 	beq.w	80047be <_strtod_l+0x486>
 8004a6c:	4650      	mov	r0, sl
 8004a6e:	991c      	ldr	r1, [sp, #112]	; 0x70
 8004a70:	f001 fd40 	bl	80064f4 <_Bfree>
 8004a74:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004a76:	931c      	str	r3, [sp, #112]	; 0x70
 8004a78:	2f00      	cmp	r7, #0
 8004a7a:	f300 8093 	bgt.w	8004ba4 <_strtod_l+0x86c>
 8004a7e:	9b07      	ldr	r3, [sp, #28]
 8004a80:	2b00      	cmp	r3, #0
 8004a82:	dd08      	ble.n	8004a96 <_strtod_l+0x75e>
 8004a84:	4650      	mov	r0, sl
 8004a86:	9a16      	ldr	r2, [sp, #88]	; 0x58
 8004a88:	9906      	ldr	r1, [sp, #24]
 8004a8a:	f001 fef1 	bl	8006870 <__pow5mult>
 8004a8e:	9006      	str	r0, [sp, #24]
 8004a90:	2800      	cmp	r0, #0
 8004a92:	f43f ae94 	beq.w	80047be <_strtod_l+0x486>
 8004a96:	2c00      	cmp	r4, #0
 8004a98:	dd08      	ble.n	8004aac <_strtod_l+0x774>
 8004a9a:	4622      	mov	r2, r4
 8004a9c:	4650      	mov	r0, sl
 8004a9e:	9906      	ldr	r1, [sp, #24]
 8004aa0:	f001 ff40 	bl	8006924 <__lshift>
 8004aa4:	9006      	str	r0, [sp, #24]
 8004aa6:	2800      	cmp	r0, #0
 8004aa8:	f43f ae89 	beq.w	80047be <_strtod_l+0x486>
 8004aac:	2e00      	cmp	r6, #0
 8004aae:	dd08      	ble.n	8004ac2 <_strtod_l+0x78a>
 8004ab0:	4632      	mov	r2, r6
 8004ab2:	4650      	mov	r0, sl
 8004ab4:	9904      	ldr	r1, [sp, #16]
 8004ab6:	f001 ff35 	bl	8006924 <__lshift>
 8004aba:	9004      	str	r0, [sp, #16]
 8004abc:	2800      	cmp	r0, #0
 8004abe:	f43f ae7e 	beq.w	80047be <_strtod_l+0x486>
 8004ac2:	4650      	mov	r0, sl
 8004ac4:	9a06      	ldr	r2, [sp, #24]
 8004ac6:	991c      	ldr	r1, [sp, #112]	; 0x70
 8004ac8:	f001 ffb4 	bl	8006a34 <__mdiff>
 8004acc:	4683      	mov	fp, r0
 8004ace:	2800      	cmp	r0, #0
 8004ad0:	f43f ae75 	beq.w	80047be <_strtod_l+0x486>
 8004ad4:	2400      	movs	r4, #0
 8004ad6:	68c3      	ldr	r3, [r0, #12]
 8004ad8:	9904      	ldr	r1, [sp, #16]
 8004ada:	60c4      	str	r4, [r0, #12]
 8004adc:	930d      	str	r3, [sp, #52]	; 0x34
 8004ade:	f001 ff8d 	bl	80069fc <__mcmp>
 8004ae2:	42a0      	cmp	r0, r4
 8004ae4:	da70      	bge.n	8004bc8 <_strtod_l+0x890>
 8004ae6:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8004ae8:	ea53 0308 	orrs.w	r3, r3, r8
 8004aec:	f040 8096 	bne.w	8004c1c <_strtod_l+0x8e4>
 8004af0:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8004af4:	2b00      	cmp	r3, #0
 8004af6:	f040 8091 	bne.w	8004c1c <_strtod_l+0x8e4>
 8004afa:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8004afe:	0d1b      	lsrs	r3, r3, #20
 8004b00:	051b      	lsls	r3, r3, #20
 8004b02:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 8004b06:	f240 8089 	bls.w	8004c1c <_strtod_l+0x8e4>
 8004b0a:	f8db 3014 	ldr.w	r3, [fp, #20]
 8004b0e:	b923      	cbnz	r3, 8004b1a <_strtod_l+0x7e2>
 8004b10:	f8db 3010 	ldr.w	r3, [fp, #16]
 8004b14:	2b01      	cmp	r3, #1
 8004b16:	f340 8081 	ble.w	8004c1c <_strtod_l+0x8e4>
 8004b1a:	4659      	mov	r1, fp
 8004b1c:	2201      	movs	r2, #1
 8004b1e:	4650      	mov	r0, sl
 8004b20:	f001 ff00 	bl	8006924 <__lshift>
 8004b24:	9904      	ldr	r1, [sp, #16]
 8004b26:	4683      	mov	fp, r0
 8004b28:	f001 ff68 	bl	80069fc <__mcmp>
 8004b2c:	2800      	cmp	r0, #0
 8004b2e:	dd75      	ble.n	8004c1c <_strtod_l+0x8e4>
 8004b30:	9905      	ldr	r1, [sp, #20]
 8004b32:	464b      	mov	r3, r9
 8004b34:	4a22      	ldr	r2, [pc, #136]	; (8004bc0 <_strtod_l+0x888>)
 8004b36:	2900      	cmp	r1, #0
 8004b38:	f000 8091 	beq.w	8004c5e <_strtod_l+0x926>
 8004b3c:	ea02 0109 	and.w	r1, r2, r9
 8004b40:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
 8004b44:	f300 808b 	bgt.w	8004c5e <_strtod_l+0x926>
 8004b48:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
 8004b4c:	f77f aea9 	ble.w	80048a2 <_strtod_l+0x56a>
 8004b50:	2300      	movs	r3, #0
 8004b52:	4a1c      	ldr	r2, [pc, #112]	; (8004bc4 <_strtod_l+0x88c>)
 8004b54:	4640      	mov	r0, r8
 8004b56:	e9cd 3214 	strd	r3, r2, [sp, #80]	; 0x50
 8004b5a:	4649      	mov	r1, r9
 8004b5c:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	; 0x50
 8004b60:	f7fb fcba 	bl	80004d8 <__aeabi_dmul>
 8004b64:	460b      	mov	r3, r1
 8004b66:	4303      	orrs	r3, r0
 8004b68:	bf08      	it	eq
 8004b6a:	2322      	moveq	r3, #34	; 0x22
 8004b6c:	4680      	mov	r8, r0
 8004b6e:	4689      	mov	r9, r1
 8004b70:	bf08      	it	eq
 8004b72:	f8ca 3000 	streq.w	r3, [sl]
 8004b76:	e62d      	b.n	80047d4 <_strtod_l+0x49c>
 8004b78:	f04f 32ff 	mov.w	r2, #4294967295
 8004b7c:	fa02 f303 	lsl.w	r3, r2, r3
 8004b80:	ea03 0808 	and.w	r8, r3, r8
 8004b84:	e6db      	b.n	800493e <_strtod_l+0x606>
 8004b86:	f1c5 457f 	rsb	r5, r5, #4278190080	; 0xff000000
 8004b8a:	f505 057f 	add.w	r5, r5, #16711680	; 0xff0000
 8004b8e:	f505 457b 	add.w	r5, r5, #64256	; 0xfb00
 8004b92:	35e2      	adds	r5, #226	; 0xe2
 8004b94:	fa07 f505 	lsl.w	r5, r7, r5
 8004b98:	970f      	str	r7, [sp, #60]	; 0x3c
 8004b9a:	e742      	b.n	8004a22 <_strtod_l+0x6ea>
 8004b9c:	2301      	movs	r3, #1
 8004b9e:	2500      	movs	r5, #0
 8004ba0:	930f      	str	r3, [sp, #60]	; 0x3c
 8004ba2:	e73e      	b.n	8004a22 <_strtod_l+0x6ea>
 8004ba4:	463a      	mov	r2, r7
 8004ba6:	4650      	mov	r0, sl
 8004ba8:	991c      	ldr	r1, [sp, #112]	; 0x70
 8004baa:	f001 febb 	bl	8006924 <__lshift>
 8004bae:	901c      	str	r0, [sp, #112]	; 0x70
 8004bb0:	2800      	cmp	r0, #0
 8004bb2:	f47f af64 	bne.w	8004a7e <_strtod_l+0x746>
 8004bb6:	e602      	b.n	80047be <_strtod_l+0x486>
 8004bb8:	08007ec8 	.word	0x08007ec8
 8004bbc:	fffffc02 	.word	0xfffffc02
 8004bc0:	7ff00000 	.word	0x7ff00000
 8004bc4:	39500000 	.word	0x39500000
 8004bc8:	f8cd 9024 	str.w	r9, [sp, #36]	; 0x24
 8004bcc:	d166      	bne.n	8004c9c <_strtod_l+0x964>
 8004bce:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8004bd0:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8004bd4:	b35a      	cbz	r2, 8004c2e <_strtod_l+0x8f6>
 8004bd6:	4a9c      	ldr	r2, [pc, #624]	; (8004e48 <_strtod_l+0xb10>)
 8004bd8:	4293      	cmp	r3, r2
 8004bda:	d12c      	bne.n	8004c36 <_strtod_l+0x8fe>
 8004bdc:	9b05      	ldr	r3, [sp, #20]
 8004bde:	4640      	mov	r0, r8
 8004be0:	b303      	cbz	r3, 8004c24 <_strtod_l+0x8ec>
 8004be2:	464b      	mov	r3, r9
 8004be4:	4a99      	ldr	r2, [pc, #612]	; (8004e4c <_strtod_l+0xb14>)
 8004be6:	f04f 31ff 	mov.w	r1, #4294967295
 8004bea:	401a      	ands	r2, r3
 8004bec:	f1b2 6fd4 	cmp.w	r2, #111149056	; 0x6a00000
 8004bf0:	d81b      	bhi.n	8004c2a <_strtod_l+0x8f2>
 8004bf2:	0d12      	lsrs	r2, r2, #20
 8004bf4:	f1c2 036b 	rsb	r3, r2, #107	; 0x6b
 8004bf8:	fa01 f303 	lsl.w	r3, r1, r3
 8004bfc:	4298      	cmp	r0, r3
 8004bfe:	d11a      	bne.n	8004c36 <_strtod_l+0x8fe>
 8004c00:	4b93      	ldr	r3, [pc, #588]	; (8004e50 <_strtod_l+0xb18>)
 8004c02:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8004c04:	429a      	cmp	r2, r3
 8004c06:	d102      	bne.n	8004c0e <_strtod_l+0x8d6>
 8004c08:	3001      	adds	r0, #1
 8004c0a:	f43f add8 	beq.w	80047be <_strtod_l+0x486>
 8004c0e:	f04f 0800 	mov.w	r8, #0
 8004c12:	4b8e      	ldr	r3, [pc, #568]	; (8004e4c <_strtod_l+0xb14>)
 8004c14:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8004c16:	401a      	ands	r2, r3
 8004c18:	f502 1980 	add.w	r9, r2, #1048576	; 0x100000
 8004c1c:	9b05      	ldr	r3, [sp, #20]
 8004c1e:	2b00      	cmp	r3, #0
 8004c20:	d196      	bne.n	8004b50 <_strtod_l+0x818>
 8004c22:	e5d7      	b.n	80047d4 <_strtod_l+0x49c>
 8004c24:	f04f 33ff 	mov.w	r3, #4294967295
 8004c28:	e7e8      	b.n	8004bfc <_strtod_l+0x8c4>
 8004c2a:	460b      	mov	r3, r1
 8004c2c:	e7e6      	b.n	8004bfc <_strtod_l+0x8c4>
 8004c2e:	ea53 0308 	orrs.w	r3, r3, r8
 8004c32:	f43f af7d 	beq.w	8004b30 <_strtod_l+0x7f8>
 8004c36:	b1e5      	cbz	r5, 8004c72 <_strtod_l+0x93a>
 8004c38:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004c3a:	421d      	tst	r5, r3
 8004c3c:	d0ee      	beq.n	8004c1c <_strtod_l+0x8e4>
 8004c3e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8004c40:	4640      	mov	r0, r8
 8004c42:	4649      	mov	r1, r9
 8004c44:	9a05      	ldr	r2, [sp, #20]
 8004c46:	b1c3      	cbz	r3, 8004c7a <_strtod_l+0x942>
 8004c48:	f7ff fb52 	bl	80042f0 <sulp>
 8004c4c:	4602      	mov	r2, r0
 8004c4e:	460b      	mov	r3, r1
 8004c50:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8004c54:	f7fb fa8a 	bl	800016c <__adddf3>
 8004c58:	4680      	mov	r8, r0
 8004c5a:	4689      	mov	r9, r1
 8004c5c:	e7de      	b.n	8004c1c <_strtod_l+0x8e4>
 8004c5e:	4013      	ands	r3, r2
 8004c60:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 8004c64:	ea6f 5913 	mvn.w	r9, r3, lsr #20
 8004c68:	f04f 38ff 	mov.w	r8, #4294967295
 8004c6c:	ea6f 5909 	mvn.w	r9, r9, lsl #20
 8004c70:	e7d4      	b.n	8004c1c <_strtod_l+0x8e4>
 8004c72:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8004c74:	ea13 0f08 	tst.w	r3, r8
 8004c78:	e7e0      	b.n	8004c3c <_strtod_l+0x904>
 8004c7a:	f7ff fb39 	bl	80042f0 <sulp>
 8004c7e:	4602      	mov	r2, r0
 8004c80:	460b      	mov	r3, r1
 8004c82:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8004c86:	f7fb fa6f 	bl	8000168 <__aeabi_dsub>
 8004c8a:	2200      	movs	r2, #0
 8004c8c:	2300      	movs	r3, #0
 8004c8e:	4680      	mov	r8, r0
 8004c90:	4689      	mov	r9, r1
 8004c92:	f7fb fe89 	bl	80009a8 <__aeabi_dcmpeq>
 8004c96:	2800      	cmp	r0, #0
 8004c98:	d0c0      	beq.n	8004c1c <_strtod_l+0x8e4>
 8004c9a:	e602      	b.n	80048a2 <_strtod_l+0x56a>
 8004c9c:	4658      	mov	r0, fp
 8004c9e:	9904      	ldr	r1, [sp, #16]
 8004ca0:	f002 f82e 	bl	8006d00 <__ratio>
 8004ca4:	2200      	movs	r2, #0
 8004ca6:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8004caa:	4606      	mov	r6, r0
 8004cac:	460f      	mov	r7, r1
 8004cae:	f7fb fe8f 	bl	80009d0 <__aeabi_dcmple>
 8004cb2:	2800      	cmp	r0, #0
 8004cb4:	d075      	beq.n	8004da2 <_strtod_l+0xa6a>
 8004cb6:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8004cb8:	2b00      	cmp	r3, #0
 8004cba:	d047      	beq.n	8004d4c <_strtod_l+0xa14>
 8004cbc:	2600      	movs	r6, #0
 8004cbe:	4f65      	ldr	r7, [pc, #404]	; (8004e54 <_strtod_l+0xb1c>)
 8004cc0:	4d64      	ldr	r5, [pc, #400]	; (8004e54 <_strtod_l+0xb1c>)
 8004cc2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004cc4:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8004cc8:	0d1b      	lsrs	r3, r3, #20
 8004cca:	051b      	lsls	r3, r3, #20
 8004ccc:	930f      	str	r3, [sp, #60]	; 0x3c
 8004cce:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8004cd0:	4b61      	ldr	r3, [pc, #388]	; (8004e58 <_strtod_l+0xb20>)
 8004cd2:	429a      	cmp	r2, r3
 8004cd4:	f040 80c8 	bne.w	8004e68 <_strtod_l+0xb30>
 8004cd8:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8004cdc:	e9cd 2314 	strd	r2, r3, [sp, #80]	; 0x50
 8004ce0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004ce2:	4640      	mov	r0, r8
 8004ce4:	f1a3 7954 	sub.w	r9, r3, #55574528	; 0x3500000
 8004ce8:	4649      	mov	r1, r9
 8004cea:	f001 ff33 	bl	8006b54 <__ulp>
 8004cee:	4602      	mov	r2, r0
 8004cf0:	460b      	mov	r3, r1
 8004cf2:	4630      	mov	r0, r6
 8004cf4:	4639      	mov	r1, r7
 8004cf6:	f7fb fbef 	bl	80004d8 <__aeabi_dmul>
 8004cfa:	4642      	mov	r2, r8
 8004cfc:	464b      	mov	r3, r9
 8004cfe:	f7fb fa35 	bl	800016c <__adddf3>
 8004d02:	460b      	mov	r3, r1
 8004d04:	4951      	ldr	r1, [pc, #324]	; (8004e4c <_strtod_l+0xb14>)
 8004d06:	4a55      	ldr	r2, [pc, #340]	; (8004e5c <_strtod_l+0xb24>)
 8004d08:	4019      	ands	r1, r3
 8004d0a:	4291      	cmp	r1, r2
 8004d0c:	4680      	mov	r8, r0
 8004d0e:	d95e      	bls.n	8004dce <_strtod_l+0xa96>
 8004d10:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8004d12:	f102 7254 	add.w	r2, r2, #55574528	; 0x3500000
 8004d16:	4293      	cmp	r3, r2
 8004d18:	d103      	bne.n	8004d22 <_strtod_l+0x9ea>
 8004d1a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8004d1c:	3301      	adds	r3, #1
 8004d1e:	f43f ad4e 	beq.w	80047be <_strtod_l+0x486>
 8004d22:	f04f 38ff 	mov.w	r8, #4294967295
 8004d26:	f8df 9128 	ldr.w	r9, [pc, #296]	; 8004e50 <_strtod_l+0xb18>
 8004d2a:	4650      	mov	r0, sl
 8004d2c:	991c      	ldr	r1, [sp, #112]	; 0x70
 8004d2e:	f001 fbe1 	bl	80064f4 <_Bfree>
 8004d32:	4650      	mov	r0, sl
 8004d34:	9906      	ldr	r1, [sp, #24]
 8004d36:	f001 fbdd 	bl	80064f4 <_Bfree>
 8004d3a:	4650      	mov	r0, sl
 8004d3c:	9904      	ldr	r1, [sp, #16]
 8004d3e:	f001 fbd9 	bl	80064f4 <_Bfree>
 8004d42:	4659      	mov	r1, fp
 8004d44:	4650      	mov	r0, sl
 8004d46:	f001 fbd5 	bl	80064f4 <_Bfree>
 8004d4a:	e61c      	b.n	8004986 <_strtod_l+0x64e>
 8004d4c:	f1b8 0f00 	cmp.w	r8, #0
 8004d50:	d119      	bne.n	8004d86 <_strtod_l+0xa4e>
 8004d52:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004d54:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8004d58:	b9e3      	cbnz	r3, 8004d94 <_strtod_l+0xa5c>
 8004d5a:	2200      	movs	r2, #0
 8004d5c:	4630      	mov	r0, r6
 8004d5e:	4639      	mov	r1, r7
 8004d60:	4b3c      	ldr	r3, [pc, #240]	; (8004e54 <_strtod_l+0xb1c>)
 8004d62:	f7fb fe2b 	bl	80009bc <__aeabi_dcmplt>
 8004d66:	b9c8      	cbnz	r0, 8004d9c <_strtod_l+0xa64>
 8004d68:	2200      	movs	r2, #0
 8004d6a:	4630      	mov	r0, r6
 8004d6c:	4639      	mov	r1, r7
 8004d6e:	4b3c      	ldr	r3, [pc, #240]	; (8004e60 <_strtod_l+0xb28>)
 8004d70:	f7fb fbb2 	bl	80004d8 <__aeabi_dmul>
 8004d74:	4604      	mov	r4, r0
 8004d76:	460d      	mov	r5, r1
 8004d78:	f105 4300 	add.w	r3, r5, #2147483648	; 0x80000000
 8004d7c:	9418      	str	r4, [sp, #96]	; 0x60
 8004d7e:	9319      	str	r3, [sp, #100]	; 0x64
 8004d80:	e9dd 6718 	ldrd	r6, r7, [sp, #96]	; 0x60
 8004d84:	e79d      	b.n	8004cc2 <_strtod_l+0x98a>
 8004d86:	f1b8 0f01 	cmp.w	r8, #1
 8004d8a:	d103      	bne.n	8004d94 <_strtod_l+0xa5c>
 8004d8c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004d8e:	2b00      	cmp	r3, #0
 8004d90:	f43f ad87 	beq.w	80048a2 <_strtod_l+0x56a>
 8004d94:	2600      	movs	r6, #0
 8004d96:	2400      	movs	r4, #0
 8004d98:	4f32      	ldr	r7, [pc, #200]	; (8004e64 <_strtod_l+0xb2c>)
 8004d9a:	e791      	b.n	8004cc0 <_strtod_l+0x988>
 8004d9c:	9c0d      	ldr	r4, [sp, #52]	; 0x34
 8004d9e:	4d30      	ldr	r5, [pc, #192]	; (8004e60 <_strtod_l+0xb28>)
 8004da0:	e7ea      	b.n	8004d78 <_strtod_l+0xa40>
 8004da2:	4b2f      	ldr	r3, [pc, #188]	; (8004e60 <_strtod_l+0xb28>)
 8004da4:	2200      	movs	r2, #0
 8004da6:	4630      	mov	r0, r6
 8004da8:	4639      	mov	r1, r7
 8004daa:	f7fb fb95 	bl	80004d8 <__aeabi_dmul>
 8004dae:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8004db0:	4604      	mov	r4, r0
 8004db2:	460d      	mov	r5, r1
 8004db4:	b933      	cbnz	r3, 8004dc4 <_strtod_l+0xa8c>
 8004db6:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8004dba:	9010      	str	r0, [sp, #64]	; 0x40
 8004dbc:	9311      	str	r3, [sp, #68]	; 0x44
 8004dbe:	e9dd 6710 	ldrd	r6, r7, [sp, #64]	; 0x40
 8004dc2:	e77e      	b.n	8004cc2 <_strtod_l+0x98a>
 8004dc4:	4602      	mov	r2, r0
 8004dc6:	460b      	mov	r3, r1
 8004dc8:	e9cd 2310 	strd	r2, r3, [sp, #64]	; 0x40
 8004dcc:	e7f7      	b.n	8004dbe <_strtod_l+0xa86>
 8004dce:	f103 7954 	add.w	r9, r3, #55574528	; 0x3500000
 8004dd2:	9b05      	ldr	r3, [sp, #20]
 8004dd4:	2b00      	cmp	r3, #0
 8004dd6:	d1a8      	bne.n	8004d2a <_strtod_l+0x9f2>
 8004dd8:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8004ddc:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8004dde:	0d1b      	lsrs	r3, r3, #20
 8004de0:	051b      	lsls	r3, r3, #20
 8004de2:	429a      	cmp	r2, r3
 8004de4:	d1a1      	bne.n	8004d2a <_strtod_l+0x9f2>
 8004de6:	4620      	mov	r0, r4
 8004de8:	4629      	mov	r1, r5
 8004dea:	f7fb ffcb 	bl	8000d84 <__aeabi_d2lz>
 8004dee:	f7fb fb45 	bl	800047c <__aeabi_l2d>
 8004df2:	4602      	mov	r2, r0
 8004df4:	460b      	mov	r3, r1
 8004df6:	4620      	mov	r0, r4
 8004df8:	4629      	mov	r1, r5
 8004dfa:	f7fb f9b5 	bl	8000168 <__aeabi_dsub>
 8004dfe:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8004e00:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8004e04:	ea43 0308 	orr.w	r3, r3, r8
 8004e08:	4313      	orrs	r3, r2
 8004e0a:	4604      	mov	r4, r0
 8004e0c:	460d      	mov	r5, r1
 8004e0e:	d066      	beq.n	8004ede <_strtod_l+0xba6>
 8004e10:	a309      	add	r3, pc, #36	; (adr r3, 8004e38 <_strtod_l+0xb00>)
 8004e12:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004e16:	f7fb fdd1 	bl	80009bc <__aeabi_dcmplt>
 8004e1a:	2800      	cmp	r0, #0
 8004e1c:	f47f acda 	bne.w	80047d4 <_strtod_l+0x49c>
 8004e20:	a307      	add	r3, pc, #28	; (adr r3, 8004e40 <_strtod_l+0xb08>)
 8004e22:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004e26:	4620      	mov	r0, r4
 8004e28:	4629      	mov	r1, r5
 8004e2a:	f7fb fde5 	bl	80009f8 <__aeabi_dcmpgt>
 8004e2e:	2800      	cmp	r0, #0
 8004e30:	f43f af7b 	beq.w	8004d2a <_strtod_l+0x9f2>
 8004e34:	e4ce      	b.n	80047d4 <_strtod_l+0x49c>
 8004e36:	bf00      	nop
 8004e38:	94a03595 	.word	0x94a03595
 8004e3c:	3fdfffff 	.word	0x3fdfffff
 8004e40:	35afe535 	.word	0x35afe535
 8004e44:	3fe00000 	.word	0x3fe00000
 8004e48:	000fffff 	.word	0x000fffff
 8004e4c:	7ff00000 	.word	0x7ff00000
 8004e50:	7fefffff 	.word	0x7fefffff
 8004e54:	3ff00000 	.word	0x3ff00000
 8004e58:	7fe00000 	.word	0x7fe00000
 8004e5c:	7c9fffff 	.word	0x7c9fffff
 8004e60:	3fe00000 	.word	0x3fe00000
 8004e64:	bff00000 	.word	0xbff00000
 8004e68:	9b05      	ldr	r3, [sp, #20]
 8004e6a:	b313      	cbz	r3, 8004eb2 <_strtod_l+0xb7a>
 8004e6c:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8004e6e:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 8004e72:	d81e      	bhi.n	8004eb2 <_strtod_l+0xb7a>
 8004e74:	a326      	add	r3, pc, #152	; (adr r3, 8004f10 <_strtod_l+0xbd8>)
 8004e76:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004e7a:	4620      	mov	r0, r4
 8004e7c:	4629      	mov	r1, r5
 8004e7e:	f7fb fda7 	bl	80009d0 <__aeabi_dcmple>
 8004e82:	b190      	cbz	r0, 8004eaa <_strtod_l+0xb72>
 8004e84:	4629      	mov	r1, r5
 8004e86:	4620      	mov	r0, r4
 8004e88:	f7fb fdfe 	bl	8000a88 <__aeabi_d2uiz>
 8004e8c:	2801      	cmp	r0, #1
 8004e8e:	bf38      	it	cc
 8004e90:	2001      	movcc	r0, #1
 8004e92:	f7fb faa7 	bl	80003e4 <__aeabi_ui2d>
 8004e96:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8004e98:	4604      	mov	r4, r0
 8004e9a:	460d      	mov	r5, r1
 8004e9c:	b9d3      	cbnz	r3, 8004ed4 <_strtod_l+0xb9c>
 8004e9e:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8004ea2:	9012      	str	r0, [sp, #72]	; 0x48
 8004ea4:	9313      	str	r3, [sp, #76]	; 0x4c
 8004ea6:	e9dd 6712 	ldrd	r6, r7, [sp, #72]	; 0x48
 8004eaa:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8004eac:	f107 63d6 	add.w	r3, r7, #112197632	; 0x6b00000
 8004eb0:	1a9f      	subs	r7, r3, r2
 8004eb2:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8004eb6:	f001 fe4d 	bl	8006b54 <__ulp>
 8004eba:	4602      	mov	r2, r0
 8004ebc:	460b      	mov	r3, r1
 8004ebe:	4630      	mov	r0, r6
 8004ec0:	4639      	mov	r1, r7
 8004ec2:	f7fb fb09 	bl	80004d8 <__aeabi_dmul>
 8004ec6:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8004eca:	f7fb f94f 	bl	800016c <__adddf3>
 8004ece:	4680      	mov	r8, r0
 8004ed0:	4689      	mov	r9, r1
 8004ed2:	e77e      	b.n	8004dd2 <_strtod_l+0xa9a>
 8004ed4:	4602      	mov	r2, r0
 8004ed6:	460b      	mov	r3, r1
 8004ed8:	e9cd 2312 	strd	r2, r3, [sp, #72]	; 0x48
 8004edc:	e7e3      	b.n	8004ea6 <_strtod_l+0xb6e>
 8004ede:	a30e      	add	r3, pc, #56	; (adr r3, 8004f18 <_strtod_l+0xbe0>)
 8004ee0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004ee4:	f7fb fd6a 	bl	80009bc <__aeabi_dcmplt>
 8004ee8:	e7a1      	b.n	8004e2e <_strtod_l+0xaf6>
 8004eea:	2300      	movs	r3, #0
 8004eec:	930c      	str	r3, [sp, #48]	; 0x30
 8004eee:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8004ef0:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 8004ef2:	6013      	str	r3, [r2, #0]
 8004ef4:	f7ff ba65 	b.w	80043c2 <_strtod_l+0x8a>
 8004ef8:	2b65      	cmp	r3, #101	; 0x65
 8004efa:	f43f ab5c 	beq.w	80045b6 <_strtod_l+0x27e>
 8004efe:	2b45      	cmp	r3, #69	; 0x45
 8004f00:	f43f ab59 	beq.w	80045b6 <_strtod_l+0x27e>
 8004f04:	2201      	movs	r2, #1
 8004f06:	f7ff bb8d 	b.w	8004624 <_strtod_l+0x2ec>
 8004f0a:	bf00      	nop
 8004f0c:	f3af 8000 	nop.w
 8004f10:	ffc00000 	.word	0xffc00000
 8004f14:	41dfffff 	.word	0x41dfffff
 8004f18:	94a03595 	.word	0x94a03595
 8004f1c:	3fcfffff 	.word	0x3fcfffff

08004f20 <_strtod_r>:
 8004f20:	4b01      	ldr	r3, [pc, #4]	; (8004f28 <_strtod_r+0x8>)
 8004f22:	f7ff ba09 	b.w	8004338 <_strtod_l>
 8004f26:	bf00      	nop
 8004f28:	20000074 	.word	0x20000074

08004f2c <_strtol_l.isra.0>:
 8004f2c:	2b01      	cmp	r3, #1
 8004f2e:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004f32:	4686      	mov	lr, r0
 8004f34:	d001      	beq.n	8004f3a <_strtol_l.isra.0+0xe>
 8004f36:	2b24      	cmp	r3, #36	; 0x24
 8004f38:	d906      	bls.n	8004f48 <_strtol_l.isra.0+0x1c>
 8004f3a:	f7fe fb11 	bl	8003560 <__errno>
 8004f3e:	2316      	movs	r3, #22
 8004f40:	6003      	str	r3, [r0, #0]
 8004f42:	2000      	movs	r0, #0
 8004f44:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004f48:	468c      	mov	ip, r1
 8004f4a:	4e3a      	ldr	r6, [pc, #232]	; (8005034 <_strtol_l.isra.0+0x108>)
 8004f4c:	4660      	mov	r0, ip
 8004f4e:	f81c 4b01 	ldrb.w	r4, [ip], #1
 8004f52:	5da5      	ldrb	r5, [r4, r6]
 8004f54:	f015 0508 	ands.w	r5, r5, #8
 8004f58:	d1f8      	bne.n	8004f4c <_strtol_l.isra.0+0x20>
 8004f5a:	2c2d      	cmp	r4, #45	; 0x2d
 8004f5c:	d133      	bne.n	8004fc6 <_strtol_l.isra.0+0x9a>
 8004f5e:	f04f 0801 	mov.w	r8, #1
 8004f62:	f89c 4000 	ldrb.w	r4, [ip]
 8004f66:	f100 0c02 	add.w	ip, r0, #2
 8004f6a:	2b00      	cmp	r3, #0
 8004f6c:	d05d      	beq.n	800502a <_strtol_l.isra.0+0xfe>
 8004f6e:	2b10      	cmp	r3, #16
 8004f70:	d10c      	bne.n	8004f8c <_strtol_l.isra.0+0x60>
 8004f72:	2c30      	cmp	r4, #48	; 0x30
 8004f74:	d10a      	bne.n	8004f8c <_strtol_l.isra.0+0x60>
 8004f76:	f89c 0000 	ldrb.w	r0, [ip]
 8004f7a:	f000 00df 	and.w	r0, r0, #223	; 0xdf
 8004f7e:	2858      	cmp	r0, #88	; 0x58
 8004f80:	d14e      	bne.n	8005020 <_strtol_l.isra.0+0xf4>
 8004f82:	2310      	movs	r3, #16
 8004f84:	f89c 4001 	ldrb.w	r4, [ip, #1]
 8004f88:	f10c 0c02 	add.w	ip, ip, #2
 8004f8c:	2500      	movs	r5, #0
 8004f8e:	f108 4700 	add.w	r7, r8, #2147483648	; 0x80000000
 8004f92:	3f01      	subs	r7, #1
 8004f94:	fbb7 f9f3 	udiv	r9, r7, r3
 8004f98:	4628      	mov	r0, r5
 8004f9a:	fb03 7a19 	mls	sl, r3, r9, r7
 8004f9e:	f1a4 0630 	sub.w	r6, r4, #48	; 0x30
 8004fa2:	2e09      	cmp	r6, #9
 8004fa4:	d818      	bhi.n	8004fd8 <_strtol_l.isra.0+0xac>
 8004fa6:	4634      	mov	r4, r6
 8004fa8:	42a3      	cmp	r3, r4
 8004faa:	dd24      	ble.n	8004ff6 <_strtol_l.isra.0+0xca>
 8004fac:	2d00      	cmp	r5, #0
 8004fae:	db1f      	blt.n	8004ff0 <_strtol_l.isra.0+0xc4>
 8004fb0:	4581      	cmp	r9, r0
 8004fb2:	d31d      	bcc.n	8004ff0 <_strtol_l.isra.0+0xc4>
 8004fb4:	d101      	bne.n	8004fba <_strtol_l.isra.0+0x8e>
 8004fb6:	45a2      	cmp	sl, r4
 8004fb8:	db1a      	blt.n	8004ff0 <_strtol_l.isra.0+0xc4>
 8004fba:	2501      	movs	r5, #1
 8004fbc:	fb00 4003 	mla	r0, r0, r3, r4
 8004fc0:	f81c 4b01 	ldrb.w	r4, [ip], #1
 8004fc4:	e7eb      	b.n	8004f9e <_strtol_l.isra.0+0x72>
 8004fc6:	2c2b      	cmp	r4, #43	; 0x2b
 8004fc8:	bf08      	it	eq
 8004fca:	f89c 4000 	ldrbeq.w	r4, [ip]
 8004fce:	46a8      	mov	r8, r5
 8004fd0:	bf08      	it	eq
 8004fd2:	f100 0c02 	addeq.w	ip, r0, #2
 8004fd6:	e7c8      	b.n	8004f6a <_strtol_l.isra.0+0x3e>
 8004fd8:	f1a4 0641 	sub.w	r6, r4, #65	; 0x41
 8004fdc:	2e19      	cmp	r6, #25
 8004fde:	d801      	bhi.n	8004fe4 <_strtol_l.isra.0+0xb8>
 8004fe0:	3c37      	subs	r4, #55	; 0x37
 8004fe2:	e7e1      	b.n	8004fa8 <_strtol_l.isra.0+0x7c>
 8004fe4:	f1a4 0661 	sub.w	r6, r4, #97	; 0x61
 8004fe8:	2e19      	cmp	r6, #25
 8004fea:	d804      	bhi.n	8004ff6 <_strtol_l.isra.0+0xca>
 8004fec:	3c57      	subs	r4, #87	; 0x57
 8004fee:	e7db      	b.n	8004fa8 <_strtol_l.isra.0+0x7c>
 8004ff0:	f04f 35ff 	mov.w	r5, #4294967295
 8004ff4:	e7e4      	b.n	8004fc0 <_strtol_l.isra.0+0x94>
 8004ff6:	2d00      	cmp	r5, #0
 8004ff8:	da08      	bge.n	800500c <_strtol_l.isra.0+0xe0>
 8004ffa:	2322      	movs	r3, #34	; 0x22
 8004ffc:	4638      	mov	r0, r7
 8004ffe:	f8ce 3000 	str.w	r3, [lr]
 8005002:	2a00      	cmp	r2, #0
 8005004:	d09e      	beq.n	8004f44 <_strtol_l.isra.0+0x18>
 8005006:	f10c 31ff 	add.w	r1, ip, #4294967295
 800500a:	e007      	b.n	800501c <_strtol_l.isra.0+0xf0>
 800500c:	f1b8 0f00 	cmp.w	r8, #0
 8005010:	d000      	beq.n	8005014 <_strtol_l.isra.0+0xe8>
 8005012:	4240      	negs	r0, r0
 8005014:	2a00      	cmp	r2, #0
 8005016:	d095      	beq.n	8004f44 <_strtol_l.isra.0+0x18>
 8005018:	2d00      	cmp	r5, #0
 800501a:	d1f4      	bne.n	8005006 <_strtol_l.isra.0+0xda>
 800501c:	6011      	str	r1, [r2, #0]
 800501e:	e791      	b.n	8004f44 <_strtol_l.isra.0+0x18>
 8005020:	2430      	movs	r4, #48	; 0x30
 8005022:	2b00      	cmp	r3, #0
 8005024:	d1b2      	bne.n	8004f8c <_strtol_l.isra.0+0x60>
 8005026:	2308      	movs	r3, #8
 8005028:	e7b0      	b.n	8004f8c <_strtol_l.isra.0+0x60>
 800502a:	2c30      	cmp	r4, #48	; 0x30
 800502c:	d0a3      	beq.n	8004f76 <_strtol_l.isra.0+0x4a>
 800502e:	230a      	movs	r3, #10
 8005030:	e7ac      	b.n	8004f8c <_strtol_l.isra.0+0x60>
 8005032:	bf00      	nop
 8005034:	08007ef1 	.word	0x08007ef1

08005038 <_strtol_r>:
 8005038:	f7ff bf78 	b.w	8004f2c <_strtol_l.isra.0>

0800503c <quorem>:
 800503c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005040:	6903      	ldr	r3, [r0, #16]
 8005042:	690c      	ldr	r4, [r1, #16]
 8005044:	4607      	mov	r7, r0
 8005046:	42a3      	cmp	r3, r4
 8005048:	f2c0 8083 	blt.w	8005152 <quorem+0x116>
 800504c:	3c01      	subs	r4, #1
 800504e:	f100 0514 	add.w	r5, r0, #20
 8005052:	f101 0814 	add.w	r8, r1, #20
 8005056:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800505a:	9301      	str	r3, [sp, #4]
 800505c:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8005060:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8005064:	3301      	adds	r3, #1
 8005066:	429a      	cmp	r2, r3
 8005068:	fbb2 f6f3 	udiv	r6, r2, r3
 800506c:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 8005070:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8005074:	d332      	bcc.n	80050dc <quorem+0xa0>
 8005076:	f04f 0e00 	mov.w	lr, #0
 800507a:	4640      	mov	r0, r8
 800507c:	46ac      	mov	ip, r5
 800507e:	46f2      	mov	sl, lr
 8005080:	f850 2b04 	ldr.w	r2, [r0], #4
 8005084:	b293      	uxth	r3, r2
 8005086:	fb06 e303 	mla	r3, r6, r3, lr
 800508a:	0c12      	lsrs	r2, r2, #16
 800508c:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 8005090:	fb06 e202 	mla	r2, r6, r2, lr
 8005094:	b29b      	uxth	r3, r3
 8005096:	ebaa 0303 	sub.w	r3, sl, r3
 800509a:	f8dc a000 	ldr.w	sl, [ip]
 800509e:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 80050a2:	fa1f fa8a 	uxth.w	sl, sl
 80050a6:	4453      	add	r3, sl
 80050a8:	fa1f fa82 	uxth.w	sl, r2
 80050ac:	f8dc 2000 	ldr.w	r2, [ip]
 80050b0:	4581      	cmp	r9, r0
 80050b2:	ebca 4212 	rsb	r2, sl, r2, lsr #16
 80050b6:	eb02 4223 	add.w	r2, r2, r3, asr #16
 80050ba:	b29b      	uxth	r3, r3
 80050bc:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80050c0:	ea4f 4a22 	mov.w	sl, r2, asr #16
 80050c4:	f84c 3b04 	str.w	r3, [ip], #4
 80050c8:	d2da      	bcs.n	8005080 <quorem+0x44>
 80050ca:	f855 300b 	ldr.w	r3, [r5, fp]
 80050ce:	b92b      	cbnz	r3, 80050dc <quorem+0xa0>
 80050d0:	9b01      	ldr	r3, [sp, #4]
 80050d2:	3b04      	subs	r3, #4
 80050d4:	429d      	cmp	r5, r3
 80050d6:	461a      	mov	r2, r3
 80050d8:	d32f      	bcc.n	800513a <quorem+0xfe>
 80050da:	613c      	str	r4, [r7, #16]
 80050dc:	4638      	mov	r0, r7
 80050de:	f001 fc8d 	bl	80069fc <__mcmp>
 80050e2:	2800      	cmp	r0, #0
 80050e4:	db25      	blt.n	8005132 <quorem+0xf6>
 80050e6:	4628      	mov	r0, r5
 80050e8:	f04f 0c00 	mov.w	ip, #0
 80050ec:	3601      	adds	r6, #1
 80050ee:	f858 1b04 	ldr.w	r1, [r8], #4
 80050f2:	f8d0 e000 	ldr.w	lr, [r0]
 80050f6:	b28b      	uxth	r3, r1
 80050f8:	ebac 0303 	sub.w	r3, ip, r3
 80050fc:	fa1f f28e 	uxth.w	r2, lr
 8005100:	4413      	add	r3, r2
 8005102:	0c0a      	lsrs	r2, r1, #16
 8005104:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 8005108:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800510c:	b29b      	uxth	r3, r3
 800510e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8005112:	45c1      	cmp	r9, r8
 8005114:	ea4f 4c22 	mov.w	ip, r2, asr #16
 8005118:	f840 3b04 	str.w	r3, [r0], #4
 800511c:	d2e7      	bcs.n	80050ee <quorem+0xb2>
 800511e:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8005122:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8005126:	b922      	cbnz	r2, 8005132 <quorem+0xf6>
 8005128:	3b04      	subs	r3, #4
 800512a:	429d      	cmp	r5, r3
 800512c:	461a      	mov	r2, r3
 800512e:	d30a      	bcc.n	8005146 <quorem+0x10a>
 8005130:	613c      	str	r4, [r7, #16]
 8005132:	4630      	mov	r0, r6
 8005134:	b003      	add	sp, #12
 8005136:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800513a:	6812      	ldr	r2, [r2, #0]
 800513c:	3b04      	subs	r3, #4
 800513e:	2a00      	cmp	r2, #0
 8005140:	d1cb      	bne.n	80050da <quorem+0x9e>
 8005142:	3c01      	subs	r4, #1
 8005144:	e7c6      	b.n	80050d4 <quorem+0x98>
 8005146:	6812      	ldr	r2, [r2, #0]
 8005148:	3b04      	subs	r3, #4
 800514a:	2a00      	cmp	r2, #0
 800514c:	d1f0      	bne.n	8005130 <quorem+0xf4>
 800514e:	3c01      	subs	r4, #1
 8005150:	e7eb      	b.n	800512a <quorem+0xee>
 8005152:	2000      	movs	r0, #0
 8005154:	e7ee      	b.n	8005134 <quorem+0xf8>
	...

08005158 <_dtoa_r>:
 8005158:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800515c:	4616      	mov	r6, r2
 800515e:	461f      	mov	r7, r3
 8005160:	6a44      	ldr	r4, [r0, #36]	; 0x24
 8005162:	b099      	sub	sp, #100	; 0x64
 8005164:	4605      	mov	r5, r0
 8005166:	e9cd 6704 	strd	r6, r7, [sp, #16]
 800516a:	f8dd 8094 	ldr.w	r8, [sp, #148]	; 0x94
 800516e:	b974      	cbnz	r4, 800518e <_dtoa_r+0x36>
 8005170:	2010      	movs	r0, #16
 8005172:	f001 f949 	bl	8006408 <malloc>
 8005176:	4602      	mov	r2, r0
 8005178:	6268      	str	r0, [r5, #36]	; 0x24
 800517a:	b920      	cbnz	r0, 8005186 <_dtoa_r+0x2e>
 800517c:	21ea      	movs	r1, #234	; 0xea
 800517e:	4bae      	ldr	r3, [pc, #696]	; (8005438 <_dtoa_r+0x2e0>)
 8005180:	48ae      	ldr	r0, [pc, #696]	; (800543c <_dtoa_r+0x2e4>)
 8005182:	f002 f875 	bl	8007270 <__assert_func>
 8005186:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800518a:	6004      	str	r4, [r0, #0]
 800518c:	60c4      	str	r4, [r0, #12]
 800518e:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8005190:	6819      	ldr	r1, [r3, #0]
 8005192:	b151      	cbz	r1, 80051aa <_dtoa_r+0x52>
 8005194:	685a      	ldr	r2, [r3, #4]
 8005196:	2301      	movs	r3, #1
 8005198:	4093      	lsls	r3, r2
 800519a:	604a      	str	r2, [r1, #4]
 800519c:	608b      	str	r3, [r1, #8]
 800519e:	4628      	mov	r0, r5
 80051a0:	f001 f9a8 	bl	80064f4 <_Bfree>
 80051a4:	2200      	movs	r2, #0
 80051a6:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 80051a8:	601a      	str	r2, [r3, #0]
 80051aa:	1e3b      	subs	r3, r7, #0
 80051ac:	bfaf      	iteee	ge
 80051ae:	2300      	movge	r3, #0
 80051b0:	2201      	movlt	r2, #1
 80051b2:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 80051b6:	9305      	strlt	r3, [sp, #20]
 80051b8:	bfa8      	it	ge
 80051ba:	f8c8 3000 	strge.w	r3, [r8]
 80051be:	f8dd 9014 	ldr.w	r9, [sp, #20]
 80051c2:	4b9f      	ldr	r3, [pc, #636]	; (8005440 <_dtoa_r+0x2e8>)
 80051c4:	bfb8      	it	lt
 80051c6:	f8c8 2000 	strlt.w	r2, [r8]
 80051ca:	ea33 0309 	bics.w	r3, r3, r9
 80051ce:	d119      	bne.n	8005204 <_dtoa_r+0xac>
 80051d0:	f242 730f 	movw	r3, #9999	; 0x270f
 80051d4:	9a24      	ldr	r2, [sp, #144]	; 0x90
 80051d6:	6013      	str	r3, [r2, #0]
 80051d8:	f3c9 0313 	ubfx	r3, r9, #0, #20
 80051dc:	4333      	orrs	r3, r6
 80051de:	f000 8580 	beq.w	8005ce2 <_dtoa_r+0xb8a>
 80051e2:	9b26      	ldr	r3, [sp, #152]	; 0x98
 80051e4:	b953      	cbnz	r3, 80051fc <_dtoa_r+0xa4>
 80051e6:	4b97      	ldr	r3, [pc, #604]	; (8005444 <_dtoa_r+0x2ec>)
 80051e8:	e022      	b.n	8005230 <_dtoa_r+0xd8>
 80051ea:	4b97      	ldr	r3, [pc, #604]	; (8005448 <_dtoa_r+0x2f0>)
 80051ec:	9308      	str	r3, [sp, #32]
 80051ee:	3308      	adds	r3, #8
 80051f0:	9a26      	ldr	r2, [sp, #152]	; 0x98
 80051f2:	6013      	str	r3, [r2, #0]
 80051f4:	9808      	ldr	r0, [sp, #32]
 80051f6:	b019      	add	sp, #100	; 0x64
 80051f8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80051fc:	4b91      	ldr	r3, [pc, #580]	; (8005444 <_dtoa_r+0x2ec>)
 80051fe:	9308      	str	r3, [sp, #32]
 8005200:	3303      	adds	r3, #3
 8005202:	e7f5      	b.n	80051f0 <_dtoa_r+0x98>
 8005204:	e9dd 3404 	ldrd	r3, r4, [sp, #16]
 8005208:	e9cd 340c 	strd	r3, r4, [sp, #48]	; 0x30
 800520c:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8005210:	2200      	movs	r2, #0
 8005212:	2300      	movs	r3, #0
 8005214:	f7fb fbc8 	bl	80009a8 <__aeabi_dcmpeq>
 8005218:	4680      	mov	r8, r0
 800521a:	b158      	cbz	r0, 8005234 <_dtoa_r+0xdc>
 800521c:	2301      	movs	r3, #1
 800521e:	9a24      	ldr	r2, [sp, #144]	; 0x90
 8005220:	6013      	str	r3, [r2, #0]
 8005222:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8005224:	2b00      	cmp	r3, #0
 8005226:	f000 8559 	beq.w	8005cdc <_dtoa_r+0xb84>
 800522a:	4888      	ldr	r0, [pc, #544]	; (800544c <_dtoa_r+0x2f4>)
 800522c:	6018      	str	r0, [r3, #0]
 800522e:	1e43      	subs	r3, r0, #1
 8005230:	9308      	str	r3, [sp, #32]
 8005232:	e7df      	b.n	80051f4 <_dtoa_r+0x9c>
 8005234:	ab16      	add	r3, sp, #88	; 0x58
 8005236:	9301      	str	r3, [sp, #4]
 8005238:	ab17      	add	r3, sp, #92	; 0x5c
 800523a:	9300      	str	r3, [sp, #0]
 800523c:	4628      	mov	r0, r5
 800523e:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 8005242:	f001 fd01 	bl	8006c48 <__d2b>
 8005246:	f3c9 540a 	ubfx	r4, r9, #20, #11
 800524a:	4682      	mov	sl, r0
 800524c:	2c00      	cmp	r4, #0
 800524e:	d07e      	beq.n	800534e <_dtoa_r+0x1f6>
 8005250:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8005254:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8005256:	f2a4 34ff 	subw	r4, r4, #1023	; 0x3ff
 800525a:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800525e:	f043 517f 	orr.w	r1, r3, #1069547520	; 0x3fc00000
 8005262:	f441 1140 	orr.w	r1, r1, #3145728	; 0x300000
 8005266:	f8cd 804c 	str.w	r8, [sp, #76]	; 0x4c
 800526a:	2200      	movs	r2, #0
 800526c:	4b78      	ldr	r3, [pc, #480]	; (8005450 <_dtoa_r+0x2f8>)
 800526e:	f7fa ff7b 	bl	8000168 <__aeabi_dsub>
 8005272:	a36b      	add	r3, pc, #428	; (adr r3, 8005420 <_dtoa_r+0x2c8>)
 8005274:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005278:	f7fb f92e 	bl	80004d8 <__aeabi_dmul>
 800527c:	a36a      	add	r3, pc, #424	; (adr r3, 8005428 <_dtoa_r+0x2d0>)
 800527e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005282:	f7fa ff73 	bl	800016c <__adddf3>
 8005286:	4606      	mov	r6, r0
 8005288:	4620      	mov	r0, r4
 800528a:	460f      	mov	r7, r1
 800528c:	f7fb f8ba 	bl	8000404 <__aeabi_i2d>
 8005290:	a367      	add	r3, pc, #412	; (adr r3, 8005430 <_dtoa_r+0x2d8>)
 8005292:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005296:	f7fb f91f 	bl	80004d8 <__aeabi_dmul>
 800529a:	4602      	mov	r2, r0
 800529c:	460b      	mov	r3, r1
 800529e:	4630      	mov	r0, r6
 80052a0:	4639      	mov	r1, r7
 80052a2:	f7fa ff63 	bl	800016c <__adddf3>
 80052a6:	4606      	mov	r6, r0
 80052a8:	460f      	mov	r7, r1
 80052aa:	f7fb fbc5 	bl	8000a38 <__aeabi_d2iz>
 80052ae:	2200      	movs	r2, #0
 80052b0:	4681      	mov	r9, r0
 80052b2:	2300      	movs	r3, #0
 80052b4:	4630      	mov	r0, r6
 80052b6:	4639      	mov	r1, r7
 80052b8:	f7fb fb80 	bl	80009bc <__aeabi_dcmplt>
 80052bc:	b148      	cbz	r0, 80052d2 <_dtoa_r+0x17a>
 80052be:	4648      	mov	r0, r9
 80052c0:	f7fb f8a0 	bl	8000404 <__aeabi_i2d>
 80052c4:	4632      	mov	r2, r6
 80052c6:	463b      	mov	r3, r7
 80052c8:	f7fb fb6e 	bl	80009a8 <__aeabi_dcmpeq>
 80052cc:	b908      	cbnz	r0, 80052d2 <_dtoa_r+0x17a>
 80052ce:	f109 39ff 	add.w	r9, r9, #4294967295
 80052d2:	f1b9 0f16 	cmp.w	r9, #22
 80052d6:	d857      	bhi.n	8005388 <_dtoa_r+0x230>
 80052d8:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 80052dc:	4b5d      	ldr	r3, [pc, #372]	; (8005454 <_dtoa_r+0x2fc>)
 80052de:	eb03 03c9 	add.w	r3, r3, r9, lsl #3
 80052e2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80052e6:	f7fb fb69 	bl	80009bc <__aeabi_dcmplt>
 80052ea:	2800      	cmp	r0, #0
 80052ec:	d04e      	beq.n	800538c <_dtoa_r+0x234>
 80052ee:	2300      	movs	r3, #0
 80052f0:	f109 39ff 	add.w	r9, r9, #4294967295
 80052f4:	930f      	str	r3, [sp, #60]	; 0x3c
 80052f6:	9b16      	ldr	r3, [sp, #88]	; 0x58
 80052f8:	1b1c      	subs	r4, r3, r4
 80052fa:	1e63      	subs	r3, r4, #1
 80052fc:	9309      	str	r3, [sp, #36]	; 0x24
 80052fe:	bf49      	itett	mi
 8005300:	f1c4 0301 	rsbmi	r3, r4, #1
 8005304:	2300      	movpl	r3, #0
 8005306:	9306      	strmi	r3, [sp, #24]
 8005308:	2300      	movmi	r3, #0
 800530a:	bf54      	ite	pl
 800530c:	9306      	strpl	r3, [sp, #24]
 800530e:	9309      	strmi	r3, [sp, #36]	; 0x24
 8005310:	f1b9 0f00 	cmp.w	r9, #0
 8005314:	db3c      	blt.n	8005390 <_dtoa_r+0x238>
 8005316:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005318:	f8cd 9038 	str.w	r9, [sp, #56]	; 0x38
 800531c:	444b      	add	r3, r9
 800531e:	9309      	str	r3, [sp, #36]	; 0x24
 8005320:	2300      	movs	r3, #0
 8005322:	930a      	str	r3, [sp, #40]	; 0x28
 8005324:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8005326:	2b09      	cmp	r3, #9
 8005328:	d86c      	bhi.n	8005404 <_dtoa_r+0x2ac>
 800532a:	2b05      	cmp	r3, #5
 800532c:	bfc4      	itt	gt
 800532e:	3b04      	subgt	r3, #4
 8005330:	9322      	strgt	r3, [sp, #136]	; 0x88
 8005332:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8005334:	bfc8      	it	gt
 8005336:	2400      	movgt	r4, #0
 8005338:	f1a3 0302 	sub.w	r3, r3, #2
 800533c:	bfd8      	it	le
 800533e:	2401      	movle	r4, #1
 8005340:	2b03      	cmp	r3, #3
 8005342:	f200 808b 	bhi.w	800545c <_dtoa_r+0x304>
 8005346:	e8df f003 	tbb	[pc, r3]
 800534a:	4f2d      	.short	0x4f2d
 800534c:	5b4d      	.short	0x5b4d
 800534e:	e9dd 4316 	ldrd	r4, r3, [sp, #88]	; 0x58
 8005352:	441c      	add	r4, r3
 8005354:	f204 4332 	addw	r3, r4, #1074	; 0x432
 8005358:	2b20      	cmp	r3, #32
 800535a:	bfc3      	ittte	gt
 800535c:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 8005360:	f204 4012 	addwgt	r0, r4, #1042	; 0x412
 8005364:	fa09 f303 	lslgt.w	r3, r9, r3
 8005368:	f1c3 0320 	rsble	r3, r3, #32
 800536c:	bfc6      	itte	gt
 800536e:	fa26 f000 	lsrgt.w	r0, r6, r0
 8005372:	4318      	orrgt	r0, r3
 8005374:	fa06 f003 	lslle.w	r0, r6, r3
 8005378:	f7fb f834 	bl	80003e4 <__aeabi_ui2d>
 800537c:	2301      	movs	r3, #1
 800537e:	f1a1 71f8 	sub.w	r1, r1, #32505856	; 0x1f00000
 8005382:	3c01      	subs	r4, #1
 8005384:	9313      	str	r3, [sp, #76]	; 0x4c
 8005386:	e770      	b.n	800526a <_dtoa_r+0x112>
 8005388:	2301      	movs	r3, #1
 800538a:	e7b3      	b.n	80052f4 <_dtoa_r+0x19c>
 800538c:	900f      	str	r0, [sp, #60]	; 0x3c
 800538e:	e7b2      	b.n	80052f6 <_dtoa_r+0x19e>
 8005390:	9b06      	ldr	r3, [sp, #24]
 8005392:	eba3 0309 	sub.w	r3, r3, r9
 8005396:	9306      	str	r3, [sp, #24]
 8005398:	f1c9 0300 	rsb	r3, r9, #0
 800539c:	930a      	str	r3, [sp, #40]	; 0x28
 800539e:	2300      	movs	r3, #0
 80053a0:	930e      	str	r3, [sp, #56]	; 0x38
 80053a2:	e7bf      	b.n	8005324 <_dtoa_r+0x1cc>
 80053a4:	2300      	movs	r3, #0
 80053a6:	930b      	str	r3, [sp, #44]	; 0x2c
 80053a8:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 80053aa:	2b00      	cmp	r3, #0
 80053ac:	dc59      	bgt.n	8005462 <_dtoa_r+0x30a>
 80053ae:	f04f 0b01 	mov.w	fp, #1
 80053b2:	465b      	mov	r3, fp
 80053b4:	f8cd b008 	str.w	fp, [sp, #8]
 80053b8:	f8cd b08c 	str.w	fp, [sp, #140]	; 0x8c
 80053bc:	2200      	movs	r2, #0
 80053be:	6a68      	ldr	r0, [r5, #36]	; 0x24
 80053c0:	6042      	str	r2, [r0, #4]
 80053c2:	2204      	movs	r2, #4
 80053c4:	f102 0614 	add.w	r6, r2, #20
 80053c8:	429e      	cmp	r6, r3
 80053ca:	6841      	ldr	r1, [r0, #4]
 80053cc:	d94f      	bls.n	800546e <_dtoa_r+0x316>
 80053ce:	4628      	mov	r0, r5
 80053d0:	f001 f850 	bl	8006474 <_Balloc>
 80053d4:	9008      	str	r0, [sp, #32]
 80053d6:	2800      	cmp	r0, #0
 80053d8:	d14d      	bne.n	8005476 <_dtoa_r+0x31e>
 80053da:	4602      	mov	r2, r0
 80053dc:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 80053e0:	4b1d      	ldr	r3, [pc, #116]	; (8005458 <_dtoa_r+0x300>)
 80053e2:	e6cd      	b.n	8005180 <_dtoa_r+0x28>
 80053e4:	2301      	movs	r3, #1
 80053e6:	e7de      	b.n	80053a6 <_dtoa_r+0x24e>
 80053e8:	2300      	movs	r3, #0
 80053ea:	930b      	str	r3, [sp, #44]	; 0x2c
 80053ec:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 80053ee:	eb09 0b03 	add.w	fp, r9, r3
 80053f2:	f10b 0301 	add.w	r3, fp, #1
 80053f6:	2b01      	cmp	r3, #1
 80053f8:	9302      	str	r3, [sp, #8]
 80053fa:	bfb8      	it	lt
 80053fc:	2301      	movlt	r3, #1
 80053fe:	e7dd      	b.n	80053bc <_dtoa_r+0x264>
 8005400:	2301      	movs	r3, #1
 8005402:	e7f2      	b.n	80053ea <_dtoa_r+0x292>
 8005404:	2401      	movs	r4, #1
 8005406:	2300      	movs	r3, #0
 8005408:	940b      	str	r4, [sp, #44]	; 0x2c
 800540a:	9322      	str	r3, [sp, #136]	; 0x88
 800540c:	f04f 3bff 	mov.w	fp, #4294967295
 8005410:	2200      	movs	r2, #0
 8005412:	2312      	movs	r3, #18
 8005414:	f8cd b008 	str.w	fp, [sp, #8]
 8005418:	9223      	str	r2, [sp, #140]	; 0x8c
 800541a:	e7cf      	b.n	80053bc <_dtoa_r+0x264>
 800541c:	f3af 8000 	nop.w
 8005420:	636f4361 	.word	0x636f4361
 8005424:	3fd287a7 	.word	0x3fd287a7
 8005428:	8b60c8b3 	.word	0x8b60c8b3
 800542c:	3fc68a28 	.word	0x3fc68a28
 8005430:	509f79fb 	.word	0x509f79fb
 8005434:	3fd34413 	.word	0x3fd34413
 8005438:	08007ffe 	.word	0x08007ffe
 800543c:	08008015 	.word	0x08008015
 8005440:	7ff00000 	.word	0x7ff00000
 8005444:	08007ffa 	.word	0x08007ffa
 8005448:	08007ff1 	.word	0x08007ff1
 800544c:	08007e75 	.word	0x08007e75
 8005450:	3ff80000 	.word	0x3ff80000
 8005454:	08008190 	.word	0x08008190
 8005458:	08008074 	.word	0x08008074
 800545c:	2301      	movs	r3, #1
 800545e:	930b      	str	r3, [sp, #44]	; 0x2c
 8005460:	e7d4      	b.n	800540c <_dtoa_r+0x2b4>
 8005462:	f8dd b08c 	ldr.w	fp, [sp, #140]	; 0x8c
 8005466:	465b      	mov	r3, fp
 8005468:	f8cd b008 	str.w	fp, [sp, #8]
 800546c:	e7a6      	b.n	80053bc <_dtoa_r+0x264>
 800546e:	3101      	adds	r1, #1
 8005470:	6041      	str	r1, [r0, #4]
 8005472:	0052      	lsls	r2, r2, #1
 8005474:	e7a6      	b.n	80053c4 <_dtoa_r+0x26c>
 8005476:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8005478:	9a08      	ldr	r2, [sp, #32]
 800547a:	601a      	str	r2, [r3, #0]
 800547c:	9b02      	ldr	r3, [sp, #8]
 800547e:	2b0e      	cmp	r3, #14
 8005480:	f200 80a8 	bhi.w	80055d4 <_dtoa_r+0x47c>
 8005484:	2c00      	cmp	r4, #0
 8005486:	f000 80a5 	beq.w	80055d4 <_dtoa_r+0x47c>
 800548a:	f1b9 0f00 	cmp.w	r9, #0
 800548e:	dd34      	ble.n	80054fa <_dtoa_r+0x3a2>
 8005490:	4a9a      	ldr	r2, [pc, #616]	; (80056fc <_dtoa_r+0x5a4>)
 8005492:	f009 030f 	and.w	r3, r9, #15
 8005496:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 800549a:	f419 7f80 	tst.w	r9, #256	; 0x100
 800549e:	e9d3 3400 	ldrd	r3, r4, [r3]
 80054a2:	e9cd 3410 	strd	r3, r4, [sp, #64]	; 0x40
 80054a6:	ea4f 1429 	mov.w	r4, r9, asr #4
 80054aa:	d016      	beq.n	80054da <_dtoa_r+0x382>
 80054ac:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 80054b0:	4b93      	ldr	r3, [pc, #588]	; (8005700 <_dtoa_r+0x5a8>)
 80054b2:	2703      	movs	r7, #3
 80054b4:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 80054b8:	f7fb f938 	bl	800072c <__aeabi_ddiv>
 80054bc:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80054c0:	f004 040f 	and.w	r4, r4, #15
 80054c4:	4e8e      	ldr	r6, [pc, #568]	; (8005700 <_dtoa_r+0x5a8>)
 80054c6:	b954      	cbnz	r4, 80054de <_dtoa_r+0x386>
 80054c8:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 80054cc:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80054d0:	f7fb f92c 	bl	800072c <__aeabi_ddiv>
 80054d4:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80054d8:	e029      	b.n	800552e <_dtoa_r+0x3d6>
 80054da:	2702      	movs	r7, #2
 80054dc:	e7f2      	b.n	80054c4 <_dtoa_r+0x36c>
 80054de:	07e1      	lsls	r1, r4, #31
 80054e0:	d508      	bpl.n	80054f4 <_dtoa_r+0x39c>
 80054e2:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 80054e6:	e9d6 2300 	ldrd	r2, r3, [r6]
 80054ea:	f7fa fff5 	bl	80004d8 <__aeabi_dmul>
 80054ee:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 80054f2:	3701      	adds	r7, #1
 80054f4:	1064      	asrs	r4, r4, #1
 80054f6:	3608      	adds	r6, #8
 80054f8:	e7e5      	b.n	80054c6 <_dtoa_r+0x36e>
 80054fa:	f000 80a5 	beq.w	8005648 <_dtoa_r+0x4f0>
 80054fe:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8005502:	f1c9 0400 	rsb	r4, r9, #0
 8005506:	4b7d      	ldr	r3, [pc, #500]	; (80056fc <_dtoa_r+0x5a4>)
 8005508:	f004 020f 	and.w	r2, r4, #15
 800550c:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8005510:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005514:	f7fa ffe0 	bl	80004d8 <__aeabi_dmul>
 8005518:	2702      	movs	r7, #2
 800551a:	2300      	movs	r3, #0
 800551c:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8005520:	4e77      	ldr	r6, [pc, #476]	; (8005700 <_dtoa_r+0x5a8>)
 8005522:	1124      	asrs	r4, r4, #4
 8005524:	2c00      	cmp	r4, #0
 8005526:	f040 8084 	bne.w	8005632 <_dtoa_r+0x4da>
 800552a:	2b00      	cmp	r3, #0
 800552c:	d1d2      	bne.n	80054d4 <_dtoa_r+0x37c>
 800552e:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8005530:	2b00      	cmp	r3, #0
 8005532:	f000 808b 	beq.w	800564c <_dtoa_r+0x4f4>
 8005536:	e9dd 3404 	ldrd	r3, r4, [sp, #16]
 800553a:	e9cd 3410 	strd	r3, r4, [sp, #64]	; 0x40
 800553e:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8005542:	2200      	movs	r2, #0
 8005544:	4b6f      	ldr	r3, [pc, #444]	; (8005704 <_dtoa_r+0x5ac>)
 8005546:	f7fb fa39 	bl	80009bc <__aeabi_dcmplt>
 800554a:	2800      	cmp	r0, #0
 800554c:	d07e      	beq.n	800564c <_dtoa_r+0x4f4>
 800554e:	9b02      	ldr	r3, [sp, #8]
 8005550:	2b00      	cmp	r3, #0
 8005552:	d07b      	beq.n	800564c <_dtoa_r+0x4f4>
 8005554:	f1bb 0f00 	cmp.w	fp, #0
 8005558:	dd38      	ble.n	80055cc <_dtoa_r+0x474>
 800555a:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 800555e:	2200      	movs	r2, #0
 8005560:	4b69      	ldr	r3, [pc, #420]	; (8005708 <_dtoa_r+0x5b0>)
 8005562:	f7fa ffb9 	bl	80004d8 <__aeabi_dmul>
 8005566:	465c      	mov	r4, fp
 8005568:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800556c:	f109 38ff 	add.w	r8, r9, #4294967295
 8005570:	3701      	adds	r7, #1
 8005572:	4638      	mov	r0, r7
 8005574:	f7fa ff46 	bl	8000404 <__aeabi_i2d>
 8005578:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800557c:	f7fa ffac 	bl	80004d8 <__aeabi_dmul>
 8005580:	2200      	movs	r2, #0
 8005582:	4b62      	ldr	r3, [pc, #392]	; (800570c <_dtoa_r+0x5b4>)
 8005584:	f7fa fdf2 	bl	800016c <__adddf3>
 8005588:	f1a1 7650 	sub.w	r6, r1, #54525952	; 0x3400000
 800558c:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 8005590:	9611      	str	r6, [sp, #68]	; 0x44
 8005592:	2c00      	cmp	r4, #0
 8005594:	d15d      	bne.n	8005652 <_dtoa_r+0x4fa>
 8005596:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800559a:	2200      	movs	r2, #0
 800559c:	4b5c      	ldr	r3, [pc, #368]	; (8005710 <_dtoa_r+0x5b8>)
 800559e:	f7fa fde3 	bl	8000168 <__aeabi_dsub>
 80055a2:	4602      	mov	r2, r0
 80055a4:	460b      	mov	r3, r1
 80055a6:	e9cd 2304 	strd	r2, r3, [sp, #16]
 80055aa:	4633      	mov	r3, r6
 80055ac:	9a10      	ldr	r2, [sp, #64]	; 0x40
 80055ae:	f7fb fa23 	bl	80009f8 <__aeabi_dcmpgt>
 80055b2:	2800      	cmp	r0, #0
 80055b4:	f040 829e 	bne.w	8005af4 <_dtoa_r+0x99c>
 80055b8:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80055bc:	9a10      	ldr	r2, [sp, #64]	; 0x40
 80055be:	f106 4300 	add.w	r3, r6, #2147483648	; 0x80000000
 80055c2:	f7fb f9fb 	bl	80009bc <__aeabi_dcmplt>
 80055c6:	2800      	cmp	r0, #0
 80055c8:	f040 8292 	bne.w	8005af0 <_dtoa_r+0x998>
 80055cc:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	; 0x30
 80055d0:	e9cd 3404 	strd	r3, r4, [sp, #16]
 80055d4:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 80055d6:	2b00      	cmp	r3, #0
 80055d8:	f2c0 8153 	blt.w	8005882 <_dtoa_r+0x72a>
 80055dc:	f1b9 0f0e 	cmp.w	r9, #14
 80055e0:	f300 814f 	bgt.w	8005882 <_dtoa_r+0x72a>
 80055e4:	4b45      	ldr	r3, [pc, #276]	; (80056fc <_dtoa_r+0x5a4>)
 80055e6:	eb03 03c9 	add.w	r3, r3, r9, lsl #3
 80055ea:	e9d3 3400 	ldrd	r3, r4, [r3]
 80055ee:	e9cd 3406 	strd	r3, r4, [sp, #24]
 80055f2:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 80055f4:	2b00      	cmp	r3, #0
 80055f6:	f280 80db 	bge.w	80057b0 <_dtoa_r+0x658>
 80055fa:	9b02      	ldr	r3, [sp, #8]
 80055fc:	2b00      	cmp	r3, #0
 80055fe:	f300 80d7 	bgt.w	80057b0 <_dtoa_r+0x658>
 8005602:	f040 8274 	bne.w	8005aee <_dtoa_r+0x996>
 8005606:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800560a:	2200      	movs	r2, #0
 800560c:	4b40      	ldr	r3, [pc, #256]	; (8005710 <_dtoa_r+0x5b8>)
 800560e:	f7fa ff63 	bl	80004d8 <__aeabi_dmul>
 8005612:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8005616:	f7fb f9e5 	bl	80009e4 <__aeabi_dcmpge>
 800561a:	9c02      	ldr	r4, [sp, #8]
 800561c:	4626      	mov	r6, r4
 800561e:	2800      	cmp	r0, #0
 8005620:	f040 824a 	bne.w	8005ab8 <_dtoa_r+0x960>
 8005624:	2331      	movs	r3, #49	; 0x31
 8005626:	9f08      	ldr	r7, [sp, #32]
 8005628:	f109 0901 	add.w	r9, r9, #1
 800562c:	f807 3b01 	strb.w	r3, [r7], #1
 8005630:	e246      	b.n	8005ac0 <_dtoa_r+0x968>
 8005632:	07e2      	lsls	r2, r4, #31
 8005634:	d505      	bpl.n	8005642 <_dtoa_r+0x4ea>
 8005636:	e9d6 2300 	ldrd	r2, r3, [r6]
 800563a:	f7fa ff4d 	bl	80004d8 <__aeabi_dmul>
 800563e:	2301      	movs	r3, #1
 8005640:	3701      	adds	r7, #1
 8005642:	1064      	asrs	r4, r4, #1
 8005644:	3608      	adds	r6, #8
 8005646:	e76d      	b.n	8005524 <_dtoa_r+0x3cc>
 8005648:	2702      	movs	r7, #2
 800564a:	e770      	b.n	800552e <_dtoa_r+0x3d6>
 800564c:	46c8      	mov	r8, r9
 800564e:	9c02      	ldr	r4, [sp, #8]
 8005650:	e78f      	b.n	8005572 <_dtoa_r+0x41a>
 8005652:	9908      	ldr	r1, [sp, #32]
 8005654:	4b29      	ldr	r3, [pc, #164]	; (80056fc <_dtoa_r+0x5a4>)
 8005656:	4421      	add	r1, r4
 8005658:	9112      	str	r1, [sp, #72]	; 0x48
 800565a:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800565c:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8005660:	e9dd 6710 	ldrd	r6, r7, [sp, #64]	; 0x40
 8005664:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8005668:	2900      	cmp	r1, #0
 800566a:	d055      	beq.n	8005718 <_dtoa_r+0x5c0>
 800566c:	2000      	movs	r0, #0
 800566e:	4929      	ldr	r1, [pc, #164]	; (8005714 <_dtoa_r+0x5bc>)
 8005670:	f7fb f85c 	bl	800072c <__aeabi_ddiv>
 8005674:	463b      	mov	r3, r7
 8005676:	4632      	mov	r2, r6
 8005678:	f7fa fd76 	bl	8000168 <__aeabi_dsub>
 800567c:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 8005680:	9f08      	ldr	r7, [sp, #32]
 8005682:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8005686:	f7fb f9d7 	bl	8000a38 <__aeabi_d2iz>
 800568a:	4604      	mov	r4, r0
 800568c:	f7fa feba 	bl	8000404 <__aeabi_i2d>
 8005690:	4602      	mov	r2, r0
 8005692:	460b      	mov	r3, r1
 8005694:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8005698:	f7fa fd66 	bl	8000168 <__aeabi_dsub>
 800569c:	4602      	mov	r2, r0
 800569e:	460b      	mov	r3, r1
 80056a0:	3430      	adds	r4, #48	; 0x30
 80056a2:	e9cd 2304 	strd	r2, r3, [sp, #16]
 80056a6:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 80056aa:	f807 4b01 	strb.w	r4, [r7], #1
 80056ae:	f7fb f985 	bl	80009bc <__aeabi_dcmplt>
 80056b2:	2800      	cmp	r0, #0
 80056b4:	d174      	bne.n	80057a0 <_dtoa_r+0x648>
 80056b6:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80056ba:	2000      	movs	r0, #0
 80056bc:	4911      	ldr	r1, [pc, #68]	; (8005704 <_dtoa_r+0x5ac>)
 80056be:	f7fa fd53 	bl	8000168 <__aeabi_dsub>
 80056c2:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 80056c6:	f7fb f979 	bl	80009bc <__aeabi_dcmplt>
 80056ca:	2800      	cmp	r0, #0
 80056cc:	f040 80b6 	bne.w	800583c <_dtoa_r+0x6e4>
 80056d0:	9b12      	ldr	r3, [sp, #72]	; 0x48
 80056d2:	429f      	cmp	r7, r3
 80056d4:	f43f af7a 	beq.w	80055cc <_dtoa_r+0x474>
 80056d8:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 80056dc:	2200      	movs	r2, #0
 80056de:	4b0a      	ldr	r3, [pc, #40]	; (8005708 <_dtoa_r+0x5b0>)
 80056e0:	f7fa fefa 	bl	80004d8 <__aeabi_dmul>
 80056e4:	2200      	movs	r2, #0
 80056e6:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 80056ea:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80056ee:	4b06      	ldr	r3, [pc, #24]	; (8005708 <_dtoa_r+0x5b0>)
 80056f0:	f7fa fef2 	bl	80004d8 <__aeabi_dmul>
 80056f4:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80056f8:	e7c3      	b.n	8005682 <_dtoa_r+0x52a>
 80056fa:	bf00      	nop
 80056fc:	08008190 	.word	0x08008190
 8005700:	08008168 	.word	0x08008168
 8005704:	3ff00000 	.word	0x3ff00000
 8005708:	40240000 	.word	0x40240000
 800570c:	401c0000 	.word	0x401c0000
 8005710:	40140000 	.word	0x40140000
 8005714:	3fe00000 	.word	0x3fe00000
 8005718:	4630      	mov	r0, r6
 800571a:	4639      	mov	r1, r7
 800571c:	f7fa fedc 	bl	80004d8 <__aeabi_dmul>
 8005720:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8005722:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 8005726:	9c08      	ldr	r4, [sp, #32]
 8005728:	9314      	str	r3, [sp, #80]	; 0x50
 800572a:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800572e:	f7fb f983 	bl	8000a38 <__aeabi_d2iz>
 8005732:	9015      	str	r0, [sp, #84]	; 0x54
 8005734:	f7fa fe66 	bl	8000404 <__aeabi_i2d>
 8005738:	4602      	mov	r2, r0
 800573a:	460b      	mov	r3, r1
 800573c:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8005740:	f7fa fd12 	bl	8000168 <__aeabi_dsub>
 8005744:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8005746:	4606      	mov	r6, r0
 8005748:	3330      	adds	r3, #48	; 0x30
 800574a:	f804 3b01 	strb.w	r3, [r4], #1
 800574e:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8005750:	460f      	mov	r7, r1
 8005752:	429c      	cmp	r4, r3
 8005754:	f04f 0200 	mov.w	r2, #0
 8005758:	d124      	bne.n	80057a4 <_dtoa_r+0x64c>
 800575a:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 800575e:	4bb3      	ldr	r3, [pc, #716]	; (8005a2c <_dtoa_r+0x8d4>)
 8005760:	f7fa fd04 	bl	800016c <__adddf3>
 8005764:	4602      	mov	r2, r0
 8005766:	460b      	mov	r3, r1
 8005768:	4630      	mov	r0, r6
 800576a:	4639      	mov	r1, r7
 800576c:	f7fb f944 	bl	80009f8 <__aeabi_dcmpgt>
 8005770:	2800      	cmp	r0, #0
 8005772:	d162      	bne.n	800583a <_dtoa_r+0x6e2>
 8005774:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8005778:	2000      	movs	r0, #0
 800577a:	49ac      	ldr	r1, [pc, #688]	; (8005a2c <_dtoa_r+0x8d4>)
 800577c:	f7fa fcf4 	bl	8000168 <__aeabi_dsub>
 8005780:	4602      	mov	r2, r0
 8005782:	460b      	mov	r3, r1
 8005784:	4630      	mov	r0, r6
 8005786:	4639      	mov	r1, r7
 8005788:	f7fb f918 	bl	80009bc <__aeabi_dcmplt>
 800578c:	2800      	cmp	r0, #0
 800578e:	f43f af1d 	beq.w	80055cc <_dtoa_r+0x474>
 8005792:	9f14      	ldr	r7, [sp, #80]	; 0x50
 8005794:	1e7b      	subs	r3, r7, #1
 8005796:	9314      	str	r3, [sp, #80]	; 0x50
 8005798:	f817 3c01 	ldrb.w	r3, [r7, #-1]
 800579c:	2b30      	cmp	r3, #48	; 0x30
 800579e:	d0f8      	beq.n	8005792 <_dtoa_r+0x63a>
 80057a0:	46c1      	mov	r9, r8
 80057a2:	e03a      	b.n	800581a <_dtoa_r+0x6c2>
 80057a4:	4ba2      	ldr	r3, [pc, #648]	; (8005a30 <_dtoa_r+0x8d8>)
 80057a6:	f7fa fe97 	bl	80004d8 <__aeabi_dmul>
 80057aa:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80057ae:	e7bc      	b.n	800572a <_dtoa_r+0x5d2>
 80057b0:	9f08      	ldr	r7, [sp, #32]
 80057b2:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 80057b6:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80057ba:	f7fa ffb7 	bl	800072c <__aeabi_ddiv>
 80057be:	f7fb f93b 	bl	8000a38 <__aeabi_d2iz>
 80057c2:	4604      	mov	r4, r0
 80057c4:	f7fa fe1e 	bl	8000404 <__aeabi_i2d>
 80057c8:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 80057cc:	f7fa fe84 	bl	80004d8 <__aeabi_dmul>
 80057d0:	f104 0630 	add.w	r6, r4, #48	; 0x30
 80057d4:	460b      	mov	r3, r1
 80057d6:	4602      	mov	r2, r0
 80057d8:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80057dc:	f7fa fcc4 	bl	8000168 <__aeabi_dsub>
 80057e0:	f807 6b01 	strb.w	r6, [r7], #1
 80057e4:	9e08      	ldr	r6, [sp, #32]
 80057e6:	9b02      	ldr	r3, [sp, #8]
 80057e8:	1bbe      	subs	r6, r7, r6
 80057ea:	42b3      	cmp	r3, r6
 80057ec:	d13a      	bne.n	8005864 <_dtoa_r+0x70c>
 80057ee:	4602      	mov	r2, r0
 80057f0:	460b      	mov	r3, r1
 80057f2:	f7fa fcbb 	bl	800016c <__adddf3>
 80057f6:	4602      	mov	r2, r0
 80057f8:	460b      	mov	r3, r1
 80057fa:	e9cd 2302 	strd	r2, r3, [sp, #8]
 80057fe:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8005802:	f7fb f8f9 	bl	80009f8 <__aeabi_dcmpgt>
 8005806:	bb58      	cbnz	r0, 8005860 <_dtoa_r+0x708>
 8005808:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800580c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8005810:	f7fb f8ca 	bl	80009a8 <__aeabi_dcmpeq>
 8005814:	b108      	cbz	r0, 800581a <_dtoa_r+0x6c2>
 8005816:	07e1      	lsls	r1, r4, #31
 8005818:	d422      	bmi.n	8005860 <_dtoa_r+0x708>
 800581a:	4628      	mov	r0, r5
 800581c:	4651      	mov	r1, sl
 800581e:	f000 fe69 	bl	80064f4 <_Bfree>
 8005822:	2300      	movs	r3, #0
 8005824:	703b      	strb	r3, [r7, #0]
 8005826:	9b24      	ldr	r3, [sp, #144]	; 0x90
 8005828:	f109 0001 	add.w	r0, r9, #1
 800582c:	6018      	str	r0, [r3, #0]
 800582e:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8005830:	2b00      	cmp	r3, #0
 8005832:	f43f acdf 	beq.w	80051f4 <_dtoa_r+0x9c>
 8005836:	601f      	str	r7, [r3, #0]
 8005838:	e4dc      	b.n	80051f4 <_dtoa_r+0x9c>
 800583a:	4627      	mov	r7, r4
 800583c:	463b      	mov	r3, r7
 800583e:	461f      	mov	r7, r3
 8005840:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8005844:	2a39      	cmp	r2, #57	; 0x39
 8005846:	d107      	bne.n	8005858 <_dtoa_r+0x700>
 8005848:	9a08      	ldr	r2, [sp, #32]
 800584a:	429a      	cmp	r2, r3
 800584c:	d1f7      	bne.n	800583e <_dtoa_r+0x6e6>
 800584e:	2230      	movs	r2, #48	; 0x30
 8005850:	9908      	ldr	r1, [sp, #32]
 8005852:	f108 0801 	add.w	r8, r8, #1
 8005856:	700a      	strb	r2, [r1, #0]
 8005858:	781a      	ldrb	r2, [r3, #0]
 800585a:	3201      	adds	r2, #1
 800585c:	701a      	strb	r2, [r3, #0]
 800585e:	e79f      	b.n	80057a0 <_dtoa_r+0x648>
 8005860:	46c8      	mov	r8, r9
 8005862:	e7eb      	b.n	800583c <_dtoa_r+0x6e4>
 8005864:	2200      	movs	r2, #0
 8005866:	4b72      	ldr	r3, [pc, #456]	; (8005a30 <_dtoa_r+0x8d8>)
 8005868:	f7fa fe36 	bl	80004d8 <__aeabi_dmul>
 800586c:	4602      	mov	r2, r0
 800586e:	460b      	mov	r3, r1
 8005870:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8005874:	2200      	movs	r2, #0
 8005876:	2300      	movs	r3, #0
 8005878:	f7fb f896 	bl	80009a8 <__aeabi_dcmpeq>
 800587c:	2800      	cmp	r0, #0
 800587e:	d098      	beq.n	80057b2 <_dtoa_r+0x65a>
 8005880:	e7cb      	b.n	800581a <_dtoa_r+0x6c2>
 8005882:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8005884:	2a00      	cmp	r2, #0
 8005886:	f000 80cd 	beq.w	8005a24 <_dtoa_r+0x8cc>
 800588a:	9a22      	ldr	r2, [sp, #136]	; 0x88
 800588c:	2a01      	cmp	r2, #1
 800588e:	f300 80af 	bgt.w	80059f0 <_dtoa_r+0x898>
 8005892:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8005894:	2a00      	cmp	r2, #0
 8005896:	f000 80a7 	beq.w	80059e8 <_dtoa_r+0x890>
 800589a:	f203 4333 	addw	r3, r3, #1075	; 0x433
 800589e:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 80058a0:	9f06      	ldr	r7, [sp, #24]
 80058a2:	9a06      	ldr	r2, [sp, #24]
 80058a4:	2101      	movs	r1, #1
 80058a6:	441a      	add	r2, r3
 80058a8:	9206      	str	r2, [sp, #24]
 80058aa:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80058ac:	4628      	mov	r0, r5
 80058ae:	441a      	add	r2, r3
 80058b0:	9209      	str	r2, [sp, #36]	; 0x24
 80058b2:	f000 ff23 	bl	80066fc <__i2b>
 80058b6:	4606      	mov	r6, r0
 80058b8:	2f00      	cmp	r7, #0
 80058ba:	dd0c      	ble.n	80058d6 <_dtoa_r+0x77e>
 80058bc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80058be:	2b00      	cmp	r3, #0
 80058c0:	dd09      	ble.n	80058d6 <_dtoa_r+0x77e>
 80058c2:	42bb      	cmp	r3, r7
 80058c4:	bfa8      	it	ge
 80058c6:	463b      	movge	r3, r7
 80058c8:	9a06      	ldr	r2, [sp, #24]
 80058ca:	1aff      	subs	r7, r7, r3
 80058cc:	1ad2      	subs	r2, r2, r3
 80058ce:	9206      	str	r2, [sp, #24]
 80058d0:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80058d2:	1ad3      	subs	r3, r2, r3
 80058d4:	9309      	str	r3, [sp, #36]	; 0x24
 80058d6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80058d8:	b1f3      	cbz	r3, 8005918 <_dtoa_r+0x7c0>
 80058da:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80058dc:	2b00      	cmp	r3, #0
 80058de:	f000 80a9 	beq.w	8005a34 <_dtoa_r+0x8dc>
 80058e2:	2c00      	cmp	r4, #0
 80058e4:	dd10      	ble.n	8005908 <_dtoa_r+0x7b0>
 80058e6:	4631      	mov	r1, r6
 80058e8:	4622      	mov	r2, r4
 80058ea:	4628      	mov	r0, r5
 80058ec:	f000 ffc0 	bl	8006870 <__pow5mult>
 80058f0:	4652      	mov	r2, sl
 80058f2:	4601      	mov	r1, r0
 80058f4:	4606      	mov	r6, r0
 80058f6:	4628      	mov	r0, r5
 80058f8:	f000 ff16 	bl	8006728 <__multiply>
 80058fc:	4680      	mov	r8, r0
 80058fe:	4651      	mov	r1, sl
 8005900:	4628      	mov	r0, r5
 8005902:	f000 fdf7 	bl	80064f4 <_Bfree>
 8005906:	46c2      	mov	sl, r8
 8005908:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800590a:	1b1a      	subs	r2, r3, r4
 800590c:	d004      	beq.n	8005918 <_dtoa_r+0x7c0>
 800590e:	4651      	mov	r1, sl
 8005910:	4628      	mov	r0, r5
 8005912:	f000 ffad 	bl	8006870 <__pow5mult>
 8005916:	4682      	mov	sl, r0
 8005918:	2101      	movs	r1, #1
 800591a:	4628      	mov	r0, r5
 800591c:	f000 feee 	bl	80066fc <__i2b>
 8005920:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8005922:	4604      	mov	r4, r0
 8005924:	2b00      	cmp	r3, #0
 8005926:	f340 8087 	ble.w	8005a38 <_dtoa_r+0x8e0>
 800592a:	461a      	mov	r2, r3
 800592c:	4601      	mov	r1, r0
 800592e:	4628      	mov	r0, r5
 8005930:	f000 ff9e 	bl	8006870 <__pow5mult>
 8005934:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8005936:	4604      	mov	r4, r0
 8005938:	2b01      	cmp	r3, #1
 800593a:	f340 8080 	ble.w	8005a3e <_dtoa_r+0x8e6>
 800593e:	f04f 0800 	mov.w	r8, #0
 8005942:	6923      	ldr	r3, [r4, #16]
 8005944:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8005948:	6918      	ldr	r0, [r3, #16]
 800594a:	f000 fe89 	bl	8006660 <__hi0bits>
 800594e:	f1c0 0020 	rsb	r0, r0, #32
 8005952:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005954:	4418      	add	r0, r3
 8005956:	f010 001f 	ands.w	r0, r0, #31
 800595a:	f000 8092 	beq.w	8005a82 <_dtoa_r+0x92a>
 800595e:	f1c0 0320 	rsb	r3, r0, #32
 8005962:	2b04      	cmp	r3, #4
 8005964:	f340 808a 	ble.w	8005a7c <_dtoa_r+0x924>
 8005968:	f1c0 001c 	rsb	r0, r0, #28
 800596c:	9b06      	ldr	r3, [sp, #24]
 800596e:	4407      	add	r7, r0
 8005970:	4403      	add	r3, r0
 8005972:	9306      	str	r3, [sp, #24]
 8005974:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005976:	4403      	add	r3, r0
 8005978:	9309      	str	r3, [sp, #36]	; 0x24
 800597a:	9b06      	ldr	r3, [sp, #24]
 800597c:	2b00      	cmp	r3, #0
 800597e:	dd05      	ble.n	800598c <_dtoa_r+0x834>
 8005980:	4651      	mov	r1, sl
 8005982:	461a      	mov	r2, r3
 8005984:	4628      	mov	r0, r5
 8005986:	f000 ffcd 	bl	8006924 <__lshift>
 800598a:	4682      	mov	sl, r0
 800598c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800598e:	2b00      	cmp	r3, #0
 8005990:	dd05      	ble.n	800599e <_dtoa_r+0x846>
 8005992:	4621      	mov	r1, r4
 8005994:	461a      	mov	r2, r3
 8005996:	4628      	mov	r0, r5
 8005998:	f000 ffc4 	bl	8006924 <__lshift>
 800599c:	4604      	mov	r4, r0
 800599e:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80059a0:	2b00      	cmp	r3, #0
 80059a2:	d070      	beq.n	8005a86 <_dtoa_r+0x92e>
 80059a4:	4621      	mov	r1, r4
 80059a6:	4650      	mov	r0, sl
 80059a8:	f001 f828 	bl	80069fc <__mcmp>
 80059ac:	2800      	cmp	r0, #0
 80059ae:	da6a      	bge.n	8005a86 <_dtoa_r+0x92e>
 80059b0:	2300      	movs	r3, #0
 80059b2:	4651      	mov	r1, sl
 80059b4:	220a      	movs	r2, #10
 80059b6:	4628      	mov	r0, r5
 80059b8:	f000 fdbe 	bl	8006538 <__multadd>
 80059bc:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80059be:	4682      	mov	sl, r0
 80059c0:	f109 39ff 	add.w	r9, r9, #4294967295
 80059c4:	2b00      	cmp	r3, #0
 80059c6:	f000 8193 	beq.w	8005cf0 <_dtoa_r+0xb98>
 80059ca:	4631      	mov	r1, r6
 80059cc:	2300      	movs	r3, #0
 80059ce:	220a      	movs	r2, #10
 80059d0:	4628      	mov	r0, r5
 80059d2:	f000 fdb1 	bl	8006538 <__multadd>
 80059d6:	f1bb 0f00 	cmp.w	fp, #0
 80059da:	4606      	mov	r6, r0
 80059dc:	f300 8093 	bgt.w	8005b06 <_dtoa_r+0x9ae>
 80059e0:	9b22      	ldr	r3, [sp, #136]	; 0x88
 80059e2:	2b02      	cmp	r3, #2
 80059e4:	dc57      	bgt.n	8005a96 <_dtoa_r+0x93e>
 80059e6:	e08e      	b.n	8005b06 <_dtoa_r+0x9ae>
 80059e8:	9b16      	ldr	r3, [sp, #88]	; 0x58
 80059ea:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 80059ee:	e756      	b.n	800589e <_dtoa_r+0x746>
 80059f0:	9b02      	ldr	r3, [sp, #8]
 80059f2:	1e5c      	subs	r4, r3, #1
 80059f4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80059f6:	42a3      	cmp	r3, r4
 80059f8:	bfb7      	itett	lt
 80059fa:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 80059fc:	1b1c      	subge	r4, r3, r4
 80059fe:	1ae2      	sublt	r2, r4, r3
 8005a00:	9b0e      	ldrlt	r3, [sp, #56]	; 0x38
 8005a02:	bfbe      	ittt	lt
 8005a04:	940a      	strlt	r4, [sp, #40]	; 0x28
 8005a06:	189b      	addlt	r3, r3, r2
 8005a08:	930e      	strlt	r3, [sp, #56]	; 0x38
 8005a0a:	9b02      	ldr	r3, [sp, #8]
 8005a0c:	bfb8      	it	lt
 8005a0e:	2400      	movlt	r4, #0
 8005a10:	2b00      	cmp	r3, #0
 8005a12:	bfbb      	ittet	lt
 8005a14:	9b06      	ldrlt	r3, [sp, #24]
 8005a16:	9a02      	ldrlt	r2, [sp, #8]
 8005a18:	9f06      	ldrge	r7, [sp, #24]
 8005a1a:	1a9f      	sublt	r7, r3, r2
 8005a1c:	bfac      	ite	ge
 8005a1e:	9b02      	ldrge	r3, [sp, #8]
 8005a20:	2300      	movlt	r3, #0
 8005a22:	e73e      	b.n	80058a2 <_dtoa_r+0x74a>
 8005a24:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 8005a26:	9f06      	ldr	r7, [sp, #24]
 8005a28:	9e0b      	ldr	r6, [sp, #44]	; 0x2c
 8005a2a:	e745      	b.n	80058b8 <_dtoa_r+0x760>
 8005a2c:	3fe00000 	.word	0x3fe00000
 8005a30:	40240000 	.word	0x40240000
 8005a34:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8005a36:	e76a      	b.n	800590e <_dtoa_r+0x7b6>
 8005a38:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8005a3a:	2b01      	cmp	r3, #1
 8005a3c:	dc19      	bgt.n	8005a72 <_dtoa_r+0x91a>
 8005a3e:	9b04      	ldr	r3, [sp, #16]
 8005a40:	b9bb      	cbnz	r3, 8005a72 <_dtoa_r+0x91a>
 8005a42:	9b05      	ldr	r3, [sp, #20]
 8005a44:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8005a48:	b99b      	cbnz	r3, 8005a72 <_dtoa_r+0x91a>
 8005a4a:	9b05      	ldr	r3, [sp, #20]
 8005a4c:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8005a50:	0d1b      	lsrs	r3, r3, #20
 8005a52:	051b      	lsls	r3, r3, #20
 8005a54:	b183      	cbz	r3, 8005a78 <_dtoa_r+0x920>
 8005a56:	f04f 0801 	mov.w	r8, #1
 8005a5a:	9b06      	ldr	r3, [sp, #24]
 8005a5c:	3301      	adds	r3, #1
 8005a5e:	9306      	str	r3, [sp, #24]
 8005a60:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005a62:	3301      	adds	r3, #1
 8005a64:	9309      	str	r3, [sp, #36]	; 0x24
 8005a66:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8005a68:	2b00      	cmp	r3, #0
 8005a6a:	f47f af6a 	bne.w	8005942 <_dtoa_r+0x7ea>
 8005a6e:	2001      	movs	r0, #1
 8005a70:	e76f      	b.n	8005952 <_dtoa_r+0x7fa>
 8005a72:	f04f 0800 	mov.w	r8, #0
 8005a76:	e7f6      	b.n	8005a66 <_dtoa_r+0x90e>
 8005a78:	4698      	mov	r8, r3
 8005a7a:	e7f4      	b.n	8005a66 <_dtoa_r+0x90e>
 8005a7c:	f43f af7d 	beq.w	800597a <_dtoa_r+0x822>
 8005a80:	4618      	mov	r0, r3
 8005a82:	301c      	adds	r0, #28
 8005a84:	e772      	b.n	800596c <_dtoa_r+0x814>
 8005a86:	9b02      	ldr	r3, [sp, #8]
 8005a88:	2b00      	cmp	r3, #0
 8005a8a:	dc36      	bgt.n	8005afa <_dtoa_r+0x9a2>
 8005a8c:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8005a8e:	2b02      	cmp	r3, #2
 8005a90:	dd33      	ble.n	8005afa <_dtoa_r+0x9a2>
 8005a92:	f8dd b008 	ldr.w	fp, [sp, #8]
 8005a96:	f1bb 0f00 	cmp.w	fp, #0
 8005a9a:	d10d      	bne.n	8005ab8 <_dtoa_r+0x960>
 8005a9c:	4621      	mov	r1, r4
 8005a9e:	465b      	mov	r3, fp
 8005aa0:	2205      	movs	r2, #5
 8005aa2:	4628      	mov	r0, r5
 8005aa4:	f000 fd48 	bl	8006538 <__multadd>
 8005aa8:	4601      	mov	r1, r0
 8005aaa:	4604      	mov	r4, r0
 8005aac:	4650      	mov	r0, sl
 8005aae:	f000 ffa5 	bl	80069fc <__mcmp>
 8005ab2:	2800      	cmp	r0, #0
 8005ab4:	f73f adb6 	bgt.w	8005624 <_dtoa_r+0x4cc>
 8005ab8:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8005aba:	9f08      	ldr	r7, [sp, #32]
 8005abc:	ea6f 0903 	mvn.w	r9, r3
 8005ac0:	f04f 0800 	mov.w	r8, #0
 8005ac4:	4621      	mov	r1, r4
 8005ac6:	4628      	mov	r0, r5
 8005ac8:	f000 fd14 	bl	80064f4 <_Bfree>
 8005acc:	2e00      	cmp	r6, #0
 8005ace:	f43f aea4 	beq.w	800581a <_dtoa_r+0x6c2>
 8005ad2:	f1b8 0f00 	cmp.w	r8, #0
 8005ad6:	d005      	beq.n	8005ae4 <_dtoa_r+0x98c>
 8005ad8:	45b0      	cmp	r8, r6
 8005ada:	d003      	beq.n	8005ae4 <_dtoa_r+0x98c>
 8005adc:	4641      	mov	r1, r8
 8005ade:	4628      	mov	r0, r5
 8005ae0:	f000 fd08 	bl	80064f4 <_Bfree>
 8005ae4:	4631      	mov	r1, r6
 8005ae6:	4628      	mov	r0, r5
 8005ae8:	f000 fd04 	bl	80064f4 <_Bfree>
 8005aec:	e695      	b.n	800581a <_dtoa_r+0x6c2>
 8005aee:	2400      	movs	r4, #0
 8005af0:	4626      	mov	r6, r4
 8005af2:	e7e1      	b.n	8005ab8 <_dtoa_r+0x960>
 8005af4:	46c1      	mov	r9, r8
 8005af6:	4626      	mov	r6, r4
 8005af8:	e594      	b.n	8005624 <_dtoa_r+0x4cc>
 8005afa:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8005afc:	f8dd b008 	ldr.w	fp, [sp, #8]
 8005b00:	2b00      	cmp	r3, #0
 8005b02:	f000 80fc 	beq.w	8005cfe <_dtoa_r+0xba6>
 8005b06:	2f00      	cmp	r7, #0
 8005b08:	dd05      	ble.n	8005b16 <_dtoa_r+0x9be>
 8005b0a:	4631      	mov	r1, r6
 8005b0c:	463a      	mov	r2, r7
 8005b0e:	4628      	mov	r0, r5
 8005b10:	f000 ff08 	bl	8006924 <__lshift>
 8005b14:	4606      	mov	r6, r0
 8005b16:	f1b8 0f00 	cmp.w	r8, #0
 8005b1a:	d05c      	beq.n	8005bd6 <_dtoa_r+0xa7e>
 8005b1c:	4628      	mov	r0, r5
 8005b1e:	6871      	ldr	r1, [r6, #4]
 8005b20:	f000 fca8 	bl	8006474 <_Balloc>
 8005b24:	4607      	mov	r7, r0
 8005b26:	b928      	cbnz	r0, 8005b34 <_dtoa_r+0x9dc>
 8005b28:	4602      	mov	r2, r0
 8005b2a:	f240 21ea 	movw	r1, #746	; 0x2ea
 8005b2e:	4b7e      	ldr	r3, [pc, #504]	; (8005d28 <_dtoa_r+0xbd0>)
 8005b30:	f7ff bb26 	b.w	8005180 <_dtoa_r+0x28>
 8005b34:	6932      	ldr	r2, [r6, #16]
 8005b36:	f106 010c 	add.w	r1, r6, #12
 8005b3a:	3202      	adds	r2, #2
 8005b3c:	0092      	lsls	r2, r2, #2
 8005b3e:	300c      	adds	r0, #12
 8005b40:	f000 fc8a 	bl	8006458 <memcpy>
 8005b44:	2201      	movs	r2, #1
 8005b46:	4639      	mov	r1, r7
 8005b48:	4628      	mov	r0, r5
 8005b4a:	f000 feeb 	bl	8006924 <__lshift>
 8005b4e:	46b0      	mov	r8, r6
 8005b50:	4606      	mov	r6, r0
 8005b52:	9b08      	ldr	r3, [sp, #32]
 8005b54:	3301      	adds	r3, #1
 8005b56:	9302      	str	r3, [sp, #8]
 8005b58:	9b08      	ldr	r3, [sp, #32]
 8005b5a:	445b      	add	r3, fp
 8005b5c:	930a      	str	r3, [sp, #40]	; 0x28
 8005b5e:	9b04      	ldr	r3, [sp, #16]
 8005b60:	f003 0301 	and.w	r3, r3, #1
 8005b64:	9309      	str	r3, [sp, #36]	; 0x24
 8005b66:	9b02      	ldr	r3, [sp, #8]
 8005b68:	4621      	mov	r1, r4
 8005b6a:	4650      	mov	r0, sl
 8005b6c:	f103 3bff 	add.w	fp, r3, #4294967295
 8005b70:	f7ff fa64 	bl	800503c <quorem>
 8005b74:	4603      	mov	r3, r0
 8005b76:	4641      	mov	r1, r8
 8005b78:	3330      	adds	r3, #48	; 0x30
 8005b7a:	9004      	str	r0, [sp, #16]
 8005b7c:	4650      	mov	r0, sl
 8005b7e:	930b      	str	r3, [sp, #44]	; 0x2c
 8005b80:	f000 ff3c 	bl	80069fc <__mcmp>
 8005b84:	4632      	mov	r2, r6
 8005b86:	9006      	str	r0, [sp, #24]
 8005b88:	4621      	mov	r1, r4
 8005b8a:	4628      	mov	r0, r5
 8005b8c:	f000 ff52 	bl	8006a34 <__mdiff>
 8005b90:	68c2      	ldr	r2, [r0, #12]
 8005b92:	4607      	mov	r7, r0
 8005b94:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8005b96:	bb02      	cbnz	r2, 8005bda <_dtoa_r+0xa82>
 8005b98:	4601      	mov	r1, r0
 8005b9a:	4650      	mov	r0, sl
 8005b9c:	f000 ff2e 	bl	80069fc <__mcmp>
 8005ba0:	4602      	mov	r2, r0
 8005ba2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8005ba4:	4639      	mov	r1, r7
 8005ba6:	4628      	mov	r0, r5
 8005ba8:	e9cd 320b 	strd	r3, r2, [sp, #44]	; 0x2c
 8005bac:	f000 fca2 	bl	80064f4 <_Bfree>
 8005bb0:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8005bb2:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8005bb4:	9f02      	ldr	r7, [sp, #8]
 8005bb6:	ea43 0102 	orr.w	r1, r3, r2
 8005bba:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005bbc:	430b      	orrs	r3, r1
 8005bbe:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8005bc0:	d10d      	bne.n	8005bde <_dtoa_r+0xa86>
 8005bc2:	2b39      	cmp	r3, #57	; 0x39
 8005bc4:	d027      	beq.n	8005c16 <_dtoa_r+0xabe>
 8005bc6:	9a06      	ldr	r2, [sp, #24]
 8005bc8:	2a00      	cmp	r2, #0
 8005bca:	dd01      	ble.n	8005bd0 <_dtoa_r+0xa78>
 8005bcc:	9b04      	ldr	r3, [sp, #16]
 8005bce:	3331      	adds	r3, #49	; 0x31
 8005bd0:	f88b 3000 	strb.w	r3, [fp]
 8005bd4:	e776      	b.n	8005ac4 <_dtoa_r+0x96c>
 8005bd6:	4630      	mov	r0, r6
 8005bd8:	e7b9      	b.n	8005b4e <_dtoa_r+0x9f6>
 8005bda:	2201      	movs	r2, #1
 8005bdc:	e7e2      	b.n	8005ba4 <_dtoa_r+0xa4c>
 8005bde:	9906      	ldr	r1, [sp, #24]
 8005be0:	2900      	cmp	r1, #0
 8005be2:	db04      	blt.n	8005bee <_dtoa_r+0xa96>
 8005be4:	9822      	ldr	r0, [sp, #136]	; 0x88
 8005be6:	4301      	orrs	r1, r0
 8005be8:	9809      	ldr	r0, [sp, #36]	; 0x24
 8005bea:	4301      	orrs	r1, r0
 8005bec:	d120      	bne.n	8005c30 <_dtoa_r+0xad8>
 8005bee:	2a00      	cmp	r2, #0
 8005bf0:	ddee      	ble.n	8005bd0 <_dtoa_r+0xa78>
 8005bf2:	4651      	mov	r1, sl
 8005bf4:	2201      	movs	r2, #1
 8005bf6:	4628      	mov	r0, r5
 8005bf8:	9302      	str	r3, [sp, #8]
 8005bfa:	f000 fe93 	bl	8006924 <__lshift>
 8005bfe:	4621      	mov	r1, r4
 8005c00:	4682      	mov	sl, r0
 8005c02:	f000 fefb 	bl	80069fc <__mcmp>
 8005c06:	2800      	cmp	r0, #0
 8005c08:	9b02      	ldr	r3, [sp, #8]
 8005c0a:	dc02      	bgt.n	8005c12 <_dtoa_r+0xaba>
 8005c0c:	d1e0      	bne.n	8005bd0 <_dtoa_r+0xa78>
 8005c0e:	07da      	lsls	r2, r3, #31
 8005c10:	d5de      	bpl.n	8005bd0 <_dtoa_r+0xa78>
 8005c12:	2b39      	cmp	r3, #57	; 0x39
 8005c14:	d1da      	bne.n	8005bcc <_dtoa_r+0xa74>
 8005c16:	2339      	movs	r3, #57	; 0x39
 8005c18:	f88b 3000 	strb.w	r3, [fp]
 8005c1c:	463b      	mov	r3, r7
 8005c1e:	461f      	mov	r7, r3
 8005c20:	f817 2c01 	ldrb.w	r2, [r7, #-1]
 8005c24:	3b01      	subs	r3, #1
 8005c26:	2a39      	cmp	r2, #57	; 0x39
 8005c28:	d050      	beq.n	8005ccc <_dtoa_r+0xb74>
 8005c2a:	3201      	adds	r2, #1
 8005c2c:	701a      	strb	r2, [r3, #0]
 8005c2e:	e749      	b.n	8005ac4 <_dtoa_r+0x96c>
 8005c30:	2a00      	cmp	r2, #0
 8005c32:	dd03      	ble.n	8005c3c <_dtoa_r+0xae4>
 8005c34:	2b39      	cmp	r3, #57	; 0x39
 8005c36:	d0ee      	beq.n	8005c16 <_dtoa_r+0xabe>
 8005c38:	3301      	adds	r3, #1
 8005c3a:	e7c9      	b.n	8005bd0 <_dtoa_r+0xa78>
 8005c3c:	9a02      	ldr	r2, [sp, #8]
 8005c3e:	990a      	ldr	r1, [sp, #40]	; 0x28
 8005c40:	f802 3c01 	strb.w	r3, [r2, #-1]
 8005c44:	428a      	cmp	r2, r1
 8005c46:	d02a      	beq.n	8005c9e <_dtoa_r+0xb46>
 8005c48:	4651      	mov	r1, sl
 8005c4a:	2300      	movs	r3, #0
 8005c4c:	220a      	movs	r2, #10
 8005c4e:	4628      	mov	r0, r5
 8005c50:	f000 fc72 	bl	8006538 <__multadd>
 8005c54:	45b0      	cmp	r8, r6
 8005c56:	4682      	mov	sl, r0
 8005c58:	f04f 0300 	mov.w	r3, #0
 8005c5c:	f04f 020a 	mov.w	r2, #10
 8005c60:	4641      	mov	r1, r8
 8005c62:	4628      	mov	r0, r5
 8005c64:	d107      	bne.n	8005c76 <_dtoa_r+0xb1e>
 8005c66:	f000 fc67 	bl	8006538 <__multadd>
 8005c6a:	4680      	mov	r8, r0
 8005c6c:	4606      	mov	r6, r0
 8005c6e:	9b02      	ldr	r3, [sp, #8]
 8005c70:	3301      	adds	r3, #1
 8005c72:	9302      	str	r3, [sp, #8]
 8005c74:	e777      	b.n	8005b66 <_dtoa_r+0xa0e>
 8005c76:	f000 fc5f 	bl	8006538 <__multadd>
 8005c7a:	4631      	mov	r1, r6
 8005c7c:	4680      	mov	r8, r0
 8005c7e:	2300      	movs	r3, #0
 8005c80:	220a      	movs	r2, #10
 8005c82:	4628      	mov	r0, r5
 8005c84:	f000 fc58 	bl	8006538 <__multadd>
 8005c88:	4606      	mov	r6, r0
 8005c8a:	e7f0      	b.n	8005c6e <_dtoa_r+0xb16>
 8005c8c:	f1bb 0f00 	cmp.w	fp, #0
 8005c90:	bfcc      	ite	gt
 8005c92:	465f      	movgt	r7, fp
 8005c94:	2701      	movle	r7, #1
 8005c96:	f04f 0800 	mov.w	r8, #0
 8005c9a:	9a08      	ldr	r2, [sp, #32]
 8005c9c:	4417      	add	r7, r2
 8005c9e:	4651      	mov	r1, sl
 8005ca0:	2201      	movs	r2, #1
 8005ca2:	4628      	mov	r0, r5
 8005ca4:	9302      	str	r3, [sp, #8]
 8005ca6:	f000 fe3d 	bl	8006924 <__lshift>
 8005caa:	4621      	mov	r1, r4
 8005cac:	4682      	mov	sl, r0
 8005cae:	f000 fea5 	bl	80069fc <__mcmp>
 8005cb2:	2800      	cmp	r0, #0
 8005cb4:	dcb2      	bgt.n	8005c1c <_dtoa_r+0xac4>
 8005cb6:	d102      	bne.n	8005cbe <_dtoa_r+0xb66>
 8005cb8:	9b02      	ldr	r3, [sp, #8]
 8005cba:	07db      	lsls	r3, r3, #31
 8005cbc:	d4ae      	bmi.n	8005c1c <_dtoa_r+0xac4>
 8005cbe:	463b      	mov	r3, r7
 8005cc0:	461f      	mov	r7, r3
 8005cc2:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8005cc6:	2a30      	cmp	r2, #48	; 0x30
 8005cc8:	d0fa      	beq.n	8005cc0 <_dtoa_r+0xb68>
 8005cca:	e6fb      	b.n	8005ac4 <_dtoa_r+0x96c>
 8005ccc:	9a08      	ldr	r2, [sp, #32]
 8005cce:	429a      	cmp	r2, r3
 8005cd0:	d1a5      	bne.n	8005c1e <_dtoa_r+0xac6>
 8005cd2:	2331      	movs	r3, #49	; 0x31
 8005cd4:	f109 0901 	add.w	r9, r9, #1
 8005cd8:	7013      	strb	r3, [r2, #0]
 8005cda:	e6f3      	b.n	8005ac4 <_dtoa_r+0x96c>
 8005cdc:	4b13      	ldr	r3, [pc, #76]	; (8005d2c <_dtoa_r+0xbd4>)
 8005cde:	f7ff baa7 	b.w	8005230 <_dtoa_r+0xd8>
 8005ce2:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8005ce4:	2b00      	cmp	r3, #0
 8005ce6:	f47f aa80 	bne.w	80051ea <_dtoa_r+0x92>
 8005cea:	4b11      	ldr	r3, [pc, #68]	; (8005d30 <_dtoa_r+0xbd8>)
 8005cec:	f7ff baa0 	b.w	8005230 <_dtoa_r+0xd8>
 8005cf0:	f1bb 0f00 	cmp.w	fp, #0
 8005cf4:	dc03      	bgt.n	8005cfe <_dtoa_r+0xba6>
 8005cf6:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8005cf8:	2b02      	cmp	r3, #2
 8005cfa:	f73f aecc 	bgt.w	8005a96 <_dtoa_r+0x93e>
 8005cfe:	9f08      	ldr	r7, [sp, #32]
 8005d00:	4621      	mov	r1, r4
 8005d02:	4650      	mov	r0, sl
 8005d04:	f7ff f99a 	bl	800503c <quorem>
 8005d08:	9a08      	ldr	r2, [sp, #32]
 8005d0a:	f100 0330 	add.w	r3, r0, #48	; 0x30
 8005d0e:	f807 3b01 	strb.w	r3, [r7], #1
 8005d12:	1aba      	subs	r2, r7, r2
 8005d14:	4593      	cmp	fp, r2
 8005d16:	ddb9      	ble.n	8005c8c <_dtoa_r+0xb34>
 8005d18:	4651      	mov	r1, sl
 8005d1a:	2300      	movs	r3, #0
 8005d1c:	220a      	movs	r2, #10
 8005d1e:	4628      	mov	r0, r5
 8005d20:	f000 fc0a 	bl	8006538 <__multadd>
 8005d24:	4682      	mov	sl, r0
 8005d26:	e7eb      	b.n	8005d00 <_dtoa_r+0xba8>
 8005d28:	08008074 	.word	0x08008074
 8005d2c:	08007e74 	.word	0x08007e74
 8005d30:	08007ff1 	.word	0x08007ff1

08005d34 <rshift>:
 8005d34:	6903      	ldr	r3, [r0, #16]
 8005d36:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8005d3a:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 8005d3e:	f100 0414 	add.w	r4, r0, #20
 8005d42:	ea4f 1261 	mov.w	r2, r1, asr #5
 8005d46:	dd46      	ble.n	8005dd6 <rshift+0xa2>
 8005d48:	f011 011f 	ands.w	r1, r1, #31
 8005d4c:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 8005d50:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 8005d54:	d10c      	bne.n	8005d70 <rshift+0x3c>
 8005d56:	4629      	mov	r1, r5
 8005d58:	f100 0710 	add.w	r7, r0, #16
 8005d5c:	42b1      	cmp	r1, r6
 8005d5e:	d335      	bcc.n	8005dcc <rshift+0x98>
 8005d60:	1a9b      	subs	r3, r3, r2
 8005d62:	009b      	lsls	r3, r3, #2
 8005d64:	1eea      	subs	r2, r5, #3
 8005d66:	4296      	cmp	r6, r2
 8005d68:	bf38      	it	cc
 8005d6a:	2300      	movcc	r3, #0
 8005d6c:	4423      	add	r3, r4
 8005d6e:	e015      	b.n	8005d9c <rshift+0x68>
 8005d70:	46a1      	mov	r9, r4
 8005d72:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 8005d76:	f1c1 0820 	rsb	r8, r1, #32
 8005d7a:	40cf      	lsrs	r7, r1
 8005d7c:	f105 0e04 	add.w	lr, r5, #4
 8005d80:	4576      	cmp	r6, lr
 8005d82:	46f4      	mov	ip, lr
 8005d84:	d816      	bhi.n	8005db4 <rshift+0x80>
 8005d86:	1a9b      	subs	r3, r3, r2
 8005d88:	009a      	lsls	r2, r3, #2
 8005d8a:	3a04      	subs	r2, #4
 8005d8c:	3501      	adds	r5, #1
 8005d8e:	42ae      	cmp	r6, r5
 8005d90:	bf38      	it	cc
 8005d92:	2200      	movcc	r2, #0
 8005d94:	18a3      	adds	r3, r4, r2
 8005d96:	50a7      	str	r7, [r4, r2]
 8005d98:	b107      	cbz	r7, 8005d9c <rshift+0x68>
 8005d9a:	3304      	adds	r3, #4
 8005d9c:	42a3      	cmp	r3, r4
 8005d9e:	eba3 0204 	sub.w	r2, r3, r4
 8005da2:	bf08      	it	eq
 8005da4:	2300      	moveq	r3, #0
 8005da6:	ea4f 02a2 	mov.w	r2, r2, asr #2
 8005daa:	6102      	str	r2, [r0, #16]
 8005dac:	bf08      	it	eq
 8005dae:	6143      	streq	r3, [r0, #20]
 8005db0:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8005db4:	f8dc c000 	ldr.w	ip, [ip]
 8005db8:	fa0c fc08 	lsl.w	ip, ip, r8
 8005dbc:	ea4c 0707 	orr.w	r7, ip, r7
 8005dc0:	f849 7b04 	str.w	r7, [r9], #4
 8005dc4:	f85e 7b04 	ldr.w	r7, [lr], #4
 8005dc8:	40cf      	lsrs	r7, r1
 8005dca:	e7d9      	b.n	8005d80 <rshift+0x4c>
 8005dcc:	f851 cb04 	ldr.w	ip, [r1], #4
 8005dd0:	f847 cf04 	str.w	ip, [r7, #4]!
 8005dd4:	e7c2      	b.n	8005d5c <rshift+0x28>
 8005dd6:	4623      	mov	r3, r4
 8005dd8:	e7e0      	b.n	8005d9c <rshift+0x68>

08005dda <__hexdig_fun>:
 8005dda:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 8005dde:	2b09      	cmp	r3, #9
 8005de0:	d802      	bhi.n	8005de8 <__hexdig_fun+0xe>
 8005de2:	3820      	subs	r0, #32
 8005de4:	b2c0      	uxtb	r0, r0
 8005de6:	4770      	bx	lr
 8005de8:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 8005dec:	2b05      	cmp	r3, #5
 8005dee:	d801      	bhi.n	8005df4 <__hexdig_fun+0x1a>
 8005df0:	3847      	subs	r0, #71	; 0x47
 8005df2:	e7f7      	b.n	8005de4 <__hexdig_fun+0xa>
 8005df4:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 8005df8:	2b05      	cmp	r3, #5
 8005dfa:	d801      	bhi.n	8005e00 <__hexdig_fun+0x26>
 8005dfc:	3827      	subs	r0, #39	; 0x27
 8005dfe:	e7f1      	b.n	8005de4 <__hexdig_fun+0xa>
 8005e00:	2000      	movs	r0, #0
 8005e02:	4770      	bx	lr

08005e04 <__gethex>:
 8005e04:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005e08:	b08b      	sub	sp, #44	; 0x2c
 8005e0a:	9306      	str	r3, [sp, #24]
 8005e0c:	4bb9      	ldr	r3, [pc, #740]	; (80060f4 <__gethex+0x2f0>)
 8005e0e:	9002      	str	r0, [sp, #8]
 8005e10:	681b      	ldr	r3, [r3, #0]
 8005e12:	468b      	mov	fp, r1
 8005e14:	4618      	mov	r0, r3
 8005e16:	4690      	mov	r8, r2
 8005e18:	9303      	str	r3, [sp, #12]
 8005e1a:	f7fa f999 	bl	8000150 <strlen>
 8005e1e:	4682      	mov	sl, r0
 8005e20:	9b03      	ldr	r3, [sp, #12]
 8005e22:	f8db 2000 	ldr.w	r2, [fp]
 8005e26:	4403      	add	r3, r0
 8005e28:	f813 3c01 	ldrb.w	r3, [r3, #-1]
 8005e2c:	9307      	str	r3, [sp, #28]
 8005e2e:	1c93      	adds	r3, r2, #2
 8005e30:	f1c2 22ff 	rsb	r2, r2, #4278255360	; 0xff00ff00
 8005e34:	f502 027f 	add.w	r2, r2, #16711680	; 0xff0000
 8005e38:	32fe      	adds	r2, #254	; 0xfe
 8005e3a:	18d1      	adds	r1, r2, r3
 8005e3c:	461f      	mov	r7, r3
 8005e3e:	f813 0b01 	ldrb.w	r0, [r3], #1
 8005e42:	9101      	str	r1, [sp, #4]
 8005e44:	2830      	cmp	r0, #48	; 0x30
 8005e46:	d0f8      	beq.n	8005e3a <__gethex+0x36>
 8005e48:	f7ff ffc7 	bl	8005dda <__hexdig_fun>
 8005e4c:	4604      	mov	r4, r0
 8005e4e:	2800      	cmp	r0, #0
 8005e50:	d13a      	bne.n	8005ec8 <__gethex+0xc4>
 8005e52:	4652      	mov	r2, sl
 8005e54:	4638      	mov	r0, r7
 8005e56:	9903      	ldr	r1, [sp, #12]
 8005e58:	f001 f9ea 	bl	8007230 <strncmp>
 8005e5c:	4605      	mov	r5, r0
 8005e5e:	2800      	cmp	r0, #0
 8005e60:	d166      	bne.n	8005f30 <__gethex+0x12c>
 8005e62:	f817 000a 	ldrb.w	r0, [r7, sl]
 8005e66:	eb07 060a 	add.w	r6, r7, sl
 8005e6a:	f7ff ffb6 	bl	8005dda <__hexdig_fun>
 8005e6e:	2800      	cmp	r0, #0
 8005e70:	d060      	beq.n	8005f34 <__gethex+0x130>
 8005e72:	4633      	mov	r3, r6
 8005e74:	7818      	ldrb	r0, [r3, #0]
 8005e76:	461f      	mov	r7, r3
 8005e78:	2830      	cmp	r0, #48	; 0x30
 8005e7a:	f103 0301 	add.w	r3, r3, #1
 8005e7e:	d0f9      	beq.n	8005e74 <__gethex+0x70>
 8005e80:	f7ff ffab 	bl	8005dda <__hexdig_fun>
 8005e84:	2301      	movs	r3, #1
 8005e86:	fab0 f480 	clz	r4, r0
 8005e8a:	4635      	mov	r5, r6
 8005e8c:	0964      	lsrs	r4, r4, #5
 8005e8e:	9301      	str	r3, [sp, #4]
 8005e90:	463a      	mov	r2, r7
 8005e92:	4616      	mov	r6, r2
 8005e94:	7830      	ldrb	r0, [r6, #0]
 8005e96:	3201      	adds	r2, #1
 8005e98:	f7ff ff9f 	bl	8005dda <__hexdig_fun>
 8005e9c:	2800      	cmp	r0, #0
 8005e9e:	d1f8      	bne.n	8005e92 <__gethex+0x8e>
 8005ea0:	4652      	mov	r2, sl
 8005ea2:	4630      	mov	r0, r6
 8005ea4:	9903      	ldr	r1, [sp, #12]
 8005ea6:	f001 f9c3 	bl	8007230 <strncmp>
 8005eaa:	b980      	cbnz	r0, 8005ece <__gethex+0xca>
 8005eac:	b94d      	cbnz	r5, 8005ec2 <__gethex+0xbe>
 8005eae:	eb06 050a 	add.w	r5, r6, sl
 8005eb2:	462a      	mov	r2, r5
 8005eb4:	4616      	mov	r6, r2
 8005eb6:	7830      	ldrb	r0, [r6, #0]
 8005eb8:	3201      	adds	r2, #1
 8005eba:	f7ff ff8e 	bl	8005dda <__hexdig_fun>
 8005ebe:	2800      	cmp	r0, #0
 8005ec0:	d1f8      	bne.n	8005eb4 <__gethex+0xb0>
 8005ec2:	1bad      	subs	r5, r5, r6
 8005ec4:	00ad      	lsls	r5, r5, #2
 8005ec6:	e004      	b.n	8005ed2 <__gethex+0xce>
 8005ec8:	2400      	movs	r4, #0
 8005eca:	4625      	mov	r5, r4
 8005ecc:	e7e0      	b.n	8005e90 <__gethex+0x8c>
 8005ece:	2d00      	cmp	r5, #0
 8005ed0:	d1f7      	bne.n	8005ec2 <__gethex+0xbe>
 8005ed2:	7833      	ldrb	r3, [r6, #0]
 8005ed4:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 8005ed8:	2b50      	cmp	r3, #80	; 0x50
 8005eda:	d139      	bne.n	8005f50 <__gethex+0x14c>
 8005edc:	7873      	ldrb	r3, [r6, #1]
 8005ede:	2b2b      	cmp	r3, #43	; 0x2b
 8005ee0:	d02a      	beq.n	8005f38 <__gethex+0x134>
 8005ee2:	2b2d      	cmp	r3, #45	; 0x2d
 8005ee4:	d02c      	beq.n	8005f40 <__gethex+0x13c>
 8005ee6:	f04f 0900 	mov.w	r9, #0
 8005eea:	1c71      	adds	r1, r6, #1
 8005eec:	7808      	ldrb	r0, [r1, #0]
 8005eee:	f7ff ff74 	bl	8005dda <__hexdig_fun>
 8005ef2:	1e43      	subs	r3, r0, #1
 8005ef4:	b2db      	uxtb	r3, r3
 8005ef6:	2b18      	cmp	r3, #24
 8005ef8:	d82a      	bhi.n	8005f50 <__gethex+0x14c>
 8005efa:	f1a0 0210 	sub.w	r2, r0, #16
 8005efe:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 8005f02:	f7ff ff6a 	bl	8005dda <__hexdig_fun>
 8005f06:	1e43      	subs	r3, r0, #1
 8005f08:	b2db      	uxtb	r3, r3
 8005f0a:	2b18      	cmp	r3, #24
 8005f0c:	d91b      	bls.n	8005f46 <__gethex+0x142>
 8005f0e:	f1b9 0f00 	cmp.w	r9, #0
 8005f12:	d000      	beq.n	8005f16 <__gethex+0x112>
 8005f14:	4252      	negs	r2, r2
 8005f16:	4415      	add	r5, r2
 8005f18:	f8cb 1000 	str.w	r1, [fp]
 8005f1c:	b1d4      	cbz	r4, 8005f54 <__gethex+0x150>
 8005f1e:	9b01      	ldr	r3, [sp, #4]
 8005f20:	2b00      	cmp	r3, #0
 8005f22:	bf14      	ite	ne
 8005f24:	2700      	movne	r7, #0
 8005f26:	2706      	moveq	r7, #6
 8005f28:	4638      	mov	r0, r7
 8005f2a:	b00b      	add	sp, #44	; 0x2c
 8005f2c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005f30:	463e      	mov	r6, r7
 8005f32:	4625      	mov	r5, r4
 8005f34:	2401      	movs	r4, #1
 8005f36:	e7cc      	b.n	8005ed2 <__gethex+0xce>
 8005f38:	f04f 0900 	mov.w	r9, #0
 8005f3c:	1cb1      	adds	r1, r6, #2
 8005f3e:	e7d5      	b.n	8005eec <__gethex+0xe8>
 8005f40:	f04f 0901 	mov.w	r9, #1
 8005f44:	e7fa      	b.n	8005f3c <__gethex+0x138>
 8005f46:	230a      	movs	r3, #10
 8005f48:	fb03 0202 	mla	r2, r3, r2, r0
 8005f4c:	3a10      	subs	r2, #16
 8005f4e:	e7d6      	b.n	8005efe <__gethex+0xfa>
 8005f50:	4631      	mov	r1, r6
 8005f52:	e7e1      	b.n	8005f18 <__gethex+0x114>
 8005f54:	4621      	mov	r1, r4
 8005f56:	1bf3      	subs	r3, r6, r7
 8005f58:	3b01      	subs	r3, #1
 8005f5a:	2b07      	cmp	r3, #7
 8005f5c:	dc0a      	bgt.n	8005f74 <__gethex+0x170>
 8005f5e:	9802      	ldr	r0, [sp, #8]
 8005f60:	f000 fa88 	bl	8006474 <_Balloc>
 8005f64:	4604      	mov	r4, r0
 8005f66:	b940      	cbnz	r0, 8005f7a <__gethex+0x176>
 8005f68:	4602      	mov	r2, r0
 8005f6a:	21de      	movs	r1, #222	; 0xde
 8005f6c:	4b62      	ldr	r3, [pc, #392]	; (80060f8 <__gethex+0x2f4>)
 8005f6e:	4863      	ldr	r0, [pc, #396]	; (80060fc <__gethex+0x2f8>)
 8005f70:	f001 f97e 	bl	8007270 <__assert_func>
 8005f74:	3101      	adds	r1, #1
 8005f76:	105b      	asrs	r3, r3, #1
 8005f78:	e7ef      	b.n	8005f5a <__gethex+0x156>
 8005f7a:	f04f 0b00 	mov.w	fp, #0
 8005f7e:	f100 0914 	add.w	r9, r0, #20
 8005f82:	f1ca 0301 	rsb	r3, sl, #1
 8005f86:	f8cd 9010 	str.w	r9, [sp, #16]
 8005f8a:	f8cd b004 	str.w	fp, [sp, #4]
 8005f8e:	9308      	str	r3, [sp, #32]
 8005f90:	42b7      	cmp	r7, r6
 8005f92:	d33f      	bcc.n	8006014 <__gethex+0x210>
 8005f94:	9f04      	ldr	r7, [sp, #16]
 8005f96:	9b01      	ldr	r3, [sp, #4]
 8005f98:	f847 3b04 	str.w	r3, [r7], #4
 8005f9c:	eba7 0709 	sub.w	r7, r7, r9
 8005fa0:	10bf      	asrs	r7, r7, #2
 8005fa2:	6127      	str	r7, [r4, #16]
 8005fa4:	4618      	mov	r0, r3
 8005fa6:	f000 fb5b 	bl	8006660 <__hi0bits>
 8005faa:	017f      	lsls	r7, r7, #5
 8005fac:	f8d8 6000 	ldr.w	r6, [r8]
 8005fb0:	1a3f      	subs	r7, r7, r0
 8005fb2:	42b7      	cmp	r7, r6
 8005fb4:	dd62      	ble.n	800607c <__gethex+0x278>
 8005fb6:	1bbf      	subs	r7, r7, r6
 8005fb8:	4639      	mov	r1, r7
 8005fba:	4620      	mov	r0, r4
 8005fbc:	f000 fef1 	bl	8006da2 <__any_on>
 8005fc0:	4682      	mov	sl, r0
 8005fc2:	b1a8      	cbz	r0, 8005ff0 <__gethex+0x1ec>
 8005fc4:	f04f 0a01 	mov.w	sl, #1
 8005fc8:	1e7b      	subs	r3, r7, #1
 8005fca:	1159      	asrs	r1, r3, #5
 8005fcc:	f859 1021 	ldr.w	r1, [r9, r1, lsl #2]
 8005fd0:	f003 021f 	and.w	r2, r3, #31
 8005fd4:	fa0a f202 	lsl.w	r2, sl, r2
 8005fd8:	420a      	tst	r2, r1
 8005fda:	d009      	beq.n	8005ff0 <__gethex+0x1ec>
 8005fdc:	4553      	cmp	r3, sl
 8005fde:	dd05      	ble.n	8005fec <__gethex+0x1e8>
 8005fe0:	4620      	mov	r0, r4
 8005fe2:	1eb9      	subs	r1, r7, #2
 8005fe4:	f000 fedd 	bl	8006da2 <__any_on>
 8005fe8:	2800      	cmp	r0, #0
 8005fea:	d144      	bne.n	8006076 <__gethex+0x272>
 8005fec:	f04f 0a02 	mov.w	sl, #2
 8005ff0:	4639      	mov	r1, r7
 8005ff2:	4620      	mov	r0, r4
 8005ff4:	f7ff fe9e 	bl	8005d34 <rshift>
 8005ff8:	443d      	add	r5, r7
 8005ffa:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8005ffe:	42ab      	cmp	r3, r5
 8006000:	da4a      	bge.n	8006098 <__gethex+0x294>
 8006002:	4621      	mov	r1, r4
 8006004:	9802      	ldr	r0, [sp, #8]
 8006006:	f000 fa75 	bl	80064f4 <_Bfree>
 800600a:	2300      	movs	r3, #0
 800600c:	9a14      	ldr	r2, [sp, #80]	; 0x50
 800600e:	27a3      	movs	r7, #163	; 0xa3
 8006010:	6013      	str	r3, [r2, #0]
 8006012:	e789      	b.n	8005f28 <__gethex+0x124>
 8006014:	1e73      	subs	r3, r6, #1
 8006016:	9a07      	ldr	r2, [sp, #28]
 8006018:	9305      	str	r3, [sp, #20]
 800601a:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 800601e:	4293      	cmp	r3, r2
 8006020:	d019      	beq.n	8006056 <__gethex+0x252>
 8006022:	f1bb 0f20 	cmp.w	fp, #32
 8006026:	d107      	bne.n	8006038 <__gethex+0x234>
 8006028:	9b04      	ldr	r3, [sp, #16]
 800602a:	9a01      	ldr	r2, [sp, #4]
 800602c:	f843 2b04 	str.w	r2, [r3], #4
 8006030:	9304      	str	r3, [sp, #16]
 8006032:	2300      	movs	r3, #0
 8006034:	469b      	mov	fp, r3
 8006036:	9301      	str	r3, [sp, #4]
 8006038:	f816 0c01 	ldrb.w	r0, [r6, #-1]
 800603c:	f7ff fecd 	bl	8005dda <__hexdig_fun>
 8006040:	9b01      	ldr	r3, [sp, #4]
 8006042:	f000 000f 	and.w	r0, r0, #15
 8006046:	fa00 f00b 	lsl.w	r0, r0, fp
 800604a:	4303      	orrs	r3, r0
 800604c:	9301      	str	r3, [sp, #4]
 800604e:	f10b 0b04 	add.w	fp, fp, #4
 8006052:	9b05      	ldr	r3, [sp, #20]
 8006054:	e00d      	b.n	8006072 <__gethex+0x26e>
 8006056:	9b05      	ldr	r3, [sp, #20]
 8006058:	9a08      	ldr	r2, [sp, #32]
 800605a:	4413      	add	r3, r2
 800605c:	42bb      	cmp	r3, r7
 800605e:	d3e0      	bcc.n	8006022 <__gethex+0x21e>
 8006060:	4618      	mov	r0, r3
 8006062:	4652      	mov	r2, sl
 8006064:	9903      	ldr	r1, [sp, #12]
 8006066:	9309      	str	r3, [sp, #36]	; 0x24
 8006068:	f001 f8e2 	bl	8007230 <strncmp>
 800606c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800606e:	2800      	cmp	r0, #0
 8006070:	d1d7      	bne.n	8006022 <__gethex+0x21e>
 8006072:	461e      	mov	r6, r3
 8006074:	e78c      	b.n	8005f90 <__gethex+0x18c>
 8006076:	f04f 0a03 	mov.w	sl, #3
 800607a:	e7b9      	b.n	8005ff0 <__gethex+0x1ec>
 800607c:	da09      	bge.n	8006092 <__gethex+0x28e>
 800607e:	1bf7      	subs	r7, r6, r7
 8006080:	4621      	mov	r1, r4
 8006082:	463a      	mov	r2, r7
 8006084:	9802      	ldr	r0, [sp, #8]
 8006086:	f000 fc4d 	bl	8006924 <__lshift>
 800608a:	4604      	mov	r4, r0
 800608c:	1bed      	subs	r5, r5, r7
 800608e:	f100 0914 	add.w	r9, r0, #20
 8006092:	f04f 0a00 	mov.w	sl, #0
 8006096:	e7b0      	b.n	8005ffa <__gethex+0x1f6>
 8006098:	f8d8 0004 	ldr.w	r0, [r8, #4]
 800609c:	42a8      	cmp	r0, r5
 800609e:	dd71      	ble.n	8006184 <__gethex+0x380>
 80060a0:	1b45      	subs	r5, r0, r5
 80060a2:	42ae      	cmp	r6, r5
 80060a4:	dc34      	bgt.n	8006110 <__gethex+0x30c>
 80060a6:	f8d8 300c 	ldr.w	r3, [r8, #12]
 80060aa:	2b02      	cmp	r3, #2
 80060ac:	d028      	beq.n	8006100 <__gethex+0x2fc>
 80060ae:	2b03      	cmp	r3, #3
 80060b0:	d02a      	beq.n	8006108 <__gethex+0x304>
 80060b2:	2b01      	cmp	r3, #1
 80060b4:	d115      	bne.n	80060e2 <__gethex+0x2de>
 80060b6:	42ae      	cmp	r6, r5
 80060b8:	d113      	bne.n	80060e2 <__gethex+0x2de>
 80060ba:	2e01      	cmp	r6, #1
 80060bc:	d10b      	bne.n	80060d6 <__gethex+0x2d2>
 80060be:	f8d8 3004 	ldr.w	r3, [r8, #4]
 80060c2:	9a06      	ldr	r2, [sp, #24]
 80060c4:	2762      	movs	r7, #98	; 0x62
 80060c6:	6013      	str	r3, [r2, #0]
 80060c8:	2301      	movs	r3, #1
 80060ca:	6123      	str	r3, [r4, #16]
 80060cc:	f8c9 3000 	str.w	r3, [r9]
 80060d0:	9b14      	ldr	r3, [sp, #80]	; 0x50
 80060d2:	601c      	str	r4, [r3, #0]
 80060d4:	e728      	b.n	8005f28 <__gethex+0x124>
 80060d6:	4620      	mov	r0, r4
 80060d8:	1e71      	subs	r1, r6, #1
 80060da:	f000 fe62 	bl	8006da2 <__any_on>
 80060de:	2800      	cmp	r0, #0
 80060e0:	d1ed      	bne.n	80060be <__gethex+0x2ba>
 80060e2:	4621      	mov	r1, r4
 80060e4:	9802      	ldr	r0, [sp, #8]
 80060e6:	f000 fa05 	bl	80064f4 <_Bfree>
 80060ea:	2300      	movs	r3, #0
 80060ec:	9a14      	ldr	r2, [sp, #80]	; 0x50
 80060ee:	2750      	movs	r7, #80	; 0x50
 80060f0:	6013      	str	r3, [r2, #0]
 80060f2:	e719      	b.n	8005f28 <__gethex+0x124>
 80060f4:	080080f0 	.word	0x080080f0
 80060f8:	08008074 	.word	0x08008074
 80060fc:	08008085 	.word	0x08008085
 8006100:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8006102:	2b00      	cmp	r3, #0
 8006104:	d1ed      	bne.n	80060e2 <__gethex+0x2de>
 8006106:	e7da      	b.n	80060be <__gethex+0x2ba>
 8006108:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800610a:	2b00      	cmp	r3, #0
 800610c:	d1d7      	bne.n	80060be <__gethex+0x2ba>
 800610e:	e7e8      	b.n	80060e2 <__gethex+0x2de>
 8006110:	1e6f      	subs	r7, r5, #1
 8006112:	f1ba 0f00 	cmp.w	sl, #0
 8006116:	d132      	bne.n	800617e <__gethex+0x37a>
 8006118:	b127      	cbz	r7, 8006124 <__gethex+0x320>
 800611a:	4639      	mov	r1, r7
 800611c:	4620      	mov	r0, r4
 800611e:	f000 fe40 	bl	8006da2 <__any_on>
 8006122:	4682      	mov	sl, r0
 8006124:	2101      	movs	r1, #1
 8006126:	117b      	asrs	r3, r7, #5
 8006128:	f859 3023 	ldr.w	r3, [r9, r3, lsl #2]
 800612c:	f007 071f 	and.w	r7, r7, #31
 8006130:	fa01 f707 	lsl.w	r7, r1, r7
 8006134:	421f      	tst	r7, r3
 8006136:	f04f 0702 	mov.w	r7, #2
 800613a:	4629      	mov	r1, r5
 800613c:	4620      	mov	r0, r4
 800613e:	bf18      	it	ne
 8006140:	f04a 0a02 	orrne.w	sl, sl, #2
 8006144:	1b76      	subs	r6, r6, r5
 8006146:	f7ff fdf5 	bl	8005d34 <rshift>
 800614a:	f8d8 5004 	ldr.w	r5, [r8, #4]
 800614e:	f1ba 0f00 	cmp.w	sl, #0
 8006152:	d048      	beq.n	80061e6 <__gethex+0x3e2>
 8006154:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8006158:	2b02      	cmp	r3, #2
 800615a:	d015      	beq.n	8006188 <__gethex+0x384>
 800615c:	2b03      	cmp	r3, #3
 800615e:	d017      	beq.n	8006190 <__gethex+0x38c>
 8006160:	2b01      	cmp	r3, #1
 8006162:	d109      	bne.n	8006178 <__gethex+0x374>
 8006164:	f01a 0f02 	tst.w	sl, #2
 8006168:	d006      	beq.n	8006178 <__gethex+0x374>
 800616a:	f8d9 0000 	ldr.w	r0, [r9]
 800616e:	ea4a 0a00 	orr.w	sl, sl, r0
 8006172:	f01a 0f01 	tst.w	sl, #1
 8006176:	d10e      	bne.n	8006196 <__gethex+0x392>
 8006178:	f047 0710 	orr.w	r7, r7, #16
 800617c:	e033      	b.n	80061e6 <__gethex+0x3e2>
 800617e:	f04f 0a01 	mov.w	sl, #1
 8006182:	e7cf      	b.n	8006124 <__gethex+0x320>
 8006184:	2701      	movs	r7, #1
 8006186:	e7e2      	b.n	800614e <__gethex+0x34a>
 8006188:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800618a:	f1c3 0301 	rsb	r3, r3, #1
 800618e:	9315      	str	r3, [sp, #84]	; 0x54
 8006190:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8006192:	2b00      	cmp	r3, #0
 8006194:	d0f0      	beq.n	8006178 <__gethex+0x374>
 8006196:	f04f 0c00 	mov.w	ip, #0
 800619a:	f8d4 b010 	ldr.w	fp, [r4, #16]
 800619e:	f104 0314 	add.w	r3, r4, #20
 80061a2:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 80061a6:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 80061aa:	4618      	mov	r0, r3
 80061ac:	f853 2b04 	ldr.w	r2, [r3], #4
 80061b0:	f1b2 3fff 	cmp.w	r2, #4294967295
 80061b4:	d01c      	beq.n	80061f0 <__gethex+0x3ec>
 80061b6:	3201      	adds	r2, #1
 80061b8:	6002      	str	r2, [r0, #0]
 80061ba:	2f02      	cmp	r7, #2
 80061bc:	f104 0314 	add.w	r3, r4, #20
 80061c0:	d13d      	bne.n	800623e <__gethex+0x43a>
 80061c2:	f8d8 2000 	ldr.w	r2, [r8]
 80061c6:	3a01      	subs	r2, #1
 80061c8:	42b2      	cmp	r2, r6
 80061ca:	d10a      	bne.n	80061e2 <__gethex+0x3de>
 80061cc:	2201      	movs	r2, #1
 80061ce:	1171      	asrs	r1, r6, #5
 80061d0:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 80061d4:	f006 061f 	and.w	r6, r6, #31
 80061d8:	fa02 f606 	lsl.w	r6, r2, r6
 80061dc:	421e      	tst	r6, r3
 80061de:	bf18      	it	ne
 80061e0:	4617      	movne	r7, r2
 80061e2:	f047 0720 	orr.w	r7, r7, #32
 80061e6:	9b14      	ldr	r3, [sp, #80]	; 0x50
 80061e8:	601c      	str	r4, [r3, #0]
 80061ea:	9b06      	ldr	r3, [sp, #24]
 80061ec:	601d      	str	r5, [r3, #0]
 80061ee:	e69b      	b.n	8005f28 <__gethex+0x124>
 80061f0:	4299      	cmp	r1, r3
 80061f2:	f843 cc04 	str.w	ip, [r3, #-4]
 80061f6:	d8d8      	bhi.n	80061aa <__gethex+0x3a6>
 80061f8:	68a3      	ldr	r3, [r4, #8]
 80061fa:	459b      	cmp	fp, r3
 80061fc:	db17      	blt.n	800622e <__gethex+0x42a>
 80061fe:	6861      	ldr	r1, [r4, #4]
 8006200:	9802      	ldr	r0, [sp, #8]
 8006202:	3101      	adds	r1, #1
 8006204:	f000 f936 	bl	8006474 <_Balloc>
 8006208:	4681      	mov	r9, r0
 800620a:	b918      	cbnz	r0, 8006214 <__gethex+0x410>
 800620c:	4602      	mov	r2, r0
 800620e:	2184      	movs	r1, #132	; 0x84
 8006210:	4b19      	ldr	r3, [pc, #100]	; (8006278 <__gethex+0x474>)
 8006212:	e6ac      	b.n	8005f6e <__gethex+0x16a>
 8006214:	6922      	ldr	r2, [r4, #16]
 8006216:	f104 010c 	add.w	r1, r4, #12
 800621a:	3202      	adds	r2, #2
 800621c:	0092      	lsls	r2, r2, #2
 800621e:	300c      	adds	r0, #12
 8006220:	f000 f91a 	bl	8006458 <memcpy>
 8006224:	4621      	mov	r1, r4
 8006226:	9802      	ldr	r0, [sp, #8]
 8006228:	f000 f964 	bl	80064f4 <_Bfree>
 800622c:	464c      	mov	r4, r9
 800622e:	6923      	ldr	r3, [r4, #16]
 8006230:	1c5a      	adds	r2, r3, #1
 8006232:	6122      	str	r2, [r4, #16]
 8006234:	2201      	movs	r2, #1
 8006236:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800623a:	615a      	str	r2, [r3, #20]
 800623c:	e7bd      	b.n	80061ba <__gethex+0x3b6>
 800623e:	6922      	ldr	r2, [r4, #16]
 8006240:	455a      	cmp	r2, fp
 8006242:	dd0b      	ble.n	800625c <__gethex+0x458>
 8006244:	2101      	movs	r1, #1
 8006246:	4620      	mov	r0, r4
 8006248:	f7ff fd74 	bl	8005d34 <rshift>
 800624c:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8006250:	3501      	adds	r5, #1
 8006252:	42ab      	cmp	r3, r5
 8006254:	f6ff aed5 	blt.w	8006002 <__gethex+0x1fe>
 8006258:	2701      	movs	r7, #1
 800625a:	e7c2      	b.n	80061e2 <__gethex+0x3de>
 800625c:	f016 061f 	ands.w	r6, r6, #31
 8006260:	d0fa      	beq.n	8006258 <__gethex+0x454>
 8006262:	449a      	add	sl, r3
 8006264:	f85a 0c04 	ldr.w	r0, [sl, #-4]
 8006268:	f000 f9fa 	bl	8006660 <__hi0bits>
 800626c:	f1c6 0620 	rsb	r6, r6, #32
 8006270:	42b0      	cmp	r0, r6
 8006272:	dbe7      	blt.n	8006244 <__gethex+0x440>
 8006274:	e7f0      	b.n	8006258 <__gethex+0x454>
 8006276:	bf00      	nop
 8006278:	08008074 	.word	0x08008074

0800627c <L_shift>:
 800627c:	f1c2 0208 	rsb	r2, r2, #8
 8006280:	0092      	lsls	r2, r2, #2
 8006282:	b570      	push	{r4, r5, r6, lr}
 8006284:	f1c2 0620 	rsb	r6, r2, #32
 8006288:	6843      	ldr	r3, [r0, #4]
 800628a:	6804      	ldr	r4, [r0, #0]
 800628c:	fa03 f506 	lsl.w	r5, r3, r6
 8006290:	432c      	orrs	r4, r5
 8006292:	40d3      	lsrs	r3, r2
 8006294:	6004      	str	r4, [r0, #0]
 8006296:	f840 3f04 	str.w	r3, [r0, #4]!
 800629a:	4288      	cmp	r0, r1
 800629c:	d3f4      	bcc.n	8006288 <L_shift+0xc>
 800629e:	bd70      	pop	{r4, r5, r6, pc}

080062a0 <__match>:
 80062a0:	b530      	push	{r4, r5, lr}
 80062a2:	6803      	ldr	r3, [r0, #0]
 80062a4:	3301      	adds	r3, #1
 80062a6:	f811 4b01 	ldrb.w	r4, [r1], #1
 80062aa:	b914      	cbnz	r4, 80062b2 <__match+0x12>
 80062ac:	6003      	str	r3, [r0, #0]
 80062ae:	2001      	movs	r0, #1
 80062b0:	bd30      	pop	{r4, r5, pc}
 80062b2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80062b6:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 80062ba:	2d19      	cmp	r5, #25
 80062bc:	bf98      	it	ls
 80062be:	3220      	addls	r2, #32
 80062c0:	42a2      	cmp	r2, r4
 80062c2:	d0f0      	beq.n	80062a6 <__match+0x6>
 80062c4:	2000      	movs	r0, #0
 80062c6:	e7f3      	b.n	80062b0 <__match+0x10>

080062c8 <__hexnan>:
 80062c8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80062cc:	2500      	movs	r5, #0
 80062ce:	680b      	ldr	r3, [r1, #0]
 80062d0:	4682      	mov	sl, r0
 80062d2:	115e      	asrs	r6, r3, #5
 80062d4:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 80062d8:	f013 031f 	ands.w	r3, r3, #31
 80062dc:	bf18      	it	ne
 80062de:	3604      	addne	r6, #4
 80062e0:	1f37      	subs	r7, r6, #4
 80062e2:	4690      	mov	r8, r2
 80062e4:	46b9      	mov	r9, r7
 80062e6:	463c      	mov	r4, r7
 80062e8:	46ab      	mov	fp, r5
 80062ea:	b087      	sub	sp, #28
 80062ec:	6801      	ldr	r1, [r0, #0]
 80062ee:	9301      	str	r3, [sp, #4]
 80062f0:	f846 5c04 	str.w	r5, [r6, #-4]
 80062f4:	9502      	str	r5, [sp, #8]
 80062f6:	784a      	ldrb	r2, [r1, #1]
 80062f8:	1c4b      	adds	r3, r1, #1
 80062fa:	9303      	str	r3, [sp, #12]
 80062fc:	b342      	cbz	r2, 8006350 <__hexnan+0x88>
 80062fe:	4610      	mov	r0, r2
 8006300:	9105      	str	r1, [sp, #20]
 8006302:	9204      	str	r2, [sp, #16]
 8006304:	f7ff fd69 	bl	8005dda <__hexdig_fun>
 8006308:	2800      	cmp	r0, #0
 800630a:	d14f      	bne.n	80063ac <__hexnan+0xe4>
 800630c:	9a04      	ldr	r2, [sp, #16]
 800630e:	9905      	ldr	r1, [sp, #20]
 8006310:	2a20      	cmp	r2, #32
 8006312:	d818      	bhi.n	8006346 <__hexnan+0x7e>
 8006314:	9b02      	ldr	r3, [sp, #8]
 8006316:	459b      	cmp	fp, r3
 8006318:	dd13      	ble.n	8006342 <__hexnan+0x7a>
 800631a:	454c      	cmp	r4, r9
 800631c:	d206      	bcs.n	800632c <__hexnan+0x64>
 800631e:	2d07      	cmp	r5, #7
 8006320:	dc04      	bgt.n	800632c <__hexnan+0x64>
 8006322:	462a      	mov	r2, r5
 8006324:	4649      	mov	r1, r9
 8006326:	4620      	mov	r0, r4
 8006328:	f7ff ffa8 	bl	800627c <L_shift>
 800632c:	4544      	cmp	r4, r8
 800632e:	d950      	bls.n	80063d2 <__hexnan+0x10a>
 8006330:	2300      	movs	r3, #0
 8006332:	f1a4 0904 	sub.w	r9, r4, #4
 8006336:	f844 3c04 	str.w	r3, [r4, #-4]
 800633a:	461d      	mov	r5, r3
 800633c:	464c      	mov	r4, r9
 800633e:	f8cd b008 	str.w	fp, [sp, #8]
 8006342:	9903      	ldr	r1, [sp, #12]
 8006344:	e7d7      	b.n	80062f6 <__hexnan+0x2e>
 8006346:	2a29      	cmp	r2, #41	; 0x29
 8006348:	d156      	bne.n	80063f8 <__hexnan+0x130>
 800634a:	3102      	adds	r1, #2
 800634c:	f8ca 1000 	str.w	r1, [sl]
 8006350:	f1bb 0f00 	cmp.w	fp, #0
 8006354:	d050      	beq.n	80063f8 <__hexnan+0x130>
 8006356:	454c      	cmp	r4, r9
 8006358:	d206      	bcs.n	8006368 <__hexnan+0xa0>
 800635a:	2d07      	cmp	r5, #7
 800635c:	dc04      	bgt.n	8006368 <__hexnan+0xa0>
 800635e:	462a      	mov	r2, r5
 8006360:	4649      	mov	r1, r9
 8006362:	4620      	mov	r0, r4
 8006364:	f7ff ff8a 	bl	800627c <L_shift>
 8006368:	4544      	cmp	r4, r8
 800636a:	d934      	bls.n	80063d6 <__hexnan+0x10e>
 800636c:	4623      	mov	r3, r4
 800636e:	f1a8 0204 	sub.w	r2, r8, #4
 8006372:	f853 1b04 	ldr.w	r1, [r3], #4
 8006376:	429f      	cmp	r7, r3
 8006378:	f842 1f04 	str.w	r1, [r2, #4]!
 800637c:	d2f9      	bcs.n	8006372 <__hexnan+0xaa>
 800637e:	1b3b      	subs	r3, r7, r4
 8006380:	f023 0303 	bic.w	r3, r3, #3
 8006384:	3304      	adds	r3, #4
 8006386:	3401      	adds	r4, #1
 8006388:	3e03      	subs	r6, #3
 800638a:	42b4      	cmp	r4, r6
 800638c:	bf88      	it	hi
 800638e:	2304      	movhi	r3, #4
 8006390:	2200      	movs	r2, #0
 8006392:	4443      	add	r3, r8
 8006394:	f843 2b04 	str.w	r2, [r3], #4
 8006398:	429f      	cmp	r7, r3
 800639a:	d2fb      	bcs.n	8006394 <__hexnan+0xcc>
 800639c:	683b      	ldr	r3, [r7, #0]
 800639e:	b91b      	cbnz	r3, 80063a8 <__hexnan+0xe0>
 80063a0:	4547      	cmp	r7, r8
 80063a2:	d127      	bne.n	80063f4 <__hexnan+0x12c>
 80063a4:	2301      	movs	r3, #1
 80063a6:	603b      	str	r3, [r7, #0]
 80063a8:	2005      	movs	r0, #5
 80063aa:	e026      	b.n	80063fa <__hexnan+0x132>
 80063ac:	3501      	adds	r5, #1
 80063ae:	2d08      	cmp	r5, #8
 80063b0:	f10b 0b01 	add.w	fp, fp, #1
 80063b4:	dd06      	ble.n	80063c4 <__hexnan+0xfc>
 80063b6:	4544      	cmp	r4, r8
 80063b8:	d9c3      	bls.n	8006342 <__hexnan+0x7a>
 80063ba:	2300      	movs	r3, #0
 80063bc:	2501      	movs	r5, #1
 80063be:	f844 3c04 	str.w	r3, [r4, #-4]
 80063c2:	3c04      	subs	r4, #4
 80063c4:	6822      	ldr	r2, [r4, #0]
 80063c6:	f000 000f 	and.w	r0, r0, #15
 80063ca:	ea40 1202 	orr.w	r2, r0, r2, lsl #4
 80063ce:	6022      	str	r2, [r4, #0]
 80063d0:	e7b7      	b.n	8006342 <__hexnan+0x7a>
 80063d2:	2508      	movs	r5, #8
 80063d4:	e7b5      	b.n	8006342 <__hexnan+0x7a>
 80063d6:	9b01      	ldr	r3, [sp, #4]
 80063d8:	2b00      	cmp	r3, #0
 80063da:	d0df      	beq.n	800639c <__hexnan+0xd4>
 80063dc:	f04f 32ff 	mov.w	r2, #4294967295
 80063e0:	f1c3 0320 	rsb	r3, r3, #32
 80063e4:	fa22 f303 	lsr.w	r3, r2, r3
 80063e8:	f856 2c04 	ldr.w	r2, [r6, #-4]
 80063ec:	401a      	ands	r2, r3
 80063ee:	f846 2c04 	str.w	r2, [r6, #-4]
 80063f2:	e7d3      	b.n	800639c <__hexnan+0xd4>
 80063f4:	3f04      	subs	r7, #4
 80063f6:	e7d1      	b.n	800639c <__hexnan+0xd4>
 80063f8:	2004      	movs	r0, #4
 80063fa:	b007      	add	sp, #28
 80063fc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08006400 <_localeconv_r>:
 8006400:	4800      	ldr	r0, [pc, #0]	; (8006404 <_localeconv_r+0x4>)
 8006402:	4770      	bx	lr
 8006404:	20000164 	.word	0x20000164

08006408 <malloc>:
 8006408:	4b02      	ldr	r3, [pc, #8]	; (8006414 <malloc+0xc>)
 800640a:	4601      	mov	r1, r0
 800640c:	6818      	ldr	r0, [r3, #0]
 800640e:	f000 bd43 	b.w	8006e98 <_malloc_r>
 8006412:	bf00      	nop
 8006414:	2000000c 	.word	0x2000000c

08006418 <__ascii_mbtowc>:
 8006418:	b082      	sub	sp, #8
 800641a:	b901      	cbnz	r1, 800641e <__ascii_mbtowc+0x6>
 800641c:	a901      	add	r1, sp, #4
 800641e:	b142      	cbz	r2, 8006432 <__ascii_mbtowc+0x1a>
 8006420:	b14b      	cbz	r3, 8006436 <__ascii_mbtowc+0x1e>
 8006422:	7813      	ldrb	r3, [r2, #0]
 8006424:	600b      	str	r3, [r1, #0]
 8006426:	7812      	ldrb	r2, [r2, #0]
 8006428:	1e10      	subs	r0, r2, #0
 800642a:	bf18      	it	ne
 800642c:	2001      	movne	r0, #1
 800642e:	b002      	add	sp, #8
 8006430:	4770      	bx	lr
 8006432:	4610      	mov	r0, r2
 8006434:	e7fb      	b.n	800642e <__ascii_mbtowc+0x16>
 8006436:	f06f 0001 	mvn.w	r0, #1
 800643a:	e7f8      	b.n	800642e <__ascii_mbtowc+0x16>

0800643c <memchr>:
 800643c:	4603      	mov	r3, r0
 800643e:	b510      	push	{r4, lr}
 8006440:	b2c9      	uxtb	r1, r1
 8006442:	4402      	add	r2, r0
 8006444:	4293      	cmp	r3, r2
 8006446:	4618      	mov	r0, r3
 8006448:	d101      	bne.n	800644e <memchr+0x12>
 800644a:	2000      	movs	r0, #0
 800644c:	e003      	b.n	8006456 <memchr+0x1a>
 800644e:	7804      	ldrb	r4, [r0, #0]
 8006450:	3301      	adds	r3, #1
 8006452:	428c      	cmp	r4, r1
 8006454:	d1f6      	bne.n	8006444 <memchr+0x8>
 8006456:	bd10      	pop	{r4, pc}

08006458 <memcpy>:
 8006458:	440a      	add	r2, r1
 800645a:	4291      	cmp	r1, r2
 800645c:	f100 33ff 	add.w	r3, r0, #4294967295
 8006460:	d100      	bne.n	8006464 <memcpy+0xc>
 8006462:	4770      	bx	lr
 8006464:	b510      	push	{r4, lr}
 8006466:	f811 4b01 	ldrb.w	r4, [r1], #1
 800646a:	4291      	cmp	r1, r2
 800646c:	f803 4f01 	strb.w	r4, [r3, #1]!
 8006470:	d1f9      	bne.n	8006466 <memcpy+0xe>
 8006472:	bd10      	pop	{r4, pc}

08006474 <_Balloc>:
 8006474:	b570      	push	{r4, r5, r6, lr}
 8006476:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8006478:	4604      	mov	r4, r0
 800647a:	460d      	mov	r5, r1
 800647c:	b976      	cbnz	r6, 800649c <_Balloc+0x28>
 800647e:	2010      	movs	r0, #16
 8006480:	f7ff ffc2 	bl	8006408 <malloc>
 8006484:	4602      	mov	r2, r0
 8006486:	6260      	str	r0, [r4, #36]	; 0x24
 8006488:	b920      	cbnz	r0, 8006494 <_Balloc+0x20>
 800648a:	2166      	movs	r1, #102	; 0x66
 800648c:	4b17      	ldr	r3, [pc, #92]	; (80064ec <_Balloc+0x78>)
 800648e:	4818      	ldr	r0, [pc, #96]	; (80064f0 <_Balloc+0x7c>)
 8006490:	f000 feee 	bl	8007270 <__assert_func>
 8006494:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8006498:	6006      	str	r6, [r0, #0]
 800649a:	60c6      	str	r6, [r0, #12]
 800649c:	6a66      	ldr	r6, [r4, #36]	; 0x24
 800649e:	68f3      	ldr	r3, [r6, #12]
 80064a0:	b183      	cbz	r3, 80064c4 <_Balloc+0x50>
 80064a2:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80064a4:	68db      	ldr	r3, [r3, #12]
 80064a6:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 80064aa:	b9b8      	cbnz	r0, 80064dc <_Balloc+0x68>
 80064ac:	2101      	movs	r1, #1
 80064ae:	fa01 f605 	lsl.w	r6, r1, r5
 80064b2:	1d72      	adds	r2, r6, #5
 80064b4:	4620      	mov	r0, r4
 80064b6:	0092      	lsls	r2, r2, #2
 80064b8:	f000 fc94 	bl	8006de4 <_calloc_r>
 80064bc:	b160      	cbz	r0, 80064d8 <_Balloc+0x64>
 80064be:	e9c0 5601 	strd	r5, r6, [r0, #4]
 80064c2:	e00e      	b.n	80064e2 <_Balloc+0x6e>
 80064c4:	2221      	movs	r2, #33	; 0x21
 80064c6:	2104      	movs	r1, #4
 80064c8:	4620      	mov	r0, r4
 80064ca:	f000 fc8b 	bl	8006de4 <_calloc_r>
 80064ce:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80064d0:	60f0      	str	r0, [r6, #12]
 80064d2:	68db      	ldr	r3, [r3, #12]
 80064d4:	2b00      	cmp	r3, #0
 80064d6:	d1e4      	bne.n	80064a2 <_Balloc+0x2e>
 80064d8:	2000      	movs	r0, #0
 80064da:	bd70      	pop	{r4, r5, r6, pc}
 80064dc:	6802      	ldr	r2, [r0, #0]
 80064de:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 80064e2:	2300      	movs	r3, #0
 80064e4:	e9c0 3303 	strd	r3, r3, [r0, #12]
 80064e8:	e7f7      	b.n	80064da <_Balloc+0x66>
 80064ea:	bf00      	nop
 80064ec:	08007ffe 	.word	0x08007ffe
 80064f0:	08008104 	.word	0x08008104

080064f4 <_Bfree>:
 80064f4:	b570      	push	{r4, r5, r6, lr}
 80064f6:	6a46      	ldr	r6, [r0, #36]	; 0x24
 80064f8:	4605      	mov	r5, r0
 80064fa:	460c      	mov	r4, r1
 80064fc:	b976      	cbnz	r6, 800651c <_Bfree+0x28>
 80064fe:	2010      	movs	r0, #16
 8006500:	f7ff ff82 	bl	8006408 <malloc>
 8006504:	4602      	mov	r2, r0
 8006506:	6268      	str	r0, [r5, #36]	; 0x24
 8006508:	b920      	cbnz	r0, 8006514 <_Bfree+0x20>
 800650a:	218a      	movs	r1, #138	; 0x8a
 800650c:	4b08      	ldr	r3, [pc, #32]	; (8006530 <_Bfree+0x3c>)
 800650e:	4809      	ldr	r0, [pc, #36]	; (8006534 <_Bfree+0x40>)
 8006510:	f000 feae 	bl	8007270 <__assert_func>
 8006514:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8006518:	6006      	str	r6, [r0, #0]
 800651a:	60c6      	str	r6, [r0, #12]
 800651c:	b13c      	cbz	r4, 800652e <_Bfree+0x3a>
 800651e:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8006520:	6862      	ldr	r2, [r4, #4]
 8006522:	68db      	ldr	r3, [r3, #12]
 8006524:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8006528:	6021      	str	r1, [r4, #0]
 800652a:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800652e:	bd70      	pop	{r4, r5, r6, pc}
 8006530:	08007ffe 	.word	0x08007ffe
 8006534:	08008104 	.word	0x08008104

08006538 <__multadd>:
 8006538:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800653c:	4698      	mov	r8, r3
 800653e:	460c      	mov	r4, r1
 8006540:	2300      	movs	r3, #0
 8006542:	690e      	ldr	r6, [r1, #16]
 8006544:	4607      	mov	r7, r0
 8006546:	f101 0014 	add.w	r0, r1, #20
 800654a:	6805      	ldr	r5, [r0, #0]
 800654c:	3301      	adds	r3, #1
 800654e:	b2a9      	uxth	r1, r5
 8006550:	fb02 8101 	mla	r1, r2, r1, r8
 8006554:	0c2d      	lsrs	r5, r5, #16
 8006556:	ea4f 4c11 	mov.w	ip, r1, lsr #16
 800655a:	fb02 c505 	mla	r5, r2, r5, ip
 800655e:	b289      	uxth	r1, r1
 8006560:	eb01 4105 	add.w	r1, r1, r5, lsl #16
 8006564:	429e      	cmp	r6, r3
 8006566:	ea4f 4815 	mov.w	r8, r5, lsr #16
 800656a:	f840 1b04 	str.w	r1, [r0], #4
 800656e:	dcec      	bgt.n	800654a <__multadd+0x12>
 8006570:	f1b8 0f00 	cmp.w	r8, #0
 8006574:	d022      	beq.n	80065bc <__multadd+0x84>
 8006576:	68a3      	ldr	r3, [r4, #8]
 8006578:	42b3      	cmp	r3, r6
 800657a:	dc19      	bgt.n	80065b0 <__multadd+0x78>
 800657c:	6861      	ldr	r1, [r4, #4]
 800657e:	4638      	mov	r0, r7
 8006580:	3101      	adds	r1, #1
 8006582:	f7ff ff77 	bl	8006474 <_Balloc>
 8006586:	4605      	mov	r5, r0
 8006588:	b928      	cbnz	r0, 8006596 <__multadd+0x5e>
 800658a:	4602      	mov	r2, r0
 800658c:	21b5      	movs	r1, #181	; 0xb5
 800658e:	4b0d      	ldr	r3, [pc, #52]	; (80065c4 <__multadd+0x8c>)
 8006590:	480d      	ldr	r0, [pc, #52]	; (80065c8 <__multadd+0x90>)
 8006592:	f000 fe6d 	bl	8007270 <__assert_func>
 8006596:	6922      	ldr	r2, [r4, #16]
 8006598:	f104 010c 	add.w	r1, r4, #12
 800659c:	3202      	adds	r2, #2
 800659e:	0092      	lsls	r2, r2, #2
 80065a0:	300c      	adds	r0, #12
 80065a2:	f7ff ff59 	bl	8006458 <memcpy>
 80065a6:	4621      	mov	r1, r4
 80065a8:	4638      	mov	r0, r7
 80065aa:	f7ff ffa3 	bl	80064f4 <_Bfree>
 80065ae:	462c      	mov	r4, r5
 80065b0:	eb04 0386 	add.w	r3, r4, r6, lsl #2
 80065b4:	3601      	adds	r6, #1
 80065b6:	f8c3 8014 	str.w	r8, [r3, #20]
 80065ba:	6126      	str	r6, [r4, #16]
 80065bc:	4620      	mov	r0, r4
 80065be:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80065c2:	bf00      	nop
 80065c4:	08008074 	.word	0x08008074
 80065c8:	08008104 	.word	0x08008104

080065cc <__s2b>:
 80065cc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80065d0:	4615      	mov	r5, r2
 80065d2:	2209      	movs	r2, #9
 80065d4:	461f      	mov	r7, r3
 80065d6:	3308      	adds	r3, #8
 80065d8:	460c      	mov	r4, r1
 80065da:	fb93 f3f2 	sdiv	r3, r3, r2
 80065de:	4606      	mov	r6, r0
 80065e0:	2201      	movs	r2, #1
 80065e2:	2100      	movs	r1, #0
 80065e4:	429a      	cmp	r2, r3
 80065e6:	db09      	blt.n	80065fc <__s2b+0x30>
 80065e8:	4630      	mov	r0, r6
 80065ea:	f7ff ff43 	bl	8006474 <_Balloc>
 80065ee:	b940      	cbnz	r0, 8006602 <__s2b+0x36>
 80065f0:	4602      	mov	r2, r0
 80065f2:	21ce      	movs	r1, #206	; 0xce
 80065f4:	4b18      	ldr	r3, [pc, #96]	; (8006658 <__s2b+0x8c>)
 80065f6:	4819      	ldr	r0, [pc, #100]	; (800665c <__s2b+0x90>)
 80065f8:	f000 fe3a 	bl	8007270 <__assert_func>
 80065fc:	0052      	lsls	r2, r2, #1
 80065fe:	3101      	adds	r1, #1
 8006600:	e7f0      	b.n	80065e4 <__s2b+0x18>
 8006602:	9b08      	ldr	r3, [sp, #32]
 8006604:	2d09      	cmp	r5, #9
 8006606:	6143      	str	r3, [r0, #20]
 8006608:	f04f 0301 	mov.w	r3, #1
 800660c:	6103      	str	r3, [r0, #16]
 800660e:	dd16      	ble.n	800663e <__s2b+0x72>
 8006610:	f104 0909 	add.w	r9, r4, #9
 8006614:	46c8      	mov	r8, r9
 8006616:	442c      	add	r4, r5
 8006618:	f818 3b01 	ldrb.w	r3, [r8], #1
 800661c:	4601      	mov	r1, r0
 800661e:	220a      	movs	r2, #10
 8006620:	4630      	mov	r0, r6
 8006622:	3b30      	subs	r3, #48	; 0x30
 8006624:	f7ff ff88 	bl	8006538 <__multadd>
 8006628:	45a0      	cmp	r8, r4
 800662a:	d1f5      	bne.n	8006618 <__s2b+0x4c>
 800662c:	f1a5 0408 	sub.w	r4, r5, #8
 8006630:	444c      	add	r4, r9
 8006632:	1b2d      	subs	r5, r5, r4
 8006634:	1963      	adds	r3, r4, r5
 8006636:	42bb      	cmp	r3, r7
 8006638:	db04      	blt.n	8006644 <__s2b+0x78>
 800663a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800663e:	2509      	movs	r5, #9
 8006640:	340a      	adds	r4, #10
 8006642:	e7f6      	b.n	8006632 <__s2b+0x66>
 8006644:	f814 3b01 	ldrb.w	r3, [r4], #1
 8006648:	4601      	mov	r1, r0
 800664a:	220a      	movs	r2, #10
 800664c:	4630      	mov	r0, r6
 800664e:	3b30      	subs	r3, #48	; 0x30
 8006650:	f7ff ff72 	bl	8006538 <__multadd>
 8006654:	e7ee      	b.n	8006634 <__s2b+0x68>
 8006656:	bf00      	nop
 8006658:	08008074 	.word	0x08008074
 800665c:	08008104 	.word	0x08008104

08006660 <__hi0bits>:
 8006660:	0c02      	lsrs	r2, r0, #16
 8006662:	0412      	lsls	r2, r2, #16
 8006664:	4603      	mov	r3, r0
 8006666:	b9ca      	cbnz	r2, 800669c <__hi0bits+0x3c>
 8006668:	0403      	lsls	r3, r0, #16
 800666a:	2010      	movs	r0, #16
 800666c:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
 8006670:	bf04      	itt	eq
 8006672:	021b      	lsleq	r3, r3, #8
 8006674:	3008      	addeq	r0, #8
 8006676:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
 800667a:	bf04      	itt	eq
 800667c:	011b      	lsleq	r3, r3, #4
 800667e:	3004      	addeq	r0, #4
 8006680:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
 8006684:	bf04      	itt	eq
 8006686:	009b      	lsleq	r3, r3, #2
 8006688:	3002      	addeq	r0, #2
 800668a:	2b00      	cmp	r3, #0
 800668c:	db05      	blt.n	800669a <__hi0bits+0x3a>
 800668e:	f013 4f80 	tst.w	r3, #1073741824	; 0x40000000
 8006692:	f100 0001 	add.w	r0, r0, #1
 8006696:	bf08      	it	eq
 8006698:	2020      	moveq	r0, #32
 800669a:	4770      	bx	lr
 800669c:	2000      	movs	r0, #0
 800669e:	e7e5      	b.n	800666c <__hi0bits+0xc>

080066a0 <__lo0bits>:
 80066a0:	6803      	ldr	r3, [r0, #0]
 80066a2:	4602      	mov	r2, r0
 80066a4:	f013 0007 	ands.w	r0, r3, #7
 80066a8:	d00b      	beq.n	80066c2 <__lo0bits+0x22>
 80066aa:	07d9      	lsls	r1, r3, #31
 80066ac:	d422      	bmi.n	80066f4 <__lo0bits+0x54>
 80066ae:	0798      	lsls	r0, r3, #30
 80066b0:	bf49      	itett	mi
 80066b2:	085b      	lsrmi	r3, r3, #1
 80066b4:	089b      	lsrpl	r3, r3, #2
 80066b6:	2001      	movmi	r0, #1
 80066b8:	6013      	strmi	r3, [r2, #0]
 80066ba:	bf5c      	itt	pl
 80066bc:	2002      	movpl	r0, #2
 80066be:	6013      	strpl	r3, [r2, #0]
 80066c0:	4770      	bx	lr
 80066c2:	b299      	uxth	r1, r3
 80066c4:	b909      	cbnz	r1, 80066ca <__lo0bits+0x2a>
 80066c6:	2010      	movs	r0, #16
 80066c8:	0c1b      	lsrs	r3, r3, #16
 80066ca:	f013 0fff 	tst.w	r3, #255	; 0xff
 80066ce:	bf04      	itt	eq
 80066d0:	0a1b      	lsreq	r3, r3, #8
 80066d2:	3008      	addeq	r0, #8
 80066d4:	0719      	lsls	r1, r3, #28
 80066d6:	bf04      	itt	eq
 80066d8:	091b      	lsreq	r3, r3, #4
 80066da:	3004      	addeq	r0, #4
 80066dc:	0799      	lsls	r1, r3, #30
 80066de:	bf04      	itt	eq
 80066e0:	089b      	lsreq	r3, r3, #2
 80066e2:	3002      	addeq	r0, #2
 80066e4:	07d9      	lsls	r1, r3, #31
 80066e6:	d403      	bmi.n	80066f0 <__lo0bits+0x50>
 80066e8:	085b      	lsrs	r3, r3, #1
 80066ea:	f100 0001 	add.w	r0, r0, #1
 80066ee:	d003      	beq.n	80066f8 <__lo0bits+0x58>
 80066f0:	6013      	str	r3, [r2, #0]
 80066f2:	4770      	bx	lr
 80066f4:	2000      	movs	r0, #0
 80066f6:	4770      	bx	lr
 80066f8:	2020      	movs	r0, #32
 80066fa:	4770      	bx	lr

080066fc <__i2b>:
 80066fc:	b510      	push	{r4, lr}
 80066fe:	460c      	mov	r4, r1
 8006700:	2101      	movs	r1, #1
 8006702:	f7ff feb7 	bl	8006474 <_Balloc>
 8006706:	4602      	mov	r2, r0
 8006708:	b928      	cbnz	r0, 8006716 <__i2b+0x1a>
 800670a:	f44f 71a0 	mov.w	r1, #320	; 0x140
 800670e:	4b04      	ldr	r3, [pc, #16]	; (8006720 <__i2b+0x24>)
 8006710:	4804      	ldr	r0, [pc, #16]	; (8006724 <__i2b+0x28>)
 8006712:	f000 fdad 	bl	8007270 <__assert_func>
 8006716:	2301      	movs	r3, #1
 8006718:	6144      	str	r4, [r0, #20]
 800671a:	6103      	str	r3, [r0, #16]
 800671c:	bd10      	pop	{r4, pc}
 800671e:	bf00      	nop
 8006720:	08008074 	.word	0x08008074
 8006724:	08008104 	.word	0x08008104

08006728 <__multiply>:
 8006728:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800672c:	4614      	mov	r4, r2
 800672e:	690a      	ldr	r2, [r1, #16]
 8006730:	6923      	ldr	r3, [r4, #16]
 8006732:	460d      	mov	r5, r1
 8006734:	429a      	cmp	r2, r3
 8006736:	bfbe      	ittt	lt
 8006738:	460b      	movlt	r3, r1
 800673a:	4625      	movlt	r5, r4
 800673c:	461c      	movlt	r4, r3
 800673e:	f8d5 a010 	ldr.w	sl, [r5, #16]
 8006742:	f8d4 9010 	ldr.w	r9, [r4, #16]
 8006746:	68ab      	ldr	r3, [r5, #8]
 8006748:	6869      	ldr	r1, [r5, #4]
 800674a:	eb0a 0709 	add.w	r7, sl, r9
 800674e:	42bb      	cmp	r3, r7
 8006750:	b085      	sub	sp, #20
 8006752:	bfb8      	it	lt
 8006754:	3101      	addlt	r1, #1
 8006756:	f7ff fe8d 	bl	8006474 <_Balloc>
 800675a:	b930      	cbnz	r0, 800676a <__multiply+0x42>
 800675c:	4602      	mov	r2, r0
 800675e:	f240 115d 	movw	r1, #349	; 0x15d
 8006762:	4b41      	ldr	r3, [pc, #260]	; (8006868 <__multiply+0x140>)
 8006764:	4841      	ldr	r0, [pc, #260]	; (800686c <__multiply+0x144>)
 8006766:	f000 fd83 	bl	8007270 <__assert_func>
 800676a:	f100 0614 	add.w	r6, r0, #20
 800676e:	4633      	mov	r3, r6
 8006770:	2200      	movs	r2, #0
 8006772:	eb06 0887 	add.w	r8, r6, r7, lsl #2
 8006776:	4543      	cmp	r3, r8
 8006778:	d31e      	bcc.n	80067b8 <__multiply+0x90>
 800677a:	f105 0c14 	add.w	ip, r5, #20
 800677e:	f104 0314 	add.w	r3, r4, #20
 8006782:	eb0c 0c8a 	add.w	ip, ip, sl, lsl #2
 8006786:	eb03 0289 	add.w	r2, r3, r9, lsl #2
 800678a:	9202      	str	r2, [sp, #8]
 800678c:	ebac 0205 	sub.w	r2, ip, r5
 8006790:	3a15      	subs	r2, #21
 8006792:	f022 0203 	bic.w	r2, r2, #3
 8006796:	3204      	adds	r2, #4
 8006798:	f105 0115 	add.w	r1, r5, #21
 800679c:	458c      	cmp	ip, r1
 800679e:	bf38      	it	cc
 80067a0:	2204      	movcc	r2, #4
 80067a2:	9201      	str	r2, [sp, #4]
 80067a4:	9a02      	ldr	r2, [sp, #8]
 80067a6:	9303      	str	r3, [sp, #12]
 80067a8:	429a      	cmp	r2, r3
 80067aa:	d808      	bhi.n	80067be <__multiply+0x96>
 80067ac:	2f00      	cmp	r7, #0
 80067ae:	dc55      	bgt.n	800685c <__multiply+0x134>
 80067b0:	6107      	str	r7, [r0, #16]
 80067b2:	b005      	add	sp, #20
 80067b4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80067b8:	f843 2b04 	str.w	r2, [r3], #4
 80067bc:	e7db      	b.n	8006776 <__multiply+0x4e>
 80067be:	f8b3 a000 	ldrh.w	sl, [r3]
 80067c2:	f1ba 0f00 	cmp.w	sl, #0
 80067c6:	d020      	beq.n	800680a <__multiply+0xe2>
 80067c8:	46b1      	mov	r9, r6
 80067ca:	2200      	movs	r2, #0
 80067cc:	f105 0e14 	add.w	lr, r5, #20
 80067d0:	f85e 4b04 	ldr.w	r4, [lr], #4
 80067d4:	f8d9 b000 	ldr.w	fp, [r9]
 80067d8:	b2a1      	uxth	r1, r4
 80067da:	fa1f fb8b 	uxth.w	fp, fp
 80067de:	fb0a b101 	mla	r1, sl, r1, fp
 80067e2:	4411      	add	r1, r2
 80067e4:	f8d9 2000 	ldr.w	r2, [r9]
 80067e8:	0c24      	lsrs	r4, r4, #16
 80067ea:	0c12      	lsrs	r2, r2, #16
 80067ec:	fb0a 2404 	mla	r4, sl, r4, r2
 80067f0:	eb04 4411 	add.w	r4, r4, r1, lsr #16
 80067f4:	b289      	uxth	r1, r1
 80067f6:	ea41 4104 	orr.w	r1, r1, r4, lsl #16
 80067fa:	45f4      	cmp	ip, lr
 80067fc:	ea4f 4214 	mov.w	r2, r4, lsr #16
 8006800:	f849 1b04 	str.w	r1, [r9], #4
 8006804:	d8e4      	bhi.n	80067d0 <__multiply+0xa8>
 8006806:	9901      	ldr	r1, [sp, #4]
 8006808:	5072      	str	r2, [r6, r1]
 800680a:	9a03      	ldr	r2, [sp, #12]
 800680c:	3304      	adds	r3, #4
 800680e:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 8006812:	f1b9 0f00 	cmp.w	r9, #0
 8006816:	d01f      	beq.n	8006858 <__multiply+0x130>
 8006818:	46b6      	mov	lr, r6
 800681a:	f04f 0a00 	mov.w	sl, #0
 800681e:	6834      	ldr	r4, [r6, #0]
 8006820:	f105 0114 	add.w	r1, r5, #20
 8006824:	880a      	ldrh	r2, [r1, #0]
 8006826:	f8be b002 	ldrh.w	fp, [lr, #2]
 800682a:	b2a4      	uxth	r4, r4
 800682c:	fb09 b202 	mla	r2, r9, r2, fp
 8006830:	4492      	add	sl, r2
 8006832:	ea44 440a 	orr.w	r4, r4, sl, lsl #16
 8006836:	f84e 4b04 	str.w	r4, [lr], #4
 800683a:	f851 4b04 	ldr.w	r4, [r1], #4
 800683e:	f8be 2000 	ldrh.w	r2, [lr]
 8006842:	0c24      	lsrs	r4, r4, #16
 8006844:	fb09 2404 	mla	r4, r9, r4, r2
 8006848:	458c      	cmp	ip, r1
 800684a:	eb04 441a 	add.w	r4, r4, sl, lsr #16
 800684e:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 8006852:	d8e7      	bhi.n	8006824 <__multiply+0xfc>
 8006854:	9a01      	ldr	r2, [sp, #4]
 8006856:	50b4      	str	r4, [r6, r2]
 8006858:	3604      	adds	r6, #4
 800685a:	e7a3      	b.n	80067a4 <__multiply+0x7c>
 800685c:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8006860:	2b00      	cmp	r3, #0
 8006862:	d1a5      	bne.n	80067b0 <__multiply+0x88>
 8006864:	3f01      	subs	r7, #1
 8006866:	e7a1      	b.n	80067ac <__multiply+0x84>
 8006868:	08008074 	.word	0x08008074
 800686c:	08008104 	.word	0x08008104

08006870 <__pow5mult>:
 8006870:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006874:	4615      	mov	r5, r2
 8006876:	f012 0203 	ands.w	r2, r2, #3
 800687a:	4606      	mov	r6, r0
 800687c:	460f      	mov	r7, r1
 800687e:	d007      	beq.n	8006890 <__pow5mult+0x20>
 8006880:	4c25      	ldr	r4, [pc, #148]	; (8006918 <__pow5mult+0xa8>)
 8006882:	3a01      	subs	r2, #1
 8006884:	2300      	movs	r3, #0
 8006886:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800688a:	f7ff fe55 	bl	8006538 <__multadd>
 800688e:	4607      	mov	r7, r0
 8006890:	10ad      	asrs	r5, r5, #2
 8006892:	d03d      	beq.n	8006910 <__pow5mult+0xa0>
 8006894:	6a74      	ldr	r4, [r6, #36]	; 0x24
 8006896:	b97c      	cbnz	r4, 80068b8 <__pow5mult+0x48>
 8006898:	2010      	movs	r0, #16
 800689a:	f7ff fdb5 	bl	8006408 <malloc>
 800689e:	4602      	mov	r2, r0
 80068a0:	6270      	str	r0, [r6, #36]	; 0x24
 80068a2:	b928      	cbnz	r0, 80068b0 <__pow5mult+0x40>
 80068a4:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 80068a8:	4b1c      	ldr	r3, [pc, #112]	; (800691c <__pow5mult+0xac>)
 80068aa:	481d      	ldr	r0, [pc, #116]	; (8006920 <__pow5mult+0xb0>)
 80068ac:	f000 fce0 	bl	8007270 <__assert_func>
 80068b0:	e9c0 4401 	strd	r4, r4, [r0, #4]
 80068b4:	6004      	str	r4, [r0, #0]
 80068b6:	60c4      	str	r4, [r0, #12]
 80068b8:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 80068bc:	f8d8 4008 	ldr.w	r4, [r8, #8]
 80068c0:	b94c      	cbnz	r4, 80068d6 <__pow5mult+0x66>
 80068c2:	f240 2171 	movw	r1, #625	; 0x271
 80068c6:	4630      	mov	r0, r6
 80068c8:	f7ff ff18 	bl	80066fc <__i2b>
 80068cc:	2300      	movs	r3, #0
 80068ce:	4604      	mov	r4, r0
 80068d0:	f8c8 0008 	str.w	r0, [r8, #8]
 80068d4:	6003      	str	r3, [r0, #0]
 80068d6:	f04f 0900 	mov.w	r9, #0
 80068da:	07eb      	lsls	r3, r5, #31
 80068dc:	d50a      	bpl.n	80068f4 <__pow5mult+0x84>
 80068de:	4639      	mov	r1, r7
 80068e0:	4622      	mov	r2, r4
 80068e2:	4630      	mov	r0, r6
 80068e4:	f7ff ff20 	bl	8006728 <__multiply>
 80068e8:	4680      	mov	r8, r0
 80068ea:	4639      	mov	r1, r7
 80068ec:	4630      	mov	r0, r6
 80068ee:	f7ff fe01 	bl	80064f4 <_Bfree>
 80068f2:	4647      	mov	r7, r8
 80068f4:	106d      	asrs	r5, r5, #1
 80068f6:	d00b      	beq.n	8006910 <__pow5mult+0xa0>
 80068f8:	6820      	ldr	r0, [r4, #0]
 80068fa:	b938      	cbnz	r0, 800690c <__pow5mult+0x9c>
 80068fc:	4622      	mov	r2, r4
 80068fe:	4621      	mov	r1, r4
 8006900:	4630      	mov	r0, r6
 8006902:	f7ff ff11 	bl	8006728 <__multiply>
 8006906:	6020      	str	r0, [r4, #0]
 8006908:	f8c0 9000 	str.w	r9, [r0]
 800690c:	4604      	mov	r4, r0
 800690e:	e7e4      	b.n	80068da <__pow5mult+0x6a>
 8006910:	4638      	mov	r0, r7
 8006912:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8006916:	bf00      	nop
 8006918:	08008258 	.word	0x08008258
 800691c:	08007ffe 	.word	0x08007ffe
 8006920:	08008104 	.word	0x08008104

08006924 <__lshift>:
 8006924:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006928:	460c      	mov	r4, r1
 800692a:	4607      	mov	r7, r0
 800692c:	4691      	mov	r9, r2
 800692e:	6923      	ldr	r3, [r4, #16]
 8006930:	6849      	ldr	r1, [r1, #4]
 8006932:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8006936:	68a3      	ldr	r3, [r4, #8]
 8006938:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800693c:	f108 0601 	add.w	r6, r8, #1
 8006940:	42b3      	cmp	r3, r6
 8006942:	db0b      	blt.n	800695c <__lshift+0x38>
 8006944:	4638      	mov	r0, r7
 8006946:	f7ff fd95 	bl	8006474 <_Balloc>
 800694a:	4605      	mov	r5, r0
 800694c:	b948      	cbnz	r0, 8006962 <__lshift+0x3e>
 800694e:	4602      	mov	r2, r0
 8006950:	f240 11d9 	movw	r1, #473	; 0x1d9
 8006954:	4b27      	ldr	r3, [pc, #156]	; (80069f4 <__lshift+0xd0>)
 8006956:	4828      	ldr	r0, [pc, #160]	; (80069f8 <__lshift+0xd4>)
 8006958:	f000 fc8a 	bl	8007270 <__assert_func>
 800695c:	3101      	adds	r1, #1
 800695e:	005b      	lsls	r3, r3, #1
 8006960:	e7ee      	b.n	8006940 <__lshift+0x1c>
 8006962:	2300      	movs	r3, #0
 8006964:	f100 0114 	add.w	r1, r0, #20
 8006968:	f100 0210 	add.w	r2, r0, #16
 800696c:	4618      	mov	r0, r3
 800696e:	4553      	cmp	r3, sl
 8006970:	db33      	blt.n	80069da <__lshift+0xb6>
 8006972:	6920      	ldr	r0, [r4, #16]
 8006974:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8006978:	f104 0314 	add.w	r3, r4, #20
 800697c:	f019 091f 	ands.w	r9, r9, #31
 8006980:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8006984:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8006988:	d02b      	beq.n	80069e2 <__lshift+0xbe>
 800698a:	468a      	mov	sl, r1
 800698c:	2200      	movs	r2, #0
 800698e:	f1c9 0e20 	rsb	lr, r9, #32
 8006992:	6818      	ldr	r0, [r3, #0]
 8006994:	fa00 f009 	lsl.w	r0, r0, r9
 8006998:	4302      	orrs	r2, r0
 800699a:	f84a 2b04 	str.w	r2, [sl], #4
 800699e:	f853 2b04 	ldr.w	r2, [r3], #4
 80069a2:	459c      	cmp	ip, r3
 80069a4:	fa22 f20e 	lsr.w	r2, r2, lr
 80069a8:	d8f3      	bhi.n	8006992 <__lshift+0x6e>
 80069aa:	ebac 0304 	sub.w	r3, ip, r4
 80069ae:	3b15      	subs	r3, #21
 80069b0:	f023 0303 	bic.w	r3, r3, #3
 80069b4:	3304      	adds	r3, #4
 80069b6:	f104 0015 	add.w	r0, r4, #21
 80069ba:	4584      	cmp	ip, r0
 80069bc:	bf38      	it	cc
 80069be:	2304      	movcc	r3, #4
 80069c0:	50ca      	str	r2, [r1, r3]
 80069c2:	b10a      	cbz	r2, 80069c8 <__lshift+0xa4>
 80069c4:	f108 0602 	add.w	r6, r8, #2
 80069c8:	3e01      	subs	r6, #1
 80069ca:	4638      	mov	r0, r7
 80069cc:	4621      	mov	r1, r4
 80069ce:	612e      	str	r6, [r5, #16]
 80069d0:	f7ff fd90 	bl	80064f4 <_Bfree>
 80069d4:	4628      	mov	r0, r5
 80069d6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80069da:	f842 0f04 	str.w	r0, [r2, #4]!
 80069de:	3301      	adds	r3, #1
 80069e0:	e7c5      	b.n	800696e <__lshift+0x4a>
 80069e2:	3904      	subs	r1, #4
 80069e4:	f853 2b04 	ldr.w	r2, [r3], #4
 80069e8:	459c      	cmp	ip, r3
 80069ea:	f841 2f04 	str.w	r2, [r1, #4]!
 80069ee:	d8f9      	bhi.n	80069e4 <__lshift+0xc0>
 80069f0:	e7ea      	b.n	80069c8 <__lshift+0xa4>
 80069f2:	bf00      	nop
 80069f4:	08008074 	.word	0x08008074
 80069f8:	08008104 	.word	0x08008104

080069fc <__mcmp>:
 80069fc:	4603      	mov	r3, r0
 80069fe:	690a      	ldr	r2, [r1, #16]
 8006a00:	6900      	ldr	r0, [r0, #16]
 8006a02:	b530      	push	{r4, r5, lr}
 8006a04:	1a80      	subs	r0, r0, r2
 8006a06:	d10d      	bne.n	8006a24 <__mcmp+0x28>
 8006a08:	3314      	adds	r3, #20
 8006a0a:	3114      	adds	r1, #20
 8006a0c:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 8006a10:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 8006a14:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 8006a18:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 8006a1c:	4295      	cmp	r5, r2
 8006a1e:	d002      	beq.n	8006a26 <__mcmp+0x2a>
 8006a20:	d304      	bcc.n	8006a2c <__mcmp+0x30>
 8006a22:	2001      	movs	r0, #1
 8006a24:	bd30      	pop	{r4, r5, pc}
 8006a26:	42a3      	cmp	r3, r4
 8006a28:	d3f4      	bcc.n	8006a14 <__mcmp+0x18>
 8006a2a:	e7fb      	b.n	8006a24 <__mcmp+0x28>
 8006a2c:	f04f 30ff 	mov.w	r0, #4294967295
 8006a30:	e7f8      	b.n	8006a24 <__mcmp+0x28>
	...

08006a34 <__mdiff>:
 8006a34:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006a38:	460c      	mov	r4, r1
 8006a3a:	4606      	mov	r6, r0
 8006a3c:	4611      	mov	r1, r2
 8006a3e:	4620      	mov	r0, r4
 8006a40:	4692      	mov	sl, r2
 8006a42:	f7ff ffdb 	bl	80069fc <__mcmp>
 8006a46:	1e05      	subs	r5, r0, #0
 8006a48:	d111      	bne.n	8006a6e <__mdiff+0x3a>
 8006a4a:	4629      	mov	r1, r5
 8006a4c:	4630      	mov	r0, r6
 8006a4e:	f7ff fd11 	bl	8006474 <_Balloc>
 8006a52:	4602      	mov	r2, r0
 8006a54:	b928      	cbnz	r0, 8006a62 <__mdiff+0x2e>
 8006a56:	f240 2132 	movw	r1, #562	; 0x232
 8006a5a:	4b3c      	ldr	r3, [pc, #240]	; (8006b4c <__mdiff+0x118>)
 8006a5c:	483c      	ldr	r0, [pc, #240]	; (8006b50 <__mdiff+0x11c>)
 8006a5e:	f000 fc07 	bl	8007270 <__assert_func>
 8006a62:	2301      	movs	r3, #1
 8006a64:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8006a68:	4610      	mov	r0, r2
 8006a6a:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006a6e:	bfa4      	itt	ge
 8006a70:	4653      	movge	r3, sl
 8006a72:	46a2      	movge	sl, r4
 8006a74:	4630      	mov	r0, r6
 8006a76:	f8da 1004 	ldr.w	r1, [sl, #4]
 8006a7a:	bfa6      	itte	ge
 8006a7c:	461c      	movge	r4, r3
 8006a7e:	2500      	movge	r5, #0
 8006a80:	2501      	movlt	r5, #1
 8006a82:	f7ff fcf7 	bl	8006474 <_Balloc>
 8006a86:	4602      	mov	r2, r0
 8006a88:	b918      	cbnz	r0, 8006a92 <__mdiff+0x5e>
 8006a8a:	f44f 7110 	mov.w	r1, #576	; 0x240
 8006a8e:	4b2f      	ldr	r3, [pc, #188]	; (8006b4c <__mdiff+0x118>)
 8006a90:	e7e4      	b.n	8006a5c <__mdiff+0x28>
 8006a92:	f100 0814 	add.w	r8, r0, #20
 8006a96:	f8da 7010 	ldr.w	r7, [sl, #16]
 8006a9a:	60c5      	str	r5, [r0, #12]
 8006a9c:	f04f 0c00 	mov.w	ip, #0
 8006aa0:	f10a 0514 	add.w	r5, sl, #20
 8006aa4:	f10a 0010 	add.w	r0, sl, #16
 8006aa8:	46c2      	mov	sl, r8
 8006aaa:	6926      	ldr	r6, [r4, #16]
 8006aac:	f104 0914 	add.w	r9, r4, #20
 8006ab0:	eb05 0e87 	add.w	lr, r5, r7, lsl #2
 8006ab4:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 8006ab8:	f850 bf04 	ldr.w	fp, [r0, #4]!
 8006abc:	f859 3b04 	ldr.w	r3, [r9], #4
 8006ac0:	fa1f f18b 	uxth.w	r1, fp
 8006ac4:	4461      	add	r1, ip
 8006ac6:	fa1f fc83 	uxth.w	ip, r3
 8006aca:	0c1b      	lsrs	r3, r3, #16
 8006acc:	eba1 010c 	sub.w	r1, r1, ip
 8006ad0:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 8006ad4:	eb03 4321 	add.w	r3, r3, r1, asr #16
 8006ad8:	b289      	uxth	r1, r1
 8006ada:	ea4f 4c23 	mov.w	ip, r3, asr #16
 8006ade:	454e      	cmp	r6, r9
 8006ae0:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8006ae4:	f84a 3b04 	str.w	r3, [sl], #4
 8006ae8:	d8e6      	bhi.n	8006ab8 <__mdiff+0x84>
 8006aea:	1b33      	subs	r3, r6, r4
 8006aec:	3b15      	subs	r3, #21
 8006aee:	f023 0303 	bic.w	r3, r3, #3
 8006af2:	3415      	adds	r4, #21
 8006af4:	3304      	adds	r3, #4
 8006af6:	42a6      	cmp	r6, r4
 8006af8:	bf38      	it	cc
 8006afa:	2304      	movcc	r3, #4
 8006afc:	441d      	add	r5, r3
 8006afe:	4443      	add	r3, r8
 8006b00:	461e      	mov	r6, r3
 8006b02:	462c      	mov	r4, r5
 8006b04:	4574      	cmp	r4, lr
 8006b06:	d30e      	bcc.n	8006b26 <__mdiff+0xf2>
 8006b08:	f10e 0103 	add.w	r1, lr, #3
 8006b0c:	1b49      	subs	r1, r1, r5
 8006b0e:	f021 0103 	bic.w	r1, r1, #3
 8006b12:	3d03      	subs	r5, #3
 8006b14:	45ae      	cmp	lr, r5
 8006b16:	bf38      	it	cc
 8006b18:	2100      	movcc	r1, #0
 8006b1a:	4419      	add	r1, r3
 8006b1c:	f851 3d04 	ldr.w	r3, [r1, #-4]!
 8006b20:	b18b      	cbz	r3, 8006b46 <__mdiff+0x112>
 8006b22:	6117      	str	r7, [r2, #16]
 8006b24:	e7a0      	b.n	8006a68 <__mdiff+0x34>
 8006b26:	f854 8b04 	ldr.w	r8, [r4], #4
 8006b2a:	fa1f f188 	uxth.w	r1, r8
 8006b2e:	4461      	add	r1, ip
 8006b30:	1408      	asrs	r0, r1, #16
 8006b32:	eb00 4018 	add.w	r0, r0, r8, lsr #16
 8006b36:	b289      	uxth	r1, r1
 8006b38:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8006b3c:	ea4f 4c20 	mov.w	ip, r0, asr #16
 8006b40:	f846 1b04 	str.w	r1, [r6], #4
 8006b44:	e7de      	b.n	8006b04 <__mdiff+0xd0>
 8006b46:	3f01      	subs	r7, #1
 8006b48:	e7e8      	b.n	8006b1c <__mdiff+0xe8>
 8006b4a:	bf00      	nop
 8006b4c:	08008074 	.word	0x08008074
 8006b50:	08008104 	.word	0x08008104

08006b54 <__ulp>:
 8006b54:	4b11      	ldr	r3, [pc, #68]	; (8006b9c <__ulp+0x48>)
 8006b56:	400b      	ands	r3, r1
 8006b58:	f1a3 7350 	sub.w	r3, r3, #54525952	; 0x3400000
 8006b5c:	2b00      	cmp	r3, #0
 8006b5e:	dd02      	ble.n	8006b66 <__ulp+0x12>
 8006b60:	2000      	movs	r0, #0
 8006b62:	4619      	mov	r1, r3
 8006b64:	4770      	bx	lr
 8006b66:	425b      	negs	r3, r3
 8006b68:	f1b3 7fa0 	cmp.w	r3, #20971520	; 0x1400000
 8006b6c:	f04f 0000 	mov.w	r0, #0
 8006b70:	f04f 0100 	mov.w	r1, #0
 8006b74:	ea4f 5223 	mov.w	r2, r3, asr #20
 8006b78:	da04      	bge.n	8006b84 <__ulp+0x30>
 8006b7a:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 8006b7e:	fa43 f102 	asr.w	r1, r3, r2
 8006b82:	4770      	bx	lr
 8006b84:	f1a2 0314 	sub.w	r3, r2, #20
 8006b88:	2b1e      	cmp	r3, #30
 8006b8a:	bfd6      	itet	le
 8006b8c:	f04f 4200 	movle.w	r2, #2147483648	; 0x80000000
 8006b90:	2301      	movgt	r3, #1
 8006b92:	fa22 f303 	lsrle.w	r3, r2, r3
 8006b96:	4618      	mov	r0, r3
 8006b98:	4770      	bx	lr
 8006b9a:	bf00      	nop
 8006b9c:	7ff00000 	.word	0x7ff00000

08006ba0 <__b2d>:
 8006ba0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006ba4:	6907      	ldr	r7, [r0, #16]
 8006ba6:	f100 0914 	add.w	r9, r0, #20
 8006baa:	eb09 0787 	add.w	r7, r9, r7, lsl #2
 8006bae:	f857 6c04 	ldr.w	r6, [r7, #-4]
 8006bb2:	f1a7 0804 	sub.w	r8, r7, #4
 8006bb6:	4630      	mov	r0, r6
 8006bb8:	f7ff fd52 	bl	8006660 <__hi0bits>
 8006bbc:	f1c0 0320 	rsb	r3, r0, #32
 8006bc0:	280a      	cmp	r0, #10
 8006bc2:	600b      	str	r3, [r1, #0]
 8006bc4:	491f      	ldr	r1, [pc, #124]	; (8006c44 <__b2d+0xa4>)
 8006bc6:	dc17      	bgt.n	8006bf8 <__b2d+0x58>
 8006bc8:	45c1      	cmp	r9, r8
 8006bca:	bf28      	it	cs
 8006bcc:	2200      	movcs	r2, #0
 8006bce:	f1c0 0c0b 	rsb	ip, r0, #11
 8006bd2:	fa26 f30c 	lsr.w	r3, r6, ip
 8006bd6:	bf38      	it	cc
 8006bd8:	f857 2c08 	ldrcc.w	r2, [r7, #-8]
 8006bdc:	ea43 0501 	orr.w	r5, r3, r1
 8006be0:	f100 0315 	add.w	r3, r0, #21
 8006be4:	fa06 f303 	lsl.w	r3, r6, r3
 8006be8:	fa22 f20c 	lsr.w	r2, r2, ip
 8006bec:	ea43 0402 	orr.w	r4, r3, r2
 8006bf0:	4620      	mov	r0, r4
 8006bf2:	4629      	mov	r1, r5
 8006bf4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8006bf8:	45c1      	cmp	r9, r8
 8006bfa:	bf2e      	itee	cs
 8006bfc:	2200      	movcs	r2, #0
 8006bfe:	f857 2c08 	ldrcc.w	r2, [r7, #-8]
 8006c02:	f1a7 0808 	subcc.w	r8, r7, #8
 8006c06:	f1b0 030b 	subs.w	r3, r0, #11
 8006c0a:	d016      	beq.n	8006c3a <__b2d+0x9a>
 8006c0c:	f1c3 0720 	rsb	r7, r3, #32
 8006c10:	fa22 f107 	lsr.w	r1, r2, r7
 8006c14:	45c8      	cmp	r8, r9
 8006c16:	fa06 f603 	lsl.w	r6, r6, r3
 8006c1a:	ea46 0601 	orr.w	r6, r6, r1
 8006c1e:	bf94      	ite	ls
 8006c20:	2100      	movls	r1, #0
 8006c22:	f858 1c04 	ldrhi.w	r1, [r8, #-4]
 8006c26:	f046 557f 	orr.w	r5, r6, #1069547520	; 0x3fc00000
 8006c2a:	fa02 f003 	lsl.w	r0, r2, r3
 8006c2e:	40f9      	lsrs	r1, r7
 8006c30:	f445 1540 	orr.w	r5, r5, #3145728	; 0x300000
 8006c34:	ea40 0401 	orr.w	r4, r0, r1
 8006c38:	e7da      	b.n	8006bf0 <__b2d+0x50>
 8006c3a:	4614      	mov	r4, r2
 8006c3c:	ea46 0501 	orr.w	r5, r6, r1
 8006c40:	e7d6      	b.n	8006bf0 <__b2d+0x50>
 8006c42:	bf00      	nop
 8006c44:	3ff00000 	.word	0x3ff00000

08006c48 <__d2b>:
 8006c48:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 8006c4c:	2101      	movs	r1, #1
 8006c4e:	e9dd 7608 	ldrd	r7, r6, [sp, #32]
 8006c52:	4690      	mov	r8, r2
 8006c54:	461d      	mov	r5, r3
 8006c56:	f7ff fc0d 	bl	8006474 <_Balloc>
 8006c5a:	4604      	mov	r4, r0
 8006c5c:	b930      	cbnz	r0, 8006c6c <__d2b+0x24>
 8006c5e:	4602      	mov	r2, r0
 8006c60:	f240 310a 	movw	r1, #778	; 0x30a
 8006c64:	4b24      	ldr	r3, [pc, #144]	; (8006cf8 <__d2b+0xb0>)
 8006c66:	4825      	ldr	r0, [pc, #148]	; (8006cfc <__d2b+0xb4>)
 8006c68:	f000 fb02 	bl	8007270 <__assert_func>
 8006c6c:	f3c5 0313 	ubfx	r3, r5, #0, #20
 8006c70:	f3c5 550a 	ubfx	r5, r5, #20, #11
 8006c74:	bb2d      	cbnz	r5, 8006cc2 <__d2b+0x7a>
 8006c76:	9301      	str	r3, [sp, #4]
 8006c78:	f1b8 0300 	subs.w	r3, r8, #0
 8006c7c:	d026      	beq.n	8006ccc <__d2b+0x84>
 8006c7e:	4668      	mov	r0, sp
 8006c80:	9300      	str	r3, [sp, #0]
 8006c82:	f7ff fd0d 	bl	80066a0 <__lo0bits>
 8006c86:	9900      	ldr	r1, [sp, #0]
 8006c88:	b1f0      	cbz	r0, 8006cc8 <__d2b+0x80>
 8006c8a:	9a01      	ldr	r2, [sp, #4]
 8006c8c:	f1c0 0320 	rsb	r3, r0, #32
 8006c90:	fa02 f303 	lsl.w	r3, r2, r3
 8006c94:	430b      	orrs	r3, r1
 8006c96:	40c2      	lsrs	r2, r0
 8006c98:	6163      	str	r3, [r4, #20]
 8006c9a:	9201      	str	r2, [sp, #4]
 8006c9c:	9b01      	ldr	r3, [sp, #4]
 8006c9e:	2b00      	cmp	r3, #0
 8006ca0:	bf14      	ite	ne
 8006ca2:	2102      	movne	r1, #2
 8006ca4:	2101      	moveq	r1, #1
 8006ca6:	61a3      	str	r3, [r4, #24]
 8006ca8:	6121      	str	r1, [r4, #16]
 8006caa:	b1c5      	cbz	r5, 8006cde <__d2b+0x96>
 8006cac:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 8006cb0:	4405      	add	r5, r0
 8006cb2:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8006cb6:	603d      	str	r5, [r7, #0]
 8006cb8:	6030      	str	r0, [r6, #0]
 8006cba:	4620      	mov	r0, r4
 8006cbc:	b002      	add	sp, #8
 8006cbe:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006cc2:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8006cc6:	e7d6      	b.n	8006c76 <__d2b+0x2e>
 8006cc8:	6161      	str	r1, [r4, #20]
 8006cca:	e7e7      	b.n	8006c9c <__d2b+0x54>
 8006ccc:	a801      	add	r0, sp, #4
 8006cce:	f7ff fce7 	bl	80066a0 <__lo0bits>
 8006cd2:	2101      	movs	r1, #1
 8006cd4:	9b01      	ldr	r3, [sp, #4]
 8006cd6:	6121      	str	r1, [r4, #16]
 8006cd8:	6163      	str	r3, [r4, #20]
 8006cda:	3020      	adds	r0, #32
 8006cdc:	e7e5      	b.n	8006caa <__d2b+0x62>
 8006cde:	eb04 0381 	add.w	r3, r4, r1, lsl #2
 8006ce2:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8006ce6:	6038      	str	r0, [r7, #0]
 8006ce8:	6918      	ldr	r0, [r3, #16]
 8006cea:	f7ff fcb9 	bl	8006660 <__hi0bits>
 8006cee:	ebc0 1141 	rsb	r1, r0, r1, lsl #5
 8006cf2:	6031      	str	r1, [r6, #0]
 8006cf4:	e7e1      	b.n	8006cba <__d2b+0x72>
 8006cf6:	bf00      	nop
 8006cf8:	08008074 	.word	0x08008074
 8006cfc:	08008104 	.word	0x08008104

08006d00 <__ratio>:
 8006d00:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006d04:	4688      	mov	r8, r1
 8006d06:	4669      	mov	r1, sp
 8006d08:	4681      	mov	r9, r0
 8006d0a:	f7ff ff49 	bl	8006ba0 <__b2d>
 8006d0e:	460f      	mov	r7, r1
 8006d10:	4604      	mov	r4, r0
 8006d12:	460d      	mov	r5, r1
 8006d14:	4640      	mov	r0, r8
 8006d16:	a901      	add	r1, sp, #4
 8006d18:	f7ff ff42 	bl	8006ba0 <__b2d>
 8006d1c:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8006d20:	f8d8 2010 	ldr.w	r2, [r8, #16]
 8006d24:	468b      	mov	fp, r1
 8006d26:	eba3 0c02 	sub.w	ip, r3, r2
 8006d2a:	e9dd 3200 	ldrd	r3, r2, [sp]
 8006d2e:	1a9b      	subs	r3, r3, r2
 8006d30:	eb03 134c 	add.w	r3, r3, ip, lsl #5
 8006d34:	2b00      	cmp	r3, #0
 8006d36:	bfd5      	itete	le
 8006d38:	460a      	movle	r2, r1
 8006d3a:	462a      	movgt	r2, r5
 8006d3c:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 8006d40:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 8006d44:	bfd8      	it	le
 8006d46:	eb02 5b03 	addle.w	fp, r2, r3, lsl #20
 8006d4a:	465b      	mov	r3, fp
 8006d4c:	4602      	mov	r2, r0
 8006d4e:	4639      	mov	r1, r7
 8006d50:	4620      	mov	r0, r4
 8006d52:	f7f9 fceb 	bl	800072c <__aeabi_ddiv>
 8006d56:	b003      	add	sp, #12
 8006d58:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08006d5c <__copybits>:
 8006d5c:	3901      	subs	r1, #1
 8006d5e:	b570      	push	{r4, r5, r6, lr}
 8006d60:	1149      	asrs	r1, r1, #5
 8006d62:	6914      	ldr	r4, [r2, #16]
 8006d64:	3101      	adds	r1, #1
 8006d66:	f102 0314 	add.w	r3, r2, #20
 8006d6a:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 8006d6e:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 8006d72:	1f05      	subs	r5, r0, #4
 8006d74:	42a3      	cmp	r3, r4
 8006d76:	d30c      	bcc.n	8006d92 <__copybits+0x36>
 8006d78:	1aa3      	subs	r3, r4, r2
 8006d7a:	3b11      	subs	r3, #17
 8006d7c:	f023 0303 	bic.w	r3, r3, #3
 8006d80:	3211      	adds	r2, #17
 8006d82:	42a2      	cmp	r2, r4
 8006d84:	bf88      	it	hi
 8006d86:	2300      	movhi	r3, #0
 8006d88:	4418      	add	r0, r3
 8006d8a:	2300      	movs	r3, #0
 8006d8c:	4288      	cmp	r0, r1
 8006d8e:	d305      	bcc.n	8006d9c <__copybits+0x40>
 8006d90:	bd70      	pop	{r4, r5, r6, pc}
 8006d92:	f853 6b04 	ldr.w	r6, [r3], #4
 8006d96:	f845 6f04 	str.w	r6, [r5, #4]!
 8006d9a:	e7eb      	b.n	8006d74 <__copybits+0x18>
 8006d9c:	f840 3b04 	str.w	r3, [r0], #4
 8006da0:	e7f4      	b.n	8006d8c <__copybits+0x30>

08006da2 <__any_on>:
 8006da2:	f100 0214 	add.w	r2, r0, #20
 8006da6:	6900      	ldr	r0, [r0, #16]
 8006da8:	114b      	asrs	r3, r1, #5
 8006daa:	4298      	cmp	r0, r3
 8006dac:	b510      	push	{r4, lr}
 8006dae:	db11      	blt.n	8006dd4 <__any_on+0x32>
 8006db0:	dd0a      	ble.n	8006dc8 <__any_on+0x26>
 8006db2:	f011 011f 	ands.w	r1, r1, #31
 8006db6:	d007      	beq.n	8006dc8 <__any_on+0x26>
 8006db8:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 8006dbc:	fa24 f001 	lsr.w	r0, r4, r1
 8006dc0:	fa00 f101 	lsl.w	r1, r0, r1
 8006dc4:	428c      	cmp	r4, r1
 8006dc6:	d10b      	bne.n	8006de0 <__any_on+0x3e>
 8006dc8:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8006dcc:	4293      	cmp	r3, r2
 8006dce:	d803      	bhi.n	8006dd8 <__any_on+0x36>
 8006dd0:	2000      	movs	r0, #0
 8006dd2:	bd10      	pop	{r4, pc}
 8006dd4:	4603      	mov	r3, r0
 8006dd6:	e7f7      	b.n	8006dc8 <__any_on+0x26>
 8006dd8:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8006ddc:	2900      	cmp	r1, #0
 8006dde:	d0f5      	beq.n	8006dcc <__any_on+0x2a>
 8006de0:	2001      	movs	r0, #1
 8006de2:	e7f6      	b.n	8006dd2 <__any_on+0x30>

08006de4 <_calloc_r>:
 8006de4:	b538      	push	{r3, r4, r5, lr}
 8006de6:	fb02 f501 	mul.w	r5, r2, r1
 8006dea:	4629      	mov	r1, r5
 8006dec:	f000 f854 	bl	8006e98 <_malloc_r>
 8006df0:	4604      	mov	r4, r0
 8006df2:	b118      	cbz	r0, 8006dfc <_calloc_r+0x18>
 8006df4:	462a      	mov	r2, r5
 8006df6:	2100      	movs	r1, #0
 8006df8:	f7fc fbdc 	bl	80035b4 <memset>
 8006dfc:	4620      	mov	r0, r4
 8006dfe:	bd38      	pop	{r3, r4, r5, pc}

08006e00 <_free_r>:
 8006e00:	b538      	push	{r3, r4, r5, lr}
 8006e02:	4605      	mov	r5, r0
 8006e04:	2900      	cmp	r1, #0
 8006e06:	d043      	beq.n	8006e90 <_free_r+0x90>
 8006e08:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8006e0c:	1f0c      	subs	r4, r1, #4
 8006e0e:	2b00      	cmp	r3, #0
 8006e10:	bfb8      	it	lt
 8006e12:	18e4      	addlt	r4, r4, r3
 8006e14:	f000 fa76 	bl	8007304 <__malloc_lock>
 8006e18:	4a1e      	ldr	r2, [pc, #120]	; (8006e94 <_free_r+0x94>)
 8006e1a:	6813      	ldr	r3, [r2, #0]
 8006e1c:	4610      	mov	r0, r2
 8006e1e:	b933      	cbnz	r3, 8006e2e <_free_r+0x2e>
 8006e20:	6063      	str	r3, [r4, #4]
 8006e22:	6014      	str	r4, [r2, #0]
 8006e24:	4628      	mov	r0, r5
 8006e26:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8006e2a:	f000 ba71 	b.w	8007310 <__malloc_unlock>
 8006e2e:	42a3      	cmp	r3, r4
 8006e30:	d90a      	bls.n	8006e48 <_free_r+0x48>
 8006e32:	6821      	ldr	r1, [r4, #0]
 8006e34:	1862      	adds	r2, r4, r1
 8006e36:	4293      	cmp	r3, r2
 8006e38:	bf01      	itttt	eq
 8006e3a:	681a      	ldreq	r2, [r3, #0]
 8006e3c:	685b      	ldreq	r3, [r3, #4]
 8006e3e:	1852      	addeq	r2, r2, r1
 8006e40:	6022      	streq	r2, [r4, #0]
 8006e42:	6063      	str	r3, [r4, #4]
 8006e44:	6004      	str	r4, [r0, #0]
 8006e46:	e7ed      	b.n	8006e24 <_free_r+0x24>
 8006e48:	461a      	mov	r2, r3
 8006e4a:	685b      	ldr	r3, [r3, #4]
 8006e4c:	b10b      	cbz	r3, 8006e52 <_free_r+0x52>
 8006e4e:	42a3      	cmp	r3, r4
 8006e50:	d9fa      	bls.n	8006e48 <_free_r+0x48>
 8006e52:	6811      	ldr	r1, [r2, #0]
 8006e54:	1850      	adds	r0, r2, r1
 8006e56:	42a0      	cmp	r0, r4
 8006e58:	d10b      	bne.n	8006e72 <_free_r+0x72>
 8006e5a:	6820      	ldr	r0, [r4, #0]
 8006e5c:	4401      	add	r1, r0
 8006e5e:	1850      	adds	r0, r2, r1
 8006e60:	4283      	cmp	r3, r0
 8006e62:	6011      	str	r1, [r2, #0]
 8006e64:	d1de      	bne.n	8006e24 <_free_r+0x24>
 8006e66:	6818      	ldr	r0, [r3, #0]
 8006e68:	685b      	ldr	r3, [r3, #4]
 8006e6a:	4401      	add	r1, r0
 8006e6c:	6011      	str	r1, [r2, #0]
 8006e6e:	6053      	str	r3, [r2, #4]
 8006e70:	e7d8      	b.n	8006e24 <_free_r+0x24>
 8006e72:	d902      	bls.n	8006e7a <_free_r+0x7a>
 8006e74:	230c      	movs	r3, #12
 8006e76:	602b      	str	r3, [r5, #0]
 8006e78:	e7d4      	b.n	8006e24 <_free_r+0x24>
 8006e7a:	6820      	ldr	r0, [r4, #0]
 8006e7c:	1821      	adds	r1, r4, r0
 8006e7e:	428b      	cmp	r3, r1
 8006e80:	bf01      	itttt	eq
 8006e82:	6819      	ldreq	r1, [r3, #0]
 8006e84:	685b      	ldreq	r3, [r3, #4]
 8006e86:	1809      	addeq	r1, r1, r0
 8006e88:	6021      	streq	r1, [r4, #0]
 8006e8a:	6063      	str	r3, [r4, #4]
 8006e8c:	6054      	str	r4, [r2, #4]
 8006e8e:	e7c9      	b.n	8006e24 <_free_r+0x24>
 8006e90:	bd38      	pop	{r3, r4, r5, pc}
 8006e92:	bf00      	nop
 8006e94:	20000208 	.word	0x20000208

08006e98 <_malloc_r>:
 8006e98:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006e9a:	1ccd      	adds	r5, r1, #3
 8006e9c:	f025 0503 	bic.w	r5, r5, #3
 8006ea0:	3508      	adds	r5, #8
 8006ea2:	2d0c      	cmp	r5, #12
 8006ea4:	bf38      	it	cc
 8006ea6:	250c      	movcc	r5, #12
 8006ea8:	2d00      	cmp	r5, #0
 8006eaa:	4606      	mov	r6, r0
 8006eac:	db01      	blt.n	8006eb2 <_malloc_r+0x1a>
 8006eae:	42a9      	cmp	r1, r5
 8006eb0:	d903      	bls.n	8006eba <_malloc_r+0x22>
 8006eb2:	230c      	movs	r3, #12
 8006eb4:	6033      	str	r3, [r6, #0]
 8006eb6:	2000      	movs	r0, #0
 8006eb8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006eba:	f000 fa23 	bl	8007304 <__malloc_lock>
 8006ebe:	4921      	ldr	r1, [pc, #132]	; (8006f44 <_malloc_r+0xac>)
 8006ec0:	680a      	ldr	r2, [r1, #0]
 8006ec2:	4614      	mov	r4, r2
 8006ec4:	b99c      	cbnz	r4, 8006eee <_malloc_r+0x56>
 8006ec6:	4f20      	ldr	r7, [pc, #128]	; (8006f48 <_malloc_r+0xb0>)
 8006ec8:	683b      	ldr	r3, [r7, #0]
 8006eca:	b923      	cbnz	r3, 8006ed6 <_malloc_r+0x3e>
 8006ecc:	4621      	mov	r1, r4
 8006ece:	4630      	mov	r0, r6
 8006ed0:	f000 f99e 	bl	8007210 <_sbrk_r>
 8006ed4:	6038      	str	r0, [r7, #0]
 8006ed6:	4629      	mov	r1, r5
 8006ed8:	4630      	mov	r0, r6
 8006eda:	f000 f999 	bl	8007210 <_sbrk_r>
 8006ede:	1c43      	adds	r3, r0, #1
 8006ee0:	d123      	bne.n	8006f2a <_malloc_r+0x92>
 8006ee2:	230c      	movs	r3, #12
 8006ee4:	4630      	mov	r0, r6
 8006ee6:	6033      	str	r3, [r6, #0]
 8006ee8:	f000 fa12 	bl	8007310 <__malloc_unlock>
 8006eec:	e7e3      	b.n	8006eb6 <_malloc_r+0x1e>
 8006eee:	6823      	ldr	r3, [r4, #0]
 8006ef0:	1b5b      	subs	r3, r3, r5
 8006ef2:	d417      	bmi.n	8006f24 <_malloc_r+0x8c>
 8006ef4:	2b0b      	cmp	r3, #11
 8006ef6:	d903      	bls.n	8006f00 <_malloc_r+0x68>
 8006ef8:	6023      	str	r3, [r4, #0]
 8006efa:	441c      	add	r4, r3
 8006efc:	6025      	str	r5, [r4, #0]
 8006efe:	e004      	b.n	8006f0a <_malloc_r+0x72>
 8006f00:	6863      	ldr	r3, [r4, #4]
 8006f02:	42a2      	cmp	r2, r4
 8006f04:	bf0c      	ite	eq
 8006f06:	600b      	streq	r3, [r1, #0]
 8006f08:	6053      	strne	r3, [r2, #4]
 8006f0a:	4630      	mov	r0, r6
 8006f0c:	f000 fa00 	bl	8007310 <__malloc_unlock>
 8006f10:	f104 000b 	add.w	r0, r4, #11
 8006f14:	1d23      	adds	r3, r4, #4
 8006f16:	f020 0007 	bic.w	r0, r0, #7
 8006f1a:	1ac2      	subs	r2, r0, r3
 8006f1c:	d0cc      	beq.n	8006eb8 <_malloc_r+0x20>
 8006f1e:	1a1b      	subs	r3, r3, r0
 8006f20:	50a3      	str	r3, [r4, r2]
 8006f22:	e7c9      	b.n	8006eb8 <_malloc_r+0x20>
 8006f24:	4622      	mov	r2, r4
 8006f26:	6864      	ldr	r4, [r4, #4]
 8006f28:	e7cc      	b.n	8006ec4 <_malloc_r+0x2c>
 8006f2a:	1cc4      	adds	r4, r0, #3
 8006f2c:	f024 0403 	bic.w	r4, r4, #3
 8006f30:	42a0      	cmp	r0, r4
 8006f32:	d0e3      	beq.n	8006efc <_malloc_r+0x64>
 8006f34:	1a21      	subs	r1, r4, r0
 8006f36:	4630      	mov	r0, r6
 8006f38:	f000 f96a 	bl	8007210 <_sbrk_r>
 8006f3c:	3001      	adds	r0, #1
 8006f3e:	d1dd      	bne.n	8006efc <_malloc_r+0x64>
 8006f40:	e7cf      	b.n	8006ee2 <_malloc_r+0x4a>
 8006f42:	bf00      	nop
 8006f44:	20000208 	.word	0x20000208
 8006f48:	2000020c 	.word	0x2000020c

08006f4c <__ssputs_r>:
 8006f4c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006f50:	688e      	ldr	r6, [r1, #8]
 8006f52:	4682      	mov	sl, r0
 8006f54:	429e      	cmp	r6, r3
 8006f56:	460c      	mov	r4, r1
 8006f58:	4690      	mov	r8, r2
 8006f5a:	461f      	mov	r7, r3
 8006f5c:	d838      	bhi.n	8006fd0 <__ssputs_r+0x84>
 8006f5e:	898a      	ldrh	r2, [r1, #12]
 8006f60:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8006f64:	d032      	beq.n	8006fcc <__ssputs_r+0x80>
 8006f66:	6825      	ldr	r5, [r4, #0]
 8006f68:	6909      	ldr	r1, [r1, #16]
 8006f6a:	3301      	adds	r3, #1
 8006f6c:	eba5 0901 	sub.w	r9, r5, r1
 8006f70:	6965      	ldr	r5, [r4, #20]
 8006f72:	444b      	add	r3, r9
 8006f74:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8006f78:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8006f7c:	106d      	asrs	r5, r5, #1
 8006f7e:	429d      	cmp	r5, r3
 8006f80:	bf38      	it	cc
 8006f82:	461d      	movcc	r5, r3
 8006f84:	0553      	lsls	r3, r2, #21
 8006f86:	d531      	bpl.n	8006fec <__ssputs_r+0xa0>
 8006f88:	4629      	mov	r1, r5
 8006f8a:	f7ff ff85 	bl	8006e98 <_malloc_r>
 8006f8e:	4606      	mov	r6, r0
 8006f90:	b950      	cbnz	r0, 8006fa8 <__ssputs_r+0x5c>
 8006f92:	230c      	movs	r3, #12
 8006f94:	f04f 30ff 	mov.w	r0, #4294967295
 8006f98:	f8ca 3000 	str.w	r3, [sl]
 8006f9c:	89a3      	ldrh	r3, [r4, #12]
 8006f9e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006fa2:	81a3      	strh	r3, [r4, #12]
 8006fa4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006fa8:	464a      	mov	r2, r9
 8006faa:	6921      	ldr	r1, [r4, #16]
 8006fac:	f7ff fa54 	bl	8006458 <memcpy>
 8006fb0:	89a3      	ldrh	r3, [r4, #12]
 8006fb2:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8006fb6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006fba:	81a3      	strh	r3, [r4, #12]
 8006fbc:	6126      	str	r6, [r4, #16]
 8006fbe:	444e      	add	r6, r9
 8006fc0:	6026      	str	r6, [r4, #0]
 8006fc2:	463e      	mov	r6, r7
 8006fc4:	6165      	str	r5, [r4, #20]
 8006fc6:	eba5 0509 	sub.w	r5, r5, r9
 8006fca:	60a5      	str	r5, [r4, #8]
 8006fcc:	42be      	cmp	r6, r7
 8006fce:	d900      	bls.n	8006fd2 <__ssputs_r+0x86>
 8006fd0:	463e      	mov	r6, r7
 8006fd2:	4632      	mov	r2, r6
 8006fd4:	4641      	mov	r1, r8
 8006fd6:	6820      	ldr	r0, [r4, #0]
 8006fd8:	f000 f97a 	bl	80072d0 <memmove>
 8006fdc:	68a3      	ldr	r3, [r4, #8]
 8006fde:	6822      	ldr	r2, [r4, #0]
 8006fe0:	1b9b      	subs	r3, r3, r6
 8006fe2:	4432      	add	r2, r6
 8006fe4:	2000      	movs	r0, #0
 8006fe6:	60a3      	str	r3, [r4, #8]
 8006fe8:	6022      	str	r2, [r4, #0]
 8006fea:	e7db      	b.n	8006fa4 <__ssputs_r+0x58>
 8006fec:	462a      	mov	r2, r5
 8006fee:	f000 f995 	bl	800731c <_realloc_r>
 8006ff2:	4606      	mov	r6, r0
 8006ff4:	2800      	cmp	r0, #0
 8006ff6:	d1e1      	bne.n	8006fbc <__ssputs_r+0x70>
 8006ff8:	4650      	mov	r0, sl
 8006ffa:	6921      	ldr	r1, [r4, #16]
 8006ffc:	f7ff ff00 	bl	8006e00 <_free_r>
 8007000:	e7c7      	b.n	8006f92 <__ssputs_r+0x46>
	...

08007004 <_svfiprintf_r>:
 8007004:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007008:	4698      	mov	r8, r3
 800700a:	898b      	ldrh	r3, [r1, #12]
 800700c:	4607      	mov	r7, r0
 800700e:	061b      	lsls	r3, r3, #24
 8007010:	460d      	mov	r5, r1
 8007012:	4614      	mov	r4, r2
 8007014:	b09d      	sub	sp, #116	; 0x74
 8007016:	d50e      	bpl.n	8007036 <_svfiprintf_r+0x32>
 8007018:	690b      	ldr	r3, [r1, #16]
 800701a:	b963      	cbnz	r3, 8007036 <_svfiprintf_r+0x32>
 800701c:	2140      	movs	r1, #64	; 0x40
 800701e:	f7ff ff3b 	bl	8006e98 <_malloc_r>
 8007022:	6028      	str	r0, [r5, #0]
 8007024:	6128      	str	r0, [r5, #16]
 8007026:	b920      	cbnz	r0, 8007032 <_svfiprintf_r+0x2e>
 8007028:	230c      	movs	r3, #12
 800702a:	603b      	str	r3, [r7, #0]
 800702c:	f04f 30ff 	mov.w	r0, #4294967295
 8007030:	e0d1      	b.n	80071d6 <_svfiprintf_r+0x1d2>
 8007032:	2340      	movs	r3, #64	; 0x40
 8007034:	616b      	str	r3, [r5, #20]
 8007036:	2300      	movs	r3, #0
 8007038:	9309      	str	r3, [sp, #36]	; 0x24
 800703a:	2320      	movs	r3, #32
 800703c:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8007040:	2330      	movs	r3, #48	; 0x30
 8007042:	f04f 0901 	mov.w	r9, #1
 8007046:	f8cd 800c 	str.w	r8, [sp, #12]
 800704a:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 80071f0 <_svfiprintf_r+0x1ec>
 800704e:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8007052:	4623      	mov	r3, r4
 8007054:	469a      	mov	sl, r3
 8007056:	f813 2b01 	ldrb.w	r2, [r3], #1
 800705a:	b10a      	cbz	r2, 8007060 <_svfiprintf_r+0x5c>
 800705c:	2a25      	cmp	r2, #37	; 0x25
 800705e:	d1f9      	bne.n	8007054 <_svfiprintf_r+0x50>
 8007060:	ebba 0b04 	subs.w	fp, sl, r4
 8007064:	d00b      	beq.n	800707e <_svfiprintf_r+0x7a>
 8007066:	465b      	mov	r3, fp
 8007068:	4622      	mov	r2, r4
 800706a:	4629      	mov	r1, r5
 800706c:	4638      	mov	r0, r7
 800706e:	f7ff ff6d 	bl	8006f4c <__ssputs_r>
 8007072:	3001      	adds	r0, #1
 8007074:	f000 80aa 	beq.w	80071cc <_svfiprintf_r+0x1c8>
 8007078:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800707a:	445a      	add	r2, fp
 800707c:	9209      	str	r2, [sp, #36]	; 0x24
 800707e:	f89a 3000 	ldrb.w	r3, [sl]
 8007082:	2b00      	cmp	r3, #0
 8007084:	f000 80a2 	beq.w	80071cc <_svfiprintf_r+0x1c8>
 8007088:	2300      	movs	r3, #0
 800708a:	f04f 32ff 	mov.w	r2, #4294967295
 800708e:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8007092:	f10a 0a01 	add.w	sl, sl, #1
 8007096:	9304      	str	r3, [sp, #16]
 8007098:	9307      	str	r3, [sp, #28]
 800709a:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800709e:	931a      	str	r3, [sp, #104]	; 0x68
 80070a0:	4654      	mov	r4, sl
 80070a2:	2205      	movs	r2, #5
 80070a4:	f814 1b01 	ldrb.w	r1, [r4], #1
 80070a8:	4851      	ldr	r0, [pc, #324]	; (80071f0 <_svfiprintf_r+0x1ec>)
 80070aa:	f7ff f9c7 	bl	800643c <memchr>
 80070ae:	9a04      	ldr	r2, [sp, #16]
 80070b0:	b9d8      	cbnz	r0, 80070ea <_svfiprintf_r+0xe6>
 80070b2:	06d0      	lsls	r0, r2, #27
 80070b4:	bf44      	itt	mi
 80070b6:	2320      	movmi	r3, #32
 80070b8:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80070bc:	0711      	lsls	r1, r2, #28
 80070be:	bf44      	itt	mi
 80070c0:	232b      	movmi	r3, #43	; 0x2b
 80070c2:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80070c6:	f89a 3000 	ldrb.w	r3, [sl]
 80070ca:	2b2a      	cmp	r3, #42	; 0x2a
 80070cc:	d015      	beq.n	80070fa <_svfiprintf_r+0xf6>
 80070ce:	4654      	mov	r4, sl
 80070d0:	2000      	movs	r0, #0
 80070d2:	f04f 0c0a 	mov.w	ip, #10
 80070d6:	9a07      	ldr	r2, [sp, #28]
 80070d8:	4621      	mov	r1, r4
 80070da:	f811 3b01 	ldrb.w	r3, [r1], #1
 80070de:	3b30      	subs	r3, #48	; 0x30
 80070e0:	2b09      	cmp	r3, #9
 80070e2:	d94e      	bls.n	8007182 <_svfiprintf_r+0x17e>
 80070e4:	b1b0      	cbz	r0, 8007114 <_svfiprintf_r+0x110>
 80070e6:	9207      	str	r2, [sp, #28]
 80070e8:	e014      	b.n	8007114 <_svfiprintf_r+0x110>
 80070ea:	eba0 0308 	sub.w	r3, r0, r8
 80070ee:	fa09 f303 	lsl.w	r3, r9, r3
 80070f2:	4313      	orrs	r3, r2
 80070f4:	46a2      	mov	sl, r4
 80070f6:	9304      	str	r3, [sp, #16]
 80070f8:	e7d2      	b.n	80070a0 <_svfiprintf_r+0x9c>
 80070fa:	9b03      	ldr	r3, [sp, #12]
 80070fc:	1d19      	adds	r1, r3, #4
 80070fe:	681b      	ldr	r3, [r3, #0]
 8007100:	9103      	str	r1, [sp, #12]
 8007102:	2b00      	cmp	r3, #0
 8007104:	bfbb      	ittet	lt
 8007106:	425b      	neglt	r3, r3
 8007108:	f042 0202 	orrlt.w	r2, r2, #2
 800710c:	9307      	strge	r3, [sp, #28]
 800710e:	9307      	strlt	r3, [sp, #28]
 8007110:	bfb8      	it	lt
 8007112:	9204      	strlt	r2, [sp, #16]
 8007114:	7823      	ldrb	r3, [r4, #0]
 8007116:	2b2e      	cmp	r3, #46	; 0x2e
 8007118:	d10c      	bne.n	8007134 <_svfiprintf_r+0x130>
 800711a:	7863      	ldrb	r3, [r4, #1]
 800711c:	2b2a      	cmp	r3, #42	; 0x2a
 800711e:	d135      	bne.n	800718c <_svfiprintf_r+0x188>
 8007120:	9b03      	ldr	r3, [sp, #12]
 8007122:	3402      	adds	r4, #2
 8007124:	1d1a      	adds	r2, r3, #4
 8007126:	681b      	ldr	r3, [r3, #0]
 8007128:	9203      	str	r2, [sp, #12]
 800712a:	2b00      	cmp	r3, #0
 800712c:	bfb8      	it	lt
 800712e:	f04f 33ff 	movlt.w	r3, #4294967295
 8007132:	9305      	str	r3, [sp, #20]
 8007134:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8007200 <_svfiprintf_r+0x1fc>
 8007138:	2203      	movs	r2, #3
 800713a:	4650      	mov	r0, sl
 800713c:	7821      	ldrb	r1, [r4, #0]
 800713e:	f7ff f97d 	bl	800643c <memchr>
 8007142:	b140      	cbz	r0, 8007156 <_svfiprintf_r+0x152>
 8007144:	2340      	movs	r3, #64	; 0x40
 8007146:	eba0 000a 	sub.w	r0, r0, sl
 800714a:	fa03 f000 	lsl.w	r0, r3, r0
 800714e:	9b04      	ldr	r3, [sp, #16]
 8007150:	3401      	adds	r4, #1
 8007152:	4303      	orrs	r3, r0
 8007154:	9304      	str	r3, [sp, #16]
 8007156:	f814 1b01 	ldrb.w	r1, [r4], #1
 800715a:	2206      	movs	r2, #6
 800715c:	4825      	ldr	r0, [pc, #148]	; (80071f4 <_svfiprintf_r+0x1f0>)
 800715e:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8007162:	f7ff f96b 	bl	800643c <memchr>
 8007166:	2800      	cmp	r0, #0
 8007168:	d038      	beq.n	80071dc <_svfiprintf_r+0x1d8>
 800716a:	4b23      	ldr	r3, [pc, #140]	; (80071f8 <_svfiprintf_r+0x1f4>)
 800716c:	bb1b      	cbnz	r3, 80071b6 <_svfiprintf_r+0x1b2>
 800716e:	9b03      	ldr	r3, [sp, #12]
 8007170:	3307      	adds	r3, #7
 8007172:	f023 0307 	bic.w	r3, r3, #7
 8007176:	3308      	adds	r3, #8
 8007178:	9303      	str	r3, [sp, #12]
 800717a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800717c:	4433      	add	r3, r6
 800717e:	9309      	str	r3, [sp, #36]	; 0x24
 8007180:	e767      	b.n	8007052 <_svfiprintf_r+0x4e>
 8007182:	460c      	mov	r4, r1
 8007184:	2001      	movs	r0, #1
 8007186:	fb0c 3202 	mla	r2, ip, r2, r3
 800718a:	e7a5      	b.n	80070d8 <_svfiprintf_r+0xd4>
 800718c:	2300      	movs	r3, #0
 800718e:	f04f 0c0a 	mov.w	ip, #10
 8007192:	4619      	mov	r1, r3
 8007194:	3401      	adds	r4, #1
 8007196:	9305      	str	r3, [sp, #20]
 8007198:	4620      	mov	r0, r4
 800719a:	f810 2b01 	ldrb.w	r2, [r0], #1
 800719e:	3a30      	subs	r2, #48	; 0x30
 80071a0:	2a09      	cmp	r2, #9
 80071a2:	d903      	bls.n	80071ac <_svfiprintf_r+0x1a8>
 80071a4:	2b00      	cmp	r3, #0
 80071a6:	d0c5      	beq.n	8007134 <_svfiprintf_r+0x130>
 80071a8:	9105      	str	r1, [sp, #20]
 80071aa:	e7c3      	b.n	8007134 <_svfiprintf_r+0x130>
 80071ac:	4604      	mov	r4, r0
 80071ae:	2301      	movs	r3, #1
 80071b0:	fb0c 2101 	mla	r1, ip, r1, r2
 80071b4:	e7f0      	b.n	8007198 <_svfiprintf_r+0x194>
 80071b6:	ab03      	add	r3, sp, #12
 80071b8:	9300      	str	r3, [sp, #0]
 80071ba:	462a      	mov	r2, r5
 80071bc:	4638      	mov	r0, r7
 80071be:	4b0f      	ldr	r3, [pc, #60]	; (80071fc <_svfiprintf_r+0x1f8>)
 80071c0:	a904      	add	r1, sp, #16
 80071c2:	f7fc fa9d 	bl	8003700 <_printf_float>
 80071c6:	1c42      	adds	r2, r0, #1
 80071c8:	4606      	mov	r6, r0
 80071ca:	d1d6      	bne.n	800717a <_svfiprintf_r+0x176>
 80071cc:	89ab      	ldrh	r3, [r5, #12]
 80071ce:	065b      	lsls	r3, r3, #25
 80071d0:	f53f af2c 	bmi.w	800702c <_svfiprintf_r+0x28>
 80071d4:	9809      	ldr	r0, [sp, #36]	; 0x24
 80071d6:	b01d      	add	sp, #116	; 0x74
 80071d8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80071dc:	ab03      	add	r3, sp, #12
 80071de:	9300      	str	r3, [sp, #0]
 80071e0:	462a      	mov	r2, r5
 80071e2:	4638      	mov	r0, r7
 80071e4:	4b05      	ldr	r3, [pc, #20]	; (80071fc <_svfiprintf_r+0x1f8>)
 80071e6:	a904      	add	r1, sp, #16
 80071e8:	f7fc fd26 	bl	8003c38 <_printf_i>
 80071ec:	e7eb      	b.n	80071c6 <_svfiprintf_r+0x1c2>
 80071ee:	bf00      	nop
 80071f0:	08008264 	.word	0x08008264
 80071f4:	0800826e 	.word	0x0800826e
 80071f8:	08003701 	.word	0x08003701
 80071fc:	08006f4d 	.word	0x08006f4d
 8007200:	0800826a 	.word	0x0800826a

08007204 <nan>:
 8007204:	2000      	movs	r0, #0
 8007206:	4901      	ldr	r1, [pc, #4]	; (800720c <nan+0x8>)
 8007208:	4770      	bx	lr
 800720a:	bf00      	nop
 800720c:	7ff80000 	.word	0x7ff80000

08007210 <_sbrk_r>:
 8007210:	b538      	push	{r3, r4, r5, lr}
 8007212:	2300      	movs	r3, #0
 8007214:	4d05      	ldr	r5, [pc, #20]	; (800722c <_sbrk_r+0x1c>)
 8007216:	4604      	mov	r4, r0
 8007218:	4608      	mov	r0, r1
 800721a:	602b      	str	r3, [r5, #0]
 800721c:	f7fa fb1c 	bl	8001858 <_sbrk>
 8007220:	1c43      	adds	r3, r0, #1
 8007222:	d102      	bne.n	800722a <_sbrk_r+0x1a>
 8007224:	682b      	ldr	r3, [r5, #0]
 8007226:	b103      	cbz	r3, 800722a <_sbrk_r+0x1a>
 8007228:	6023      	str	r3, [r4, #0]
 800722a:	bd38      	pop	{r3, r4, r5, pc}
 800722c:	200002c0 	.word	0x200002c0

08007230 <strncmp>:
 8007230:	b510      	push	{r4, lr}
 8007232:	b16a      	cbz	r2, 8007250 <strncmp+0x20>
 8007234:	3901      	subs	r1, #1
 8007236:	1884      	adds	r4, r0, r2
 8007238:	f810 3b01 	ldrb.w	r3, [r0], #1
 800723c:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 8007240:	4293      	cmp	r3, r2
 8007242:	d103      	bne.n	800724c <strncmp+0x1c>
 8007244:	42a0      	cmp	r0, r4
 8007246:	d001      	beq.n	800724c <strncmp+0x1c>
 8007248:	2b00      	cmp	r3, #0
 800724a:	d1f5      	bne.n	8007238 <strncmp+0x8>
 800724c:	1a98      	subs	r0, r3, r2
 800724e:	bd10      	pop	{r4, pc}
 8007250:	4610      	mov	r0, r2
 8007252:	e7fc      	b.n	800724e <strncmp+0x1e>

08007254 <__ascii_wctomb>:
 8007254:	4603      	mov	r3, r0
 8007256:	4608      	mov	r0, r1
 8007258:	b141      	cbz	r1, 800726c <__ascii_wctomb+0x18>
 800725a:	2aff      	cmp	r2, #255	; 0xff
 800725c:	d904      	bls.n	8007268 <__ascii_wctomb+0x14>
 800725e:	228a      	movs	r2, #138	; 0x8a
 8007260:	f04f 30ff 	mov.w	r0, #4294967295
 8007264:	601a      	str	r2, [r3, #0]
 8007266:	4770      	bx	lr
 8007268:	2001      	movs	r0, #1
 800726a:	700a      	strb	r2, [r1, #0]
 800726c:	4770      	bx	lr
	...

08007270 <__assert_func>:
 8007270:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8007272:	4614      	mov	r4, r2
 8007274:	461a      	mov	r2, r3
 8007276:	4b09      	ldr	r3, [pc, #36]	; (800729c <__assert_func+0x2c>)
 8007278:	4605      	mov	r5, r0
 800727a:	681b      	ldr	r3, [r3, #0]
 800727c:	68d8      	ldr	r0, [r3, #12]
 800727e:	b14c      	cbz	r4, 8007294 <__assert_func+0x24>
 8007280:	4b07      	ldr	r3, [pc, #28]	; (80072a0 <__assert_func+0x30>)
 8007282:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8007286:	9100      	str	r1, [sp, #0]
 8007288:	462b      	mov	r3, r5
 800728a:	4906      	ldr	r1, [pc, #24]	; (80072a4 <__assert_func+0x34>)
 800728c:	f000 f80e 	bl	80072ac <fiprintf>
 8007290:	f000 fa82 	bl	8007798 <abort>
 8007294:	4b04      	ldr	r3, [pc, #16]	; (80072a8 <__assert_func+0x38>)
 8007296:	461c      	mov	r4, r3
 8007298:	e7f3      	b.n	8007282 <__assert_func+0x12>
 800729a:	bf00      	nop
 800729c:	2000000c 	.word	0x2000000c
 80072a0:	08008275 	.word	0x08008275
 80072a4:	08008282 	.word	0x08008282
 80072a8:	080082b0 	.word	0x080082b0

080072ac <fiprintf>:
 80072ac:	b40e      	push	{r1, r2, r3}
 80072ae:	b503      	push	{r0, r1, lr}
 80072b0:	4601      	mov	r1, r0
 80072b2:	ab03      	add	r3, sp, #12
 80072b4:	4805      	ldr	r0, [pc, #20]	; (80072cc <fiprintf+0x20>)
 80072b6:	f853 2b04 	ldr.w	r2, [r3], #4
 80072ba:	6800      	ldr	r0, [r0, #0]
 80072bc:	9301      	str	r3, [sp, #4]
 80072be:	f000 f87b 	bl	80073b8 <_vfiprintf_r>
 80072c2:	b002      	add	sp, #8
 80072c4:	f85d eb04 	ldr.w	lr, [sp], #4
 80072c8:	b003      	add	sp, #12
 80072ca:	4770      	bx	lr
 80072cc:	2000000c 	.word	0x2000000c

080072d0 <memmove>:
 80072d0:	4288      	cmp	r0, r1
 80072d2:	b510      	push	{r4, lr}
 80072d4:	eb01 0402 	add.w	r4, r1, r2
 80072d8:	d902      	bls.n	80072e0 <memmove+0x10>
 80072da:	4284      	cmp	r4, r0
 80072dc:	4623      	mov	r3, r4
 80072de:	d807      	bhi.n	80072f0 <memmove+0x20>
 80072e0:	1e43      	subs	r3, r0, #1
 80072e2:	42a1      	cmp	r1, r4
 80072e4:	d008      	beq.n	80072f8 <memmove+0x28>
 80072e6:	f811 2b01 	ldrb.w	r2, [r1], #1
 80072ea:	f803 2f01 	strb.w	r2, [r3, #1]!
 80072ee:	e7f8      	b.n	80072e2 <memmove+0x12>
 80072f0:	4601      	mov	r1, r0
 80072f2:	4402      	add	r2, r0
 80072f4:	428a      	cmp	r2, r1
 80072f6:	d100      	bne.n	80072fa <memmove+0x2a>
 80072f8:	bd10      	pop	{r4, pc}
 80072fa:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80072fe:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8007302:	e7f7      	b.n	80072f4 <memmove+0x24>

08007304 <__malloc_lock>:
 8007304:	4801      	ldr	r0, [pc, #4]	; (800730c <__malloc_lock+0x8>)
 8007306:	f000 bc07 	b.w	8007b18 <__retarget_lock_acquire_recursive>
 800730a:	bf00      	nop
 800730c:	200002c8 	.word	0x200002c8

08007310 <__malloc_unlock>:
 8007310:	4801      	ldr	r0, [pc, #4]	; (8007318 <__malloc_unlock+0x8>)
 8007312:	f000 bc02 	b.w	8007b1a <__retarget_lock_release_recursive>
 8007316:	bf00      	nop
 8007318:	200002c8 	.word	0x200002c8

0800731c <_realloc_r>:
 800731c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800731e:	4607      	mov	r7, r0
 8007320:	4614      	mov	r4, r2
 8007322:	460e      	mov	r6, r1
 8007324:	b921      	cbnz	r1, 8007330 <_realloc_r+0x14>
 8007326:	4611      	mov	r1, r2
 8007328:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 800732c:	f7ff bdb4 	b.w	8006e98 <_malloc_r>
 8007330:	b922      	cbnz	r2, 800733c <_realloc_r+0x20>
 8007332:	f7ff fd65 	bl	8006e00 <_free_r>
 8007336:	4625      	mov	r5, r4
 8007338:	4628      	mov	r0, r5
 800733a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800733c:	f000 fc52 	bl	8007be4 <_malloc_usable_size_r>
 8007340:	42a0      	cmp	r0, r4
 8007342:	d20f      	bcs.n	8007364 <_realloc_r+0x48>
 8007344:	4621      	mov	r1, r4
 8007346:	4638      	mov	r0, r7
 8007348:	f7ff fda6 	bl	8006e98 <_malloc_r>
 800734c:	4605      	mov	r5, r0
 800734e:	2800      	cmp	r0, #0
 8007350:	d0f2      	beq.n	8007338 <_realloc_r+0x1c>
 8007352:	4631      	mov	r1, r6
 8007354:	4622      	mov	r2, r4
 8007356:	f7ff f87f 	bl	8006458 <memcpy>
 800735a:	4631      	mov	r1, r6
 800735c:	4638      	mov	r0, r7
 800735e:	f7ff fd4f 	bl	8006e00 <_free_r>
 8007362:	e7e9      	b.n	8007338 <_realloc_r+0x1c>
 8007364:	4635      	mov	r5, r6
 8007366:	e7e7      	b.n	8007338 <_realloc_r+0x1c>

08007368 <__sfputc_r>:
 8007368:	6893      	ldr	r3, [r2, #8]
 800736a:	b410      	push	{r4}
 800736c:	3b01      	subs	r3, #1
 800736e:	2b00      	cmp	r3, #0
 8007370:	6093      	str	r3, [r2, #8]
 8007372:	da07      	bge.n	8007384 <__sfputc_r+0x1c>
 8007374:	6994      	ldr	r4, [r2, #24]
 8007376:	42a3      	cmp	r3, r4
 8007378:	db01      	blt.n	800737e <__sfputc_r+0x16>
 800737a:	290a      	cmp	r1, #10
 800737c:	d102      	bne.n	8007384 <__sfputc_r+0x1c>
 800737e:	bc10      	pop	{r4}
 8007380:	f000 b94a 	b.w	8007618 <__swbuf_r>
 8007384:	6813      	ldr	r3, [r2, #0]
 8007386:	1c58      	adds	r0, r3, #1
 8007388:	6010      	str	r0, [r2, #0]
 800738a:	7019      	strb	r1, [r3, #0]
 800738c:	4608      	mov	r0, r1
 800738e:	bc10      	pop	{r4}
 8007390:	4770      	bx	lr

08007392 <__sfputs_r>:
 8007392:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007394:	4606      	mov	r6, r0
 8007396:	460f      	mov	r7, r1
 8007398:	4614      	mov	r4, r2
 800739a:	18d5      	adds	r5, r2, r3
 800739c:	42ac      	cmp	r4, r5
 800739e:	d101      	bne.n	80073a4 <__sfputs_r+0x12>
 80073a0:	2000      	movs	r0, #0
 80073a2:	e007      	b.n	80073b4 <__sfputs_r+0x22>
 80073a4:	463a      	mov	r2, r7
 80073a6:	4630      	mov	r0, r6
 80073a8:	f814 1b01 	ldrb.w	r1, [r4], #1
 80073ac:	f7ff ffdc 	bl	8007368 <__sfputc_r>
 80073b0:	1c43      	adds	r3, r0, #1
 80073b2:	d1f3      	bne.n	800739c <__sfputs_r+0xa>
 80073b4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

080073b8 <_vfiprintf_r>:
 80073b8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80073bc:	460d      	mov	r5, r1
 80073be:	4614      	mov	r4, r2
 80073c0:	4698      	mov	r8, r3
 80073c2:	4606      	mov	r6, r0
 80073c4:	b09d      	sub	sp, #116	; 0x74
 80073c6:	b118      	cbz	r0, 80073d0 <_vfiprintf_r+0x18>
 80073c8:	6983      	ldr	r3, [r0, #24]
 80073ca:	b90b      	cbnz	r3, 80073d0 <_vfiprintf_r+0x18>
 80073cc:	f000 fb06 	bl	80079dc <__sinit>
 80073d0:	4b89      	ldr	r3, [pc, #548]	; (80075f8 <_vfiprintf_r+0x240>)
 80073d2:	429d      	cmp	r5, r3
 80073d4:	d11b      	bne.n	800740e <_vfiprintf_r+0x56>
 80073d6:	6875      	ldr	r5, [r6, #4]
 80073d8:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80073da:	07d9      	lsls	r1, r3, #31
 80073dc:	d405      	bmi.n	80073ea <_vfiprintf_r+0x32>
 80073de:	89ab      	ldrh	r3, [r5, #12]
 80073e0:	059a      	lsls	r2, r3, #22
 80073e2:	d402      	bmi.n	80073ea <_vfiprintf_r+0x32>
 80073e4:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80073e6:	f000 fb97 	bl	8007b18 <__retarget_lock_acquire_recursive>
 80073ea:	89ab      	ldrh	r3, [r5, #12]
 80073ec:	071b      	lsls	r3, r3, #28
 80073ee:	d501      	bpl.n	80073f4 <_vfiprintf_r+0x3c>
 80073f0:	692b      	ldr	r3, [r5, #16]
 80073f2:	b9eb      	cbnz	r3, 8007430 <_vfiprintf_r+0x78>
 80073f4:	4629      	mov	r1, r5
 80073f6:	4630      	mov	r0, r6
 80073f8:	f000 f960 	bl	80076bc <__swsetup_r>
 80073fc:	b1c0      	cbz	r0, 8007430 <_vfiprintf_r+0x78>
 80073fe:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8007400:	07dc      	lsls	r4, r3, #31
 8007402:	d50e      	bpl.n	8007422 <_vfiprintf_r+0x6a>
 8007404:	f04f 30ff 	mov.w	r0, #4294967295
 8007408:	b01d      	add	sp, #116	; 0x74
 800740a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800740e:	4b7b      	ldr	r3, [pc, #492]	; (80075fc <_vfiprintf_r+0x244>)
 8007410:	429d      	cmp	r5, r3
 8007412:	d101      	bne.n	8007418 <_vfiprintf_r+0x60>
 8007414:	68b5      	ldr	r5, [r6, #8]
 8007416:	e7df      	b.n	80073d8 <_vfiprintf_r+0x20>
 8007418:	4b79      	ldr	r3, [pc, #484]	; (8007600 <_vfiprintf_r+0x248>)
 800741a:	429d      	cmp	r5, r3
 800741c:	bf08      	it	eq
 800741e:	68f5      	ldreq	r5, [r6, #12]
 8007420:	e7da      	b.n	80073d8 <_vfiprintf_r+0x20>
 8007422:	89ab      	ldrh	r3, [r5, #12]
 8007424:	0598      	lsls	r0, r3, #22
 8007426:	d4ed      	bmi.n	8007404 <_vfiprintf_r+0x4c>
 8007428:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800742a:	f000 fb76 	bl	8007b1a <__retarget_lock_release_recursive>
 800742e:	e7e9      	b.n	8007404 <_vfiprintf_r+0x4c>
 8007430:	2300      	movs	r3, #0
 8007432:	9309      	str	r3, [sp, #36]	; 0x24
 8007434:	2320      	movs	r3, #32
 8007436:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800743a:	2330      	movs	r3, #48	; 0x30
 800743c:	f04f 0901 	mov.w	r9, #1
 8007440:	f8cd 800c 	str.w	r8, [sp, #12]
 8007444:	f8df 81bc 	ldr.w	r8, [pc, #444]	; 8007604 <_vfiprintf_r+0x24c>
 8007448:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800744c:	4623      	mov	r3, r4
 800744e:	469a      	mov	sl, r3
 8007450:	f813 2b01 	ldrb.w	r2, [r3], #1
 8007454:	b10a      	cbz	r2, 800745a <_vfiprintf_r+0xa2>
 8007456:	2a25      	cmp	r2, #37	; 0x25
 8007458:	d1f9      	bne.n	800744e <_vfiprintf_r+0x96>
 800745a:	ebba 0b04 	subs.w	fp, sl, r4
 800745e:	d00b      	beq.n	8007478 <_vfiprintf_r+0xc0>
 8007460:	465b      	mov	r3, fp
 8007462:	4622      	mov	r2, r4
 8007464:	4629      	mov	r1, r5
 8007466:	4630      	mov	r0, r6
 8007468:	f7ff ff93 	bl	8007392 <__sfputs_r>
 800746c:	3001      	adds	r0, #1
 800746e:	f000 80aa 	beq.w	80075c6 <_vfiprintf_r+0x20e>
 8007472:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8007474:	445a      	add	r2, fp
 8007476:	9209      	str	r2, [sp, #36]	; 0x24
 8007478:	f89a 3000 	ldrb.w	r3, [sl]
 800747c:	2b00      	cmp	r3, #0
 800747e:	f000 80a2 	beq.w	80075c6 <_vfiprintf_r+0x20e>
 8007482:	2300      	movs	r3, #0
 8007484:	f04f 32ff 	mov.w	r2, #4294967295
 8007488:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800748c:	f10a 0a01 	add.w	sl, sl, #1
 8007490:	9304      	str	r3, [sp, #16]
 8007492:	9307      	str	r3, [sp, #28]
 8007494:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8007498:	931a      	str	r3, [sp, #104]	; 0x68
 800749a:	4654      	mov	r4, sl
 800749c:	2205      	movs	r2, #5
 800749e:	f814 1b01 	ldrb.w	r1, [r4], #1
 80074a2:	4858      	ldr	r0, [pc, #352]	; (8007604 <_vfiprintf_r+0x24c>)
 80074a4:	f7fe ffca 	bl	800643c <memchr>
 80074a8:	9a04      	ldr	r2, [sp, #16]
 80074aa:	b9d8      	cbnz	r0, 80074e4 <_vfiprintf_r+0x12c>
 80074ac:	06d1      	lsls	r1, r2, #27
 80074ae:	bf44      	itt	mi
 80074b0:	2320      	movmi	r3, #32
 80074b2:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80074b6:	0713      	lsls	r3, r2, #28
 80074b8:	bf44      	itt	mi
 80074ba:	232b      	movmi	r3, #43	; 0x2b
 80074bc:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80074c0:	f89a 3000 	ldrb.w	r3, [sl]
 80074c4:	2b2a      	cmp	r3, #42	; 0x2a
 80074c6:	d015      	beq.n	80074f4 <_vfiprintf_r+0x13c>
 80074c8:	4654      	mov	r4, sl
 80074ca:	2000      	movs	r0, #0
 80074cc:	f04f 0c0a 	mov.w	ip, #10
 80074d0:	9a07      	ldr	r2, [sp, #28]
 80074d2:	4621      	mov	r1, r4
 80074d4:	f811 3b01 	ldrb.w	r3, [r1], #1
 80074d8:	3b30      	subs	r3, #48	; 0x30
 80074da:	2b09      	cmp	r3, #9
 80074dc:	d94e      	bls.n	800757c <_vfiprintf_r+0x1c4>
 80074de:	b1b0      	cbz	r0, 800750e <_vfiprintf_r+0x156>
 80074e0:	9207      	str	r2, [sp, #28]
 80074e2:	e014      	b.n	800750e <_vfiprintf_r+0x156>
 80074e4:	eba0 0308 	sub.w	r3, r0, r8
 80074e8:	fa09 f303 	lsl.w	r3, r9, r3
 80074ec:	4313      	orrs	r3, r2
 80074ee:	46a2      	mov	sl, r4
 80074f0:	9304      	str	r3, [sp, #16]
 80074f2:	e7d2      	b.n	800749a <_vfiprintf_r+0xe2>
 80074f4:	9b03      	ldr	r3, [sp, #12]
 80074f6:	1d19      	adds	r1, r3, #4
 80074f8:	681b      	ldr	r3, [r3, #0]
 80074fa:	9103      	str	r1, [sp, #12]
 80074fc:	2b00      	cmp	r3, #0
 80074fe:	bfbb      	ittet	lt
 8007500:	425b      	neglt	r3, r3
 8007502:	f042 0202 	orrlt.w	r2, r2, #2
 8007506:	9307      	strge	r3, [sp, #28]
 8007508:	9307      	strlt	r3, [sp, #28]
 800750a:	bfb8      	it	lt
 800750c:	9204      	strlt	r2, [sp, #16]
 800750e:	7823      	ldrb	r3, [r4, #0]
 8007510:	2b2e      	cmp	r3, #46	; 0x2e
 8007512:	d10c      	bne.n	800752e <_vfiprintf_r+0x176>
 8007514:	7863      	ldrb	r3, [r4, #1]
 8007516:	2b2a      	cmp	r3, #42	; 0x2a
 8007518:	d135      	bne.n	8007586 <_vfiprintf_r+0x1ce>
 800751a:	9b03      	ldr	r3, [sp, #12]
 800751c:	3402      	adds	r4, #2
 800751e:	1d1a      	adds	r2, r3, #4
 8007520:	681b      	ldr	r3, [r3, #0]
 8007522:	9203      	str	r2, [sp, #12]
 8007524:	2b00      	cmp	r3, #0
 8007526:	bfb8      	it	lt
 8007528:	f04f 33ff 	movlt.w	r3, #4294967295
 800752c:	9305      	str	r3, [sp, #20]
 800752e:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8007614 <_vfiprintf_r+0x25c>
 8007532:	2203      	movs	r2, #3
 8007534:	4650      	mov	r0, sl
 8007536:	7821      	ldrb	r1, [r4, #0]
 8007538:	f7fe ff80 	bl	800643c <memchr>
 800753c:	b140      	cbz	r0, 8007550 <_vfiprintf_r+0x198>
 800753e:	2340      	movs	r3, #64	; 0x40
 8007540:	eba0 000a 	sub.w	r0, r0, sl
 8007544:	fa03 f000 	lsl.w	r0, r3, r0
 8007548:	9b04      	ldr	r3, [sp, #16]
 800754a:	3401      	adds	r4, #1
 800754c:	4303      	orrs	r3, r0
 800754e:	9304      	str	r3, [sp, #16]
 8007550:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007554:	2206      	movs	r2, #6
 8007556:	482c      	ldr	r0, [pc, #176]	; (8007608 <_vfiprintf_r+0x250>)
 8007558:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800755c:	f7fe ff6e 	bl	800643c <memchr>
 8007560:	2800      	cmp	r0, #0
 8007562:	d03f      	beq.n	80075e4 <_vfiprintf_r+0x22c>
 8007564:	4b29      	ldr	r3, [pc, #164]	; (800760c <_vfiprintf_r+0x254>)
 8007566:	bb1b      	cbnz	r3, 80075b0 <_vfiprintf_r+0x1f8>
 8007568:	9b03      	ldr	r3, [sp, #12]
 800756a:	3307      	adds	r3, #7
 800756c:	f023 0307 	bic.w	r3, r3, #7
 8007570:	3308      	adds	r3, #8
 8007572:	9303      	str	r3, [sp, #12]
 8007574:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007576:	443b      	add	r3, r7
 8007578:	9309      	str	r3, [sp, #36]	; 0x24
 800757a:	e767      	b.n	800744c <_vfiprintf_r+0x94>
 800757c:	460c      	mov	r4, r1
 800757e:	2001      	movs	r0, #1
 8007580:	fb0c 3202 	mla	r2, ip, r2, r3
 8007584:	e7a5      	b.n	80074d2 <_vfiprintf_r+0x11a>
 8007586:	2300      	movs	r3, #0
 8007588:	f04f 0c0a 	mov.w	ip, #10
 800758c:	4619      	mov	r1, r3
 800758e:	3401      	adds	r4, #1
 8007590:	9305      	str	r3, [sp, #20]
 8007592:	4620      	mov	r0, r4
 8007594:	f810 2b01 	ldrb.w	r2, [r0], #1
 8007598:	3a30      	subs	r2, #48	; 0x30
 800759a:	2a09      	cmp	r2, #9
 800759c:	d903      	bls.n	80075a6 <_vfiprintf_r+0x1ee>
 800759e:	2b00      	cmp	r3, #0
 80075a0:	d0c5      	beq.n	800752e <_vfiprintf_r+0x176>
 80075a2:	9105      	str	r1, [sp, #20]
 80075a4:	e7c3      	b.n	800752e <_vfiprintf_r+0x176>
 80075a6:	4604      	mov	r4, r0
 80075a8:	2301      	movs	r3, #1
 80075aa:	fb0c 2101 	mla	r1, ip, r1, r2
 80075ae:	e7f0      	b.n	8007592 <_vfiprintf_r+0x1da>
 80075b0:	ab03      	add	r3, sp, #12
 80075b2:	9300      	str	r3, [sp, #0]
 80075b4:	462a      	mov	r2, r5
 80075b6:	4630      	mov	r0, r6
 80075b8:	4b15      	ldr	r3, [pc, #84]	; (8007610 <_vfiprintf_r+0x258>)
 80075ba:	a904      	add	r1, sp, #16
 80075bc:	f7fc f8a0 	bl	8003700 <_printf_float>
 80075c0:	4607      	mov	r7, r0
 80075c2:	1c78      	adds	r0, r7, #1
 80075c4:	d1d6      	bne.n	8007574 <_vfiprintf_r+0x1bc>
 80075c6:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80075c8:	07d9      	lsls	r1, r3, #31
 80075ca:	d405      	bmi.n	80075d8 <_vfiprintf_r+0x220>
 80075cc:	89ab      	ldrh	r3, [r5, #12]
 80075ce:	059a      	lsls	r2, r3, #22
 80075d0:	d402      	bmi.n	80075d8 <_vfiprintf_r+0x220>
 80075d2:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80075d4:	f000 faa1 	bl	8007b1a <__retarget_lock_release_recursive>
 80075d8:	89ab      	ldrh	r3, [r5, #12]
 80075da:	065b      	lsls	r3, r3, #25
 80075dc:	f53f af12 	bmi.w	8007404 <_vfiprintf_r+0x4c>
 80075e0:	9809      	ldr	r0, [sp, #36]	; 0x24
 80075e2:	e711      	b.n	8007408 <_vfiprintf_r+0x50>
 80075e4:	ab03      	add	r3, sp, #12
 80075e6:	9300      	str	r3, [sp, #0]
 80075e8:	462a      	mov	r2, r5
 80075ea:	4630      	mov	r0, r6
 80075ec:	4b08      	ldr	r3, [pc, #32]	; (8007610 <_vfiprintf_r+0x258>)
 80075ee:	a904      	add	r1, sp, #16
 80075f0:	f7fc fb22 	bl	8003c38 <_printf_i>
 80075f4:	e7e4      	b.n	80075c0 <_vfiprintf_r+0x208>
 80075f6:	bf00      	nop
 80075f8:	080082d4 	.word	0x080082d4
 80075fc:	080082f4 	.word	0x080082f4
 8007600:	080082b4 	.word	0x080082b4
 8007604:	08008264 	.word	0x08008264
 8007608:	0800826e 	.word	0x0800826e
 800760c:	08003701 	.word	0x08003701
 8007610:	08007393 	.word	0x08007393
 8007614:	0800826a 	.word	0x0800826a

08007618 <__swbuf_r>:
 8007618:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800761a:	460e      	mov	r6, r1
 800761c:	4614      	mov	r4, r2
 800761e:	4605      	mov	r5, r0
 8007620:	b118      	cbz	r0, 800762a <__swbuf_r+0x12>
 8007622:	6983      	ldr	r3, [r0, #24]
 8007624:	b90b      	cbnz	r3, 800762a <__swbuf_r+0x12>
 8007626:	f000 f9d9 	bl	80079dc <__sinit>
 800762a:	4b21      	ldr	r3, [pc, #132]	; (80076b0 <__swbuf_r+0x98>)
 800762c:	429c      	cmp	r4, r3
 800762e:	d12b      	bne.n	8007688 <__swbuf_r+0x70>
 8007630:	686c      	ldr	r4, [r5, #4]
 8007632:	69a3      	ldr	r3, [r4, #24]
 8007634:	60a3      	str	r3, [r4, #8]
 8007636:	89a3      	ldrh	r3, [r4, #12]
 8007638:	071a      	lsls	r2, r3, #28
 800763a:	d52f      	bpl.n	800769c <__swbuf_r+0x84>
 800763c:	6923      	ldr	r3, [r4, #16]
 800763e:	b36b      	cbz	r3, 800769c <__swbuf_r+0x84>
 8007640:	6923      	ldr	r3, [r4, #16]
 8007642:	6820      	ldr	r0, [r4, #0]
 8007644:	b2f6      	uxtb	r6, r6
 8007646:	1ac0      	subs	r0, r0, r3
 8007648:	6963      	ldr	r3, [r4, #20]
 800764a:	4637      	mov	r7, r6
 800764c:	4283      	cmp	r3, r0
 800764e:	dc04      	bgt.n	800765a <__swbuf_r+0x42>
 8007650:	4621      	mov	r1, r4
 8007652:	4628      	mov	r0, r5
 8007654:	f000 f92e 	bl	80078b4 <_fflush_r>
 8007658:	bb30      	cbnz	r0, 80076a8 <__swbuf_r+0x90>
 800765a:	68a3      	ldr	r3, [r4, #8]
 800765c:	3001      	adds	r0, #1
 800765e:	3b01      	subs	r3, #1
 8007660:	60a3      	str	r3, [r4, #8]
 8007662:	6823      	ldr	r3, [r4, #0]
 8007664:	1c5a      	adds	r2, r3, #1
 8007666:	6022      	str	r2, [r4, #0]
 8007668:	701e      	strb	r6, [r3, #0]
 800766a:	6963      	ldr	r3, [r4, #20]
 800766c:	4283      	cmp	r3, r0
 800766e:	d004      	beq.n	800767a <__swbuf_r+0x62>
 8007670:	89a3      	ldrh	r3, [r4, #12]
 8007672:	07db      	lsls	r3, r3, #31
 8007674:	d506      	bpl.n	8007684 <__swbuf_r+0x6c>
 8007676:	2e0a      	cmp	r6, #10
 8007678:	d104      	bne.n	8007684 <__swbuf_r+0x6c>
 800767a:	4621      	mov	r1, r4
 800767c:	4628      	mov	r0, r5
 800767e:	f000 f919 	bl	80078b4 <_fflush_r>
 8007682:	b988      	cbnz	r0, 80076a8 <__swbuf_r+0x90>
 8007684:	4638      	mov	r0, r7
 8007686:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8007688:	4b0a      	ldr	r3, [pc, #40]	; (80076b4 <__swbuf_r+0x9c>)
 800768a:	429c      	cmp	r4, r3
 800768c:	d101      	bne.n	8007692 <__swbuf_r+0x7a>
 800768e:	68ac      	ldr	r4, [r5, #8]
 8007690:	e7cf      	b.n	8007632 <__swbuf_r+0x1a>
 8007692:	4b09      	ldr	r3, [pc, #36]	; (80076b8 <__swbuf_r+0xa0>)
 8007694:	429c      	cmp	r4, r3
 8007696:	bf08      	it	eq
 8007698:	68ec      	ldreq	r4, [r5, #12]
 800769a:	e7ca      	b.n	8007632 <__swbuf_r+0x1a>
 800769c:	4621      	mov	r1, r4
 800769e:	4628      	mov	r0, r5
 80076a0:	f000 f80c 	bl	80076bc <__swsetup_r>
 80076a4:	2800      	cmp	r0, #0
 80076a6:	d0cb      	beq.n	8007640 <__swbuf_r+0x28>
 80076a8:	f04f 37ff 	mov.w	r7, #4294967295
 80076ac:	e7ea      	b.n	8007684 <__swbuf_r+0x6c>
 80076ae:	bf00      	nop
 80076b0:	080082d4 	.word	0x080082d4
 80076b4:	080082f4 	.word	0x080082f4
 80076b8:	080082b4 	.word	0x080082b4

080076bc <__swsetup_r>:
 80076bc:	4b32      	ldr	r3, [pc, #200]	; (8007788 <__swsetup_r+0xcc>)
 80076be:	b570      	push	{r4, r5, r6, lr}
 80076c0:	681d      	ldr	r5, [r3, #0]
 80076c2:	4606      	mov	r6, r0
 80076c4:	460c      	mov	r4, r1
 80076c6:	b125      	cbz	r5, 80076d2 <__swsetup_r+0x16>
 80076c8:	69ab      	ldr	r3, [r5, #24]
 80076ca:	b913      	cbnz	r3, 80076d2 <__swsetup_r+0x16>
 80076cc:	4628      	mov	r0, r5
 80076ce:	f000 f985 	bl	80079dc <__sinit>
 80076d2:	4b2e      	ldr	r3, [pc, #184]	; (800778c <__swsetup_r+0xd0>)
 80076d4:	429c      	cmp	r4, r3
 80076d6:	d10f      	bne.n	80076f8 <__swsetup_r+0x3c>
 80076d8:	686c      	ldr	r4, [r5, #4]
 80076da:	89a3      	ldrh	r3, [r4, #12]
 80076dc:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80076e0:	0719      	lsls	r1, r3, #28
 80076e2:	d42c      	bmi.n	800773e <__swsetup_r+0x82>
 80076e4:	06dd      	lsls	r5, r3, #27
 80076e6:	d411      	bmi.n	800770c <__swsetup_r+0x50>
 80076e8:	2309      	movs	r3, #9
 80076ea:	6033      	str	r3, [r6, #0]
 80076ec:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 80076f0:	f04f 30ff 	mov.w	r0, #4294967295
 80076f4:	81a3      	strh	r3, [r4, #12]
 80076f6:	e03e      	b.n	8007776 <__swsetup_r+0xba>
 80076f8:	4b25      	ldr	r3, [pc, #148]	; (8007790 <__swsetup_r+0xd4>)
 80076fa:	429c      	cmp	r4, r3
 80076fc:	d101      	bne.n	8007702 <__swsetup_r+0x46>
 80076fe:	68ac      	ldr	r4, [r5, #8]
 8007700:	e7eb      	b.n	80076da <__swsetup_r+0x1e>
 8007702:	4b24      	ldr	r3, [pc, #144]	; (8007794 <__swsetup_r+0xd8>)
 8007704:	429c      	cmp	r4, r3
 8007706:	bf08      	it	eq
 8007708:	68ec      	ldreq	r4, [r5, #12]
 800770a:	e7e6      	b.n	80076da <__swsetup_r+0x1e>
 800770c:	0758      	lsls	r0, r3, #29
 800770e:	d512      	bpl.n	8007736 <__swsetup_r+0x7a>
 8007710:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8007712:	b141      	cbz	r1, 8007726 <__swsetup_r+0x6a>
 8007714:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8007718:	4299      	cmp	r1, r3
 800771a:	d002      	beq.n	8007722 <__swsetup_r+0x66>
 800771c:	4630      	mov	r0, r6
 800771e:	f7ff fb6f 	bl	8006e00 <_free_r>
 8007722:	2300      	movs	r3, #0
 8007724:	6363      	str	r3, [r4, #52]	; 0x34
 8007726:	89a3      	ldrh	r3, [r4, #12]
 8007728:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800772c:	81a3      	strh	r3, [r4, #12]
 800772e:	2300      	movs	r3, #0
 8007730:	6063      	str	r3, [r4, #4]
 8007732:	6923      	ldr	r3, [r4, #16]
 8007734:	6023      	str	r3, [r4, #0]
 8007736:	89a3      	ldrh	r3, [r4, #12]
 8007738:	f043 0308 	orr.w	r3, r3, #8
 800773c:	81a3      	strh	r3, [r4, #12]
 800773e:	6923      	ldr	r3, [r4, #16]
 8007740:	b94b      	cbnz	r3, 8007756 <__swsetup_r+0x9a>
 8007742:	89a3      	ldrh	r3, [r4, #12]
 8007744:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8007748:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800774c:	d003      	beq.n	8007756 <__swsetup_r+0x9a>
 800774e:	4621      	mov	r1, r4
 8007750:	4630      	mov	r0, r6
 8007752:	f000 fa07 	bl	8007b64 <__smakebuf_r>
 8007756:	89a0      	ldrh	r0, [r4, #12]
 8007758:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800775c:	f010 0301 	ands.w	r3, r0, #1
 8007760:	d00a      	beq.n	8007778 <__swsetup_r+0xbc>
 8007762:	2300      	movs	r3, #0
 8007764:	60a3      	str	r3, [r4, #8]
 8007766:	6963      	ldr	r3, [r4, #20]
 8007768:	425b      	negs	r3, r3
 800776a:	61a3      	str	r3, [r4, #24]
 800776c:	6923      	ldr	r3, [r4, #16]
 800776e:	b943      	cbnz	r3, 8007782 <__swsetup_r+0xc6>
 8007770:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8007774:	d1ba      	bne.n	80076ec <__swsetup_r+0x30>
 8007776:	bd70      	pop	{r4, r5, r6, pc}
 8007778:	0781      	lsls	r1, r0, #30
 800777a:	bf58      	it	pl
 800777c:	6963      	ldrpl	r3, [r4, #20]
 800777e:	60a3      	str	r3, [r4, #8]
 8007780:	e7f4      	b.n	800776c <__swsetup_r+0xb0>
 8007782:	2000      	movs	r0, #0
 8007784:	e7f7      	b.n	8007776 <__swsetup_r+0xba>
 8007786:	bf00      	nop
 8007788:	2000000c 	.word	0x2000000c
 800778c:	080082d4 	.word	0x080082d4
 8007790:	080082f4 	.word	0x080082f4
 8007794:	080082b4 	.word	0x080082b4

08007798 <abort>:
 8007798:	2006      	movs	r0, #6
 800779a:	b508      	push	{r3, lr}
 800779c:	f000 fa52 	bl	8007c44 <raise>
 80077a0:	2001      	movs	r0, #1
 80077a2:	f7f9 ffe5 	bl	8001770 <_exit>
	...

080077a8 <__sflush_r>:
 80077a8:	898a      	ldrh	r2, [r1, #12]
 80077aa:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80077ae:	4605      	mov	r5, r0
 80077b0:	0710      	lsls	r0, r2, #28
 80077b2:	460c      	mov	r4, r1
 80077b4:	d458      	bmi.n	8007868 <__sflush_r+0xc0>
 80077b6:	684b      	ldr	r3, [r1, #4]
 80077b8:	2b00      	cmp	r3, #0
 80077ba:	dc05      	bgt.n	80077c8 <__sflush_r+0x20>
 80077bc:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 80077be:	2b00      	cmp	r3, #0
 80077c0:	dc02      	bgt.n	80077c8 <__sflush_r+0x20>
 80077c2:	2000      	movs	r0, #0
 80077c4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80077c8:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80077ca:	2e00      	cmp	r6, #0
 80077cc:	d0f9      	beq.n	80077c2 <__sflush_r+0x1a>
 80077ce:	2300      	movs	r3, #0
 80077d0:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 80077d4:	682f      	ldr	r7, [r5, #0]
 80077d6:	602b      	str	r3, [r5, #0]
 80077d8:	d032      	beq.n	8007840 <__sflush_r+0x98>
 80077da:	6d60      	ldr	r0, [r4, #84]	; 0x54
 80077dc:	89a3      	ldrh	r3, [r4, #12]
 80077de:	075a      	lsls	r2, r3, #29
 80077e0:	d505      	bpl.n	80077ee <__sflush_r+0x46>
 80077e2:	6863      	ldr	r3, [r4, #4]
 80077e4:	1ac0      	subs	r0, r0, r3
 80077e6:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80077e8:	b10b      	cbz	r3, 80077ee <__sflush_r+0x46>
 80077ea:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80077ec:	1ac0      	subs	r0, r0, r3
 80077ee:	2300      	movs	r3, #0
 80077f0:	4602      	mov	r2, r0
 80077f2:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80077f4:	4628      	mov	r0, r5
 80077f6:	6a21      	ldr	r1, [r4, #32]
 80077f8:	47b0      	blx	r6
 80077fa:	1c43      	adds	r3, r0, #1
 80077fc:	89a3      	ldrh	r3, [r4, #12]
 80077fe:	d106      	bne.n	800780e <__sflush_r+0x66>
 8007800:	6829      	ldr	r1, [r5, #0]
 8007802:	291d      	cmp	r1, #29
 8007804:	d82c      	bhi.n	8007860 <__sflush_r+0xb8>
 8007806:	4a2a      	ldr	r2, [pc, #168]	; (80078b0 <__sflush_r+0x108>)
 8007808:	40ca      	lsrs	r2, r1
 800780a:	07d6      	lsls	r6, r2, #31
 800780c:	d528      	bpl.n	8007860 <__sflush_r+0xb8>
 800780e:	2200      	movs	r2, #0
 8007810:	6062      	str	r2, [r4, #4]
 8007812:	6922      	ldr	r2, [r4, #16]
 8007814:	04d9      	lsls	r1, r3, #19
 8007816:	6022      	str	r2, [r4, #0]
 8007818:	d504      	bpl.n	8007824 <__sflush_r+0x7c>
 800781a:	1c42      	adds	r2, r0, #1
 800781c:	d101      	bne.n	8007822 <__sflush_r+0x7a>
 800781e:	682b      	ldr	r3, [r5, #0]
 8007820:	b903      	cbnz	r3, 8007824 <__sflush_r+0x7c>
 8007822:	6560      	str	r0, [r4, #84]	; 0x54
 8007824:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8007826:	602f      	str	r7, [r5, #0]
 8007828:	2900      	cmp	r1, #0
 800782a:	d0ca      	beq.n	80077c2 <__sflush_r+0x1a>
 800782c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8007830:	4299      	cmp	r1, r3
 8007832:	d002      	beq.n	800783a <__sflush_r+0x92>
 8007834:	4628      	mov	r0, r5
 8007836:	f7ff fae3 	bl	8006e00 <_free_r>
 800783a:	2000      	movs	r0, #0
 800783c:	6360      	str	r0, [r4, #52]	; 0x34
 800783e:	e7c1      	b.n	80077c4 <__sflush_r+0x1c>
 8007840:	6a21      	ldr	r1, [r4, #32]
 8007842:	2301      	movs	r3, #1
 8007844:	4628      	mov	r0, r5
 8007846:	47b0      	blx	r6
 8007848:	1c41      	adds	r1, r0, #1
 800784a:	d1c7      	bne.n	80077dc <__sflush_r+0x34>
 800784c:	682b      	ldr	r3, [r5, #0]
 800784e:	2b00      	cmp	r3, #0
 8007850:	d0c4      	beq.n	80077dc <__sflush_r+0x34>
 8007852:	2b1d      	cmp	r3, #29
 8007854:	d001      	beq.n	800785a <__sflush_r+0xb2>
 8007856:	2b16      	cmp	r3, #22
 8007858:	d101      	bne.n	800785e <__sflush_r+0xb6>
 800785a:	602f      	str	r7, [r5, #0]
 800785c:	e7b1      	b.n	80077c2 <__sflush_r+0x1a>
 800785e:	89a3      	ldrh	r3, [r4, #12]
 8007860:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007864:	81a3      	strh	r3, [r4, #12]
 8007866:	e7ad      	b.n	80077c4 <__sflush_r+0x1c>
 8007868:	690f      	ldr	r7, [r1, #16]
 800786a:	2f00      	cmp	r7, #0
 800786c:	d0a9      	beq.n	80077c2 <__sflush_r+0x1a>
 800786e:	0793      	lsls	r3, r2, #30
 8007870:	bf18      	it	ne
 8007872:	2300      	movne	r3, #0
 8007874:	680e      	ldr	r6, [r1, #0]
 8007876:	bf08      	it	eq
 8007878:	694b      	ldreq	r3, [r1, #20]
 800787a:	eba6 0807 	sub.w	r8, r6, r7
 800787e:	600f      	str	r7, [r1, #0]
 8007880:	608b      	str	r3, [r1, #8]
 8007882:	f1b8 0f00 	cmp.w	r8, #0
 8007886:	dd9c      	ble.n	80077c2 <__sflush_r+0x1a>
 8007888:	4643      	mov	r3, r8
 800788a:	463a      	mov	r2, r7
 800788c:	4628      	mov	r0, r5
 800788e:	6a21      	ldr	r1, [r4, #32]
 8007890:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8007892:	47b0      	blx	r6
 8007894:	2800      	cmp	r0, #0
 8007896:	dc06      	bgt.n	80078a6 <__sflush_r+0xfe>
 8007898:	89a3      	ldrh	r3, [r4, #12]
 800789a:	f04f 30ff 	mov.w	r0, #4294967295
 800789e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80078a2:	81a3      	strh	r3, [r4, #12]
 80078a4:	e78e      	b.n	80077c4 <__sflush_r+0x1c>
 80078a6:	4407      	add	r7, r0
 80078a8:	eba8 0800 	sub.w	r8, r8, r0
 80078ac:	e7e9      	b.n	8007882 <__sflush_r+0xda>
 80078ae:	bf00      	nop
 80078b0:	20400001 	.word	0x20400001

080078b4 <_fflush_r>:
 80078b4:	b538      	push	{r3, r4, r5, lr}
 80078b6:	690b      	ldr	r3, [r1, #16]
 80078b8:	4605      	mov	r5, r0
 80078ba:	460c      	mov	r4, r1
 80078bc:	b913      	cbnz	r3, 80078c4 <_fflush_r+0x10>
 80078be:	2500      	movs	r5, #0
 80078c0:	4628      	mov	r0, r5
 80078c2:	bd38      	pop	{r3, r4, r5, pc}
 80078c4:	b118      	cbz	r0, 80078ce <_fflush_r+0x1a>
 80078c6:	6983      	ldr	r3, [r0, #24]
 80078c8:	b90b      	cbnz	r3, 80078ce <_fflush_r+0x1a>
 80078ca:	f000 f887 	bl	80079dc <__sinit>
 80078ce:	4b14      	ldr	r3, [pc, #80]	; (8007920 <_fflush_r+0x6c>)
 80078d0:	429c      	cmp	r4, r3
 80078d2:	d11b      	bne.n	800790c <_fflush_r+0x58>
 80078d4:	686c      	ldr	r4, [r5, #4]
 80078d6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80078da:	2b00      	cmp	r3, #0
 80078dc:	d0ef      	beq.n	80078be <_fflush_r+0xa>
 80078de:	6e62      	ldr	r2, [r4, #100]	; 0x64
 80078e0:	07d0      	lsls	r0, r2, #31
 80078e2:	d404      	bmi.n	80078ee <_fflush_r+0x3a>
 80078e4:	0599      	lsls	r1, r3, #22
 80078e6:	d402      	bmi.n	80078ee <_fflush_r+0x3a>
 80078e8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80078ea:	f000 f915 	bl	8007b18 <__retarget_lock_acquire_recursive>
 80078ee:	4628      	mov	r0, r5
 80078f0:	4621      	mov	r1, r4
 80078f2:	f7ff ff59 	bl	80077a8 <__sflush_r>
 80078f6:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80078f8:	4605      	mov	r5, r0
 80078fa:	07da      	lsls	r2, r3, #31
 80078fc:	d4e0      	bmi.n	80078c0 <_fflush_r+0xc>
 80078fe:	89a3      	ldrh	r3, [r4, #12]
 8007900:	059b      	lsls	r3, r3, #22
 8007902:	d4dd      	bmi.n	80078c0 <_fflush_r+0xc>
 8007904:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8007906:	f000 f908 	bl	8007b1a <__retarget_lock_release_recursive>
 800790a:	e7d9      	b.n	80078c0 <_fflush_r+0xc>
 800790c:	4b05      	ldr	r3, [pc, #20]	; (8007924 <_fflush_r+0x70>)
 800790e:	429c      	cmp	r4, r3
 8007910:	d101      	bne.n	8007916 <_fflush_r+0x62>
 8007912:	68ac      	ldr	r4, [r5, #8]
 8007914:	e7df      	b.n	80078d6 <_fflush_r+0x22>
 8007916:	4b04      	ldr	r3, [pc, #16]	; (8007928 <_fflush_r+0x74>)
 8007918:	429c      	cmp	r4, r3
 800791a:	bf08      	it	eq
 800791c:	68ec      	ldreq	r4, [r5, #12]
 800791e:	e7da      	b.n	80078d6 <_fflush_r+0x22>
 8007920:	080082d4 	.word	0x080082d4
 8007924:	080082f4 	.word	0x080082f4
 8007928:	080082b4 	.word	0x080082b4

0800792c <std>:
 800792c:	2300      	movs	r3, #0
 800792e:	b510      	push	{r4, lr}
 8007930:	4604      	mov	r4, r0
 8007932:	e9c0 3300 	strd	r3, r3, [r0]
 8007936:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800793a:	6083      	str	r3, [r0, #8]
 800793c:	8181      	strh	r1, [r0, #12]
 800793e:	6643      	str	r3, [r0, #100]	; 0x64
 8007940:	81c2      	strh	r2, [r0, #14]
 8007942:	6183      	str	r3, [r0, #24]
 8007944:	4619      	mov	r1, r3
 8007946:	2208      	movs	r2, #8
 8007948:	305c      	adds	r0, #92	; 0x5c
 800794a:	f7fb fe33 	bl	80035b4 <memset>
 800794e:	4b05      	ldr	r3, [pc, #20]	; (8007964 <std+0x38>)
 8007950:	6224      	str	r4, [r4, #32]
 8007952:	6263      	str	r3, [r4, #36]	; 0x24
 8007954:	4b04      	ldr	r3, [pc, #16]	; (8007968 <std+0x3c>)
 8007956:	62a3      	str	r3, [r4, #40]	; 0x28
 8007958:	4b04      	ldr	r3, [pc, #16]	; (800796c <std+0x40>)
 800795a:	62e3      	str	r3, [r4, #44]	; 0x2c
 800795c:	4b04      	ldr	r3, [pc, #16]	; (8007970 <std+0x44>)
 800795e:	6323      	str	r3, [r4, #48]	; 0x30
 8007960:	bd10      	pop	{r4, pc}
 8007962:	bf00      	nop
 8007964:	08007c7d 	.word	0x08007c7d
 8007968:	08007c9f 	.word	0x08007c9f
 800796c:	08007cd7 	.word	0x08007cd7
 8007970:	08007cfb 	.word	0x08007cfb

08007974 <_cleanup_r>:
 8007974:	4901      	ldr	r1, [pc, #4]	; (800797c <_cleanup_r+0x8>)
 8007976:	f000 b8af 	b.w	8007ad8 <_fwalk_reent>
 800797a:	bf00      	nop
 800797c:	080078b5 	.word	0x080078b5

08007980 <__sfmoreglue>:
 8007980:	b570      	push	{r4, r5, r6, lr}
 8007982:	2568      	movs	r5, #104	; 0x68
 8007984:	1e4a      	subs	r2, r1, #1
 8007986:	4355      	muls	r5, r2
 8007988:	460e      	mov	r6, r1
 800798a:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800798e:	f7ff fa83 	bl	8006e98 <_malloc_r>
 8007992:	4604      	mov	r4, r0
 8007994:	b140      	cbz	r0, 80079a8 <__sfmoreglue+0x28>
 8007996:	2100      	movs	r1, #0
 8007998:	e9c0 1600 	strd	r1, r6, [r0]
 800799c:	300c      	adds	r0, #12
 800799e:	60a0      	str	r0, [r4, #8]
 80079a0:	f105 0268 	add.w	r2, r5, #104	; 0x68
 80079a4:	f7fb fe06 	bl	80035b4 <memset>
 80079a8:	4620      	mov	r0, r4
 80079aa:	bd70      	pop	{r4, r5, r6, pc}

080079ac <__sfp_lock_acquire>:
 80079ac:	4801      	ldr	r0, [pc, #4]	; (80079b4 <__sfp_lock_acquire+0x8>)
 80079ae:	f000 b8b3 	b.w	8007b18 <__retarget_lock_acquire_recursive>
 80079b2:	bf00      	nop
 80079b4:	200002cc 	.word	0x200002cc

080079b8 <__sfp_lock_release>:
 80079b8:	4801      	ldr	r0, [pc, #4]	; (80079c0 <__sfp_lock_release+0x8>)
 80079ba:	f000 b8ae 	b.w	8007b1a <__retarget_lock_release_recursive>
 80079be:	bf00      	nop
 80079c0:	200002cc 	.word	0x200002cc

080079c4 <__sinit_lock_acquire>:
 80079c4:	4801      	ldr	r0, [pc, #4]	; (80079cc <__sinit_lock_acquire+0x8>)
 80079c6:	f000 b8a7 	b.w	8007b18 <__retarget_lock_acquire_recursive>
 80079ca:	bf00      	nop
 80079cc:	200002c7 	.word	0x200002c7

080079d0 <__sinit_lock_release>:
 80079d0:	4801      	ldr	r0, [pc, #4]	; (80079d8 <__sinit_lock_release+0x8>)
 80079d2:	f000 b8a2 	b.w	8007b1a <__retarget_lock_release_recursive>
 80079d6:	bf00      	nop
 80079d8:	200002c7 	.word	0x200002c7

080079dc <__sinit>:
 80079dc:	b510      	push	{r4, lr}
 80079de:	4604      	mov	r4, r0
 80079e0:	f7ff fff0 	bl	80079c4 <__sinit_lock_acquire>
 80079e4:	69a3      	ldr	r3, [r4, #24]
 80079e6:	b11b      	cbz	r3, 80079f0 <__sinit+0x14>
 80079e8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80079ec:	f7ff bff0 	b.w	80079d0 <__sinit_lock_release>
 80079f0:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 80079f4:	6523      	str	r3, [r4, #80]	; 0x50
 80079f6:	4b13      	ldr	r3, [pc, #76]	; (8007a44 <__sinit+0x68>)
 80079f8:	4a13      	ldr	r2, [pc, #76]	; (8007a48 <__sinit+0x6c>)
 80079fa:	681b      	ldr	r3, [r3, #0]
 80079fc:	62a2      	str	r2, [r4, #40]	; 0x28
 80079fe:	42a3      	cmp	r3, r4
 8007a00:	bf08      	it	eq
 8007a02:	2301      	moveq	r3, #1
 8007a04:	4620      	mov	r0, r4
 8007a06:	bf08      	it	eq
 8007a08:	61a3      	streq	r3, [r4, #24]
 8007a0a:	f000 f81f 	bl	8007a4c <__sfp>
 8007a0e:	6060      	str	r0, [r4, #4]
 8007a10:	4620      	mov	r0, r4
 8007a12:	f000 f81b 	bl	8007a4c <__sfp>
 8007a16:	60a0      	str	r0, [r4, #8]
 8007a18:	4620      	mov	r0, r4
 8007a1a:	f000 f817 	bl	8007a4c <__sfp>
 8007a1e:	2200      	movs	r2, #0
 8007a20:	2104      	movs	r1, #4
 8007a22:	60e0      	str	r0, [r4, #12]
 8007a24:	6860      	ldr	r0, [r4, #4]
 8007a26:	f7ff ff81 	bl	800792c <std>
 8007a2a:	2201      	movs	r2, #1
 8007a2c:	2109      	movs	r1, #9
 8007a2e:	68a0      	ldr	r0, [r4, #8]
 8007a30:	f7ff ff7c 	bl	800792c <std>
 8007a34:	2202      	movs	r2, #2
 8007a36:	2112      	movs	r1, #18
 8007a38:	68e0      	ldr	r0, [r4, #12]
 8007a3a:	f7ff ff77 	bl	800792c <std>
 8007a3e:	2301      	movs	r3, #1
 8007a40:	61a3      	str	r3, [r4, #24]
 8007a42:	e7d1      	b.n	80079e8 <__sinit+0xc>
 8007a44:	08007e60 	.word	0x08007e60
 8007a48:	08007975 	.word	0x08007975

08007a4c <__sfp>:
 8007a4c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007a4e:	4607      	mov	r7, r0
 8007a50:	f7ff ffac 	bl	80079ac <__sfp_lock_acquire>
 8007a54:	4b1e      	ldr	r3, [pc, #120]	; (8007ad0 <__sfp+0x84>)
 8007a56:	681e      	ldr	r6, [r3, #0]
 8007a58:	69b3      	ldr	r3, [r6, #24]
 8007a5a:	b913      	cbnz	r3, 8007a62 <__sfp+0x16>
 8007a5c:	4630      	mov	r0, r6
 8007a5e:	f7ff ffbd 	bl	80079dc <__sinit>
 8007a62:	3648      	adds	r6, #72	; 0x48
 8007a64:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8007a68:	3b01      	subs	r3, #1
 8007a6a:	d503      	bpl.n	8007a74 <__sfp+0x28>
 8007a6c:	6833      	ldr	r3, [r6, #0]
 8007a6e:	b30b      	cbz	r3, 8007ab4 <__sfp+0x68>
 8007a70:	6836      	ldr	r6, [r6, #0]
 8007a72:	e7f7      	b.n	8007a64 <__sfp+0x18>
 8007a74:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8007a78:	b9d5      	cbnz	r5, 8007ab0 <__sfp+0x64>
 8007a7a:	4b16      	ldr	r3, [pc, #88]	; (8007ad4 <__sfp+0x88>)
 8007a7c:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8007a80:	60e3      	str	r3, [r4, #12]
 8007a82:	6665      	str	r5, [r4, #100]	; 0x64
 8007a84:	f000 f847 	bl	8007b16 <__retarget_lock_init_recursive>
 8007a88:	f7ff ff96 	bl	80079b8 <__sfp_lock_release>
 8007a8c:	2208      	movs	r2, #8
 8007a8e:	4629      	mov	r1, r5
 8007a90:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8007a94:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8007a98:	6025      	str	r5, [r4, #0]
 8007a9a:	61a5      	str	r5, [r4, #24]
 8007a9c:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8007aa0:	f7fb fd88 	bl	80035b4 <memset>
 8007aa4:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8007aa8:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8007aac:	4620      	mov	r0, r4
 8007aae:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8007ab0:	3468      	adds	r4, #104	; 0x68
 8007ab2:	e7d9      	b.n	8007a68 <__sfp+0x1c>
 8007ab4:	2104      	movs	r1, #4
 8007ab6:	4638      	mov	r0, r7
 8007ab8:	f7ff ff62 	bl	8007980 <__sfmoreglue>
 8007abc:	4604      	mov	r4, r0
 8007abe:	6030      	str	r0, [r6, #0]
 8007ac0:	2800      	cmp	r0, #0
 8007ac2:	d1d5      	bne.n	8007a70 <__sfp+0x24>
 8007ac4:	f7ff ff78 	bl	80079b8 <__sfp_lock_release>
 8007ac8:	230c      	movs	r3, #12
 8007aca:	603b      	str	r3, [r7, #0]
 8007acc:	e7ee      	b.n	8007aac <__sfp+0x60>
 8007ace:	bf00      	nop
 8007ad0:	08007e60 	.word	0x08007e60
 8007ad4:	ffff0001 	.word	0xffff0001

08007ad8 <_fwalk_reent>:
 8007ad8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007adc:	4606      	mov	r6, r0
 8007ade:	4688      	mov	r8, r1
 8007ae0:	2700      	movs	r7, #0
 8007ae2:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8007ae6:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8007aea:	f1b9 0901 	subs.w	r9, r9, #1
 8007aee:	d505      	bpl.n	8007afc <_fwalk_reent+0x24>
 8007af0:	6824      	ldr	r4, [r4, #0]
 8007af2:	2c00      	cmp	r4, #0
 8007af4:	d1f7      	bne.n	8007ae6 <_fwalk_reent+0xe>
 8007af6:	4638      	mov	r0, r7
 8007af8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007afc:	89ab      	ldrh	r3, [r5, #12]
 8007afe:	2b01      	cmp	r3, #1
 8007b00:	d907      	bls.n	8007b12 <_fwalk_reent+0x3a>
 8007b02:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8007b06:	3301      	adds	r3, #1
 8007b08:	d003      	beq.n	8007b12 <_fwalk_reent+0x3a>
 8007b0a:	4629      	mov	r1, r5
 8007b0c:	4630      	mov	r0, r6
 8007b0e:	47c0      	blx	r8
 8007b10:	4307      	orrs	r7, r0
 8007b12:	3568      	adds	r5, #104	; 0x68
 8007b14:	e7e9      	b.n	8007aea <_fwalk_reent+0x12>

08007b16 <__retarget_lock_init_recursive>:
 8007b16:	4770      	bx	lr

08007b18 <__retarget_lock_acquire_recursive>:
 8007b18:	4770      	bx	lr

08007b1a <__retarget_lock_release_recursive>:
 8007b1a:	4770      	bx	lr

08007b1c <__swhatbuf_r>:
 8007b1c:	b570      	push	{r4, r5, r6, lr}
 8007b1e:	460e      	mov	r6, r1
 8007b20:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007b24:	4614      	mov	r4, r2
 8007b26:	2900      	cmp	r1, #0
 8007b28:	461d      	mov	r5, r3
 8007b2a:	b096      	sub	sp, #88	; 0x58
 8007b2c:	da07      	bge.n	8007b3e <__swhatbuf_r+0x22>
 8007b2e:	2300      	movs	r3, #0
 8007b30:	602b      	str	r3, [r5, #0]
 8007b32:	89b3      	ldrh	r3, [r6, #12]
 8007b34:	061a      	lsls	r2, r3, #24
 8007b36:	d410      	bmi.n	8007b5a <__swhatbuf_r+0x3e>
 8007b38:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8007b3c:	e00e      	b.n	8007b5c <__swhatbuf_r+0x40>
 8007b3e:	466a      	mov	r2, sp
 8007b40:	f000 f902 	bl	8007d48 <_fstat_r>
 8007b44:	2800      	cmp	r0, #0
 8007b46:	dbf2      	blt.n	8007b2e <__swhatbuf_r+0x12>
 8007b48:	9a01      	ldr	r2, [sp, #4]
 8007b4a:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8007b4e:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8007b52:	425a      	negs	r2, r3
 8007b54:	415a      	adcs	r2, r3
 8007b56:	602a      	str	r2, [r5, #0]
 8007b58:	e7ee      	b.n	8007b38 <__swhatbuf_r+0x1c>
 8007b5a:	2340      	movs	r3, #64	; 0x40
 8007b5c:	2000      	movs	r0, #0
 8007b5e:	6023      	str	r3, [r4, #0]
 8007b60:	b016      	add	sp, #88	; 0x58
 8007b62:	bd70      	pop	{r4, r5, r6, pc}

08007b64 <__smakebuf_r>:
 8007b64:	898b      	ldrh	r3, [r1, #12]
 8007b66:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8007b68:	079d      	lsls	r5, r3, #30
 8007b6a:	4606      	mov	r6, r0
 8007b6c:	460c      	mov	r4, r1
 8007b6e:	d507      	bpl.n	8007b80 <__smakebuf_r+0x1c>
 8007b70:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8007b74:	6023      	str	r3, [r4, #0]
 8007b76:	6123      	str	r3, [r4, #16]
 8007b78:	2301      	movs	r3, #1
 8007b7a:	6163      	str	r3, [r4, #20]
 8007b7c:	b002      	add	sp, #8
 8007b7e:	bd70      	pop	{r4, r5, r6, pc}
 8007b80:	466a      	mov	r2, sp
 8007b82:	ab01      	add	r3, sp, #4
 8007b84:	f7ff ffca 	bl	8007b1c <__swhatbuf_r>
 8007b88:	9900      	ldr	r1, [sp, #0]
 8007b8a:	4605      	mov	r5, r0
 8007b8c:	4630      	mov	r0, r6
 8007b8e:	f7ff f983 	bl	8006e98 <_malloc_r>
 8007b92:	b948      	cbnz	r0, 8007ba8 <__smakebuf_r+0x44>
 8007b94:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007b98:	059a      	lsls	r2, r3, #22
 8007b9a:	d4ef      	bmi.n	8007b7c <__smakebuf_r+0x18>
 8007b9c:	f023 0303 	bic.w	r3, r3, #3
 8007ba0:	f043 0302 	orr.w	r3, r3, #2
 8007ba4:	81a3      	strh	r3, [r4, #12]
 8007ba6:	e7e3      	b.n	8007b70 <__smakebuf_r+0xc>
 8007ba8:	4b0d      	ldr	r3, [pc, #52]	; (8007be0 <__smakebuf_r+0x7c>)
 8007baa:	62b3      	str	r3, [r6, #40]	; 0x28
 8007bac:	89a3      	ldrh	r3, [r4, #12]
 8007bae:	6020      	str	r0, [r4, #0]
 8007bb0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007bb4:	81a3      	strh	r3, [r4, #12]
 8007bb6:	9b00      	ldr	r3, [sp, #0]
 8007bb8:	6120      	str	r0, [r4, #16]
 8007bba:	6163      	str	r3, [r4, #20]
 8007bbc:	9b01      	ldr	r3, [sp, #4]
 8007bbe:	b15b      	cbz	r3, 8007bd8 <__smakebuf_r+0x74>
 8007bc0:	4630      	mov	r0, r6
 8007bc2:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8007bc6:	f000 f8d1 	bl	8007d6c <_isatty_r>
 8007bca:	b128      	cbz	r0, 8007bd8 <__smakebuf_r+0x74>
 8007bcc:	89a3      	ldrh	r3, [r4, #12]
 8007bce:	f023 0303 	bic.w	r3, r3, #3
 8007bd2:	f043 0301 	orr.w	r3, r3, #1
 8007bd6:	81a3      	strh	r3, [r4, #12]
 8007bd8:	89a0      	ldrh	r0, [r4, #12]
 8007bda:	4305      	orrs	r5, r0
 8007bdc:	81a5      	strh	r5, [r4, #12]
 8007bde:	e7cd      	b.n	8007b7c <__smakebuf_r+0x18>
 8007be0:	08007975 	.word	0x08007975

08007be4 <_malloc_usable_size_r>:
 8007be4:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8007be8:	1f18      	subs	r0, r3, #4
 8007bea:	2b00      	cmp	r3, #0
 8007bec:	bfbc      	itt	lt
 8007bee:	580b      	ldrlt	r3, [r1, r0]
 8007bf0:	18c0      	addlt	r0, r0, r3
 8007bf2:	4770      	bx	lr

08007bf4 <_raise_r>:
 8007bf4:	291f      	cmp	r1, #31
 8007bf6:	b538      	push	{r3, r4, r5, lr}
 8007bf8:	4604      	mov	r4, r0
 8007bfa:	460d      	mov	r5, r1
 8007bfc:	d904      	bls.n	8007c08 <_raise_r+0x14>
 8007bfe:	2316      	movs	r3, #22
 8007c00:	6003      	str	r3, [r0, #0]
 8007c02:	f04f 30ff 	mov.w	r0, #4294967295
 8007c06:	bd38      	pop	{r3, r4, r5, pc}
 8007c08:	6c42      	ldr	r2, [r0, #68]	; 0x44
 8007c0a:	b112      	cbz	r2, 8007c12 <_raise_r+0x1e>
 8007c0c:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8007c10:	b94b      	cbnz	r3, 8007c26 <_raise_r+0x32>
 8007c12:	4620      	mov	r0, r4
 8007c14:	f000 f830 	bl	8007c78 <_getpid_r>
 8007c18:	462a      	mov	r2, r5
 8007c1a:	4601      	mov	r1, r0
 8007c1c:	4620      	mov	r0, r4
 8007c1e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8007c22:	f000 b817 	b.w	8007c54 <_kill_r>
 8007c26:	2b01      	cmp	r3, #1
 8007c28:	d00a      	beq.n	8007c40 <_raise_r+0x4c>
 8007c2a:	1c59      	adds	r1, r3, #1
 8007c2c:	d103      	bne.n	8007c36 <_raise_r+0x42>
 8007c2e:	2316      	movs	r3, #22
 8007c30:	6003      	str	r3, [r0, #0]
 8007c32:	2001      	movs	r0, #1
 8007c34:	e7e7      	b.n	8007c06 <_raise_r+0x12>
 8007c36:	2400      	movs	r4, #0
 8007c38:	4628      	mov	r0, r5
 8007c3a:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8007c3e:	4798      	blx	r3
 8007c40:	2000      	movs	r0, #0
 8007c42:	e7e0      	b.n	8007c06 <_raise_r+0x12>

08007c44 <raise>:
 8007c44:	4b02      	ldr	r3, [pc, #8]	; (8007c50 <raise+0xc>)
 8007c46:	4601      	mov	r1, r0
 8007c48:	6818      	ldr	r0, [r3, #0]
 8007c4a:	f7ff bfd3 	b.w	8007bf4 <_raise_r>
 8007c4e:	bf00      	nop
 8007c50:	2000000c 	.word	0x2000000c

08007c54 <_kill_r>:
 8007c54:	b538      	push	{r3, r4, r5, lr}
 8007c56:	2300      	movs	r3, #0
 8007c58:	4d06      	ldr	r5, [pc, #24]	; (8007c74 <_kill_r+0x20>)
 8007c5a:	4604      	mov	r4, r0
 8007c5c:	4608      	mov	r0, r1
 8007c5e:	4611      	mov	r1, r2
 8007c60:	602b      	str	r3, [r5, #0]
 8007c62:	f7f9 fd75 	bl	8001750 <_kill>
 8007c66:	1c43      	adds	r3, r0, #1
 8007c68:	d102      	bne.n	8007c70 <_kill_r+0x1c>
 8007c6a:	682b      	ldr	r3, [r5, #0]
 8007c6c:	b103      	cbz	r3, 8007c70 <_kill_r+0x1c>
 8007c6e:	6023      	str	r3, [r4, #0]
 8007c70:	bd38      	pop	{r3, r4, r5, pc}
 8007c72:	bf00      	nop
 8007c74:	200002c0 	.word	0x200002c0

08007c78 <_getpid_r>:
 8007c78:	f7f9 bd63 	b.w	8001742 <_getpid>

08007c7c <__sread>:
 8007c7c:	b510      	push	{r4, lr}
 8007c7e:	460c      	mov	r4, r1
 8007c80:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007c84:	f000 f894 	bl	8007db0 <_read_r>
 8007c88:	2800      	cmp	r0, #0
 8007c8a:	bfab      	itete	ge
 8007c8c:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8007c8e:	89a3      	ldrhlt	r3, [r4, #12]
 8007c90:	181b      	addge	r3, r3, r0
 8007c92:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8007c96:	bfac      	ite	ge
 8007c98:	6563      	strge	r3, [r4, #84]	; 0x54
 8007c9a:	81a3      	strhlt	r3, [r4, #12]
 8007c9c:	bd10      	pop	{r4, pc}

08007c9e <__swrite>:
 8007c9e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007ca2:	461f      	mov	r7, r3
 8007ca4:	898b      	ldrh	r3, [r1, #12]
 8007ca6:	4605      	mov	r5, r0
 8007ca8:	05db      	lsls	r3, r3, #23
 8007caa:	460c      	mov	r4, r1
 8007cac:	4616      	mov	r6, r2
 8007cae:	d505      	bpl.n	8007cbc <__swrite+0x1e>
 8007cb0:	2302      	movs	r3, #2
 8007cb2:	2200      	movs	r2, #0
 8007cb4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007cb8:	f000 f868 	bl	8007d8c <_lseek_r>
 8007cbc:	89a3      	ldrh	r3, [r4, #12]
 8007cbe:	4632      	mov	r2, r6
 8007cc0:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8007cc4:	81a3      	strh	r3, [r4, #12]
 8007cc6:	4628      	mov	r0, r5
 8007cc8:	463b      	mov	r3, r7
 8007cca:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8007cce:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8007cd2:	f000 b817 	b.w	8007d04 <_write_r>

08007cd6 <__sseek>:
 8007cd6:	b510      	push	{r4, lr}
 8007cd8:	460c      	mov	r4, r1
 8007cda:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007cde:	f000 f855 	bl	8007d8c <_lseek_r>
 8007ce2:	1c43      	adds	r3, r0, #1
 8007ce4:	89a3      	ldrh	r3, [r4, #12]
 8007ce6:	bf15      	itete	ne
 8007ce8:	6560      	strne	r0, [r4, #84]	; 0x54
 8007cea:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8007cee:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8007cf2:	81a3      	strheq	r3, [r4, #12]
 8007cf4:	bf18      	it	ne
 8007cf6:	81a3      	strhne	r3, [r4, #12]
 8007cf8:	bd10      	pop	{r4, pc}

08007cfa <__sclose>:
 8007cfa:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007cfe:	f000 b813 	b.w	8007d28 <_close_r>
	...

08007d04 <_write_r>:
 8007d04:	b538      	push	{r3, r4, r5, lr}
 8007d06:	4604      	mov	r4, r0
 8007d08:	4608      	mov	r0, r1
 8007d0a:	4611      	mov	r1, r2
 8007d0c:	2200      	movs	r2, #0
 8007d0e:	4d05      	ldr	r5, [pc, #20]	; (8007d24 <_write_r+0x20>)
 8007d10:	602a      	str	r2, [r5, #0]
 8007d12:	461a      	mov	r2, r3
 8007d14:	f7f9 fd53 	bl	80017be <_write>
 8007d18:	1c43      	adds	r3, r0, #1
 8007d1a:	d102      	bne.n	8007d22 <_write_r+0x1e>
 8007d1c:	682b      	ldr	r3, [r5, #0]
 8007d1e:	b103      	cbz	r3, 8007d22 <_write_r+0x1e>
 8007d20:	6023      	str	r3, [r4, #0]
 8007d22:	bd38      	pop	{r3, r4, r5, pc}
 8007d24:	200002c0 	.word	0x200002c0

08007d28 <_close_r>:
 8007d28:	b538      	push	{r3, r4, r5, lr}
 8007d2a:	2300      	movs	r3, #0
 8007d2c:	4d05      	ldr	r5, [pc, #20]	; (8007d44 <_close_r+0x1c>)
 8007d2e:	4604      	mov	r4, r0
 8007d30:	4608      	mov	r0, r1
 8007d32:	602b      	str	r3, [r5, #0]
 8007d34:	f7f9 fd5f 	bl	80017f6 <_close>
 8007d38:	1c43      	adds	r3, r0, #1
 8007d3a:	d102      	bne.n	8007d42 <_close_r+0x1a>
 8007d3c:	682b      	ldr	r3, [r5, #0]
 8007d3e:	b103      	cbz	r3, 8007d42 <_close_r+0x1a>
 8007d40:	6023      	str	r3, [r4, #0]
 8007d42:	bd38      	pop	{r3, r4, r5, pc}
 8007d44:	200002c0 	.word	0x200002c0

08007d48 <_fstat_r>:
 8007d48:	b538      	push	{r3, r4, r5, lr}
 8007d4a:	2300      	movs	r3, #0
 8007d4c:	4d06      	ldr	r5, [pc, #24]	; (8007d68 <_fstat_r+0x20>)
 8007d4e:	4604      	mov	r4, r0
 8007d50:	4608      	mov	r0, r1
 8007d52:	4611      	mov	r1, r2
 8007d54:	602b      	str	r3, [r5, #0]
 8007d56:	f7f9 fd59 	bl	800180c <_fstat>
 8007d5a:	1c43      	adds	r3, r0, #1
 8007d5c:	d102      	bne.n	8007d64 <_fstat_r+0x1c>
 8007d5e:	682b      	ldr	r3, [r5, #0]
 8007d60:	b103      	cbz	r3, 8007d64 <_fstat_r+0x1c>
 8007d62:	6023      	str	r3, [r4, #0]
 8007d64:	bd38      	pop	{r3, r4, r5, pc}
 8007d66:	bf00      	nop
 8007d68:	200002c0 	.word	0x200002c0

08007d6c <_isatty_r>:
 8007d6c:	b538      	push	{r3, r4, r5, lr}
 8007d6e:	2300      	movs	r3, #0
 8007d70:	4d05      	ldr	r5, [pc, #20]	; (8007d88 <_isatty_r+0x1c>)
 8007d72:	4604      	mov	r4, r0
 8007d74:	4608      	mov	r0, r1
 8007d76:	602b      	str	r3, [r5, #0]
 8007d78:	f7f9 fd57 	bl	800182a <_isatty>
 8007d7c:	1c43      	adds	r3, r0, #1
 8007d7e:	d102      	bne.n	8007d86 <_isatty_r+0x1a>
 8007d80:	682b      	ldr	r3, [r5, #0]
 8007d82:	b103      	cbz	r3, 8007d86 <_isatty_r+0x1a>
 8007d84:	6023      	str	r3, [r4, #0]
 8007d86:	bd38      	pop	{r3, r4, r5, pc}
 8007d88:	200002c0 	.word	0x200002c0

08007d8c <_lseek_r>:
 8007d8c:	b538      	push	{r3, r4, r5, lr}
 8007d8e:	4604      	mov	r4, r0
 8007d90:	4608      	mov	r0, r1
 8007d92:	4611      	mov	r1, r2
 8007d94:	2200      	movs	r2, #0
 8007d96:	4d05      	ldr	r5, [pc, #20]	; (8007dac <_lseek_r+0x20>)
 8007d98:	602a      	str	r2, [r5, #0]
 8007d9a:	461a      	mov	r2, r3
 8007d9c:	f7f9 fd4f 	bl	800183e <_lseek>
 8007da0:	1c43      	adds	r3, r0, #1
 8007da2:	d102      	bne.n	8007daa <_lseek_r+0x1e>
 8007da4:	682b      	ldr	r3, [r5, #0]
 8007da6:	b103      	cbz	r3, 8007daa <_lseek_r+0x1e>
 8007da8:	6023      	str	r3, [r4, #0]
 8007daa:	bd38      	pop	{r3, r4, r5, pc}
 8007dac:	200002c0 	.word	0x200002c0

08007db0 <_read_r>:
 8007db0:	b538      	push	{r3, r4, r5, lr}
 8007db2:	4604      	mov	r4, r0
 8007db4:	4608      	mov	r0, r1
 8007db6:	4611      	mov	r1, r2
 8007db8:	2200      	movs	r2, #0
 8007dba:	4d05      	ldr	r5, [pc, #20]	; (8007dd0 <_read_r+0x20>)
 8007dbc:	602a      	str	r2, [r5, #0]
 8007dbe:	461a      	mov	r2, r3
 8007dc0:	f7f9 fce0 	bl	8001784 <_read>
 8007dc4:	1c43      	adds	r3, r0, #1
 8007dc6:	d102      	bne.n	8007dce <_read_r+0x1e>
 8007dc8:	682b      	ldr	r3, [r5, #0]
 8007dca:	b103      	cbz	r3, 8007dce <_read_r+0x1e>
 8007dcc:	6023      	str	r3, [r4, #0]
 8007dce:	bd38      	pop	{r3, r4, r5, pc}
 8007dd0:	200002c0 	.word	0x200002c0

08007dd4 <_init>:
 8007dd4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007dd6:	bf00      	nop
 8007dd8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007dda:	bc08      	pop	{r3}
 8007ddc:	469e      	mov	lr, r3
 8007dde:	4770      	bx	lr

08007de0 <_fini>:
 8007de0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007de2:	bf00      	nop
 8007de4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007de6:	bc08      	pop	{r3}
 8007de8:	469e      	mov	lr, r3
 8007dea:	4770      	bx	lr
