
Test.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00009284  08000110  08000110  00010110  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000051c  08009398  08009398  00019398  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080098b4  080098b4  000201e0  2**0
                  CONTENTS
  4 .ARM          00000000  080098b4  080098b4  000201e0  2**0
                  CONTENTS
  5 .preinit_array 00000000  080098b4  080098b4  000201e0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080098b4  080098b4  000198b4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080098b8  080098b8  000198b8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001e0  20000000  080098bc  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000011c  200001e0  08009a9c  000201e0  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200002fc  08009a9c  000202fc  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  000201e0  2**0
                  CONTENTS, READONLY
 12 .debug_info   00012930  00000000  00000000  00020209  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002860  00000000  00000000  00032b39  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000ec0  00000000  00000000  000353a0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000db0  00000000  00000000  00036260  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001a01c  00000000  00000000  00037010  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00011e1d  00000000  00000000  0005102c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00090fb6  00000000  00000000  00062e49  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  000f3dff  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000052b8  00000000  00000000  000f3e54  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	; (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	; (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	; (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	200001e0 	.word	0x200001e0
 800012c:	00000000 	.word	0x00000000
 8000130:	0800937c 	.word	0x0800937c

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	; (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	; (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	; (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	200001e4 	.word	0x200001e4
 800014c:	0800937c 	.word	0x0800937c

08000150 <strlen>:
 8000150:	4603      	mov	r3, r0
 8000152:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000156:	2a00      	cmp	r2, #0
 8000158:	d1fb      	bne.n	8000152 <strlen+0x2>
 800015a:	1a18      	subs	r0, r3, r0
 800015c:	3801      	subs	r0, #1
 800015e:	4770      	bx	lr

08000160 <__aeabi_drsub>:
 8000160:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000164:	e002      	b.n	800016c <__adddf3>
 8000166:	bf00      	nop

08000168 <__aeabi_dsub>:
 8000168:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800016c <__adddf3>:
 800016c:	b530      	push	{r4, r5, lr}
 800016e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000172:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000176:	ea94 0f05 	teq	r4, r5
 800017a:	bf08      	it	eq
 800017c:	ea90 0f02 	teqeq	r0, r2
 8000180:	bf1f      	itttt	ne
 8000182:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000186:	ea55 0c02 	orrsne.w	ip, r5, r2
 800018a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800018e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000192:	f000 80e2 	beq.w	800035a <__adddf3+0x1ee>
 8000196:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800019a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800019e:	bfb8      	it	lt
 80001a0:	426d      	neglt	r5, r5
 80001a2:	dd0c      	ble.n	80001be <__adddf3+0x52>
 80001a4:	442c      	add	r4, r5
 80001a6:	ea80 0202 	eor.w	r2, r0, r2
 80001aa:	ea81 0303 	eor.w	r3, r1, r3
 80001ae:	ea82 0000 	eor.w	r0, r2, r0
 80001b2:	ea83 0101 	eor.w	r1, r3, r1
 80001b6:	ea80 0202 	eor.w	r2, r0, r2
 80001ba:	ea81 0303 	eor.w	r3, r1, r3
 80001be:	2d36      	cmp	r5, #54	; 0x36
 80001c0:	bf88      	it	hi
 80001c2:	bd30      	pophi	{r4, r5, pc}
 80001c4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80001c8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80001cc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80001d0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80001d4:	d002      	beq.n	80001dc <__adddf3+0x70>
 80001d6:	4240      	negs	r0, r0
 80001d8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80001dc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80001e0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80001e4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80001e8:	d002      	beq.n	80001f0 <__adddf3+0x84>
 80001ea:	4252      	negs	r2, r2
 80001ec:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80001f0:	ea94 0f05 	teq	r4, r5
 80001f4:	f000 80a7 	beq.w	8000346 <__adddf3+0x1da>
 80001f8:	f1a4 0401 	sub.w	r4, r4, #1
 80001fc:	f1d5 0e20 	rsbs	lr, r5, #32
 8000200:	db0d      	blt.n	800021e <__adddf3+0xb2>
 8000202:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000206:	fa22 f205 	lsr.w	r2, r2, r5
 800020a:	1880      	adds	r0, r0, r2
 800020c:	f141 0100 	adc.w	r1, r1, #0
 8000210:	fa03 f20e 	lsl.w	r2, r3, lr
 8000214:	1880      	adds	r0, r0, r2
 8000216:	fa43 f305 	asr.w	r3, r3, r5
 800021a:	4159      	adcs	r1, r3
 800021c:	e00e      	b.n	800023c <__adddf3+0xd0>
 800021e:	f1a5 0520 	sub.w	r5, r5, #32
 8000222:	f10e 0e20 	add.w	lr, lr, #32
 8000226:	2a01      	cmp	r2, #1
 8000228:	fa03 fc0e 	lsl.w	ip, r3, lr
 800022c:	bf28      	it	cs
 800022e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000232:	fa43 f305 	asr.w	r3, r3, r5
 8000236:	18c0      	adds	r0, r0, r3
 8000238:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800023c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000240:	d507      	bpl.n	8000252 <__adddf3+0xe6>
 8000242:	f04f 0e00 	mov.w	lr, #0
 8000246:	f1dc 0c00 	rsbs	ip, ip, #0
 800024a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800024e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000252:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000256:	d31b      	bcc.n	8000290 <__adddf3+0x124>
 8000258:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800025c:	d30c      	bcc.n	8000278 <__adddf3+0x10c>
 800025e:	0849      	lsrs	r1, r1, #1
 8000260:	ea5f 0030 	movs.w	r0, r0, rrx
 8000264:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000268:	f104 0401 	add.w	r4, r4, #1
 800026c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000270:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000274:	f080 809a 	bcs.w	80003ac <__adddf3+0x240>
 8000278:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800027c:	bf08      	it	eq
 800027e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000282:	f150 0000 	adcs.w	r0, r0, #0
 8000286:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800028a:	ea41 0105 	orr.w	r1, r1, r5
 800028e:	bd30      	pop	{r4, r5, pc}
 8000290:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000294:	4140      	adcs	r0, r0
 8000296:	eb41 0101 	adc.w	r1, r1, r1
 800029a:	3c01      	subs	r4, #1
 800029c:	bf28      	it	cs
 800029e:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80002a2:	d2e9      	bcs.n	8000278 <__adddf3+0x10c>
 80002a4:	f091 0f00 	teq	r1, #0
 80002a8:	bf04      	itt	eq
 80002aa:	4601      	moveq	r1, r0
 80002ac:	2000      	moveq	r0, #0
 80002ae:	fab1 f381 	clz	r3, r1
 80002b2:	bf08      	it	eq
 80002b4:	3320      	addeq	r3, #32
 80002b6:	f1a3 030b 	sub.w	r3, r3, #11
 80002ba:	f1b3 0220 	subs.w	r2, r3, #32
 80002be:	da0c      	bge.n	80002da <__adddf3+0x16e>
 80002c0:	320c      	adds	r2, #12
 80002c2:	dd08      	ble.n	80002d6 <__adddf3+0x16a>
 80002c4:	f102 0c14 	add.w	ip, r2, #20
 80002c8:	f1c2 020c 	rsb	r2, r2, #12
 80002cc:	fa01 f00c 	lsl.w	r0, r1, ip
 80002d0:	fa21 f102 	lsr.w	r1, r1, r2
 80002d4:	e00c      	b.n	80002f0 <__adddf3+0x184>
 80002d6:	f102 0214 	add.w	r2, r2, #20
 80002da:	bfd8      	it	le
 80002dc:	f1c2 0c20 	rsble	ip, r2, #32
 80002e0:	fa01 f102 	lsl.w	r1, r1, r2
 80002e4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80002e8:	bfdc      	itt	le
 80002ea:	ea41 010c 	orrle.w	r1, r1, ip
 80002ee:	4090      	lslle	r0, r2
 80002f0:	1ae4      	subs	r4, r4, r3
 80002f2:	bfa2      	ittt	ge
 80002f4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80002f8:	4329      	orrge	r1, r5
 80002fa:	bd30      	popge	{r4, r5, pc}
 80002fc:	ea6f 0404 	mvn.w	r4, r4
 8000300:	3c1f      	subs	r4, #31
 8000302:	da1c      	bge.n	800033e <__adddf3+0x1d2>
 8000304:	340c      	adds	r4, #12
 8000306:	dc0e      	bgt.n	8000326 <__adddf3+0x1ba>
 8000308:	f104 0414 	add.w	r4, r4, #20
 800030c:	f1c4 0220 	rsb	r2, r4, #32
 8000310:	fa20 f004 	lsr.w	r0, r0, r4
 8000314:	fa01 f302 	lsl.w	r3, r1, r2
 8000318:	ea40 0003 	orr.w	r0, r0, r3
 800031c:	fa21 f304 	lsr.w	r3, r1, r4
 8000320:	ea45 0103 	orr.w	r1, r5, r3
 8000324:	bd30      	pop	{r4, r5, pc}
 8000326:	f1c4 040c 	rsb	r4, r4, #12
 800032a:	f1c4 0220 	rsb	r2, r4, #32
 800032e:	fa20 f002 	lsr.w	r0, r0, r2
 8000332:	fa01 f304 	lsl.w	r3, r1, r4
 8000336:	ea40 0003 	orr.w	r0, r0, r3
 800033a:	4629      	mov	r1, r5
 800033c:	bd30      	pop	{r4, r5, pc}
 800033e:	fa21 f004 	lsr.w	r0, r1, r4
 8000342:	4629      	mov	r1, r5
 8000344:	bd30      	pop	{r4, r5, pc}
 8000346:	f094 0f00 	teq	r4, #0
 800034a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800034e:	bf06      	itte	eq
 8000350:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000354:	3401      	addeq	r4, #1
 8000356:	3d01      	subne	r5, #1
 8000358:	e74e      	b.n	80001f8 <__adddf3+0x8c>
 800035a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800035e:	bf18      	it	ne
 8000360:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000364:	d029      	beq.n	80003ba <__adddf3+0x24e>
 8000366:	ea94 0f05 	teq	r4, r5
 800036a:	bf08      	it	eq
 800036c:	ea90 0f02 	teqeq	r0, r2
 8000370:	d005      	beq.n	800037e <__adddf3+0x212>
 8000372:	ea54 0c00 	orrs.w	ip, r4, r0
 8000376:	bf04      	itt	eq
 8000378:	4619      	moveq	r1, r3
 800037a:	4610      	moveq	r0, r2
 800037c:	bd30      	pop	{r4, r5, pc}
 800037e:	ea91 0f03 	teq	r1, r3
 8000382:	bf1e      	ittt	ne
 8000384:	2100      	movne	r1, #0
 8000386:	2000      	movne	r0, #0
 8000388:	bd30      	popne	{r4, r5, pc}
 800038a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800038e:	d105      	bne.n	800039c <__adddf3+0x230>
 8000390:	0040      	lsls	r0, r0, #1
 8000392:	4149      	adcs	r1, r1
 8000394:	bf28      	it	cs
 8000396:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800039a:	bd30      	pop	{r4, r5, pc}
 800039c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80003a0:	bf3c      	itt	cc
 80003a2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80003a6:	bd30      	popcc	{r4, r5, pc}
 80003a8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003ac:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80003b0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80003b4:	f04f 0000 	mov.w	r0, #0
 80003b8:	bd30      	pop	{r4, r5, pc}
 80003ba:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003be:	bf1a      	itte	ne
 80003c0:	4619      	movne	r1, r3
 80003c2:	4610      	movne	r0, r2
 80003c4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80003c8:	bf1c      	itt	ne
 80003ca:	460b      	movne	r3, r1
 80003cc:	4602      	movne	r2, r0
 80003ce:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80003d2:	bf06      	itte	eq
 80003d4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80003d8:	ea91 0f03 	teqeq	r1, r3
 80003dc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80003e0:	bd30      	pop	{r4, r5, pc}
 80003e2:	bf00      	nop

080003e4 <__aeabi_ui2d>:
 80003e4:	f090 0f00 	teq	r0, #0
 80003e8:	bf04      	itt	eq
 80003ea:	2100      	moveq	r1, #0
 80003ec:	4770      	bxeq	lr
 80003ee:	b530      	push	{r4, r5, lr}
 80003f0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80003f4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80003f8:	f04f 0500 	mov.w	r5, #0
 80003fc:	f04f 0100 	mov.w	r1, #0
 8000400:	e750      	b.n	80002a4 <__adddf3+0x138>
 8000402:	bf00      	nop

08000404 <__aeabi_i2d>:
 8000404:	f090 0f00 	teq	r0, #0
 8000408:	bf04      	itt	eq
 800040a:	2100      	moveq	r1, #0
 800040c:	4770      	bxeq	lr
 800040e:	b530      	push	{r4, r5, lr}
 8000410:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000414:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000418:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800041c:	bf48      	it	mi
 800041e:	4240      	negmi	r0, r0
 8000420:	f04f 0100 	mov.w	r1, #0
 8000424:	e73e      	b.n	80002a4 <__adddf3+0x138>
 8000426:	bf00      	nop

08000428 <__aeabi_f2d>:
 8000428:	0042      	lsls	r2, r0, #1
 800042a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800042e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000432:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000436:	bf1f      	itttt	ne
 8000438:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800043c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000440:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000444:	4770      	bxne	lr
 8000446:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800044a:	bf08      	it	eq
 800044c:	4770      	bxeq	lr
 800044e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000452:	bf04      	itt	eq
 8000454:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000458:	4770      	bxeq	lr
 800045a:	b530      	push	{r4, r5, lr}
 800045c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000460:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000464:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000468:	e71c      	b.n	80002a4 <__adddf3+0x138>
 800046a:	bf00      	nop

0800046c <__aeabi_ul2d>:
 800046c:	ea50 0201 	orrs.w	r2, r0, r1
 8000470:	bf08      	it	eq
 8000472:	4770      	bxeq	lr
 8000474:	b530      	push	{r4, r5, lr}
 8000476:	f04f 0500 	mov.w	r5, #0
 800047a:	e00a      	b.n	8000492 <__aeabi_l2d+0x16>

0800047c <__aeabi_l2d>:
 800047c:	ea50 0201 	orrs.w	r2, r0, r1
 8000480:	bf08      	it	eq
 8000482:	4770      	bxeq	lr
 8000484:	b530      	push	{r4, r5, lr}
 8000486:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800048a:	d502      	bpl.n	8000492 <__aeabi_l2d+0x16>
 800048c:	4240      	negs	r0, r0
 800048e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000492:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000496:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800049a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800049e:	f43f aed8 	beq.w	8000252 <__adddf3+0xe6>
 80004a2:	f04f 0203 	mov.w	r2, #3
 80004a6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004aa:	bf18      	it	ne
 80004ac:	3203      	addne	r2, #3
 80004ae:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004b2:	bf18      	it	ne
 80004b4:	3203      	addne	r2, #3
 80004b6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80004ba:	f1c2 0320 	rsb	r3, r2, #32
 80004be:	fa00 fc03 	lsl.w	ip, r0, r3
 80004c2:	fa20 f002 	lsr.w	r0, r0, r2
 80004c6:	fa01 fe03 	lsl.w	lr, r1, r3
 80004ca:	ea40 000e 	orr.w	r0, r0, lr
 80004ce:	fa21 f102 	lsr.w	r1, r1, r2
 80004d2:	4414      	add	r4, r2
 80004d4:	e6bd      	b.n	8000252 <__adddf3+0xe6>
 80004d6:	bf00      	nop

080004d8 <__aeabi_dmul>:
 80004d8:	b570      	push	{r4, r5, r6, lr}
 80004da:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80004de:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80004e2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80004e6:	bf1d      	ittte	ne
 80004e8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80004ec:	ea94 0f0c 	teqne	r4, ip
 80004f0:	ea95 0f0c 	teqne	r5, ip
 80004f4:	f000 f8de 	bleq	80006b4 <__aeabi_dmul+0x1dc>
 80004f8:	442c      	add	r4, r5
 80004fa:	ea81 0603 	eor.w	r6, r1, r3
 80004fe:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000502:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000506:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800050a:	bf18      	it	ne
 800050c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000510:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000514:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000518:	d038      	beq.n	800058c <__aeabi_dmul+0xb4>
 800051a:	fba0 ce02 	umull	ip, lr, r0, r2
 800051e:	f04f 0500 	mov.w	r5, #0
 8000522:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000526:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800052a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800052e:	f04f 0600 	mov.w	r6, #0
 8000532:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000536:	f09c 0f00 	teq	ip, #0
 800053a:	bf18      	it	ne
 800053c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000540:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000544:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000548:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800054c:	d204      	bcs.n	8000558 <__aeabi_dmul+0x80>
 800054e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000552:	416d      	adcs	r5, r5
 8000554:	eb46 0606 	adc.w	r6, r6, r6
 8000558:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800055c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000560:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000564:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000568:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800056c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000570:	bf88      	it	hi
 8000572:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000576:	d81e      	bhi.n	80005b6 <__aeabi_dmul+0xde>
 8000578:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800057c:	bf08      	it	eq
 800057e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000582:	f150 0000 	adcs.w	r0, r0, #0
 8000586:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800058a:	bd70      	pop	{r4, r5, r6, pc}
 800058c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000590:	ea46 0101 	orr.w	r1, r6, r1
 8000594:	ea40 0002 	orr.w	r0, r0, r2
 8000598:	ea81 0103 	eor.w	r1, r1, r3
 800059c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80005a0:	bfc2      	ittt	gt
 80005a2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80005a6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80005aa:	bd70      	popgt	{r4, r5, r6, pc}
 80005ac:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005b0:	f04f 0e00 	mov.w	lr, #0
 80005b4:	3c01      	subs	r4, #1
 80005b6:	f300 80ab 	bgt.w	8000710 <__aeabi_dmul+0x238>
 80005ba:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80005be:	bfde      	ittt	le
 80005c0:	2000      	movle	r0, #0
 80005c2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80005c6:	bd70      	pople	{r4, r5, r6, pc}
 80005c8:	f1c4 0400 	rsb	r4, r4, #0
 80005cc:	3c20      	subs	r4, #32
 80005ce:	da35      	bge.n	800063c <__aeabi_dmul+0x164>
 80005d0:	340c      	adds	r4, #12
 80005d2:	dc1b      	bgt.n	800060c <__aeabi_dmul+0x134>
 80005d4:	f104 0414 	add.w	r4, r4, #20
 80005d8:	f1c4 0520 	rsb	r5, r4, #32
 80005dc:	fa00 f305 	lsl.w	r3, r0, r5
 80005e0:	fa20 f004 	lsr.w	r0, r0, r4
 80005e4:	fa01 f205 	lsl.w	r2, r1, r5
 80005e8:	ea40 0002 	orr.w	r0, r0, r2
 80005ec:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80005f0:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005f4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80005f8:	fa21 f604 	lsr.w	r6, r1, r4
 80005fc:	eb42 0106 	adc.w	r1, r2, r6
 8000600:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000604:	bf08      	it	eq
 8000606:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800060a:	bd70      	pop	{r4, r5, r6, pc}
 800060c:	f1c4 040c 	rsb	r4, r4, #12
 8000610:	f1c4 0520 	rsb	r5, r4, #32
 8000614:	fa00 f304 	lsl.w	r3, r0, r4
 8000618:	fa20 f005 	lsr.w	r0, r0, r5
 800061c:	fa01 f204 	lsl.w	r2, r1, r4
 8000620:	ea40 0002 	orr.w	r0, r0, r2
 8000624:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000628:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800062c:	f141 0100 	adc.w	r1, r1, #0
 8000630:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000634:	bf08      	it	eq
 8000636:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800063a:	bd70      	pop	{r4, r5, r6, pc}
 800063c:	f1c4 0520 	rsb	r5, r4, #32
 8000640:	fa00 f205 	lsl.w	r2, r0, r5
 8000644:	ea4e 0e02 	orr.w	lr, lr, r2
 8000648:	fa20 f304 	lsr.w	r3, r0, r4
 800064c:	fa01 f205 	lsl.w	r2, r1, r5
 8000650:	ea43 0302 	orr.w	r3, r3, r2
 8000654:	fa21 f004 	lsr.w	r0, r1, r4
 8000658:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800065c:	fa21 f204 	lsr.w	r2, r1, r4
 8000660:	ea20 0002 	bic.w	r0, r0, r2
 8000664:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000668:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800066c:	bf08      	it	eq
 800066e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000672:	bd70      	pop	{r4, r5, r6, pc}
 8000674:	f094 0f00 	teq	r4, #0
 8000678:	d10f      	bne.n	800069a <__aeabi_dmul+0x1c2>
 800067a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800067e:	0040      	lsls	r0, r0, #1
 8000680:	eb41 0101 	adc.w	r1, r1, r1
 8000684:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000688:	bf08      	it	eq
 800068a:	3c01      	subeq	r4, #1
 800068c:	d0f7      	beq.n	800067e <__aeabi_dmul+0x1a6>
 800068e:	ea41 0106 	orr.w	r1, r1, r6
 8000692:	f095 0f00 	teq	r5, #0
 8000696:	bf18      	it	ne
 8000698:	4770      	bxne	lr
 800069a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800069e:	0052      	lsls	r2, r2, #1
 80006a0:	eb43 0303 	adc.w	r3, r3, r3
 80006a4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80006a8:	bf08      	it	eq
 80006aa:	3d01      	subeq	r5, #1
 80006ac:	d0f7      	beq.n	800069e <__aeabi_dmul+0x1c6>
 80006ae:	ea43 0306 	orr.w	r3, r3, r6
 80006b2:	4770      	bx	lr
 80006b4:	ea94 0f0c 	teq	r4, ip
 80006b8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80006bc:	bf18      	it	ne
 80006be:	ea95 0f0c 	teqne	r5, ip
 80006c2:	d00c      	beq.n	80006de <__aeabi_dmul+0x206>
 80006c4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006c8:	bf18      	it	ne
 80006ca:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ce:	d1d1      	bne.n	8000674 <__aeabi_dmul+0x19c>
 80006d0:	ea81 0103 	eor.w	r1, r1, r3
 80006d4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006d8:	f04f 0000 	mov.w	r0, #0
 80006dc:	bd70      	pop	{r4, r5, r6, pc}
 80006de:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006e2:	bf06      	itte	eq
 80006e4:	4610      	moveq	r0, r2
 80006e6:	4619      	moveq	r1, r3
 80006e8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ec:	d019      	beq.n	8000722 <__aeabi_dmul+0x24a>
 80006ee:	ea94 0f0c 	teq	r4, ip
 80006f2:	d102      	bne.n	80006fa <__aeabi_dmul+0x222>
 80006f4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80006f8:	d113      	bne.n	8000722 <__aeabi_dmul+0x24a>
 80006fa:	ea95 0f0c 	teq	r5, ip
 80006fe:	d105      	bne.n	800070c <__aeabi_dmul+0x234>
 8000700:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000704:	bf1c      	itt	ne
 8000706:	4610      	movne	r0, r2
 8000708:	4619      	movne	r1, r3
 800070a:	d10a      	bne.n	8000722 <__aeabi_dmul+0x24a>
 800070c:	ea81 0103 	eor.w	r1, r1, r3
 8000710:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000714:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000718:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800071c:	f04f 0000 	mov.w	r0, #0
 8000720:	bd70      	pop	{r4, r5, r6, pc}
 8000722:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000726:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800072a:	bd70      	pop	{r4, r5, r6, pc}

0800072c <__aeabi_ddiv>:
 800072c:	b570      	push	{r4, r5, r6, lr}
 800072e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000732:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000736:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800073a:	bf1d      	ittte	ne
 800073c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000740:	ea94 0f0c 	teqne	r4, ip
 8000744:	ea95 0f0c 	teqne	r5, ip
 8000748:	f000 f8a7 	bleq	800089a <__aeabi_ddiv+0x16e>
 800074c:	eba4 0405 	sub.w	r4, r4, r5
 8000750:	ea81 0e03 	eor.w	lr, r1, r3
 8000754:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000758:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800075c:	f000 8088 	beq.w	8000870 <__aeabi_ddiv+0x144>
 8000760:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000764:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000768:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800076c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000770:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000774:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000778:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800077c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000780:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000784:	429d      	cmp	r5, r3
 8000786:	bf08      	it	eq
 8000788:	4296      	cmpeq	r6, r2
 800078a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 800078e:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000792:	d202      	bcs.n	800079a <__aeabi_ddiv+0x6e>
 8000794:	085b      	lsrs	r3, r3, #1
 8000796:	ea4f 0232 	mov.w	r2, r2, rrx
 800079a:	1ab6      	subs	r6, r6, r2
 800079c:	eb65 0503 	sbc.w	r5, r5, r3
 80007a0:	085b      	lsrs	r3, r3, #1
 80007a2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007a6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80007aa:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80007ae:	ebb6 0e02 	subs.w	lr, r6, r2
 80007b2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007b6:	bf22      	ittt	cs
 80007b8:	1ab6      	subcs	r6, r6, r2
 80007ba:	4675      	movcs	r5, lr
 80007bc:	ea40 000c 	orrcs.w	r0, r0, ip
 80007c0:	085b      	lsrs	r3, r3, #1
 80007c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007c6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007ca:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007ce:	bf22      	ittt	cs
 80007d0:	1ab6      	subcs	r6, r6, r2
 80007d2:	4675      	movcs	r5, lr
 80007d4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80007d8:	085b      	lsrs	r3, r3, #1
 80007da:	ea4f 0232 	mov.w	r2, r2, rrx
 80007de:	ebb6 0e02 	subs.w	lr, r6, r2
 80007e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007e6:	bf22      	ittt	cs
 80007e8:	1ab6      	subcs	r6, r6, r2
 80007ea:	4675      	movcs	r5, lr
 80007ec:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80007f0:	085b      	lsrs	r3, r3, #1
 80007f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007fe:	bf22      	ittt	cs
 8000800:	1ab6      	subcs	r6, r6, r2
 8000802:	4675      	movcs	r5, lr
 8000804:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000808:	ea55 0e06 	orrs.w	lr, r5, r6
 800080c:	d018      	beq.n	8000840 <__aeabi_ddiv+0x114>
 800080e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000812:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000816:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800081a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800081e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000822:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000826:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800082a:	d1c0      	bne.n	80007ae <__aeabi_ddiv+0x82>
 800082c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000830:	d10b      	bne.n	800084a <__aeabi_ddiv+0x11e>
 8000832:	ea41 0100 	orr.w	r1, r1, r0
 8000836:	f04f 0000 	mov.w	r0, #0
 800083a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800083e:	e7b6      	b.n	80007ae <__aeabi_ddiv+0x82>
 8000840:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000844:	bf04      	itt	eq
 8000846:	4301      	orreq	r1, r0
 8000848:	2000      	moveq	r0, #0
 800084a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800084e:	bf88      	it	hi
 8000850:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000854:	f63f aeaf 	bhi.w	80005b6 <__aeabi_dmul+0xde>
 8000858:	ebb5 0c03 	subs.w	ip, r5, r3
 800085c:	bf04      	itt	eq
 800085e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000862:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000866:	f150 0000 	adcs.w	r0, r0, #0
 800086a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800086e:	bd70      	pop	{r4, r5, r6, pc}
 8000870:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000874:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000878:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800087c:	bfc2      	ittt	gt
 800087e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000882:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000886:	bd70      	popgt	{r4, r5, r6, pc}
 8000888:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800088c:	f04f 0e00 	mov.w	lr, #0
 8000890:	3c01      	subs	r4, #1
 8000892:	e690      	b.n	80005b6 <__aeabi_dmul+0xde>
 8000894:	ea45 0e06 	orr.w	lr, r5, r6
 8000898:	e68d      	b.n	80005b6 <__aeabi_dmul+0xde>
 800089a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800089e:	ea94 0f0c 	teq	r4, ip
 80008a2:	bf08      	it	eq
 80008a4:	ea95 0f0c 	teqeq	r5, ip
 80008a8:	f43f af3b 	beq.w	8000722 <__aeabi_dmul+0x24a>
 80008ac:	ea94 0f0c 	teq	r4, ip
 80008b0:	d10a      	bne.n	80008c8 <__aeabi_ddiv+0x19c>
 80008b2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80008b6:	f47f af34 	bne.w	8000722 <__aeabi_dmul+0x24a>
 80008ba:	ea95 0f0c 	teq	r5, ip
 80008be:	f47f af25 	bne.w	800070c <__aeabi_dmul+0x234>
 80008c2:	4610      	mov	r0, r2
 80008c4:	4619      	mov	r1, r3
 80008c6:	e72c      	b.n	8000722 <__aeabi_dmul+0x24a>
 80008c8:	ea95 0f0c 	teq	r5, ip
 80008cc:	d106      	bne.n	80008dc <__aeabi_ddiv+0x1b0>
 80008ce:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008d2:	f43f aefd 	beq.w	80006d0 <__aeabi_dmul+0x1f8>
 80008d6:	4610      	mov	r0, r2
 80008d8:	4619      	mov	r1, r3
 80008da:	e722      	b.n	8000722 <__aeabi_dmul+0x24a>
 80008dc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80008e0:	bf18      	it	ne
 80008e2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80008e6:	f47f aec5 	bne.w	8000674 <__aeabi_dmul+0x19c>
 80008ea:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80008ee:	f47f af0d 	bne.w	800070c <__aeabi_dmul+0x234>
 80008f2:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80008f6:	f47f aeeb 	bne.w	80006d0 <__aeabi_dmul+0x1f8>
 80008fa:	e712      	b.n	8000722 <__aeabi_dmul+0x24a>

080008fc <__gedf2>:
 80008fc:	f04f 3cff 	mov.w	ip, #4294967295
 8000900:	e006      	b.n	8000910 <__cmpdf2+0x4>
 8000902:	bf00      	nop

08000904 <__ledf2>:
 8000904:	f04f 0c01 	mov.w	ip, #1
 8000908:	e002      	b.n	8000910 <__cmpdf2+0x4>
 800090a:	bf00      	nop

0800090c <__cmpdf2>:
 800090c:	f04f 0c01 	mov.w	ip, #1
 8000910:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000914:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000918:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 800091c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000920:	bf18      	it	ne
 8000922:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000926:	d01b      	beq.n	8000960 <__cmpdf2+0x54>
 8000928:	b001      	add	sp, #4
 800092a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 800092e:	bf0c      	ite	eq
 8000930:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000934:	ea91 0f03 	teqne	r1, r3
 8000938:	bf02      	ittt	eq
 800093a:	ea90 0f02 	teqeq	r0, r2
 800093e:	2000      	moveq	r0, #0
 8000940:	4770      	bxeq	lr
 8000942:	f110 0f00 	cmn.w	r0, #0
 8000946:	ea91 0f03 	teq	r1, r3
 800094a:	bf58      	it	pl
 800094c:	4299      	cmppl	r1, r3
 800094e:	bf08      	it	eq
 8000950:	4290      	cmpeq	r0, r2
 8000952:	bf2c      	ite	cs
 8000954:	17d8      	asrcs	r0, r3, #31
 8000956:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 800095a:	f040 0001 	orr.w	r0, r0, #1
 800095e:	4770      	bx	lr
 8000960:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000964:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000968:	d102      	bne.n	8000970 <__cmpdf2+0x64>
 800096a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 800096e:	d107      	bne.n	8000980 <__cmpdf2+0x74>
 8000970:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000974:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000978:	d1d6      	bne.n	8000928 <__cmpdf2+0x1c>
 800097a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 800097e:	d0d3      	beq.n	8000928 <__cmpdf2+0x1c>
 8000980:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000984:	4770      	bx	lr
 8000986:	bf00      	nop

08000988 <__aeabi_cdrcmple>:
 8000988:	4684      	mov	ip, r0
 800098a:	4610      	mov	r0, r2
 800098c:	4662      	mov	r2, ip
 800098e:	468c      	mov	ip, r1
 8000990:	4619      	mov	r1, r3
 8000992:	4663      	mov	r3, ip
 8000994:	e000      	b.n	8000998 <__aeabi_cdcmpeq>
 8000996:	bf00      	nop

08000998 <__aeabi_cdcmpeq>:
 8000998:	b501      	push	{r0, lr}
 800099a:	f7ff ffb7 	bl	800090c <__cmpdf2>
 800099e:	2800      	cmp	r0, #0
 80009a0:	bf48      	it	mi
 80009a2:	f110 0f00 	cmnmi.w	r0, #0
 80009a6:	bd01      	pop	{r0, pc}

080009a8 <__aeabi_dcmpeq>:
 80009a8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009ac:	f7ff fff4 	bl	8000998 <__aeabi_cdcmpeq>
 80009b0:	bf0c      	ite	eq
 80009b2:	2001      	moveq	r0, #1
 80009b4:	2000      	movne	r0, #0
 80009b6:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ba:	bf00      	nop

080009bc <__aeabi_dcmplt>:
 80009bc:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009c0:	f7ff ffea 	bl	8000998 <__aeabi_cdcmpeq>
 80009c4:	bf34      	ite	cc
 80009c6:	2001      	movcc	r0, #1
 80009c8:	2000      	movcs	r0, #0
 80009ca:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ce:	bf00      	nop

080009d0 <__aeabi_dcmple>:
 80009d0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009d4:	f7ff ffe0 	bl	8000998 <__aeabi_cdcmpeq>
 80009d8:	bf94      	ite	ls
 80009da:	2001      	movls	r0, #1
 80009dc:	2000      	movhi	r0, #0
 80009de:	f85d fb08 	ldr.w	pc, [sp], #8
 80009e2:	bf00      	nop

080009e4 <__aeabi_dcmpge>:
 80009e4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009e8:	f7ff ffce 	bl	8000988 <__aeabi_cdrcmple>
 80009ec:	bf94      	ite	ls
 80009ee:	2001      	movls	r0, #1
 80009f0:	2000      	movhi	r0, #0
 80009f2:	f85d fb08 	ldr.w	pc, [sp], #8
 80009f6:	bf00      	nop

080009f8 <__aeabi_dcmpgt>:
 80009f8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009fc:	f7ff ffc4 	bl	8000988 <__aeabi_cdrcmple>
 8000a00:	bf34      	ite	cc
 8000a02:	2001      	movcc	r0, #1
 8000a04:	2000      	movcs	r0, #0
 8000a06:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a0a:	bf00      	nop

08000a0c <__aeabi_dcmpun>:
 8000a0c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a10:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a14:	d102      	bne.n	8000a1c <__aeabi_dcmpun+0x10>
 8000a16:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a1a:	d10a      	bne.n	8000a32 <__aeabi_dcmpun+0x26>
 8000a1c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a20:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a24:	d102      	bne.n	8000a2c <__aeabi_dcmpun+0x20>
 8000a26:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a2a:	d102      	bne.n	8000a32 <__aeabi_dcmpun+0x26>
 8000a2c:	f04f 0000 	mov.w	r0, #0
 8000a30:	4770      	bx	lr
 8000a32:	f04f 0001 	mov.w	r0, #1
 8000a36:	4770      	bx	lr

08000a38 <__aeabi_d2iz>:
 8000a38:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a3c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000a40:	d215      	bcs.n	8000a6e <__aeabi_d2iz+0x36>
 8000a42:	d511      	bpl.n	8000a68 <__aeabi_d2iz+0x30>
 8000a44:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000a48:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a4c:	d912      	bls.n	8000a74 <__aeabi_d2iz+0x3c>
 8000a4e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a52:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000a56:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a5a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000a5e:	fa23 f002 	lsr.w	r0, r3, r2
 8000a62:	bf18      	it	ne
 8000a64:	4240      	negne	r0, r0
 8000a66:	4770      	bx	lr
 8000a68:	f04f 0000 	mov.w	r0, #0
 8000a6c:	4770      	bx	lr
 8000a6e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000a72:	d105      	bne.n	8000a80 <__aeabi_d2iz+0x48>
 8000a74:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000a78:	bf08      	it	eq
 8000a7a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000a7e:	4770      	bx	lr
 8000a80:	f04f 0000 	mov.w	r0, #0
 8000a84:	4770      	bx	lr
 8000a86:	bf00      	nop

08000a88 <__aeabi_d2uiz>:
 8000a88:	004a      	lsls	r2, r1, #1
 8000a8a:	d211      	bcs.n	8000ab0 <__aeabi_d2uiz+0x28>
 8000a8c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000a90:	d211      	bcs.n	8000ab6 <__aeabi_d2uiz+0x2e>
 8000a92:	d50d      	bpl.n	8000ab0 <__aeabi_d2uiz+0x28>
 8000a94:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000a98:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a9c:	d40e      	bmi.n	8000abc <__aeabi_d2uiz+0x34>
 8000a9e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000aa2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000aa6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000aaa:	fa23 f002 	lsr.w	r0, r3, r2
 8000aae:	4770      	bx	lr
 8000ab0:	f04f 0000 	mov.w	r0, #0
 8000ab4:	4770      	bx	lr
 8000ab6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000aba:	d102      	bne.n	8000ac2 <__aeabi_d2uiz+0x3a>
 8000abc:	f04f 30ff 	mov.w	r0, #4294967295
 8000ac0:	4770      	bx	lr
 8000ac2:	f04f 0000 	mov.w	r0, #0
 8000ac6:	4770      	bx	lr

08000ac8 <__aeabi_d2f>:
 8000ac8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000acc:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000ad0:	bf24      	itt	cs
 8000ad2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000ad6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000ada:	d90d      	bls.n	8000af8 <__aeabi_d2f+0x30>
 8000adc:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000ae0:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000ae4:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000ae8:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000aec:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000af0:	bf08      	it	eq
 8000af2:	f020 0001 	biceq.w	r0, r0, #1
 8000af6:	4770      	bx	lr
 8000af8:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000afc:	d121      	bne.n	8000b42 <__aeabi_d2f+0x7a>
 8000afe:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000b02:	bfbc      	itt	lt
 8000b04:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000b08:	4770      	bxlt	lr
 8000b0a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000b0e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000b12:	f1c2 0218 	rsb	r2, r2, #24
 8000b16:	f1c2 0c20 	rsb	ip, r2, #32
 8000b1a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000b1e:	fa20 f002 	lsr.w	r0, r0, r2
 8000b22:	bf18      	it	ne
 8000b24:	f040 0001 	orrne.w	r0, r0, #1
 8000b28:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b2c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000b30:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000b34:	ea40 000c 	orr.w	r0, r0, ip
 8000b38:	fa23 f302 	lsr.w	r3, r3, r2
 8000b3c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000b40:	e7cc      	b.n	8000adc <__aeabi_d2f+0x14>
 8000b42:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000b46:	d107      	bne.n	8000b58 <__aeabi_d2f+0x90>
 8000b48:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000b4c:	bf1e      	ittt	ne
 8000b4e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000b52:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000b56:	4770      	bxne	lr
 8000b58:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000b5c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000b60:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000b64:	4770      	bx	lr
 8000b66:	bf00      	nop

08000b68 <__aeabi_frsub>:
 8000b68:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
 8000b6c:	e002      	b.n	8000b74 <__addsf3>
 8000b6e:	bf00      	nop

08000b70 <__aeabi_fsub>:
 8000b70:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

08000b74 <__addsf3>:
 8000b74:	0042      	lsls	r2, r0, #1
 8000b76:	bf1f      	itttt	ne
 8000b78:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000b7c:	ea92 0f03 	teqne	r2, r3
 8000b80:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000b84:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000b88:	d06a      	beq.n	8000c60 <__addsf3+0xec>
 8000b8a:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000b8e:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8000b92:	bfc1      	itttt	gt
 8000b94:	18d2      	addgt	r2, r2, r3
 8000b96:	4041      	eorgt	r1, r0
 8000b98:	4048      	eorgt	r0, r1
 8000b9a:	4041      	eorgt	r1, r0
 8000b9c:	bfb8      	it	lt
 8000b9e:	425b      	neglt	r3, r3
 8000ba0:	2b19      	cmp	r3, #25
 8000ba2:	bf88      	it	hi
 8000ba4:	4770      	bxhi	lr
 8000ba6:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 8000baa:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000bae:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 8000bb2:	bf18      	it	ne
 8000bb4:	4240      	negne	r0, r0
 8000bb6:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000bba:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 8000bbe:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 8000bc2:	bf18      	it	ne
 8000bc4:	4249      	negne	r1, r1
 8000bc6:	ea92 0f03 	teq	r2, r3
 8000bca:	d03f      	beq.n	8000c4c <__addsf3+0xd8>
 8000bcc:	f1a2 0201 	sub.w	r2, r2, #1
 8000bd0:	fa41 fc03 	asr.w	ip, r1, r3
 8000bd4:	eb10 000c 	adds.w	r0, r0, ip
 8000bd8:	f1c3 0320 	rsb	r3, r3, #32
 8000bdc:	fa01 f103 	lsl.w	r1, r1, r3
 8000be0:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000be4:	d502      	bpl.n	8000bec <__addsf3+0x78>
 8000be6:	4249      	negs	r1, r1
 8000be8:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8000bec:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 8000bf0:	d313      	bcc.n	8000c1a <__addsf3+0xa6>
 8000bf2:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8000bf6:	d306      	bcc.n	8000c06 <__addsf3+0x92>
 8000bf8:	0840      	lsrs	r0, r0, #1
 8000bfa:	ea4f 0131 	mov.w	r1, r1, rrx
 8000bfe:	f102 0201 	add.w	r2, r2, #1
 8000c02:	2afe      	cmp	r2, #254	; 0xfe
 8000c04:	d251      	bcs.n	8000caa <__addsf3+0x136>
 8000c06:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
 8000c0a:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000c0e:	bf08      	it	eq
 8000c10:	f020 0001 	biceq.w	r0, r0, #1
 8000c14:	ea40 0003 	orr.w	r0, r0, r3
 8000c18:	4770      	bx	lr
 8000c1a:	0049      	lsls	r1, r1, #1
 8000c1c:	eb40 0000 	adc.w	r0, r0, r0
 8000c20:	3a01      	subs	r2, #1
 8000c22:	bf28      	it	cs
 8000c24:	f5b0 0f00 	cmpcs.w	r0, #8388608	; 0x800000
 8000c28:	d2ed      	bcs.n	8000c06 <__addsf3+0x92>
 8000c2a:	fab0 fc80 	clz	ip, r0
 8000c2e:	f1ac 0c08 	sub.w	ip, ip, #8
 8000c32:	ebb2 020c 	subs.w	r2, r2, ip
 8000c36:	fa00 f00c 	lsl.w	r0, r0, ip
 8000c3a:	bfaa      	itet	ge
 8000c3c:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000c40:	4252      	neglt	r2, r2
 8000c42:	4318      	orrge	r0, r3
 8000c44:	bfbc      	itt	lt
 8000c46:	40d0      	lsrlt	r0, r2
 8000c48:	4318      	orrlt	r0, r3
 8000c4a:	4770      	bx	lr
 8000c4c:	f092 0f00 	teq	r2, #0
 8000c50:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
 8000c54:	bf06      	itte	eq
 8000c56:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
 8000c5a:	3201      	addeq	r2, #1
 8000c5c:	3b01      	subne	r3, #1
 8000c5e:	e7b5      	b.n	8000bcc <__addsf3+0x58>
 8000c60:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000c64:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000c68:	bf18      	it	ne
 8000c6a:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000c6e:	d021      	beq.n	8000cb4 <__addsf3+0x140>
 8000c70:	ea92 0f03 	teq	r2, r3
 8000c74:	d004      	beq.n	8000c80 <__addsf3+0x10c>
 8000c76:	f092 0f00 	teq	r2, #0
 8000c7a:	bf08      	it	eq
 8000c7c:	4608      	moveq	r0, r1
 8000c7e:	4770      	bx	lr
 8000c80:	ea90 0f01 	teq	r0, r1
 8000c84:	bf1c      	itt	ne
 8000c86:	2000      	movne	r0, #0
 8000c88:	4770      	bxne	lr
 8000c8a:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
 8000c8e:	d104      	bne.n	8000c9a <__addsf3+0x126>
 8000c90:	0040      	lsls	r0, r0, #1
 8000c92:	bf28      	it	cs
 8000c94:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
 8000c98:	4770      	bx	lr
 8000c9a:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
 8000c9e:	bf3c      	itt	cc
 8000ca0:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
 8000ca4:	4770      	bxcc	lr
 8000ca6:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000caa:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
 8000cae:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000cb2:	4770      	bx	lr
 8000cb4:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000cb8:	bf16      	itet	ne
 8000cba:	4608      	movne	r0, r1
 8000cbc:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8000cc0:	4601      	movne	r1, r0
 8000cc2:	0242      	lsls	r2, r0, #9
 8000cc4:	bf06      	itte	eq
 8000cc6:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8000cca:	ea90 0f01 	teqeq	r0, r1
 8000cce:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
 8000cd2:	4770      	bx	lr

08000cd4 <__aeabi_ui2f>:
 8000cd4:	f04f 0300 	mov.w	r3, #0
 8000cd8:	e004      	b.n	8000ce4 <__aeabi_i2f+0x8>
 8000cda:	bf00      	nop

08000cdc <__aeabi_i2f>:
 8000cdc:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
 8000ce0:	bf48      	it	mi
 8000ce2:	4240      	negmi	r0, r0
 8000ce4:	ea5f 0c00 	movs.w	ip, r0
 8000ce8:	bf08      	it	eq
 8000cea:	4770      	bxeq	lr
 8000cec:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
 8000cf0:	4601      	mov	r1, r0
 8000cf2:	f04f 0000 	mov.w	r0, #0
 8000cf6:	e01c      	b.n	8000d32 <__aeabi_l2f+0x2a>

08000cf8 <__aeabi_ul2f>:
 8000cf8:	ea50 0201 	orrs.w	r2, r0, r1
 8000cfc:	bf08      	it	eq
 8000cfe:	4770      	bxeq	lr
 8000d00:	f04f 0300 	mov.w	r3, #0
 8000d04:	e00a      	b.n	8000d1c <__aeabi_l2f+0x14>
 8000d06:	bf00      	nop

08000d08 <__aeabi_l2f>:
 8000d08:	ea50 0201 	orrs.w	r2, r0, r1
 8000d0c:	bf08      	it	eq
 8000d0e:	4770      	bxeq	lr
 8000d10:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
 8000d14:	d502      	bpl.n	8000d1c <__aeabi_l2f+0x14>
 8000d16:	4240      	negs	r0, r0
 8000d18:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000d1c:	ea5f 0c01 	movs.w	ip, r1
 8000d20:	bf02      	ittt	eq
 8000d22:	4684      	moveq	ip, r0
 8000d24:	4601      	moveq	r1, r0
 8000d26:	2000      	moveq	r0, #0
 8000d28:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
 8000d2c:	bf08      	it	eq
 8000d2e:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
 8000d32:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 8000d36:	fabc f28c 	clz	r2, ip
 8000d3a:	3a08      	subs	r2, #8
 8000d3c:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000d40:	db10      	blt.n	8000d64 <__aeabi_l2f+0x5c>
 8000d42:	fa01 fc02 	lsl.w	ip, r1, r2
 8000d46:	4463      	add	r3, ip
 8000d48:	fa00 fc02 	lsl.w	ip, r0, r2
 8000d4c:	f1c2 0220 	rsb	r2, r2, #32
 8000d50:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000d54:	fa20 f202 	lsr.w	r2, r0, r2
 8000d58:	eb43 0002 	adc.w	r0, r3, r2
 8000d5c:	bf08      	it	eq
 8000d5e:	f020 0001 	biceq.w	r0, r0, #1
 8000d62:	4770      	bx	lr
 8000d64:	f102 0220 	add.w	r2, r2, #32
 8000d68:	fa01 fc02 	lsl.w	ip, r1, r2
 8000d6c:	f1c2 0220 	rsb	r2, r2, #32
 8000d70:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000d74:	fa21 f202 	lsr.w	r2, r1, r2
 8000d78:	eb43 0002 	adc.w	r0, r3, r2
 8000d7c:	bf08      	it	eq
 8000d7e:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000d82:	4770      	bx	lr

08000d84 <__aeabi_fmul>:
 8000d84:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000d88:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000d8c:	bf1e      	ittt	ne
 8000d8e:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000d92:	ea92 0f0c 	teqne	r2, ip
 8000d96:	ea93 0f0c 	teqne	r3, ip
 8000d9a:	d06f      	beq.n	8000e7c <__aeabi_fmul+0xf8>
 8000d9c:	441a      	add	r2, r3
 8000d9e:	ea80 0c01 	eor.w	ip, r0, r1
 8000da2:	0240      	lsls	r0, r0, #9
 8000da4:	bf18      	it	ne
 8000da6:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 8000daa:	d01e      	beq.n	8000dea <__aeabi_fmul+0x66>
 8000dac:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8000db0:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 8000db4:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 8000db8:	fba0 3101 	umull	r3, r1, r0, r1
 8000dbc:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000dc0:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
 8000dc4:	bf3e      	ittt	cc
 8000dc6:	0049      	lslcc	r1, r1, #1
 8000dc8:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 8000dcc:	005b      	lslcc	r3, r3, #1
 8000dce:	ea40 0001 	orr.w	r0, r0, r1
 8000dd2:	f162 027f 	sbc.w	r2, r2, #127	; 0x7f
 8000dd6:	2afd      	cmp	r2, #253	; 0xfd
 8000dd8:	d81d      	bhi.n	8000e16 <__aeabi_fmul+0x92>
 8000dda:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8000dde:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000de2:	bf08      	it	eq
 8000de4:	f020 0001 	biceq.w	r0, r0, #1
 8000de8:	4770      	bx	lr
 8000dea:	f090 0f00 	teq	r0, #0
 8000dee:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8000df2:	bf08      	it	eq
 8000df4:	0249      	lsleq	r1, r1, #9
 8000df6:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000dfa:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 8000dfe:	3a7f      	subs	r2, #127	; 0x7f
 8000e00:	bfc2      	ittt	gt
 8000e02:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000e06:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000e0a:	4770      	bxgt	lr
 8000e0c:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000e10:	f04f 0300 	mov.w	r3, #0
 8000e14:	3a01      	subs	r2, #1
 8000e16:	dc5d      	bgt.n	8000ed4 <__aeabi_fmul+0x150>
 8000e18:	f112 0f19 	cmn.w	r2, #25
 8000e1c:	bfdc      	itt	le
 8000e1e:	f000 4000 	andle.w	r0, r0, #2147483648	; 0x80000000
 8000e22:	4770      	bxle	lr
 8000e24:	f1c2 0200 	rsb	r2, r2, #0
 8000e28:	0041      	lsls	r1, r0, #1
 8000e2a:	fa21 f102 	lsr.w	r1, r1, r2
 8000e2e:	f1c2 0220 	rsb	r2, r2, #32
 8000e32:	fa00 fc02 	lsl.w	ip, r0, r2
 8000e36:	ea5f 0031 	movs.w	r0, r1, rrx
 8000e3a:	f140 0000 	adc.w	r0, r0, #0
 8000e3e:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 8000e42:	bf08      	it	eq
 8000e44:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000e48:	4770      	bx	lr
 8000e4a:	f092 0f00 	teq	r2, #0
 8000e4e:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000e52:	bf02      	ittt	eq
 8000e54:	0040      	lsleq	r0, r0, #1
 8000e56:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000e5a:	3a01      	subeq	r2, #1
 8000e5c:	d0f9      	beq.n	8000e52 <__aeabi_fmul+0xce>
 8000e5e:	ea40 000c 	orr.w	r0, r0, ip
 8000e62:	f093 0f00 	teq	r3, #0
 8000e66:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000e6a:	bf02      	ittt	eq
 8000e6c:	0049      	lsleq	r1, r1, #1
 8000e6e:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000e72:	3b01      	subeq	r3, #1
 8000e74:	d0f9      	beq.n	8000e6a <__aeabi_fmul+0xe6>
 8000e76:	ea41 010c 	orr.w	r1, r1, ip
 8000e7a:	e78f      	b.n	8000d9c <__aeabi_fmul+0x18>
 8000e7c:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000e80:	ea92 0f0c 	teq	r2, ip
 8000e84:	bf18      	it	ne
 8000e86:	ea93 0f0c 	teqne	r3, ip
 8000e8a:	d00a      	beq.n	8000ea2 <__aeabi_fmul+0x11e>
 8000e8c:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8000e90:	bf18      	it	ne
 8000e92:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8000e96:	d1d8      	bne.n	8000e4a <__aeabi_fmul+0xc6>
 8000e98:	ea80 0001 	eor.w	r0, r0, r1
 8000e9c:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000ea0:	4770      	bx	lr
 8000ea2:	f090 0f00 	teq	r0, #0
 8000ea6:	bf17      	itett	ne
 8000ea8:	f090 4f00 	teqne	r0, #2147483648	; 0x80000000
 8000eac:	4608      	moveq	r0, r1
 8000eae:	f091 0f00 	teqne	r1, #0
 8000eb2:	f091 4f00 	teqne	r1, #2147483648	; 0x80000000
 8000eb6:	d014      	beq.n	8000ee2 <__aeabi_fmul+0x15e>
 8000eb8:	ea92 0f0c 	teq	r2, ip
 8000ebc:	d101      	bne.n	8000ec2 <__aeabi_fmul+0x13e>
 8000ebe:	0242      	lsls	r2, r0, #9
 8000ec0:	d10f      	bne.n	8000ee2 <__aeabi_fmul+0x15e>
 8000ec2:	ea93 0f0c 	teq	r3, ip
 8000ec6:	d103      	bne.n	8000ed0 <__aeabi_fmul+0x14c>
 8000ec8:	024b      	lsls	r3, r1, #9
 8000eca:	bf18      	it	ne
 8000ecc:	4608      	movne	r0, r1
 8000ece:	d108      	bne.n	8000ee2 <__aeabi_fmul+0x15e>
 8000ed0:	ea80 0001 	eor.w	r0, r0, r1
 8000ed4:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000ed8:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000edc:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000ee0:	4770      	bx	lr
 8000ee2:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000ee6:	f440 0040 	orr.w	r0, r0, #12582912	; 0xc00000
 8000eea:	4770      	bx	lr

08000eec <__aeabi_fdiv>:
 8000eec:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000ef0:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000ef4:	bf1e      	ittt	ne
 8000ef6:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000efa:	ea92 0f0c 	teqne	r2, ip
 8000efe:	ea93 0f0c 	teqne	r3, ip
 8000f02:	d069      	beq.n	8000fd8 <__aeabi_fdiv+0xec>
 8000f04:	eba2 0203 	sub.w	r2, r2, r3
 8000f08:	ea80 0c01 	eor.w	ip, r0, r1
 8000f0c:	0249      	lsls	r1, r1, #9
 8000f0e:	ea4f 2040 	mov.w	r0, r0, lsl #9
 8000f12:	d037      	beq.n	8000f84 <__aeabi_fdiv+0x98>
 8000f14:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8000f18:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
 8000f1c:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
 8000f20:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000f24:	428b      	cmp	r3, r1
 8000f26:	bf38      	it	cc
 8000f28:	005b      	lslcc	r3, r3, #1
 8000f2a:	f142 027d 	adc.w	r2, r2, #125	; 0x7d
 8000f2e:	f44f 0c00 	mov.w	ip, #8388608	; 0x800000
 8000f32:	428b      	cmp	r3, r1
 8000f34:	bf24      	itt	cs
 8000f36:	1a5b      	subcs	r3, r3, r1
 8000f38:	ea40 000c 	orrcs.w	r0, r0, ip
 8000f3c:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
 8000f40:	bf24      	itt	cs
 8000f42:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
 8000f46:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000f4a:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
 8000f4e:	bf24      	itt	cs
 8000f50:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
 8000f54:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000f58:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
 8000f5c:	bf24      	itt	cs
 8000f5e:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
 8000f62:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000f66:	011b      	lsls	r3, r3, #4
 8000f68:	bf18      	it	ne
 8000f6a:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
 8000f6e:	d1e0      	bne.n	8000f32 <__aeabi_fdiv+0x46>
 8000f70:	2afd      	cmp	r2, #253	; 0xfd
 8000f72:	f63f af50 	bhi.w	8000e16 <__aeabi_fmul+0x92>
 8000f76:	428b      	cmp	r3, r1
 8000f78:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000f7c:	bf08      	it	eq
 8000f7e:	f020 0001 	biceq.w	r0, r0, #1
 8000f82:	4770      	bx	lr
 8000f84:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8000f88:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000f8c:	327f      	adds	r2, #127	; 0x7f
 8000f8e:	bfc2      	ittt	gt
 8000f90:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000f94:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000f98:	4770      	bxgt	lr
 8000f9a:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000f9e:	f04f 0300 	mov.w	r3, #0
 8000fa2:	3a01      	subs	r2, #1
 8000fa4:	e737      	b.n	8000e16 <__aeabi_fmul+0x92>
 8000fa6:	f092 0f00 	teq	r2, #0
 8000faa:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000fae:	bf02      	ittt	eq
 8000fb0:	0040      	lsleq	r0, r0, #1
 8000fb2:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000fb6:	3a01      	subeq	r2, #1
 8000fb8:	d0f9      	beq.n	8000fae <__aeabi_fdiv+0xc2>
 8000fba:	ea40 000c 	orr.w	r0, r0, ip
 8000fbe:	f093 0f00 	teq	r3, #0
 8000fc2:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000fc6:	bf02      	ittt	eq
 8000fc8:	0049      	lsleq	r1, r1, #1
 8000fca:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000fce:	3b01      	subeq	r3, #1
 8000fd0:	d0f9      	beq.n	8000fc6 <__aeabi_fdiv+0xda>
 8000fd2:	ea41 010c 	orr.w	r1, r1, ip
 8000fd6:	e795      	b.n	8000f04 <__aeabi_fdiv+0x18>
 8000fd8:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000fdc:	ea92 0f0c 	teq	r2, ip
 8000fe0:	d108      	bne.n	8000ff4 <__aeabi_fdiv+0x108>
 8000fe2:	0242      	lsls	r2, r0, #9
 8000fe4:	f47f af7d 	bne.w	8000ee2 <__aeabi_fmul+0x15e>
 8000fe8:	ea93 0f0c 	teq	r3, ip
 8000fec:	f47f af70 	bne.w	8000ed0 <__aeabi_fmul+0x14c>
 8000ff0:	4608      	mov	r0, r1
 8000ff2:	e776      	b.n	8000ee2 <__aeabi_fmul+0x15e>
 8000ff4:	ea93 0f0c 	teq	r3, ip
 8000ff8:	d104      	bne.n	8001004 <__aeabi_fdiv+0x118>
 8000ffa:	024b      	lsls	r3, r1, #9
 8000ffc:	f43f af4c 	beq.w	8000e98 <__aeabi_fmul+0x114>
 8001000:	4608      	mov	r0, r1
 8001002:	e76e      	b.n	8000ee2 <__aeabi_fmul+0x15e>
 8001004:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8001008:	bf18      	it	ne
 800100a:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 800100e:	d1ca      	bne.n	8000fa6 <__aeabi_fdiv+0xba>
 8001010:	f030 4200 	bics.w	r2, r0, #2147483648	; 0x80000000
 8001014:	f47f af5c 	bne.w	8000ed0 <__aeabi_fmul+0x14c>
 8001018:	f031 4300 	bics.w	r3, r1, #2147483648	; 0x80000000
 800101c:	f47f af3c 	bne.w	8000e98 <__aeabi_fmul+0x114>
 8001020:	e75f      	b.n	8000ee2 <__aeabi_fmul+0x15e>
 8001022:	bf00      	nop

08001024 <__aeabi_d2lz>:
 8001024:	b538      	push	{r3, r4, r5, lr}
 8001026:	460c      	mov	r4, r1
 8001028:	4605      	mov	r5, r0
 800102a:	4621      	mov	r1, r4
 800102c:	4628      	mov	r0, r5
 800102e:	2200      	movs	r2, #0
 8001030:	2300      	movs	r3, #0
 8001032:	f7ff fcc3 	bl	80009bc <__aeabi_dcmplt>
 8001036:	b928      	cbnz	r0, 8001044 <__aeabi_d2lz+0x20>
 8001038:	4628      	mov	r0, r5
 800103a:	4621      	mov	r1, r4
 800103c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8001040:	f000 b80a 	b.w	8001058 <__aeabi_d2ulz>
 8001044:	4628      	mov	r0, r5
 8001046:	f104 4100 	add.w	r1, r4, #2147483648	; 0x80000000
 800104a:	f000 f805 	bl	8001058 <__aeabi_d2ulz>
 800104e:	4240      	negs	r0, r0
 8001050:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8001054:	bd38      	pop	{r3, r4, r5, pc}
 8001056:	bf00      	nop

08001058 <__aeabi_d2ulz>:
 8001058:	b5d0      	push	{r4, r6, r7, lr}
 800105a:	2200      	movs	r2, #0
 800105c:	4b0b      	ldr	r3, [pc, #44]	; (800108c <__aeabi_d2ulz+0x34>)
 800105e:	4606      	mov	r6, r0
 8001060:	460f      	mov	r7, r1
 8001062:	f7ff fa39 	bl	80004d8 <__aeabi_dmul>
 8001066:	f7ff fd0f 	bl	8000a88 <__aeabi_d2uiz>
 800106a:	4604      	mov	r4, r0
 800106c:	f7ff f9ba 	bl	80003e4 <__aeabi_ui2d>
 8001070:	2200      	movs	r2, #0
 8001072:	4b07      	ldr	r3, [pc, #28]	; (8001090 <__aeabi_d2ulz+0x38>)
 8001074:	f7ff fa30 	bl	80004d8 <__aeabi_dmul>
 8001078:	4602      	mov	r2, r0
 800107a:	460b      	mov	r3, r1
 800107c:	4630      	mov	r0, r6
 800107e:	4639      	mov	r1, r7
 8001080:	f7ff f872 	bl	8000168 <__aeabi_dsub>
 8001084:	f7ff fd00 	bl	8000a88 <__aeabi_d2uiz>
 8001088:	4621      	mov	r1, r4
 800108a:	bdd0      	pop	{r4, r6, r7, pc}
 800108c:	3df00000 	.word	0x3df00000
 8001090:	41f00000 	.word	0x41f00000

08001094 <PowerOn>:
void BH1750_reset(){
	uint8_t cmd = RESET_REGISTER;
	HAL_I2C_Master_Transmit(hi2c, BH1750_ADDR_LOW_W, (uint8_t *)&cmd, 1, 50);
}

void PowerOn(){
 8001094:	b580      	push	{r7, lr}
 8001096:	b084      	sub	sp, #16
 8001098:	af02      	add	r7, sp, #8
	uint8_t cmd = POWER_ON;
 800109a:	2301      	movs	r3, #1
 800109c:	71fb      	strb	r3, [r7, #7]
	HAL_I2C_Master_Transmit(hi2c, BH1750_ADDR_LOW_W, (uint8_t *)&cmd, 1, 50);
 800109e:	1dfa      	adds	r2, r7, #7
 80010a0:	2332      	movs	r3, #50	; 0x32
 80010a2:	9300      	str	r3, [sp, #0]
 80010a4:	2301      	movs	r3, #1
 80010a6:	2146      	movs	r1, #70	; 0x46
 80010a8:	4804      	ldr	r0, [pc, #16]	; (80010bc <PowerOn+0x28>)
 80010aa:	f001 fe5b 	bl	8002d64 <HAL_I2C_Master_Transmit>
	HAL_Delay(1);
 80010ae:	2001      	movs	r0, #1
 80010b0:	f000 fe30 	bl	8001d14 <HAL_Delay>
}
 80010b4:	bf00      	nop
 80010b6:	3708      	adds	r7, #8
 80010b8:	46bd      	mov	sp, r7
 80010ba:	bd80      	pop	{r7, pc}
 80010bc:	20000214 	.word	0x20000214

080010c0 <PowerDown>:

void PowerDown(){
 80010c0:	b580      	push	{r7, lr}
 80010c2:	b084      	sub	sp, #16
 80010c4:	af02      	add	r7, sp, #8
	uint8_t cmd = POWER_DOWN;
 80010c6:	2300      	movs	r3, #0
 80010c8:	71fb      	strb	r3, [r7, #7]
	HAL_I2C_Master_Transmit(hi2c, BH1750_ADDR_LOW_W, (uint8_t *)&cmd, 1, 50);
 80010ca:	1dfa      	adds	r2, r7, #7
 80010cc:	2332      	movs	r3, #50	; 0x32
 80010ce:	9300      	str	r3, [sp, #0]
 80010d0:	2301      	movs	r3, #1
 80010d2:	2146      	movs	r1, #70	; 0x46
 80010d4:	4803      	ldr	r0, [pc, #12]	; (80010e4 <PowerDown+0x24>)
 80010d6:	f001 fe45 	bl	8002d64 <HAL_I2C_Master_Transmit>
}
 80010da:	bf00      	nop
 80010dc:	3708      	adds	r7, #8
 80010de:	46bd      	mov	sp, r7
 80010e0:	bd80      	pop	{r7, pc}
 80010e2:	bf00      	nop
 80010e4:	20000214 	.word	0x20000214

080010e8 <setMeasurement>:

void setMeasurement(BH1750_cmd cmd_mode){
 80010e8:	b580      	push	{r7, lr}
 80010ea:	b086      	sub	sp, #24
 80010ec:	af02      	add	r7, sp, #8
 80010ee:	4603      	mov	r3, r0
 80010f0:	71fb      	strb	r3, [r7, #7]
	uint8_t cmd=cmd_mode;
 80010f2:	79fb      	ldrb	r3, [r7, #7]
 80010f4:	73fb      	strb	r3, [r7, #15]
	if(cmd_mode == CONT_L_MODE||ONCE_L_MODE) {
		HAL_I2C_Master_Transmit(hi2c, BH1750_ADDR_LOW_W, (uint8_t *)&cmd, 1, 50);
 80010f6:	f107 020f 	add.w	r2, r7, #15
 80010fa:	2332      	movs	r3, #50	; 0x32
 80010fc:	9300      	str	r3, [sp, #0]
 80010fe:	2301      	movs	r3, #1
 8001100:	2146      	movs	r1, #70	; 0x46
 8001102:	4805      	ldr	r0, [pc, #20]	; (8001118 <setMeasurement+0x30>)
 8001104:	f001 fe2e 	bl	8002d64 <HAL_I2C_Master_Transmit>
		HAL_Delay(16);
 8001108:	2010      	movs	r0, #16
 800110a:	f000 fe03 	bl	8001d14 <HAL_Delay>
	}
	else {
		HAL_I2C_Master_Transmit(hi2c, BH1750_ADDR_LOW_W, (uint8_t *)&cmd, 1, 50);
		HAL_Delay(120);
	}
}
 800110e:	bf00      	nop
 8001110:	3710      	adds	r7, #16
 8001112:	46bd      	mov	sp, r7
 8001114:	bd80      	pop	{r7, pc}
 8001116:	bf00      	nop
 8001118:	20000214 	.word	0x20000214

0800111c <BH1750_getResult>:

float BH1750_getResult(){
 800111c:	b580      	push	{r7, lr}
 800111e:	b084      	sub	sp, #16
 8001120:	af02      	add	r7, sp, #8
	uint8_t byte[2];
	uint16_t result;
	float light = 0;
 8001122:	f04f 0300 	mov.w	r3, #0
 8001126:	607b      	str	r3, [r7, #4]

	HAL_I2C_Master_Receive(hi2c, BH1750_ADDR_LOW_R, (uint8_t *)&byte, 2, 100);
 8001128:	463a      	mov	r2, r7
 800112a:	2364      	movs	r3, #100	; 0x64
 800112c:	9300      	str	r3, [sp, #0]
 800112e:	2302      	movs	r3, #2
 8001130:	2147      	movs	r1, #71	; 0x47
 8001132:	4812      	ldr	r0, [pc, #72]	; (800117c <BH1750_getResult+0x60>)
 8001134:	f001 ff14 	bl	8002f60 <HAL_I2C_Master_Receive>
	result = (byte[0]<<8)|byte[1];
 8001138:	783b      	ldrb	r3, [r7, #0]
 800113a:	021b      	lsls	r3, r3, #8
 800113c:	b21a      	sxth	r2, r3
 800113e:	787b      	ldrb	r3, [r7, #1]
 8001140:	b21b      	sxth	r3, r3
 8001142:	4313      	orrs	r3, r2
 8001144:	b21b      	sxth	r3, r3
 8001146:	807b      	strh	r3, [r7, #2]
	light = (float)result/1.2;
 8001148:	887b      	ldrh	r3, [r7, #2]
 800114a:	4618      	mov	r0, r3
 800114c:	f7ff fdc2 	bl	8000cd4 <__aeabi_ui2f>
 8001150:	4603      	mov	r3, r0
 8001152:	4618      	mov	r0, r3
 8001154:	f7ff f968 	bl	8000428 <__aeabi_f2d>
 8001158:	f04f 3233 	mov.w	r2, #858993459	; 0x33333333
 800115c:	4b08      	ldr	r3, [pc, #32]	; (8001180 <BH1750_getResult+0x64>)
 800115e:	f7ff fae5 	bl	800072c <__aeabi_ddiv>
 8001162:	4602      	mov	r2, r0
 8001164:	460b      	mov	r3, r1
 8001166:	4610      	mov	r0, r2
 8001168:	4619      	mov	r1, r3
 800116a:	f7ff fcad 	bl	8000ac8 <__aeabi_d2f>
 800116e:	4603      	mov	r3, r0
 8001170:	607b      	str	r3, [r7, #4]
	return light;
 8001172:	687b      	ldr	r3, [r7, #4]
}
 8001174:	4618      	mov	r0, r3
 8001176:	3708      	adds	r7, #8
 8001178:	46bd      	mov	sp, r7
 800117a:	bd80      	pop	{r7, pc}
 800117c:	20000214 	.word	0x20000214
 8001180:	3ff33333 	.word	0x3ff33333
 8001184:	00000000 	.word	0x00000000

08001188 <get_temp_humi>:


extern I2C_HandleTypeDef hi2c2;
#define hi2c &hi2c2

t_h get_temp_humi(){
 8001188:	b580      	push	{r7, lr}
 800118a:	b08a      	sub	sp, #40	; 0x28
 800118c:	af02      	add	r7, sp, #8
 800118e:	6078      	str	r0, [r7, #4]
	uint8_t data[2];
	int temp;
	int humi;
	uint8_t readbuff[6];

	HAL_Delay(50);
 8001190:	2032      	movs	r0, #50	; 0x32
 8001192:	f000 fdbf 	bl	8001d14 <HAL_Delay>
	data[0] = 0x22; //command
 8001196:	2322      	movs	r3, #34	; 0x22
 8001198:	753b      	strb	r3, [r7, #20]
	data[1] = 0x36;
 800119a:	2336      	movs	r3, #54	; 0x36
 800119c:	757b      	strb	r3, [r7, #21]
	HAL_I2C_Master_Transmit(hi2c,SLAVE_ADDRESS_SHT31A<<1,data,2,50);
 800119e:	f107 0214 	add.w	r2, r7, #20
 80011a2:	2332      	movs	r3, #50	; 0x32
 80011a4:	9300      	str	r3, [sp, #0]
 80011a6:	2302      	movs	r3, #2
 80011a8:	2188      	movs	r1, #136	; 0x88
 80011aa:	4835      	ldr	r0, [pc, #212]	; (8001280 <get_temp_humi+0xf8>)
 80011ac:	f001 fdda 	bl	8002d64 <HAL_I2C_Master_Transmit>
	HAL_Delay(50);
 80011b0:	2032      	movs	r0, #50	; 0x32
 80011b2:	f000 fdaf 	bl	8001d14 <HAL_Delay>
	HAL_I2C_Master_Receive(hi2c,SLAVE_ADDRESS_SHT31A<<1,readbuff,6,50);
 80011b6:	f107 020c 	add.w	r2, r7, #12
 80011ba:	2332      	movs	r3, #50	; 0x32
 80011bc:	9300      	str	r3, [sp, #0]
 80011be:	2306      	movs	r3, #6
 80011c0:	2188      	movs	r1, #136	; 0x88
 80011c2:	482f      	ldr	r0, [pc, #188]	; (8001280 <get_temp_humi+0xf8>)
 80011c4:	f001 fecc 	bl	8002f60 <HAL_I2C_Master_Receive>

	temp = (readbuff[0] * 256) + readbuff[1];
 80011c8:	7b3b      	ldrb	r3, [r7, #12]
 80011ca:	021b      	lsls	r3, r3, #8
 80011cc:	7b7a      	ldrb	r2, [r7, #13]
 80011ce:	4413      	add	r3, r2
 80011d0:	61fb      	str	r3, [r7, #28]
	SHT31.Temperature = -45.0 + (175.0 * temp / 65535.0);
 80011d2:	69f8      	ldr	r0, [r7, #28]
 80011d4:	f7ff f916 	bl	8000404 <__aeabi_i2d>
 80011d8:	a325      	add	r3, pc, #148	; (adr r3, 8001270 <get_temp_humi+0xe8>)
 80011da:	e9d3 2300 	ldrd	r2, r3, [r3]
 80011de:	f7ff f97b 	bl	80004d8 <__aeabi_dmul>
 80011e2:	4602      	mov	r2, r0
 80011e4:	460b      	mov	r3, r1
 80011e6:	4610      	mov	r0, r2
 80011e8:	4619      	mov	r1, r3
 80011ea:	a323      	add	r3, pc, #140	; (adr r3, 8001278 <get_temp_humi+0xf0>)
 80011ec:	e9d3 2300 	ldrd	r2, r3, [r3]
 80011f0:	f7ff fa9c 	bl	800072c <__aeabi_ddiv>
 80011f4:	4602      	mov	r2, r0
 80011f6:	460b      	mov	r3, r1
 80011f8:	4610      	mov	r0, r2
 80011fa:	4619      	mov	r1, r3
 80011fc:	f04f 0200 	mov.w	r2, #0
 8001200:	4b20      	ldr	r3, [pc, #128]	; (8001284 <get_temp_humi+0xfc>)
 8001202:	f7fe ffb1 	bl	8000168 <__aeabi_dsub>
 8001206:	4602      	mov	r2, r0
 8001208:	460b      	mov	r3, r1
 800120a:	4610      	mov	r0, r2
 800120c:	4619      	mov	r1, r3
 800120e:	f7ff fc5b 	bl	8000ac8 <__aeabi_d2f>
 8001212:	4603      	mov	r3, r0
 8001214:	4a1c      	ldr	r2, [pc, #112]	; (8001288 <get_temp_humi+0x100>)
 8001216:	6013      	str	r3, [r2, #0]
	humi = (readbuff[3] * 256) + readbuff[4];
 8001218:	7bfb      	ldrb	r3, [r7, #15]
 800121a:	021b      	lsls	r3, r3, #8
 800121c:	7c3a      	ldrb	r2, [r7, #16]
 800121e:	4413      	add	r3, r2
 8001220:	61bb      	str	r3, [r7, #24]
	SHT31.Humidity = (100.0 * humi / 65535.0);
 8001222:	69b8      	ldr	r0, [r7, #24]
 8001224:	f7ff f8ee 	bl	8000404 <__aeabi_i2d>
 8001228:	f04f 0200 	mov.w	r2, #0
 800122c:	4b17      	ldr	r3, [pc, #92]	; (800128c <get_temp_humi+0x104>)
 800122e:	f7ff f953 	bl	80004d8 <__aeabi_dmul>
 8001232:	4602      	mov	r2, r0
 8001234:	460b      	mov	r3, r1
 8001236:	4610      	mov	r0, r2
 8001238:	4619      	mov	r1, r3
 800123a:	a30f      	add	r3, pc, #60	; (adr r3, 8001278 <get_temp_humi+0xf0>)
 800123c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001240:	f7ff fa74 	bl	800072c <__aeabi_ddiv>
 8001244:	4602      	mov	r2, r0
 8001246:	460b      	mov	r3, r1
 8001248:	4610      	mov	r0, r2
 800124a:	4619      	mov	r1, r3
 800124c:	f7ff fc3c 	bl	8000ac8 <__aeabi_d2f>
 8001250:	4603      	mov	r3, r0
 8001252:	4a0d      	ldr	r2, [pc, #52]	; (8001288 <get_temp_humi+0x100>)
 8001254:	6053      	str	r3, [r2, #4]
	return SHT31;
 8001256:	687b      	ldr	r3, [r7, #4]
 8001258:	4a0b      	ldr	r2, [pc, #44]	; (8001288 <get_temp_humi+0x100>)
 800125a:	e892 0003 	ldmia.w	r2, {r0, r1}
 800125e:	e883 0003 	stmia.w	r3, {r0, r1}
}
 8001262:	6878      	ldr	r0, [r7, #4]
 8001264:	3720      	adds	r7, #32
 8001266:	46bd      	mov	sp, r7
 8001268:	bd80      	pop	{r7, pc}
 800126a:	bf00      	nop
 800126c:	f3af 8000 	nop.w
 8001270:	00000000 	.word	0x00000000
 8001274:	4065e000 	.word	0x4065e000
 8001278:	00000000 	.word	0x00000000
 800127c:	40efffe0 	.word	0x40efffe0
 8001280:	20000214 	.word	0x20000214
 8001284:	40468000 	.word	0x40468000
 8001288:	2000020c 	.word	0x2000020c
 800128c:	40590000 	.word	0x40590000

08001290 <lcd_init>:
#define hi2c &hi2c2

#define SLAVE_ADDRESS_LCD 0x4E

void lcd_init (void)
{
 8001290:	b580      	push	{r7, lr}
 8001292:	af00      	add	r7, sp, #0
	// 4 bit set
	HAL_Delay(20);  // wait for >15ms
 8001294:	2014      	movs	r0, #20
 8001296:	f000 fd3d 	bl	8001d14 <HAL_Delay>
	lcd_send_command (0x30);
 800129a:	2030      	movs	r0, #48	; 0x30
 800129c:	f000 f832 	bl	8001304 <lcd_send_command>
	HAL_Delay(5);  // wait for >4.1ms
 80012a0:	2005      	movs	r0, #5
 80012a2:	f000 fd37 	bl	8001d14 <HAL_Delay>
	lcd_send_command (0x30);
 80012a6:	2030      	movs	r0, #48	; 0x30
 80012a8:	f000 f82c 	bl	8001304 <lcd_send_command>
	HAL_Delay(1);  // wait for >100us
 80012ac:	2001      	movs	r0, #1
 80012ae:	f000 fd31 	bl	8001d14 <HAL_Delay>
	lcd_send_command (0x30);
 80012b2:	2030      	movs	r0, #48	; 0x30
 80012b4:	f000 f826 	bl	8001304 <lcd_send_command>
	HAL_Delay(10);
 80012b8:	200a      	movs	r0, #10
 80012ba:	f000 fd2b 	bl	8001d14 <HAL_Delay>
	lcd_send_command (0x20);  // 4bit mode
 80012be:	2020      	movs	r0, #32
 80012c0:	f000 f820 	bl	8001304 <lcd_send_command>
	HAL_Delay(10);
 80012c4:	200a      	movs	r0, #10
 80012c6:	f000 fd25 	bl	8001d14 <HAL_Delay>
	// set display
	lcd_send_command (0x28); // Function set: DL=0 (4 bit mode), N = 1 (2 line display) F = 0 (5x8 characters)
 80012ca:	2028      	movs	r0, #40	; 0x28
 80012cc:	f000 f81a 	bl	8001304 <lcd_send_command>
	HAL_Delay(1);
 80012d0:	2001      	movs	r0, #1
 80012d2:	f000 fd1f 	bl	8001d14 <HAL_Delay>
	lcd_send_command (0x08); //Display on/off control: D=0,C=0, B=0  ---> display off
 80012d6:	2008      	movs	r0, #8
 80012d8:	f000 f814 	bl	8001304 <lcd_send_command>
	HAL_Delay(1);
 80012dc:	2001      	movs	r0, #1
 80012de:	f000 fd19 	bl	8001d14 <HAL_Delay>
	lcd_send_command (0x01);  // clear display
 80012e2:	2001      	movs	r0, #1
 80012e4:	f000 f80e 	bl	8001304 <lcd_send_command>
	HAL_Delay(2);
 80012e8:	2002      	movs	r0, #2
 80012ea:	f000 fd13 	bl	8001d14 <HAL_Delay>
	lcd_send_command (0x06); //Entry mode set: I/D = 1 (increment cursor), SH = 0 (no shift)
 80012ee:	2006      	movs	r0, #6
 80012f0:	f000 f808 	bl	8001304 <lcd_send_command>
	HAL_Delay(1);
 80012f4:	2001      	movs	r0, #1
 80012f6:	f000 fd0d 	bl	8001d14 <HAL_Delay>
	lcd_send_command (0x0C); //Display on/off control: D = 1, C, B = 0
 80012fa:	200c      	movs	r0, #12
 80012fc:	f000 f802 	bl	8001304 <lcd_send_command>
}
 8001300:	bf00      	nop
 8001302:	bd80      	pop	{r7, pc}

08001304 <lcd_send_command>:

void lcd_send_command (char cmd)
{
 8001304:	b580      	push	{r7, lr}
 8001306:	b086      	sub	sp, #24
 8001308:	af02      	add	r7, sp, #8
 800130a:	4603      	mov	r3, r0
 800130c:	71fb      	strb	r3, [r7, #7]
  char data_u, data_l;
	uint8_t data_t[4];
	data_u = (cmd&0xf0);
 800130e:	79fb      	ldrb	r3, [r7, #7]
 8001310:	f023 030f 	bic.w	r3, r3, #15
 8001314:	73fb      	strb	r3, [r7, #15]
	data_l = ((cmd<<4)&0xf0);
 8001316:	79fb      	ldrb	r3, [r7, #7]
 8001318:	011b      	lsls	r3, r3, #4
 800131a:	73bb      	strb	r3, [r7, #14]
	data_t[0] = data_u|0x0C;  // E =1, RS =0, R/W =0
 800131c:	7bfb      	ldrb	r3, [r7, #15]
 800131e:	f043 030c 	orr.w	r3, r3, #12
 8001322:	b2db      	uxtb	r3, r3
 8001324:	723b      	strb	r3, [r7, #8]
	data_t[1] = data_u|0x08;  // E =0, RS =0
 8001326:	7bfb      	ldrb	r3, [r7, #15]
 8001328:	f043 0308 	orr.w	r3, r3, #8
 800132c:	b2db      	uxtb	r3, r3
 800132e:	727b      	strb	r3, [r7, #9]
	data_t[2] = data_l|0x0C;  // E =1, RS =0
 8001330:	7bbb      	ldrb	r3, [r7, #14]
 8001332:	f043 030c 	orr.w	r3, r3, #12
 8001336:	b2db      	uxtb	r3, r3
 8001338:	72bb      	strb	r3, [r7, #10]
	data_t[3] = data_l|0x08;  // E =0, RS =0
 800133a:	7bbb      	ldrb	r3, [r7, #14]
 800133c:	f043 0308 	orr.w	r3, r3, #8
 8001340:	b2db      	uxtb	r3, r3
 8001342:	72fb      	strb	r3, [r7, #11]
	HAL_I2C_Master_Transmit (hi2c, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 8001344:	f107 0208 	add.w	r2, r7, #8
 8001348:	2364      	movs	r3, #100	; 0x64
 800134a:	9300      	str	r3, [sp, #0]
 800134c:	2304      	movs	r3, #4
 800134e:	214e      	movs	r1, #78	; 0x4e
 8001350:	4803      	ldr	r0, [pc, #12]	; (8001360 <lcd_send_command+0x5c>)
 8001352:	f001 fd07 	bl	8002d64 <HAL_I2C_Master_Transmit>
}
 8001356:	bf00      	nop
 8001358:	3710      	adds	r7, #16
 800135a:	46bd      	mov	sp, r7
 800135c:	bd80      	pop	{r7, pc}
 800135e:	bf00      	nop
 8001360:	20000214 	.word	0x20000214

08001364 <lcd_send_data>:

void lcd_send_data (char data)
{
 8001364:	b580      	push	{r7, lr}
 8001366:	b086      	sub	sp, #24
 8001368:	af02      	add	r7, sp, #8
 800136a:	4603      	mov	r3, r0
 800136c:	71fb      	strb	r3, [r7, #7]
	char data_u, data_l;
	uint8_t data_t[4];
	data_u = (data&0xf0);
 800136e:	79fb      	ldrb	r3, [r7, #7]
 8001370:	f023 030f 	bic.w	r3, r3, #15
 8001374:	73fb      	strb	r3, [r7, #15]
	data_l = ((data<<4)&0xf0);
 8001376:	79fb      	ldrb	r3, [r7, #7]
 8001378:	011b      	lsls	r3, r3, #4
 800137a:	73bb      	strb	r3, [r7, #14]
	data_t[0] = data_u|0x0D;  // E =1, RS =1, R/W =0
 800137c:	7bfb      	ldrb	r3, [r7, #15]
 800137e:	f043 030d 	orr.w	r3, r3, #13
 8001382:	b2db      	uxtb	r3, r3
 8001384:	723b      	strb	r3, [r7, #8]
	data_t[1] = data_u|0x09;  // E =0, RS =1
 8001386:	7bfb      	ldrb	r3, [r7, #15]
 8001388:	f043 0309 	orr.w	r3, r3, #9
 800138c:	b2db      	uxtb	r3, r3
 800138e:	727b      	strb	r3, [r7, #9]
	data_t[2] = data_l|0x0D;  // E =1, RS =1
 8001390:	7bbb      	ldrb	r3, [r7, #14]
 8001392:	f043 030d 	orr.w	r3, r3, #13
 8001396:	b2db      	uxtb	r3, r3
 8001398:	72bb      	strb	r3, [r7, #10]
	data_t[3] = data_l|0x09;  // E =0, RS =1
 800139a:	7bbb      	ldrb	r3, [r7, #14]
 800139c:	f043 0309 	orr.w	r3, r3, #9
 80013a0:	b2db      	uxtb	r3, r3
 80013a2:	72fb      	strb	r3, [r7, #11]
	HAL_I2C_Master_Transmit (hi2c, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 80013a4:	f107 0208 	add.w	r2, r7, #8
 80013a8:	2364      	movs	r3, #100	; 0x64
 80013aa:	9300      	str	r3, [sp, #0]
 80013ac:	2304      	movs	r3, #4
 80013ae:	214e      	movs	r1, #78	; 0x4e
 80013b0:	4803      	ldr	r0, [pc, #12]	; (80013c0 <lcd_send_data+0x5c>)
 80013b2:	f001 fcd7 	bl	8002d64 <HAL_I2C_Master_Transmit>
}
 80013b6:	bf00      	nop
 80013b8:	3710      	adds	r7, #16
 80013ba:	46bd      	mov	sp, r7
 80013bc:	bd80      	pop	{r7, pc}
 80013be:	bf00      	nop
 80013c0:	20000214 	.word	0x20000214

080013c4 <lcd_clear>:

void lcd_clear (void)
{
 80013c4:	b580      	push	{r7, lr}
 80013c6:	af00      	add	r7, sp, #0
	lcd_send_command(0x01);
 80013c8:	2001      	movs	r0, #1
 80013ca:	f7ff ff9b 	bl	8001304 <lcd_send_command>
	HAL_Delay(2);
 80013ce:	2002      	movs	r0, #2
 80013d0:	f000 fca0 	bl	8001d14 <HAL_Delay>
}
 80013d4:	bf00      	nop
 80013d6:	bd80      	pop	{r7, pc}

080013d8 <lcd_put_cur>:

void lcd_put_cur(int row, int col)
{
 80013d8:	b580      	push	{r7, lr}
 80013da:	b082      	sub	sp, #8
 80013dc:	af00      	add	r7, sp, #0
 80013de:	6078      	str	r0, [r7, #4]
 80013e0:	6039      	str	r1, [r7, #0]
    switch (row)
 80013e2:	687b      	ldr	r3, [r7, #4]
 80013e4:	2b00      	cmp	r3, #0
 80013e6:	d003      	beq.n	80013f0 <lcd_put_cur+0x18>
 80013e8:	687b      	ldr	r3, [r7, #4]
 80013ea:	2b01      	cmp	r3, #1
 80013ec:	d005      	beq.n	80013fa <lcd_put_cur+0x22>
 80013ee:	e009      	b.n	8001404 <lcd_put_cur+0x2c>
    {
        case 0:
            col |= 0x80; // DDRAM address row 1
 80013f0:	683b      	ldr	r3, [r7, #0]
 80013f2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80013f6:	603b      	str	r3, [r7, #0]
            break;
 80013f8:	e004      	b.n	8001404 <lcd_put_cur+0x2c>
        case 1:
            col |= 0xC0; // DDRAM address row 2
 80013fa:	683b      	ldr	r3, [r7, #0]
 80013fc:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8001400:	603b      	str	r3, [r7, #0]
            break;
 8001402:	bf00      	nop
    }

    lcd_send_command (col);
 8001404:	683b      	ldr	r3, [r7, #0]
 8001406:	b2db      	uxtb	r3, r3
 8001408:	4618      	mov	r0, r3
 800140a:	f7ff ff7b 	bl	8001304 <lcd_send_command>
}
 800140e:	bf00      	nop
 8001410:	3708      	adds	r7, #8
 8001412:	46bd      	mov	sp, r7
 8001414:	bd80      	pop	{r7, pc}

08001416 <lcd_send_string>:

void lcd_send_string (char *str)
{
 8001416:	b580      	push	{r7, lr}
 8001418:	b082      	sub	sp, #8
 800141a:	af00      	add	r7, sp, #0
 800141c:	6078      	str	r0, [r7, #4]
	while (*str) lcd_send_data (*str++);
 800141e:	e006      	b.n	800142e <lcd_send_string+0x18>
 8001420:	687b      	ldr	r3, [r7, #4]
 8001422:	1c5a      	adds	r2, r3, #1
 8001424:	607a      	str	r2, [r7, #4]
 8001426:	781b      	ldrb	r3, [r3, #0]
 8001428:	4618      	mov	r0, r3
 800142a:	f7ff ff9b 	bl	8001364 <lcd_send_data>
 800142e:	687b      	ldr	r3, [r7, #4]
 8001430:	781b      	ldrb	r3, [r3, #0]
 8001432:	2b00      	cmp	r3, #0
 8001434:	d1f4      	bne.n	8001420 <lcd_send_string+0xa>
}
 8001436:	bf00      	nop
 8001438:	bf00      	nop
 800143a:	3708      	adds	r7, #8
 800143c:	46bd      	mov	sp, r7
 800143e:	bd80      	pop	{r7, pc}

08001440 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001440:	b5b0      	push	{r4, r5, r7, lr}
 8001442:	b08c      	sub	sp, #48	; 0x30
 8001444:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001446:	f000 fc03 	bl	8001c50 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800144a:	f000 f8a9 	bl	80015a0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800144e:	f000 f9bf 	bl	80017d0 <MX_GPIO_Init>
  MX_TIM1_Init();
 8001452:	f000 f96d 	bl	8001730 <MX_TIM1_Init>
  MX_ADC1_Init();
 8001456:	f000 f8ff 	bl	8001658 <MX_ADC1_Init>
  MX_I2C2_Init();
 800145a:	f000 f93b 	bl	80016d4 <MX_I2C2_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_Base_Start(&htim1);
 800145e:	4846      	ldr	r0, [pc, #280]	; (8001578 <main+0x138>)
 8001460:	f003 f8ee 	bl	8004640 <HAL_TIM_Base_Start>


  lcd_init();
 8001464:	f7ff ff14 	bl	8001290 <lcd_init>

  //lcd_send_string("Test SHT31"); //done
  lcd_send_string("Four variables"); //not done
 8001468:	4844      	ldr	r0, [pc, #272]	; (800157c <main+0x13c>)
 800146a:	f7ff ffd4 	bl	8001416 <lcd_send_string>

  PowerDown();
 800146e:	f7ff fe27 	bl	80010c0 <PowerDown>
  PowerOn();
 8001472:	f7ff fe0f 	bl	8001094 <PowerOn>
  setMeasurement(CONT_H_MODE);
 8001476:	2010      	movs	r0, #16
 8001478:	f7ff fe36 	bl	80010e8 <setMeasurement>

  HAL_Delay(1000);
 800147c:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001480:	f000 fc48 	bl	8001d14 <HAL_Delay>
  lcd_clear();
 8001484:	f7ff ff9e 	bl	80013c4 <lcd_clear>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  get_temp_humi();
 8001488:	463b      	mov	r3, r7
 800148a:	4618      	mov	r0, r3
 800148c:	f7ff fe7c 	bl	8001188 <get_temp_humi>
//	  Display_LCD("Temp",1, (float)SHT31.Temperature);
//	  Display_LCD("Humi",2, (float)SHT31.Humidity);

	  char str[16];
	  lcd_put_cur(0,0);
 8001490:	2100      	movs	r1, #0
 8001492:	2000      	movs	r0, #0
 8001494:	f7ff ffa0 	bl	80013d8 <lcd_put_cur>
	  sprintf(str,"T:%.2f,H:%.2f", SHT31.Temperature, SHT31.Humidity);
 8001498:	4b39      	ldr	r3, [pc, #228]	; (8001580 <main+0x140>)
 800149a:	681b      	ldr	r3, [r3, #0]
 800149c:	4618      	mov	r0, r3
 800149e:	f7fe ffc3 	bl	8000428 <__aeabi_f2d>
 80014a2:	4604      	mov	r4, r0
 80014a4:	460d      	mov	r5, r1
 80014a6:	4b36      	ldr	r3, [pc, #216]	; (8001580 <main+0x140>)
 80014a8:	685b      	ldr	r3, [r3, #4]
 80014aa:	4618      	mov	r0, r3
 80014ac:	f7fe ffbc 	bl	8000428 <__aeabi_f2d>
 80014b0:	4602      	mov	r2, r0
 80014b2:	460b      	mov	r3, r1
 80014b4:	f107 0018 	add.w	r0, r7, #24
 80014b8:	e9cd 2300 	strd	r2, r3, [sp]
 80014bc:	4622      	mov	r2, r4
 80014be:	462b      	mov	r3, r5
 80014c0:	4930      	ldr	r1, [pc, #192]	; (8001584 <main+0x144>)
 80014c2:	f004 f9c9 	bl	8005858 <siprintf>
	  lcd_send_string(str);
 80014c6:	f107 0318 	add.w	r3, r7, #24
 80014ca:	4618      	mov	r0, r3
 80014cc:	f7ff ffa3 	bl	8001416 <lcd_send_string>

//	  PowerOn();
//	  BH1750_reset();
//	  setMeasurement(ONCE_H_MODE);
	  lux = BH1750_getResult();
 80014d0:	f7ff fe24 	bl	800111c <BH1750_getResult>
 80014d4:	4603      	mov	r3, r0
 80014d6:	4a2c      	ldr	r2, [pc, #176]	; (8001588 <main+0x148>)
 80014d8:	6013      	str	r3, [r2, #0]

	  HAL_ADC_Start(&hadc1);
 80014da:	482c      	ldr	r0, [pc, #176]	; (800158c <main+0x14c>)
 80014dc:	f000 fd16 	bl	8001f0c <HAL_ADC_Start>
	  HAL_ADC_PollForConversion(&hadc1, 100);
 80014e0:	2164      	movs	r1, #100	; 0x64
 80014e2:	482a      	ldr	r0, [pc, #168]	; (800158c <main+0x14c>)
 80014e4:	f000 fdec 	bl	80020c0 <HAL_ADC_PollForConversion>
	  soil_moisture = HAL_ADC_GetValue(&hadc1);
 80014e8:	4828      	ldr	r0, [pc, #160]	; (800158c <main+0x14c>)
 80014ea:	f000 feef 	bl	80022cc <HAL_ADC_GetValue>
 80014ee:	4603      	mov	r3, r0
 80014f0:	b29a      	uxth	r2, r3
 80014f2:	4b27      	ldr	r3, [pc, #156]	; (8001590 <main+0x150>)
 80014f4:	801a      	strh	r2, [r3, #0]
	  HAL_ADC_Stop(&hadc1);
 80014f6:	4825      	ldr	r0, [pc, #148]	; (800158c <main+0x14c>)
 80014f8:	f000 fdb6 	bl	8002068 <HAL_ADC_Stop>

	  fsoil_moisture = 100 - mapping((float)soil_moisture, 0, 4096, 0, 100);
 80014fc:	4b24      	ldr	r3, [pc, #144]	; (8001590 <main+0x150>)
 80014fe:	881b      	ldrh	r3, [r3, #0]
 8001500:	4618      	mov	r0, r3
 8001502:	f7ff fbe7 	bl	8000cd4 <__aeabi_ui2f>
 8001506:	4b23      	ldr	r3, [pc, #140]	; (8001594 <main+0x154>)
 8001508:	9300      	str	r3, [sp, #0]
 800150a:	f04f 0300 	mov.w	r3, #0
 800150e:	f04f 428b 	mov.w	r2, #1166016512	; 0x45800000
 8001512:	f04f 0100 	mov.w	r1, #0
 8001516:	f000 fa82 	bl	8001a1e <mapping>
 800151a:	4603      	mov	r3, r0
 800151c:	4619      	mov	r1, r3
 800151e:	481d      	ldr	r0, [pc, #116]	; (8001594 <main+0x154>)
 8001520:	f7ff fb26 	bl	8000b70 <__aeabi_fsub>
 8001524:	4603      	mov	r3, r0
 8001526:	461a      	mov	r2, r3
 8001528:	4b1b      	ldr	r3, [pc, #108]	; (8001598 <main+0x158>)
 800152a:	601a      	str	r2, [r3, #0]
//	  Display_LCD("%", 2, fsoil_moisture);

	  char str1[16];
	  lcd_put_cur(1,0);
 800152c:	2100      	movs	r1, #0
 800152e:	2001      	movs	r0, #1
 8001530:	f7ff ff52 	bl	80013d8 <lcd_put_cur>
	  sprintf(str1,"S:%.2f,L:%f", fsoil_moisture, lux);
 8001534:	4b18      	ldr	r3, [pc, #96]	; (8001598 <main+0x158>)
 8001536:	681b      	ldr	r3, [r3, #0]
 8001538:	4618      	mov	r0, r3
 800153a:	f7fe ff75 	bl	8000428 <__aeabi_f2d>
 800153e:	4604      	mov	r4, r0
 8001540:	460d      	mov	r5, r1
 8001542:	4b11      	ldr	r3, [pc, #68]	; (8001588 <main+0x148>)
 8001544:	681b      	ldr	r3, [r3, #0]
 8001546:	4618      	mov	r0, r3
 8001548:	f7fe ff6e 	bl	8000428 <__aeabi_f2d>
 800154c:	4602      	mov	r2, r0
 800154e:	460b      	mov	r3, r1
 8001550:	f107 0008 	add.w	r0, r7, #8
 8001554:	e9cd 2300 	strd	r2, r3, [sp]
 8001558:	4622      	mov	r2, r4
 800155a:	462b      	mov	r3, r5
 800155c:	490f      	ldr	r1, [pc, #60]	; (800159c <main+0x15c>)
 800155e:	f004 f97b 	bl	8005858 <siprintf>
	  lcd_send_string(str1);
 8001562:	f107 0308 	add.w	r3, r7, #8
 8001566:	4618      	mov	r0, r3
 8001568:	f7ff ff55 	bl	8001416 <lcd_send_string>

	  HAL_Delay(1000);
 800156c:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001570:	f000 fbd0 	bl	8001d14 <HAL_Delay>
  {
 8001574:	e788      	b.n	8001488 <main+0x48>
 8001576:	bf00      	nop
 8001578:	200002a0 	.word	0x200002a0
 800157c:	08009398 	.word	0x08009398
 8001580:	2000020c 	.word	0x2000020c
 8001584:	080093a8 	.word	0x080093a8
 8001588:	200001fc 	.word	0x200001fc
 800158c:	2000026c 	.word	0x2000026c
 8001590:	2000029c 	.word	0x2000029c
 8001594:	42c80000 	.word	0x42c80000
 8001598:	20000268 	.word	0x20000268
 800159c:	080093b8 	.word	0x080093b8

080015a0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80015a0:	b580      	push	{r7, lr}
 80015a2:	b094      	sub	sp, #80	; 0x50
 80015a4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80015a6:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80015aa:	2228      	movs	r2, #40	; 0x28
 80015ac:	2100      	movs	r1, #0
 80015ae:	4618      	mov	r0, r3
 80015b0:	f003 fad4 	bl	8004b5c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80015b4:	f107 0314 	add.w	r3, r7, #20
 80015b8:	2200      	movs	r2, #0
 80015ba:	601a      	str	r2, [r3, #0]
 80015bc:	605a      	str	r2, [r3, #4]
 80015be:	609a      	str	r2, [r3, #8]
 80015c0:	60da      	str	r2, [r3, #12]
 80015c2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80015c4:	1d3b      	adds	r3, r7, #4
 80015c6:	2200      	movs	r2, #0
 80015c8:	601a      	str	r2, [r3, #0]
 80015ca:	605a      	str	r2, [r3, #4]
 80015cc:	609a      	str	r2, [r3, #8]
 80015ce:	60da      	str	r2, [r3, #12]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80015d0:	2301      	movs	r3, #1
 80015d2:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80015d4:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80015d8:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 80015da:	2300      	movs	r3, #0
 80015dc:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80015de:	2301      	movs	r3, #1
 80015e0:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80015e2:	2302      	movs	r3, #2
 80015e4:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80015e6:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80015ea:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 80015ec:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 80015f0:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80015f2:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80015f6:	4618      	mov	r0, r3
 80015f8:	f002 fa3e 	bl	8003a78 <HAL_RCC_OscConfig>
 80015fc:	4603      	mov	r3, r0
 80015fe:	2b00      	cmp	r3, #0
 8001600:	d001      	beq.n	8001606 <SystemClock_Config+0x66>
  {
    Error_Handler();
 8001602:	f000 f913 	bl	800182c <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001606:	230f      	movs	r3, #15
 8001608:	617b      	str	r3, [r7, #20]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800160a:	2302      	movs	r3, #2
 800160c:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800160e:	2300      	movs	r3, #0
 8001610:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8001612:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001616:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001618:	2300      	movs	r3, #0
 800161a:	627b      	str	r3, [r7, #36]	; 0x24

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 800161c:	f107 0314 	add.w	r3, r7, #20
 8001620:	2102      	movs	r1, #2
 8001622:	4618      	mov	r0, r3
 8001624:	f002 fca8 	bl	8003f78 <HAL_RCC_ClockConfig>
 8001628:	4603      	mov	r3, r0
 800162a:	2b00      	cmp	r3, #0
 800162c:	d001      	beq.n	8001632 <SystemClock_Config+0x92>
  {
    Error_Handler();
 800162e:	f000 f8fd 	bl	800182c <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 8001632:	2302      	movs	r3, #2
 8001634:	607b      	str	r3, [r7, #4]
  PeriphClkInit.AdcClockSelection = RCC_ADCPCLK2_DIV6;
 8001636:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800163a:	60fb      	str	r3, [r7, #12]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800163c:	1d3b      	adds	r3, r7, #4
 800163e:	4618      	mov	r0, r3
 8001640:	f002 fe34 	bl	80042ac <HAL_RCCEx_PeriphCLKConfig>
 8001644:	4603      	mov	r3, r0
 8001646:	2b00      	cmp	r3, #0
 8001648:	d001      	beq.n	800164e <SystemClock_Config+0xae>
  {
    Error_Handler();
 800164a:	f000 f8ef 	bl	800182c <Error_Handler>
  }
}
 800164e:	bf00      	nop
 8001650:	3750      	adds	r7, #80	; 0x50
 8001652:	46bd      	mov	sp, r7
 8001654:	bd80      	pop	{r7, pc}
	...

08001658 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8001658:	b580      	push	{r7, lr}
 800165a:	b084      	sub	sp, #16
 800165c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 800165e:	1d3b      	adds	r3, r7, #4
 8001660:	2200      	movs	r2, #0
 8001662:	601a      	str	r2, [r3, #0]
 8001664:	605a      	str	r2, [r3, #4]
 8001666:	609a      	str	r2, [r3, #8]
  /* USER CODE BEGIN ADC1_Init 1 */

  /* USER CODE END ADC1_Init 1 */
  /** Common config
  */
  hadc1.Instance = ADC1;
 8001668:	4b18      	ldr	r3, [pc, #96]	; (80016cc <MX_ADC1_Init+0x74>)
 800166a:	4a19      	ldr	r2, [pc, #100]	; (80016d0 <MX_ADC1_Init+0x78>)
 800166c:	601a      	str	r2, [r3, #0]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 800166e:	4b17      	ldr	r3, [pc, #92]	; (80016cc <MX_ADC1_Init+0x74>)
 8001670:	2200      	movs	r2, #0
 8001672:	609a      	str	r2, [r3, #8]
  hadc1.Init.ContinuousConvMode = ENABLE;
 8001674:	4b15      	ldr	r3, [pc, #84]	; (80016cc <MX_ADC1_Init+0x74>)
 8001676:	2201      	movs	r2, #1
 8001678:	731a      	strb	r2, [r3, #12]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 800167a:	4b14      	ldr	r3, [pc, #80]	; (80016cc <MX_ADC1_Init+0x74>)
 800167c:	2200      	movs	r2, #0
 800167e:	751a      	strb	r2, [r3, #20]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8001680:	4b12      	ldr	r3, [pc, #72]	; (80016cc <MX_ADC1_Init+0x74>)
 8001682:	f44f 2260 	mov.w	r2, #917504	; 0xe0000
 8001686:	61da      	str	r2, [r3, #28]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8001688:	4b10      	ldr	r3, [pc, #64]	; (80016cc <MX_ADC1_Init+0x74>)
 800168a:	2200      	movs	r2, #0
 800168c:	605a      	str	r2, [r3, #4]
  hadc1.Init.NbrOfConversion = 1;
 800168e:	4b0f      	ldr	r3, [pc, #60]	; (80016cc <MX_ADC1_Init+0x74>)
 8001690:	2201      	movs	r2, #1
 8001692:	611a      	str	r2, [r3, #16]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8001694:	480d      	ldr	r0, [pc, #52]	; (80016cc <MX_ADC1_Init+0x74>)
 8001696:	f000 fb61 	bl	8001d5c <HAL_ADC_Init>
 800169a:	4603      	mov	r3, r0
 800169c:	2b00      	cmp	r3, #0
 800169e:	d001      	beq.n	80016a4 <MX_ADC1_Init+0x4c>
  {
    Error_Handler();
 80016a0:	f000 f8c4 	bl	800182c <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_0;
 80016a4:	2300      	movs	r3, #0
 80016a6:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 80016a8:	2301      	movs	r3, #1
 80016aa:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 80016ac:	2300      	movs	r3, #0
 80016ae:	60fb      	str	r3, [r7, #12]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80016b0:	1d3b      	adds	r3, r7, #4
 80016b2:	4619      	mov	r1, r3
 80016b4:	4805      	ldr	r0, [pc, #20]	; (80016cc <MX_ADC1_Init+0x74>)
 80016b6:	f000 fe15 	bl	80022e4 <HAL_ADC_ConfigChannel>
 80016ba:	4603      	mov	r3, r0
 80016bc:	2b00      	cmp	r3, #0
 80016be:	d001      	beq.n	80016c4 <MX_ADC1_Init+0x6c>
  {
    Error_Handler();
 80016c0:	f000 f8b4 	bl	800182c <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 80016c4:	bf00      	nop
 80016c6:	3710      	adds	r7, #16
 80016c8:	46bd      	mov	sp, r7
 80016ca:	bd80      	pop	{r7, pc}
 80016cc:	2000026c 	.word	0x2000026c
 80016d0:	40012400 	.word	0x40012400

080016d4 <MX_I2C2_Init>:
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C2_Init(void)
{
 80016d4:	b580      	push	{r7, lr}
 80016d6:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 80016d8:	4b12      	ldr	r3, [pc, #72]	; (8001724 <MX_I2C2_Init+0x50>)
 80016da:	4a13      	ldr	r2, [pc, #76]	; (8001728 <MX_I2C2_Init+0x54>)
 80016dc:	601a      	str	r2, [r3, #0]
  hi2c2.Init.ClockSpeed = 100000;
 80016de:	4b11      	ldr	r3, [pc, #68]	; (8001724 <MX_I2C2_Init+0x50>)
 80016e0:	4a12      	ldr	r2, [pc, #72]	; (800172c <MX_I2C2_Init+0x58>)
 80016e2:	605a      	str	r2, [r3, #4]
  hi2c2.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80016e4:	4b0f      	ldr	r3, [pc, #60]	; (8001724 <MX_I2C2_Init+0x50>)
 80016e6:	2200      	movs	r2, #0
 80016e8:	609a      	str	r2, [r3, #8]
  hi2c2.Init.OwnAddress1 = 0;
 80016ea:	4b0e      	ldr	r3, [pc, #56]	; (8001724 <MX_I2C2_Init+0x50>)
 80016ec:	2200      	movs	r2, #0
 80016ee:	60da      	str	r2, [r3, #12]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80016f0:	4b0c      	ldr	r3, [pc, #48]	; (8001724 <MX_I2C2_Init+0x50>)
 80016f2:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80016f6:	611a      	str	r2, [r3, #16]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80016f8:	4b0a      	ldr	r3, [pc, #40]	; (8001724 <MX_I2C2_Init+0x50>)
 80016fa:	2200      	movs	r2, #0
 80016fc:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2 = 0;
 80016fe:	4b09      	ldr	r3, [pc, #36]	; (8001724 <MX_I2C2_Init+0x50>)
 8001700:	2200      	movs	r2, #0
 8001702:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001704:	4b07      	ldr	r3, [pc, #28]	; (8001724 <MX_I2C2_Init+0x50>)
 8001706:	2200      	movs	r2, #0
 8001708:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800170a:	4b06      	ldr	r3, [pc, #24]	; (8001724 <MX_I2C2_Init+0x50>)
 800170c:	2200      	movs	r2, #0
 800170e:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 8001710:	4804      	ldr	r0, [pc, #16]	; (8001724 <MX_I2C2_Init+0x50>)
 8001712:	f001 f9e3 	bl	8002adc <HAL_I2C_Init>
 8001716:	4603      	mov	r3, r0
 8001718:	2b00      	cmp	r3, #0
 800171a:	d001      	beq.n	8001720 <MX_I2C2_Init+0x4c>
  {
    Error_Handler();
 800171c:	f000 f886 	bl	800182c <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 8001720:	bf00      	nop
 8001722:	bd80      	pop	{r7, pc}
 8001724:	20000214 	.word	0x20000214
 8001728:	40005800 	.word	0x40005800
 800172c:	000186a0 	.word	0x000186a0

08001730 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8001730:	b580      	push	{r7, lr}
 8001732:	b086      	sub	sp, #24
 8001734:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001736:	f107 0308 	add.w	r3, r7, #8
 800173a:	2200      	movs	r2, #0
 800173c:	601a      	str	r2, [r3, #0]
 800173e:	605a      	str	r2, [r3, #4]
 8001740:	609a      	str	r2, [r3, #8]
 8001742:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001744:	463b      	mov	r3, r7
 8001746:	2200      	movs	r2, #0
 8001748:	601a      	str	r2, [r3, #0]
 800174a:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 800174c:	4b1e      	ldr	r3, [pc, #120]	; (80017c8 <MX_TIM1_Init+0x98>)
 800174e:	4a1f      	ldr	r2, [pc, #124]	; (80017cc <MX_TIM1_Init+0x9c>)
 8001750:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 72-1;
 8001752:	4b1d      	ldr	r3, [pc, #116]	; (80017c8 <MX_TIM1_Init+0x98>)
 8001754:	2247      	movs	r2, #71	; 0x47
 8001756:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001758:	4b1b      	ldr	r3, [pc, #108]	; (80017c8 <MX_TIM1_Init+0x98>)
 800175a:	2200      	movs	r2, #0
 800175c:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 0xffff-1;
 800175e:	4b1a      	ldr	r3, [pc, #104]	; (80017c8 <MX_TIM1_Init+0x98>)
 8001760:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 8001764:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001766:	4b18      	ldr	r3, [pc, #96]	; (80017c8 <MX_TIM1_Init+0x98>)
 8001768:	2200      	movs	r2, #0
 800176a:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 800176c:	4b16      	ldr	r3, [pc, #88]	; (80017c8 <MX_TIM1_Init+0x98>)
 800176e:	2200      	movs	r2, #0
 8001770:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001772:	4b15      	ldr	r3, [pc, #84]	; (80017c8 <MX_TIM1_Init+0x98>)
 8001774:	2200      	movs	r2, #0
 8001776:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8001778:	4813      	ldr	r0, [pc, #76]	; (80017c8 <MX_TIM1_Init+0x98>)
 800177a:	f002 ff11 	bl	80045a0 <HAL_TIM_Base_Init>
 800177e:	4603      	mov	r3, r0
 8001780:	2b00      	cmp	r3, #0
 8001782:	d001      	beq.n	8001788 <MX_TIM1_Init+0x58>
  {
    Error_Handler();
 8001784:	f000 f852 	bl	800182c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001788:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800178c:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 800178e:	f107 0308 	add.w	r3, r7, #8
 8001792:	4619      	mov	r1, r3
 8001794:	480c      	ldr	r0, [pc, #48]	; (80017c8 <MX_TIM1_Init+0x98>)
 8001796:	f002 ff9d 	bl	80046d4 <HAL_TIM_ConfigClockSource>
 800179a:	4603      	mov	r3, r0
 800179c:	2b00      	cmp	r3, #0
 800179e:	d001      	beq.n	80017a4 <MX_TIM1_Init+0x74>
  {
    Error_Handler();
 80017a0:	f000 f844 	bl	800182c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80017a4:	2300      	movs	r3, #0
 80017a6:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80017a8:	2300      	movs	r3, #0
 80017aa:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 80017ac:	463b      	mov	r3, r7
 80017ae:	4619      	mov	r1, r3
 80017b0:	4805      	ldr	r0, [pc, #20]	; (80017c8 <MX_TIM1_Init+0x98>)
 80017b2:	f003 f94b 	bl	8004a4c <HAL_TIMEx_MasterConfigSynchronization>
 80017b6:	4603      	mov	r3, r0
 80017b8:	2b00      	cmp	r3, #0
 80017ba:	d001      	beq.n	80017c0 <MX_TIM1_Init+0x90>
  {
    Error_Handler();
 80017bc:	f000 f836 	bl	800182c <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 80017c0:	bf00      	nop
 80017c2:	3718      	adds	r7, #24
 80017c4:	46bd      	mov	sp, r7
 80017c6:	bd80      	pop	{r7, pc}
 80017c8:	200002a0 	.word	0x200002a0
 80017cc:	40012c00 	.word	0x40012c00

080017d0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80017d0:	b480      	push	{r7}
 80017d2:	b085      	sub	sp, #20
 80017d4:	af00      	add	r7, sp, #0

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80017d6:	4b14      	ldr	r3, [pc, #80]	; (8001828 <MX_GPIO_Init+0x58>)
 80017d8:	699b      	ldr	r3, [r3, #24]
 80017da:	4a13      	ldr	r2, [pc, #76]	; (8001828 <MX_GPIO_Init+0x58>)
 80017dc:	f043 0320 	orr.w	r3, r3, #32
 80017e0:	6193      	str	r3, [r2, #24]
 80017e2:	4b11      	ldr	r3, [pc, #68]	; (8001828 <MX_GPIO_Init+0x58>)
 80017e4:	699b      	ldr	r3, [r3, #24]
 80017e6:	f003 0320 	and.w	r3, r3, #32
 80017ea:	60fb      	str	r3, [r7, #12]
 80017ec:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80017ee:	4b0e      	ldr	r3, [pc, #56]	; (8001828 <MX_GPIO_Init+0x58>)
 80017f0:	699b      	ldr	r3, [r3, #24]
 80017f2:	4a0d      	ldr	r2, [pc, #52]	; (8001828 <MX_GPIO_Init+0x58>)
 80017f4:	f043 0304 	orr.w	r3, r3, #4
 80017f8:	6193      	str	r3, [r2, #24]
 80017fa:	4b0b      	ldr	r3, [pc, #44]	; (8001828 <MX_GPIO_Init+0x58>)
 80017fc:	699b      	ldr	r3, [r3, #24]
 80017fe:	f003 0304 	and.w	r3, r3, #4
 8001802:	60bb      	str	r3, [r7, #8]
 8001804:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001806:	4b08      	ldr	r3, [pc, #32]	; (8001828 <MX_GPIO_Init+0x58>)
 8001808:	699b      	ldr	r3, [r3, #24]
 800180a:	4a07      	ldr	r2, [pc, #28]	; (8001828 <MX_GPIO_Init+0x58>)
 800180c:	f043 0308 	orr.w	r3, r3, #8
 8001810:	6193      	str	r3, [r2, #24]
 8001812:	4b05      	ldr	r3, [pc, #20]	; (8001828 <MX_GPIO_Init+0x58>)
 8001814:	699b      	ldr	r3, [r3, #24]
 8001816:	f003 0308 	and.w	r3, r3, #8
 800181a:	607b      	str	r3, [r7, #4]
 800181c:	687b      	ldr	r3, [r7, #4]

}
 800181e:	bf00      	nop
 8001820:	3714      	adds	r7, #20
 8001822:	46bd      	mov	sp, r7
 8001824:	bc80      	pop	{r7}
 8001826:	4770      	bx	lr
 8001828:	40021000 	.word	0x40021000

0800182c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800182c:	b480      	push	{r7}
 800182e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001830:	b672      	cpsid	i
}
 8001832:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001834:	e7fe      	b.n	8001834 <Error_Handler+0x8>
	...

08001838 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001838:	b480      	push	{r7}
 800183a:	b085      	sub	sp, #20
 800183c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 800183e:	4b15      	ldr	r3, [pc, #84]	; (8001894 <HAL_MspInit+0x5c>)
 8001840:	699b      	ldr	r3, [r3, #24]
 8001842:	4a14      	ldr	r2, [pc, #80]	; (8001894 <HAL_MspInit+0x5c>)
 8001844:	f043 0301 	orr.w	r3, r3, #1
 8001848:	6193      	str	r3, [r2, #24]
 800184a:	4b12      	ldr	r3, [pc, #72]	; (8001894 <HAL_MspInit+0x5c>)
 800184c:	699b      	ldr	r3, [r3, #24]
 800184e:	f003 0301 	and.w	r3, r3, #1
 8001852:	60bb      	str	r3, [r7, #8]
 8001854:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001856:	4b0f      	ldr	r3, [pc, #60]	; (8001894 <HAL_MspInit+0x5c>)
 8001858:	69db      	ldr	r3, [r3, #28]
 800185a:	4a0e      	ldr	r2, [pc, #56]	; (8001894 <HAL_MspInit+0x5c>)
 800185c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001860:	61d3      	str	r3, [r2, #28]
 8001862:	4b0c      	ldr	r3, [pc, #48]	; (8001894 <HAL_MspInit+0x5c>)
 8001864:	69db      	ldr	r3, [r3, #28]
 8001866:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800186a:	607b      	str	r3, [r7, #4]
 800186c:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 800186e:	4b0a      	ldr	r3, [pc, #40]	; (8001898 <HAL_MspInit+0x60>)
 8001870:	685b      	ldr	r3, [r3, #4]
 8001872:	60fb      	str	r3, [r7, #12]
 8001874:	68fb      	ldr	r3, [r7, #12]
 8001876:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 800187a:	60fb      	str	r3, [r7, #12]
 800187c:	68fb      	ldr	r3, [r7, #12]
 800187e:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8001882:	60fb      	str	r3, [r7, #12]
 8001884:	4a04      	ldr	r2, [pc, #16]	; (8001898 <HAL_MspInit+0x60>)
 8001886:	68fb      	ldr	r3, [r7, #12]
 8001888:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800188a:	bf00      	nop
 800188c:	3714      	adds	r7, #20
 800188e:	46bd      	mov	sp, r7
 8001890:	bc80      	pop	{r7}
 8001892:	4770      	bx	lr
 8001894:	40021000 	.word	0x40021000
 8001898:	40010000 	.word	0x40010000

0800189c <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 800189c:	b580      	push	{r7, lr}
 800189e:	b088      	sub	sp, #32
 80018a0:	af00      	add	r7, sp, #0
 80018a2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80018a4:	f107 0310 	add.w	r3, r7, #16
 80018a8:	2200      	movs	r2, #0
 80018aa:	601a      	str	r2, [r3, #0]
 80018ac:	605a      	str	r2, [r3, #4]
 80018ae:	609a      	str	r2, [r3, #8]
 80018b0:	60da      	str	r2, [r3, #12]
  if(hadc->Instance==ADC1)
 80018b2:	687b      	ldr	r3, [r7, #4]
 80018b4:	681b      	ldr	r3, [r3, #0]
 80018b6:	4a14      	ldr	r2, [pc, #80]	; (8001908 <HAL_ADC_MspInit+0x6c>)
 80018b8:	4293      	cmp	r3, r2
 80018ba:	d121      	bne.n	8001900 <HAL_ADC_MspInit+0x64>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 80018bc:	4b13      	ldr	r3, [pc, #76]	; (800190c <HAL_ADC_MspInit+0x70>)
 80018be:	699b      	ldr	r3, [r3, #24]
 80018c0:	4a12      	ldr	r2, [pc, #72]	; (800190c <HAL_ADC_MspInit+0x70>)
 80018c2:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80018c6:	6193      	str	r3, [r2, #24]
 80018c8:	4b10      	ldr	r3, [pc, #64]	; (800190c <HAL_ADC_MspInit+0x70>)
 80018ca:	699b      	ldr	r3, [r3, #24]
 80018cc:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80018d0:	60fb      	str	r3, [r7, #12]
 80018d2:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80018d4:	4b0d      	ldr	r3, [pc, #52]	; (800190c <HAL_ADC_MspInit+0x70>)
 80018d6:	699b      	ldr	r3, [r3, #24]
 80018d8:	4a0c      	ldr	r2, [pc, #48]	; (800190c <HAL_ADC_MspInit+0x70>)
 80018da:	f043 0304 	orr.w	r3, r3, #4
 80018de:	6193      	str	r3, [r2, #24]
 80018e0:	4b0a      	ldr	r3, [pc, #40]	; (800190c <HAL_ADC_MspInit+0x70>)
 80018e2:	699b      	ldr	r3, [r3, #24]
 80018e4:	f003 0304 	and.w	r3, r3, #4
 80018e8:	60bb      	str	r3, [r7, #8]
 80018ea:	68bb      	ldr	r3, [r7, #8]
    /**ADC1 GPIO Configuration
    PA0-WKUP     ------> ADC1_IN0
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 80018ec:	2301      	movs	r3, #1
 80018ee:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80018f0:	2303      	movs	r3, #3
 80018f2:	617b      	str	r3, [r7, #20]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80018f4:	f107 0310 	add.w	r3, r7, #16
 80018f8:	4619      	mov	r1, r3
 80018fa:	4805      	ldr	r0, [pc, #20]	; (8001910 <HAL_ADC_MspInit+0x74>)
 80018fc:	f000 ff6a 	bl	80027d4 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8001900:	bf00      	nop
 8001902:	3720      	adds	r7, #32
 8001904:	46bd      	mov	sp, r7
 8001906:	bd80      	pop	{r7, pc}
 8001908:	40012400 	.word	0x40012400
 800190c:	40021000 	.word	0x40021000
 8001910:	40010800 	.word	0x40010800

08001914 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001914:	b580      	push	{r7, lr}
 8001916:	b088      	sub	sp, #32
 8001918:	af00      	add	r7, sp, #0
 800191a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800191c:	f107 0310 	add.w	r3, r7, #16
 8001920:	2200      	movs	r2, #0
 8001922:	601a      	str	r2, [r3, #0]
 8001924:	605a      	str	r2, [r3, #4]
 8001926:	609a      	str	r2, [r3, #8]
 8001928:	60da      	str	r2, [r3, #12]
  if(hi2c->Instance==I2C2)
 800192a:	687b      	ldr	r3, [r7, #4]
 800192c:	681b      	ldr	r3, [r3, #0]
 800192e:	4a16      	ldr	r2, [pc, #88]	; (8001988 <HAL_I2C_MspInit+0x74>)
 8001930:	4293      	cmp	r3, r2
 8001932:	d124      	bne.n	800197e <HAL_I2C_MspInit+0x6a>
  {
  /* USER CODE BEGIN I2C2_MspInit 0 */

  /* USER CODE END I2C2_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001934:	4b15      	ldr	r3, [pc, #84]	; (800198c <HAL_I2C_MspInit+0x78>)
 8001936:	699b      	ldr	r3, [r3, #24]
 8001938:	4a14      	ldr	r2, [pc, #80]	; (800198c <HAL_I2C_MspInit+0x78>)
 800193a:	f043 0308 	orr.w	r3, r3, #8
 800193e:	6193      	str	r3, [r2, #24]
 8001940:	4b12      	ldr	r3, [pc, #72]	; (800198c <HAL_I2C_MspInit+0x78>)
 8001942:	699b      	ldr	r3, [r3, #24]
 8001944:	f003 0308 	and.w	r3, r3, #8
 8001948:	60fb      	str	r3, [r7, #12]
 800194a:	68fb      	ldr	r3, [r7, #12]
    /**I2C2 GPIO Configuration
    PB10     ------> I2C2_SCL
    PB11     ------> I2C2_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 800194c:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8001950:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001952:	2312      	movs	r3, #18
 8001954:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001956:	2303      	movs	r3, #3
 8001958:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800195a:	f107 0310 	add.w	r3, r7, #16
 800195e:	4619      	mov	r1, r3
 8001960:	480b      	ldr	r0, [pc, #44]	; (8001990 <HAL_I2C_MspInit+0x7c>)
 8001962:	f000 ff37 	bl	80027d4 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C2_CLK_ENABLE();
 8001966:	4b09      	ldr	r3, [pc, #36]	; (800198c <HAL_I2C_MspInit+0x78>)
 8001968:	69db      	ldr	r3, [r3, #28]
 800196a:	4a08      	ldr	r2, [pc, #32]	; (800198c <HAL_I2C_MspInit+0x78>)
 800196c:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8001970:	61d3      	str	r3, [r2, #28]
 8001972:	4b06      	ldr	r3, [pc, #24]	; (800198c <HAL_I2C_MspInit+0x78>)
 8001974:	69db      	ldr	r3, [r3, #28]
 8001976:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800197a:	60bb      	str	r3, [r7, #8]
 800197c:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }

}
 800197e:	bf00      	nop
 8001980:	3720      	adds	r7, #32
 8001982:	46bd      	mov	sp, r7
 8001984:	bd80      	pop	{r7, pc}
 8001986:	bf00      	nop
 8001988:	40005800 	.word	0x40005800
 800198c:	40021000 	.word	0x40021000
 8001990:	40010c00 	.word	0x40010c00

08001994 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001994:	b480      	push	{r7}
 8001996:	b085      	sub	sp, #20
 8001998:	af00      	add	r7, sp, #0
 800199a:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 800199c:	687b      	ldr	r3, [r7, #4]
 800199e:	681b      	ldr	r3, [r3, #0]
 80019a0:	4a09      	ldr	r2, [pc, #36]	; (80019c8 <HAL_TIM_Base_MspInit+0x34>)
 80019a2:	4293      	cmp	r3, r2
 80019a4:	d10b      	bne.n	80019be <HAL_TIM_Base_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 80019a6:	4b09      	ldr	r3, [pc, #36]	; (80019cc <HAL_TIM_Base_MspInit+0x38>)
 80019a8:	699b      	ldr	r3, [r3, #24]
 80019aa:	4a08      	ldr	r2, [pc, #32]	; (80019cc <HAL_TIM_Base_MspInit+0x38>)
 80019ac:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80019b0:	6193      	str	r3, [r2, #24]
 80019b2:	4b06      	ldr	r3, [pc, #24]	; (80019cc <HAL_TIM_Base_MspInit+0x38>)
 80019b4:	699b      	ldr	r3, [r3, #24]
 80019b6:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80019ba:	60fb      	str	r3, [r7, #12]
 80019bc:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }

}
 80019be:	bf00      	nop
 80019c0:	3714      	adds	r7, #20
 80019c2:	46bd      	mov	sp, r7
 80019c4:	bc80      	pop	{r7}
 80019c6:	4770      	bx	lr
 80019c8:	40012c00 	.word	0x40012c00
 80019cc:	40021000 	.word	0x40021000

080019d0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80019d0:	b480      	push	{r7}
 80019d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80019d4:	e7fe      	b.n	80019d4 <NMI_Handler+0x4>

080019d6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80019d6:	b480      	push	{r7}
 80019d8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80019da:	e7fe      	b.n	80019da <HardFault_Handler+0x4>

080019dc <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80019dc:	b480      	push	{r7}
 80019de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80019e0:	e7fe      	b.n	80019e0 <MemManage_Handler+0x4>

080019e2 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80019e2:	b480      	push	{r7}
 80019e4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80019e6:	e7fe      	b.n	80019e6 <BusFault_Handler+0x4>

080019e8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80019e8:	b480      	push	{r7}
 80019ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80019ec:	e7fe      	b.n	80019ec <UsageFault_Handler+0x4>

080019ee <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80019ee:	b480      	push	{r7}
 80019f0:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80019f2:	bf00      	nop
 80019f4:	46bd      	mov	sp, r7
 80019f6:	bc80      	pop	{r7}
 80019f8:	4770      	bx	lr

080019fa <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80019fa:	b480      	push	{r7}
 80019fc:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80019fe:	bf00      	nop
 8001a00:	46bd      	mov	sp, r7
 8001a02:	bc80      	pop	{r7}
 8001a04:	4770      	bx	lr

08001a06 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001a06:	b480      	push	{r7}
 8001a08:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001a0a:	bf00      	nop
 8001a0c:	46bd      	mov	sp, r7
 8001a0e:	bc80      	pop	{r7}
 8001a10:	4770      	bx	lr

08001a12 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001a12:	b580      	push	{r7, lr}
 8001a14:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001a16:	f000 f961 	bl	8001cdc <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001a1a:	bf00      	nop
 8001a1c:	bd80      	pop	{r7, pc}

08001a1e <mapping>:
	lcd_put_cur(put_cur-1,0);
	sprintf(str,"%s: %.2f",s, f);
	lcd_send_string(str);
}

float mapping(float value, float in_min, float in_max, float out_min, float out_max){
 8001a1e:	b590      	push	{r4, r7, lr}
 8001a20:	b087      	sub	sp, #28
 8001a22:	af00      	add	r7, sp, #0
 8001a24:	60f8      	str	r0, [r7, #12]
 8001a26:	60b9      	str	r1, [r7, #8]
 8001a28:	607a      	str	r2, [r7, #4]
 8001a2a:	603b      	str	r3, [r7, #0]
	float percent = (value-in_min)*(out_max-out_min)/(in_max-in_min)+out_min;
 8001a2c:	68b9      	ldr	r1, [r7, #8]
 8001a2e:	68f8      	ldr	r0, [r7, #12]
 8001a30:	f7ff f89e 	bl	8000b70 <__aeabi_fsub>
 8001a34:	4603      	mov	r3, r0
 8001a36:	461c      	mov	r4, r3
 8001a38:	6839      	ldr	r1, [r7, #0]
 8001a3a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8001a3c:	f7ff f898 	bl	8000b70 <__aeabi_fsub>
 8001a40:	4603      	mov	r3, r0
 8001a42:	4619      	mov	r1, r3
 8001a44:	4620      	mov	r0, r4
 8001a46:	f7ff f99d 	bl	8000d84 <__aeabi_fmul>
 8001a4a:	4603      	mov	r3, r0
 8001a4c:	461c      	mov	r4, r3
 8001a4e:	68b9      	ldr	r1, [r7, #8]
 8001a50:	6878      	ldr	r0, [r7, #4]
 8001a52:	f7ff f88d 	bl	8000b70 <__aeabi_fsub>
 8001a56:	4603      	mov	r3, r0
 8001a58:	4619      	mov	r1, r3
 8001a5a:	4620      	mov	r0, r4
 8001a5c:	f7ff fa46 	bl	8000eec <__aeabi_fdiv>
 8001a60:	4603      	mov	r3, r0
 8001a62:	4619      	mov	r1, r3
 8001a64:	6838      	ldr	r0, [r7, #0]
 8001a66:	f7ff f885 	bl	8000b74 <__addsf3>
 8001a6a:	4603      	mov	r3, r0
 8001a6c:	617b      	str	r3, [r7, #20]
	return percent;
 8001a6e:	697b      	ldr	r3, [r7, #20]
}
 8001a70:	4618      	mov	r0, r3
 8001a72:	371c      	adds	r7, #28
 8001a74:	46bd      	mov	sp, r7
 8001a76:	bd90      	pop	{r4, r7, pc}

08001a78 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001a78:	b480      	push	{r7}
 8001a7a:	af00      	add	r7, sp, #0
	return 1;
 8001a7c:	2301      	movs	r3, #1
}
 8001a7e:	4618      	mov	r0, r3
 8001a80:	46bd      	mov	sp, r7
 8001a82:	bc80      	pop	{r7}
 8001a84:	4770      	bx	lr

08001a86 <_kill>:

int _kill(int pid, int sig)
{
 8001a86:	b580      	push	{r7, lr}
 8001a88:	b082      	sub	sp, #8
 8001a8a:	af00      	add	r7, sp, #0
 8001a8c:	6078      	str	r0, [r7, #4]
 8001a8e:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8001a90:	f003 f83a 	bl	8004b08 <__errno>
 8001a94:	4603      	mov	r3, r0
 8001a96:	2216      	movs	r2, #22
 8001a98:	601a      	str	r2, [r3, #0]
	return -1;
 8001a9a:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001a9e:	4618      	mov	r0, r3
 8001aa0:	3708      	adds	r7, #8
 8001aa2:	46bd      	mov	sp, r7
 8001aa4:	bd80      	pop	{r7, pc}

08001aa6 <_exit>:

void _exit (int status)
{
 8001aa6:	b580      	push	{r7, lr}
 8001aa8:	b082      	sub	sp, #8
 8001aaa:	af00      	add	r7, sp, #0
 8001aac:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8001aae:	f04f 31ff 	mov.w	r1, #4294967295
 8001ab2:	6878      	ldr	r0, [r7, #4]
 8001ab4:	f7ff ffe7 	bl	8001a86 <_kill>
	while (1) {}		/* Make sure we hang here */
 8001ab8:	e7fe      	b.n	8001ab8 <_exit+0x12>

08001aba <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001aba:	b580      	push	{r7, lr}
 8001abc:	b086      	sub	sp, #24
 8001abe:	af00      	add	r7, sp, #0
 8001ac0:	60f8      	str	r0, [r7, #12]
 8001ac2:	60b9      	str	r1, [r7, #8]
 8001ac4:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001ac6:	2300      	movs	r3, #0
 8001ac8:	617b      	str	r3, [r7, #20]
 8001aca:	e00a      	b.n	8001ae2 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8001acc:	f3af 8000 	nop.w
 8001ad0:	4601      	mov	r1, r0
 8001ad2:	68bb      	ldr	r3, [r7, #8]
 8001ad4:	1c5a      	adds	r2, r3, #1
 8001ad6:	60ba      	str	r2, [r7, #8]
 8001ad8:	b2ca      	uxtb	r2, r1
 8001ada:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001adc:	697b      	ldr	r3, [r7, #20]
 8001ade:	3301      	adds	r3, #1
 8001ae0:	617b      	str	r3, [r7, #20]
 8001ae2:	697a      	ldr	r2, [r7, #20]
 8001ae4:	687b      	ldr	r3, [r7, #4]
 8001ae6:	429a      	cmp	r2, r3
 8001ae8:	dbf0      	blt.n	8001acc <_read+0x12>
	}

return len;
 8001aea:	687b      	ldr	r3, [r7, #4]
}
 8001aec:	4618      	mov	r0, r3
 8001aee:	3718      	adds	r7, #24
 8001af0:	46bd      	mov	sp, r7
 8001af2:	bd80      	pop	{r7, pc}

08001af4 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001af4:	b580      	push	{r7, lr}
 8001af6:	b086      	sub	sp, #24
 8001af8:	af00      	add	r7, sp, #0
 8001afa:	60f8      	str	r0, [r7, #12]
 8001afc:	60b9      	str	r1, [r7, #8]
 8001afe:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001b00:	2300      	movs	r3, #0
 8001b02:	617b      	str	r3, [r7, #20]
 8001b04:	e009      	b.n	8001b1a <_write+0x26>
	{
		__io_putchar(*ptr++);
 8001b06:	68bb      	ldr	r3, [r7, #8]
 8001b08:	1c5a      	adds	r2, r3, #1
 8001b0a:	60ba      	str	r2, [r7, #8]
 8001b0c:	781b      	ldrb	r3, [r3, #0]
 8001b0e:	4618      	mov	r0, r3
 8001b10:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001b14:	697b      	ldr	r3, [r7, #20]
 8001b16:	3301      	adds	r3, #1
 8001b18:	617b      	str	r3, [r7, #20]
 8001b1a:	697a      	ldr	r2, [r7, #20]
 8001b1c:	687b      	ldr	r3, [r7, #4]
 8001b1e:	429a      	cmp	r2, r3
 8001b20:	dbf1      	blt.n	8001b06 <_write+0x12>
	}
	return len;
 8001b22:	687b      	ldr	r3, [r7, #4]
}
 8001b24:	4618      	mov	r0, r3
 8001b26:	3718      	adds	r7, #24
 8001b28:	46bd      	mov	sp, r7
 8001b2a:	bd80      	pop	{r7, pc}

08001b2c <_close>:

int _close(int file)
{
 8001b2c:	b480      	push	{r7}
 8001b2e:	b083      	sub	sp, #12
 8001b30:	af00      	add	r7, sp, #0
 8001b32:	6078      	str	r0, [r7, #4]
	return -1;
 8001b34:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001b38:	4618      	mov	r0, r3
 8001b3a:	370c      	adds	r7, #12
 8001b3c:	46bd      	mov	sp, r7
 8001b3e:	bc80      	pop	{r7}
 8001b40:	4770      	bx	lr

08001b42 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001b42:	b480      	push	{r7}
 8001b44:	b083      	sub	sp, #12
 8001b46:	af00      	add	r7, sp, #0
 8001b48:	6078      	str	r0, [r7, #4]
 8001b4a:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8001b4c:	683b      	ldr	r3, [r7, #0]
 8001b4e:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001b52:	605a      	str	r2, [r3, #4]
	return 0;
 8001b54:	2300      	movs	r3, #0
}
 8001b56:	4618      	mov	r0, r3
 8001b58:	370c      	adds	r7, #12
 8001b5a:	46bd      	mov	sp, r7
 8001b5c:	bc80      	pop	{r7}
 8001b5e:	4770      	bx	lr

08001b60 <_isatty>:

int _isatty(int file)
{
 8001b60:	b480      	push	{r7}
 8001b62:	b083      	sub	sp, #12
 8001b64:	af00      	add	r7, sp, #0
 8001b66:	6078      	str	r0, [r7, #4]
	return 1;
 8001b68:	2301      	movs	r3, #1
}
 8001b6a:	4618      	mov	r0, r3
 8001b6c:	370c      	adds	r7, #12
 8001b6e:	46bd      	mov	sp, r7
 8001b70:	bc80      	pop	{r7}
 8001b72:	4770      	bx	lr

08001b74 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001b74:	b480      	push	{r7}
 8001b76:	b085      	sub	sp, #20
 8001b78:	af00      	add	r7, sp, #0
 8001b7a:	60f8      	str	r0, [r7, #12]
 8001b7c:	60b9      	str	r1, [r7, #8]
 8001b7e:	607a      	str	r2, [r7, #4]
	return 0;
 8001b80:	2300      	movs	r3, #0
}
 8001b82:	4618      	mov	r0, r3
 8001b84:	3714      	adds	r7, #20
 8001b86:	46bd      	mov	sp, r7
 8001b88:	bc80      	pop	{r7}
 8001b8a:	4770      	bx	lr

08001b8c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001b8c:	b580      	push	{r7, lr}
 8001b8e:	b086      	sub	sp, #24
 8001b90:	af00      	add	r7, sp, #0
 8001b92:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001b94:	4a14      	ldr	r2, [pc, #80]	; (8001be8 <_sbrk+0x5c>)
 8001b96:	4b15      	ldr	r3, [pc, #84]	; (8001bec <_sbrk+0x60>)
 8001b98:	1ad3      	subs	r3, r2, r3
 8001b9a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001b9c:	697b      	ldr	r3, [r7, #20]
 8001b9e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001ba0:	4b13      	ldr	r3, [pc, #76]	; (8001bf0 <_sbrk+0x64>)
 8001ba2:	681b      	ldr	r3, [r3, #0]
 8001ba4:	2b00      	cmp	r3, #0
 8001ba6:	d102      	bne.n	8001bae <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001ba8:	4b11      	ldr	r3, [pc, #68]	; (8001bf0 <_sbrk+0x64>)
 8001baa:	4a12      	ldr	r2, [pc, #72]	; (8001bf4 <_sbrk+0x68>)
 8001bac:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001bae:	4b10      	ldr	r3, [pc, #64]	; (8001bf0 <_sbrk+0x64>)
 8001bb0:	681a      	ldr	r2, [r3, #0]
 8001bb2:	687b      	ldr	r3, [r7, #4]
 8001bb4:	4413      	add	r3, r2
 8001bb6:	693a      	ldr	r2, [r7, #16]
 8001bb8:	429a      	cmp	r2, r3
 8001bba:	d207      	bcs.n	8001bcc <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001bbc:	f002 ffa4 	bl	8004b08 <__errno>
 8001bc0:	4603      	mov	r3, r0
 8001bc2:	220c      	movs	r2, #12
 8001bc4:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001bc6:	f04f 33ff 	mov.w	r3, #4294967295
 8001bca:	e009      	b.n	8001be0 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001bcc:	4b08      	ldr	r3, [pc, #32]	; (8001bf0 <_sbrk+0x64>)
 8001bce:	681b      	ldr	r3, [r3, #0]
 8001bd0:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001bd2:	4b07      	ldr	r3, [pc, #28]	; (8001bf0 <_sbrk+0x64>)
 8001bd4:	681a      	ldr	r2, [r3, #0]
 8001bd6:	687b      	ldr	r3, [r7, #4]
 8001bd8:	4413      	add	r3, r2
 8001bda:	4a05      	ldr	r2, [pc, #20]	; (8001bf0 <_sbrk+0x64>)
 8001bdc:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001bde:	68fb      	ldr	r3, [r7, #12]
}
 8001be0:	4618      	mov	r0, r3
 8001be2:	3718      	adds	r7, #24
 8001be4:	46bd      	mov	sp, r7
 8001be6:	bd80      	pop	{r7, pc}
 8001be8:	20005000 	.word	0x20005000
 8001bec:	00000400 	.word	0x00000400
 8001bf0:	20000200 	.word	0x20000200
 8001bf4:	20000300 	.word	0x20000300

08001bf8 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8001bf8:	b480      	push	{r7}
 8001bfa:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001bfc:	bf00      	nop
 8001bfe:	46bd      	mov	sp, r7
 8001c00:	bc80      	pop	{r7}
 8001c02:	4770      	bx	lr

08001c04 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001c04:	480c      	ldr	r0, [pc, #48]	; (8001c38 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8001c06:	490d      	ldr	r1, [pc, #52]	; (8001c3c <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8001c08:	4a0d      	ldr	r2, [pc, #52]	; (8001c40 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8001c0a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001c0c:	e002      	b.n	8001c14 <LoopCopyDataInit>

08001c0e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001c0e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001c10:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001c12:	3304      	adds	r3, #4

08001c14 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001c14:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001c16:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001c18:	d3f9      	bcc.n	8001c0e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001c1a:	4a0a      	ldr	r2, [pc, #40]	; (8001c44 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8001c1c:	4c0a      	ldr	r4, [pc, #40]	; (8001c48 <LoopFillZerobss+0x22>)
  movs r3, #0
 8001c1e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001c20:	e001      	b.n	8001c26 <LoopFillZerobss>

08001c22 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001c22:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001c24:	3204      	adds	r2, #4

08001c26 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001c26:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001c28:	d3fb      	bcc.n	8001c22 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8001c2a:	f7ff ffe5 	bl	8001bf8 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001c2e:	f002 ff71 	bl	8004b14 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8001c32:	f7ff fc05 	bl	8001440 <main>
  bx lr
 8001c36:	4770      	bx	lr
  ldr r0, =_sdata
 8001c38:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001c3c:	200001e0 	.word	0x200001e0
  ldr r2, =_sidata
 8001c40:	080098bc 	.word	0x080098bc
  ldr r2, =_sbss
 8001c44:	200001e0 	.word	0x200001e0
  ldr r4, =_ebss
 8001c48:	200002fc 	.word	0x200002fc

08001c4c <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001c4c:	e7fe      	b.n	8001c4c <ADC1_2_IRQHandler>
	...

08001c50 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001c50:	b580      	push	{r7, lr}
 8001c52:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001c54:	4b08      	ldr	r3, [pc, #32]	; (8001c78 <HAL_Init+0x28>)
 8001c56:	681b      	ldr	r3, [r3, #0]
 8001c58:	4a07      	ldr	r2, [pc, #28]	; (8001c78 <HAL_Init+0x28>)
 8001c5a:	f043 0310 	orr.w	r3, r3, #16
 8001c5e:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001c60:	2003      	movs	r0, #3
 8001c62:	f000 fd83 	bl	800276c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001c66:	2000      	movs	r0, #0
 8001c68:	f000 f808 	bl	8001c7c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001c6c:	f7ff fde4 	bl	8001838 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001c70:	2300      	movs	r3, #0
}
 8001c72:	4618      	mov	r0, r3
 8001c74:	bd80      	pop	{r7, pc}
 8001c76:	bf00      	nop
 8001c78:	40022000 	.word	0x40022000

08001c7c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001c7c:	b580      	push	{r7, lr}
 8001c7e:	b082      	sub	sp, #8
 8001c80:	af00      	add	r7, sp, #0
 8001c82:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001c84:	4b12      	ldr	r3, [pc, #72]	; (8001cd0 <HAL_InitTick+0x54>)
 8001c86:	681a      	ldr	r2, [r3, #0]
 8001c88:	4b12      	ldr	r3, [pc, #72]	; (8001cd4 <HAL_InitTick+0x58>)
 8001c8a:	781b      	ldrb	r3, [r3, #0]
 8001c8c:	4619      	mov	r1, r3
 8001c8e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001c92:	fbb3 f3f1 	udiv	r3, r3, r1
 8001c96:	fbb2 f3f3 	udiv	r3, r2, r3
 8001c9a:	4618      	mov	r0, r3
 8001c9c:	f000 fd8d 	bl	80027ba <HAL_SYSTICK_Config>
 8001ca0:	4603      	mov	r3, r0
 8001ca2:	2b00      	cmp	r3, #0
 8001ca4:	d001      	beq.n	8001caa <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001ca6:	2301      	movs	r3, #1
 8001ca8:	e00e      	b.n	8001cc8 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001caa:	687b      	ldr	r3, [r7, #4]
 8001cac:	2b0f      	cmp	r3, #15
 8001cae:	d80a      	bhi.n	8001cc6 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001cb0:	2200      	movs	r2, #0
 8001cb2:	6879      	ldr	r1, [r7, #4]
 8001cb4:	f04f 30ff 	mov.w	r0, #4294967295
 8001cb8:	f000 fd63 	bl	8002782 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001cbc:	4a06      	ldr	r2, [pc, #24]	; (8001cd8 <HAL_InitTick+0x5c>)
 8001cbe:	687b      	ldr	r3, [r7, #4]
 8001cc0:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001cc2:	2300      	movs	r3, #0
 8001cc4:	e000      	b.n	8001cc8 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001cc6:	2301      	movs	r3, #1
}
 8001cc8:	4618      	mov	r0, r3
 8001cca:	3708      	adds	r7, #8
 8001ccc:	46bd      	mov	sp, r7
 8001cce:	bd80      	pop	{r7, pc}
 8001cd0:	20000000 	.word	0x20000000
 8001cd4:	20000008 	.word	0x20000008
 8001cd8:	20000004 	.word	0x20000004

08001cdc <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001cdc:	b480      	push	{r7}
 8001cde:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001ce0:	4b05      	ldr	r3, [pc, #20]	; (8001cf8 <HAL_IncTick+0x1c>)
 8001ce2:	781b      	ldrb	r3, [r3, #0]
 8001ce4:	461a      	mov	r2, r3
 8001ce6:	4b05      	ldr	r3, [pc, #20]	; (8001cfc <HAL_IncTick+0x20>)
 8001ce8:	681b      	ldr	r3, [r3, #0]
 8001cea:	4413      	add	r3, r2
 8001cec:	4a03      	ldr	r2, [pc, #12]	; (8001cfc <HAL_IncTick+0x20>)
 8001cee:	6013      	str	r3, [r2, #0]
}
 8001cf0:	bf00      	nop
 8001cf2:	46bd      	mov	sp, r7
 8001cf4:	bc80      	pop	{r7}
 8001cf6:	4770      	bx	lr
 8001cf8:	20000008 	.word	0x20000008
 8001cfc:	200002e8 	.word	0x200002e8

08001d00 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001d00:	b480      	push	{r7}
 8001d02:	af00      	add	r7, sp, #0
  return uwTick;
 8001d04:	4b02      	ldr	r3, [pc, #8]	; (8001d10 <HAL_GetTick+0x10>)
 8001d06:	681b      	ldr	r3, [r3, #0]
}
 8001d08:	4618      	mov	r0, r3
 8001d0a:	46bd      	mov	sp, r7
 8001d0c:	bc80      	pop	{r7}
 8001d0e:	4770      	bx	lr
 8001d10:	200002e8 	.word	0x200002e8

08001d14 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001d14:	b580      	push	{r7, lr}
 8001d16:	b084      	sub	sp, #16
 8001d18:	af00      	add	r7, sp, #0
 8001d1a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001d1c:	f7ff fff0 	bl	8001d00 <HAL_GetTick>
 8001d20:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001d22:	687b      	ldr	r3, [r7, #4]
 8001d24:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001d26:	68fb      	ldr	r3, [r7, #12]
 8001d28:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001d2c:	d005      	beq.n	8001d3a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001d2e:	4b0a      	ldr	r3, [pc, #40]	; (8001d58 <HAL_Delay+0x44>)
 8001d30:	781b      	ldrb	r3, [r3, #0]
 8001d32:	461a      	mov	r2, r3
 8001d34:	68fb      	ldr	r3, [r7, #12]
 8001d36:	4413      	add	r3, r2
 8001d38:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001d3a:	bf00      	nop
 8001d3c:	f7ff ffe0 	bl	8001d00 <HAL_GetTick>
 8001d40:	4602      	mov	r2, r0
 8001d42:	68bb      	ldr	r3, [r7, #8]
 8001d44:	1ad3      	subs	r3, r2, r3
 8001d46:	68fa      	ldr	r2, [r7, #12]
 8001d48:	429a      	cmp	r2, r3
 8001d4a:	d8f7      	bhi.n	8001d3c <HAL_Delay+0x28>
  {
  }
}
 8001d4c:	bf00      	nop
 8001d4e:	bf00      	nop
 8001d50:	3710      	adds	r7, #16
 8001d52:	46bd      	mov	sp, r7
 8001d54:	bd80      	pop	{r7, pc}
 8001d56:	bf00      	nop
 8001d58:	20000008 	.word	0x20000008

08001d5c <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8001d5c:	b580      	push	{r7, lr}
 8001d5e:	b086      	sub	sp, #24
 8001d60:	af00      	add	r7, sp, #0
 8001d62:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001d64:	2300      	movs	r3, #0
 8001d66:	75fb      	strb	r3, [r7, #23]
  uint32_t tmp_cr1 = 0U;
 8001d68:	2300      	movs	r3, #0
 8001d6a:	613b      	str	r3, [r7, #16]
  uint32_t tmp_cr2 = 0U;
 8001d6c:	2300      	movs	r3, #0
 8001d6e:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_sqr1 = 0U;
 8001d70:	2300      	movs	r3, #0
 8001d72:	60fb      	str	r3, [r7, #12]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8001d74:	687b      	ldr	r3, [r7, #4]
 8001d76:	2b00      	cmp	r3, #0
 8001d78:	d101      	bne.n	8001d7e <HAL_ADC_Init+0x22>
  {
    return HAL_ERROR;
 8001d7a:	2301      	movs	r3, #1
 8001d7c:	e0be      	b.n	8001efc <HAL_ADC_Init+0x1a0>
  assert_param(IS_ADC_DATA_ALIGN(hadc->Init.DataAlign));
  assert_param(IS_ADC_SCAN_MODE(hadc->Init.ScanConvMode));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXTTRIG(hadc->Init.ExternalTrigConv));
  
  if(hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8001d7e:	687b      	ldr	r3, [r7, #4]
 8001d80:	689b      	ldr	r3, [r3, #8]
 8001d82:	2b00      	cmp	r3, #0
  /* Refer to header of this file for more details on clock enabling          */
  /* procedure.                                                               */

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8001d84:	687b      	ldr	r3, [r7, #4]
 8001d86:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001d88:	2b00      	cmp	r3, #0
 8001d8a:	d109      	bne.n	8001da0 <HAL_ADC_Init+0x44>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8001d8c:	687b      	ldr	r3, [r7, #4]
 8001d8e:	2200      	movs	r2, #0
 8001d90:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8001d92:	687b      	ldr	r3, [r7, #4]
 8001d94:	2200      	movs	r2, #0
 8001d96:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8001d9a:	6878      	ldr	r0, [r7, #4]
 8001d9c:	f7ff fd7e 	bl	800189c <HAL_ADC_MspInit>
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  /* Note: In case of ADC already enabled, precaution to not launch an        */
  /*       unwanted conversion while modifying register CR2 by writing 1 to   */
  /*       bit ADON.                                                          */
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 8001da0:	6878      	ldr	r0, [r7, #4]
 8001da2:	f000 fbf1 	bl	8002588 <ADC_ConversionStop_Disable>
 8001da6:	4603      	mov	r3, r0
 8001da8:	75fb      	strb	r3, [r7, #23]
  
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 8001daa:	687b      	ldr	r3, [r7, #4]
 8001dac:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001dae:	f003 0310 	and.w	r3, r3, #16
 8001db2:	2b00      	cmp	r3, #0
 8001db4:	f040 8099 	bne.w	8001eea <HAL_ADC_Init+0x18e>
 8001db8:	7dfb      	ldrb	r3, [r7, #23]
 8001dba:	2b00      	cmp	r3, #0
 8001dbc:	f040 8095 	bne.w	8001eea <HAL_ADC_Init+0x18e>
      (tmp_hal_status == HAL_OK)                                  )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001dc0:	687b      	ldr	r3, [r7, #4]
 8001dc2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001dc4:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8001dc8:	f023 0302 	bic.w	r3, r3, #2
 8001dcc:	f043 0202 	orr.w	r2, r3, #2
 8001dd0:	687b      	ldr	r3, [r7, #4]
 8001dd2:	629a      	str	r2, [r3, #40]	; 0x28
    /*  - continuous conversion mode                                          */
    /* Note: External trigger polarity (ADC_CR2_EXTTRIG) is set into          */
    /*       HAL_ADC_Start_xxx functions because if set in this function,     */
    /*       a conversion on injected group would start a conversion also on  */
    /*       regular group after ADC enabling.                                */
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8001dd4:	687b      	ldr	r3, [r7, #4]
 8001dd6:	685a      	ldr	r2, [r3, #4]
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 8001dd8:	687b      	ldr	r3, [r7, #4]
 8001dda:	69db      	ldr	r3, [r3, #28]
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8001ddc:	431a      	orrs	r2, r3
                ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)   );
 8001dde:	687b      	ldr	r3, [r7, #4]
 8001de0:	7b1b      	ldrb	r3, [r3, #12]
 8001de2:	005b      	lsls	r3, r3, #1
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 8001de4:	4313      	orrs	r3, r2
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8001de6:	68ba      	ldr	r2, [r7, #8]
 8001de8:	4313      	orrs	r3, r2
 8001dea:	60bb      	str	r3, [r7, #8]

    /* Configuration of ADC:                                                  */
    /*  - scan mode                                                           */
    /*  - discontinuous mode disable/enable                                   */
    /*  - discontinuous mode number of conversions                            */
    tmp_cr1 |= (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode));
 8001dec:	687b      	ldr	r3, [r7, #4]
 8001dee:	689b      	ldr	r3, [r3, #8]
 8001df0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001df4:	d003      	beq.n	8001dfe <HAL_ADC_Init+0xa2>
 8001df6:	687b      	ldr	r3, [r7, #4]
 8001df8:	689b      	ldr	r3, [r3, #8]
 8001dfa:	2b01      	cmp	r3, #1
 8001dfc:	d102      	bne.n	8001e04 <HAL_ADC_Init+0xa8>
 8001dfe:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001e02:	e000      	b.n	8001e06 <HAL_ADC_Init+0xaa>
 8001e04:	2300      	movs	r3, #0
 8001e06:	693a      	ldr	r2, [r7, #16]
 8001e08:	4313      	orrs	r3, r2
 8001e0a:	613b      	str	r3, [r7, #16]
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    /* Note: If parameter "Init.ScanConvMode" is set to disable, parameter    */
    /*       discontinuous is set anyway, but will have no effect on ADC HW.  */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8001e0c:	687b      	ldr	r3, [r7, #4]
 8001e0e:	7d1b      	ldrb	r3, [r3, #20]
 8001e10:	2b01      	cmp	r3, #1
 8001e12:	d119      	bne.n	8001e48 <HAL_ADC_Init+0xec>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 8001e14:	687b      	ldr	r3, [r7, #4]
 8001e16:	7b1b      	ldrb	r3, [r3, #12]
 8001e18:	2b00      	cmp	r3, #0
 8001e1a:	d109      	bne.n	8001e30 <HAL_ADC_Init+0xd4>
      {
        /* Enable the selected ADC regular discontinuous mode */
        /* Set the number of channels to be converted in discontinuous mode */
        SET_BIT(tmp_cr1, ADC_CR1_DISCEN                                            |
 8001e1c:	687b      	ldr	r3, [r7, #4]
 8001e1e:	699b      	ldr	r3, [r3, #24]
 8001e20:	3b01      	subs	r3, #1
 8001e22:	035a      	lsls	r2, r3, #13
 8001e24:	693b      	ldr	r3, [r7, #16]
 8001e26:	4313      	orrs	r3, r2
 8001e28:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8001e2c:	613b      	str	r3, [r7, #16]
 8001e2e:	e00b      	b.n	8001e48 <HAL_ADC_Init+0xec>
      {
        /* ADC regular group settings continuous and sequencer discontinuous*/
        /* cannot be enabled simultaneously.                                */
        
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001e30:	687b      	ldr	r3, [r7, #4]
 8001e32:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001e34:	f043 0220 	orr.w	r2, r3, #32
 8001e38:	687b      	ldr	r3, [r7, #4]
 8001e3a:	629a      	str	r2, [r3, #40]	; 0x28
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001e3c:	687b      	ldr	r3, [r7, #4]
 8001e3e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001e40:	f043 0201 	orr.w	r2, r3, #1
 8001e44:	687b      	ldr	r3, [r7, #4]
 8001e46:	62da      	str	r2, [r3, #44]	; 0x2c
      }
    }
    
    /* Update ADC configuration register CR1 with previous settings */
      MODIFY_REG(hadc->Instance->CR1,
 8001e48:	687b      	ldr	r3, [r7, #4]
 8001e4a:	681b      	ldr	r3, [r3, #0]
 8001e4c:	685b      	ldr	r3, [r3, #4]
 8001e4e:	f423 4169 	bic.w	r1, r3, #59648	; 0xe900
 8001e52:	687b      	ldr	r3, [r7, #4]
 8001e54:	681b      	ldr	r3, [r3, #0]
 8001e56:	693a      	ldr	r2, [r7, #16]
 8001e58:	430a      	orrs	r2, r1
 8001e5a:	605a      	str	r2, [r3, #4]
                 ADC_CR1_DISCEN  |
                 ADC_CR1_DISCNUM    ,
                 tmp_cr1             );
    
    /* Update ADC configuration register CR2 with previous settings */
      MODIFY_REG(hadc->Instance->CR2,
 8001e5c:	687b      	ldr	r3, [r7, #4]
 8001e5e:	681b      	ldr	r3, [r3, #0]
 8001e60:	689a      	ldr	r2, [r3, #8]
 8001e62:	4b28      	ldr	r3, [pc, #160]	; (8001f04 <HAL_ADC_Init+0x1a8>)
 8001e64:	4013      	ands	r3, r2
 8001e66:	687a      	ldr	r2, [r7, #4]
 8001e68:	6812      	ldr	r2, [r2, #0]
 8001e6a:	68b9      	ldr	r1, [r7, #8]
 8001e6c:	430b      	orrs	r3, r1
 8001e6e:	6093      	str	r3, [r2, #8]
    /*   Note: Scan mode is present by hardware on this device and, if        */
    /*   disabled, discards automatically nb of conversions. Anyway, nb of    */
    /*   conversions is forced to 0x00 for alignment over all STM32 devices.  */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion"                                          */
    if (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode) == ADC_SCAN_ENABLE)
 8001e70:	687b      	ldr	r3, [r7, #4]
 8001e72:	689b      	ldr	r3, [r3, #8]
 8001e74:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001e78:	d003      	beq.n	8001e82 <HAL_ADC_Init+0x126>
 8001e7a:	687b      	ldr	r3, [r7, #4]
 8001e7c:	689b      	ldr	r3, [r3, #8]
 8001e7e:	2b01      	cmp	r3, #1
 8001e80:	d104      	bne.n	8001e8c <HAL_ADC_Init+0x130>
    {
      tmp_sqr1 = ADC_SQR1_L_SHIFT(hadc->Init.NbrOfConversion);
 8001e82:	687b      	ldr	r3, [r7, #4]
 8001e84:	691b      	ldr	r3, [r3, #16]
 8001e86:	3b01      	subs	r3, #1
 8001e88:	051b      	lsls	r3, r3, #20
 8001e8a:	60fb      	str	r3, [r7, #12]
    }
      
    MODIFY_REG(hadc->Instance->SQR1,
 8001e8c:	687b      	ldr	r3, [r7, #4]
 8001e8e:	681b      	ldr	r3, [r3, #0]
 8001e90:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001e92:	f423 0170 	bic.w	r1, r3, #15728640	; 0xf00000
 8001e96:	687b      	ldr	r3, [r7, #4]
 8001e98:	681b      	ldr	r3, [r3, #0]
 8001e9a:	68fa      	ldr	r2, [r7, #12]
 8001e9c:	430a      	orrs	r2, r1
 8001e9e:	62da      	str	r2, [r3, #44]	; 0x2c
    /* ensure of no potential problem of ADC core IP clocking.                */
    /* Check through register CR2 (excluding bits set in other functions:     */
    /* execution control bits (ADON, JSWSTART, SWSTART), regular group bits   */
    /* (DMA), injected group bits (JEXTTRIG and JEXTSEL), channel internal    */
    /* measurement path bit (TSVREFE).                                        */
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8001ea0:	687b      	ldr	r3, [r7, #4]
 8001ea2:	681b      	ldr	r3, [r3, #0]
 8001ea4:	689a      	ldr	r2, [r3, #8]
 8001ea6:	4b18      	ldr	r3, [pc, #96]	; (8001f08 <HAL_ADC_Init+0x1ac>)
 8001ea8:	4013      	ands	r3, r2
 8001eaa:	68ba      	ldr	r2, [r7, #8]
 8001eac:	429a      	cmp	r2, r3
 8001eae:	d10b      	bne.n	8001ec8 <HAL_ADC_Init+0x16c>
                                        ADC_CR2_JEXTTRIG | ADC_CR2_JEXTSEL |
                                        ADC_CR2_TSVREFE                     ))
         == tmp_cr2)
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 8001eb0:	687b      	ldr	r3, [r7, #4]
 8001eb2:	2200      	movs	r2, #0
 8001eb4:	62da      	str	r2, [r3, #44]	; 0x2c
      
      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 8001eb6:	687b      	ldr	r3, [r7, #4]
 8001eb8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001eba:	f023 0303 	bic.w	r3, r3, #3
 8001ebe:	f043 0201 	orr.w	r2, r3, #1
 8001ec2:	687b      	ldr	r3, [r7, #4]
 8001ec4:	629a      	str	r2, [r3, #40]	; 0x28
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8001ec6:	e018      	b.n	8001efa <HAL_ADC_Init+0x19e>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 8001ec8:	687b      	ldr	r3, [r7, #4]
 8001eca:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001ecc:	f023 0312 	bic.w	r3, r3, #18
 8001ed0:	f043 0210 	orr.w	r2, r3, #16
 8001ed4:	687b      	ldr	r3, [r7, #4]
 8001ed6:	629a      	str	r2, [r3, #40]	; 0x28
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001ed8:	687b      	ldr	r3, [r7, #4]
 8001eda:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001edc:	f043 0201 	orr.w	r2, r3, #1
 8001ee0:	687b      	ldr	r3, [r7, #4]
 8001ee2:	62da      	str	r2, [r3, #44]	; 0x2c
      
      tmp_hal_status = HAL_ERROR;
 8001ee4:	2301      	movs	r3, #1
 8001ee6:	75fb      	strb	r3, [r7, #23]
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8001ee8:	e007      	b.n	8001efa <HAL_ADC_Init+0x19e>
  
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001eea:	687b      	ldr	r3, [r7, #4]
 8001eec:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001eee:	f043 0210 	orr.w	r2, r3, #16
 8001ef2:	687b      	ldr	r3, [r7, #4]
 8001ef4:	629a      	str	r2, [r3, #40]	; 0x28
        
    tmp_hal_status = HAL_ERROR;
 8001ef6:	2301      	movs	r3, #1
 8001ef8:	75fb      	strb	r3, [r7, #23]
  }
  
  /* Return function status */
  return tmp_hal_status;
 8001efa:	7dfb      	ldrb	r3, [r7, #23]
}
 8001efc:	4618      	mov	r0, r3
 8001efe:	3718      	adds	r7, #24
 8001f00:	46bd      	mov	sp, r7
 8001f02:	bd80      	pop	{r7, pc}
 8001f04:	ffe1f7fd 	.word	0xffe1f7fd
 8001f08:	ff1f0efe 	.word	0xff1f0efe

08001f0c <HAL_ADC_Start>:
  *         Interruptions enabled in this function: None.
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef* hadc)
{
 8001f0c:	b580      	push	{r7, lr}
 8001f0e:	b084      	sub	sp, #16
 8001f10:	af00      	add	r7, sp, #0
 8001f12:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001f14:	2300      	movs	r3, #0
 8001f16:	73fb      	strb	r3, [r7, #15]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8001f18:	687b      	ldr	r3, [r7, #4]
 8001f1a:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8001f1e:	2b01      	cmp	r3, #1
 8001f20:	d101      	bne.n	8001f26 <HAL_ADC_Start+0x1a>
 8001f22:	2302      	movs	r3, #2
 8001f24:	e098      	b.n	8002058 <HAL_ADC_Start+0x14c>
 8001f26:	687b      	ldr	r3, [r7, #4]
 8001f28:	2201      	movs	r2, #1
 8001f2a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
   
  /* Enable the ADC peripheral */
  tmp_hal_status = ADC_Enable(hadc);
 8001f2e:	6878      	ldr	r0, [r7, #4]
 8001f30:	f000 fad0 	bl	80024d4 <ADC_Enable>
 8001f34:	4603      	mov	r3, r0
 8001f36:	73fb      	strb	r3, [r7, #15]
  
  /* Start conversion if ADC is effectively enabled */
  if (tmp_hal_status == HAL_OK)
 8001f38:	7bfb      	ldrb	r3, [r7, #15]
 8001f3a:	2b00      	cmp	r3, #0
 8001f3c:	f040 8087 	bne.w	800204e <HAL_ADC_Start+0x142>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular operation                      */
    ADC_STATE_CLR_SET(hadc->State,
 8001f40:	687b      	ldr	r3, [r7, #4]
 8001f42:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001f44:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8001f48:	f023 0301 	bic.w	r3, r3, #1
 8001f4c:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8001f50:	687b      	ldr	r3, [r7, #4]
 8001f52:	629a      	str	r2, [r3, #40]	; 0x28
                      HAL_ADC_STATE_REG_BUSY);
    
    /* Set group injected state (from auto-injection) and multimode state     */
    /* for all cases of multimode: independent mode, multimode ADC master     */
    /* or multimode ADC slave (for devices with several ADCs):                */
    if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 8001f54:	687b      	ldr	r3, [r7, #4]
 8001f56:	681b      	ldr	r3, [r3, #0]
 8001f58:	4a41      	ldr	r2, [pc, #260]	; (8002060 <HAL_ADC_Start+0x154>)
 8001f5a:	4293      	cmp	r3, r2
 8001f5c:	d105      	bne.n	8001f6a <HAL_ADC_Start+0x5e>
 8001f5e:	4b41      	ldr	r3, [pc, #260]	; (8002064 <HAL_ADC_Start+0x158>)
 8001f60:	685b      	ldr	r3, [r3, #4]
 8001f62:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
 8001f66:	2b00      	cmp	r3, #0
 8001f68:	d115      	bne.n	8001f96 <HAL_ADC_Start+0x8a>
    {
      /* Set ADC state (ADC independent or master) */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8001f6a:	687b      	ldr	r3, [r7, #4]
 8001f6c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001f6e:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8001f72:	687b      	ldr	r3, [r7, #4]
 8001f74:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8001f76:	687b      	ldr	r3, [r7, #4]
 8001f78:	681b      	ldr	r3, [r3, #0]
 8001f7a:	685b      	ldr	r3, [r3, #4]
 8001f7c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001f80:	2b00      	cmp	r3, #0
 8001f82:	d026      	beq.n	8001fd2 <HAL_ADC_Start+0xc6>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8001f84:	687b      	ldr	r3, [r7, #4]
 8001f86:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001f88:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8001f8c:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8001f90:	687b      	ldr	r3, [r7, #4]
 8001f92:	629a      	str	r2, [r3, #40]	; 0x28
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8001f94:	e01d      	b.n	8001fd2 <HAL_ADC_Start+0xc6>
      }
    }
    else
    {
      /* Set ADC state (ADC slave) */
      SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8001f96:	687b      	ldr	r3, [r7, #4]
 8001f98:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001f9a:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8001f9e:	687b      	ldr	r3, [r7, #4]
 8001fa0:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (ADC_MULTIMODE_AUTO_INJECTED(hadc))
 8001fa2:	687b      	ldr	r3, [r7, #4]
 8001fa4:	681b      	ldr	r3, [r3, #0]
 8001fa6:	4a2f      	ldr	r2, [pc, #188]	; (8002064 <HAL_ADC_Start+0x158>)
 8001fa8:	4293      	cmp	r3, r2
 8001faa:	d004      	beq.n	8001fb6 <HAL_ADC_Start+0xaa>
 8001fac:	687b      	ldr	r3, [r7, #4]
 8001fae:	681b      	ldr	r3, [r3, #0]
 8001fb0:	4a2b      	ldr	r2, [pc, #172]	; (8002060 <HAL_ADC_Start+0x154>)
 8001fb2:	4293      	cmp	r3, r2
 8001fb4:	d10d      	bne.n	8001fd2 <HAL_ADC_Start+0xc6>
 8001fb6:	4b2b      	ldr	r3, [pc, #172]	; (8002064 <HAL_ADC_Start+0x158>)
 8001fb8:	685b      	ldr	r3, [r3, #4]
 8001fba:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001fbe:	2b00      	cmp	r3, #0
 8001fc0:	d007      	beq.n	8001fd2 <HAL_ADC_Start+0xc6>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8001fc2:	687b      	ldr	r3, [r7, #4]
 8001fc4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001fc6:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8001fca:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8001fce:	687b      	ldr	r3, [r7, #4]
 8001fd0:	629a      	str	r2, [r3, #40]	; 0x28
      }
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001fd2:	687b      	ldr	r3, [r7, #4]
 8001fd4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001fd6:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001fda:	2b00      	cmp	r3, #0
 8001fdc:	d006      	beq.n	8001fec <HAL_ADC_Start+0xe0>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8001fde:	687b      	ldr	r3, [r7, #4]
 8001fe0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001fe2:	f023 0206 	bic.w	r2, r3, #6
 8001fe6:	687b      	ldr	r3, [r7, #4]
 8001fe8:	62da      	str	r2, [r3, #44]	; 0x2c
 8001fea:	e002      	b.n	8001ff2 <HAL_ADC_Start+0xe6>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8001fec:	687b      	ldr	r3, [r7, #4]
 8001fee:	2200      	movs	r2, #0
 8001ff0:	62da      	str	r2, [r3, #44]	; 0x2c
    }
    
    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 8001ff2:	687b      	ldr	r3, [r7, #4]
 8001ff4:	2200      	movs	r2, #0
 8001ff6:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
    /* Clear regular group conversion flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC);
 8001ffa:	687b      	ldr	r3, [r7, #4]
 8001ffc:	681b      	ldr	r3, [r3, #0]
 8001ffe:	f06f 0202 	mvn.w	r2, #2
 8002002:	601a      	str	r2, [r3, #0]
    /*  - if ADC is slave, ADC is enabled only (conversion is not started).   */
    /*  - if ADC is master, ADC is enabled and conversion is started.         */
    /* If ADC is master, ADC is enabled and conversion is started.            */
    /* Note: Alternate trigger for single conversion could be to force an     */
    /*       additional set of bit ADON "hadc->Instance->CR2 |= ADC_CR2_ADON;"*/
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 8002004:	687b      	ldr	r3, [r7, #4]
 8002006:	681b      	ldr	r3, [r3, #0]
 8002008:	689b      	ldr	r3, [r3, #8]
 800200a:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
 800200e:	f5b3 2f60 	cmp.w	r3, #917504	; 0xe0000
 8002012:	d113      	bne.n	800203c <HAL_ADC_Start+0x130>
        ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc)  )
 8002014:	687b      	ldr	r3, [r7, #4]
 8002016:	681b      	ldr	r3, [r3, #0]
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 8002018:	4a11      	ldr	r2, [pc, #68]	; (8002060 <HAL_ADC_Start+0x154>)
 800201a:	4293      	cmp	r3, r2
 800201c:	d105      	bne.n	800202a <HAL_ADC_Start+0x11e>
        ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc)  )
 800201e:	4b11      	ldr	r3, [pc, #68]	; (8002064 <HAL_ADC_Start+0x158>)
 8002020:	685b      	ldr	r3, [r3, #4]
 8002022:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 8002026:	2b00      	cmp	r3, #0
 8002028:	d108      	bne.n	800203c <HAL_ADC_Start+0x130>
    {
      /* Start ADC conversion on regular group with SW start */
      SET_BIT(hadc->Instance->CR2, (ADC_CR2_SWSTART | ADC_CR2_EXTTRIG));
 800202a:	687b      	ldr	r3, [r7, #4]
 800202c:	681b      	ldr	r3, [r3, #0]
 800202e:	689a      	ldr	r2, [r3, #8]
 8002030:	687b      	ldr	r3, [r7, #4]
 8002032:	681b      	ldr	r3, [r3, #0]
 8002034:	f442 02a0 	orr.w	r2, r2, #5242880	; 0x500000
 8002038:	609a      	str	r2, [r3, #8]
 800203a:	e00c      	b.n	8002056 <HAL_ADC_Start+0x14a>
    }
    else
    {
      /* Start ADC conversion on regular group with external trigger */
      SET_BIT(hadc->Instance->CR2, ADC_CR2_EXTTRIG);
 800203c:	687b      	ldr	r3, [r7, #4]
 800203e:	681b      	ldr	r3, [r3, #0]
 8002040:	689a      	ldr	r2, [r3, #8]
 8002042:	687b      	ldr	r3, [r7, #4]
 8002044:	681b      	ldr	r3, [r3, #0]
 8002046:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 800204a:	609a      	str	r2, [r3, #8]
 800204c:	e003      	b.n	8002056 <HAL_ADC_Start+0x14a>
    }
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 800204e:	687b      	ldr	r3, [r7, #4]
 8002050:	2200      	movs	r2, #0
 8002052:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  }
    
  /* Return function status */
  return tmp_hal_status;
 8002056:	7bfb      	ldrb	r3, [r7, #15]
}
 8002058:	4618      	mov	r0, r3
 800205a:	3710      	adds	r7, #16
 800205c:	46bd      	mov	sp, r7
 800205e:	bd80      	pop	{r7, pc}
 8002060:	40012800 	.word	0x40012800
 8002064:	40012400 	.word	0x40012400

08002068 <HAL_ADC_Stop>:
  *         should be preliminarily stopped using HAL_ADCEx_InjectedStop function.
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Stop(ADC_HandleTypeDef* hadc)
{
 8002068:	b580      	push	{r7, lr}
 800206a:	b084      	sub	sp, #16
 800206c:	af00      	add	r7, sp, #0
 800206e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002070:	2300      	movs	r3, #0
 8002072:	73fb      	strb	r3, [r7, #15]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
     
  /* Process locked */
  __HAL_LOCK(hadc);
 8002074:	687b      	ldr	r3, [r7, #4]
 8002076:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800207a:	2b01      	cmp	r3, #1
 800207c:	d101      	bne.n	8002082 <HAL_ADC_Stop+0x1a>
 800207e:	2302      	movs	r3, #2
 8002080:	e01a      	b.n	80020b8 <HAL_ADC_Stop+0x50>
 8002082:	687b      	ldr	r3, [r7, #4]
 8002084:	2201      	movs	r2, #1
 8002086:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 800208a:	6878      	ldr	r0, [r7, #4]
 800208c:	f000 fa7c 	bl	8002588 <ADC_ConversionStop_Disable>
 8002090:	4603      	mov	r3, r0
 8002092:	73fb      	strb	r3, [r7, #15]
  
  /* Check if ADC is effectively disabled */
  if (tmp_hal_status == HAL_OK)
 8002094:	7bfb      	ldrb	r3, [r7, #15]
 8002096:	2b00      	cmp	r3, #0
 8002098:	d109      	bne.n	80020ae <HAL_ADC_Stop+0x46>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800209a:	687b      	ldr	r3, [r7, #4]
 800209c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800209e:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 80020a2:	f023 0301 	bic.w	r3, r3, #1
 80020a6:	f043 0201 	orr.w	r2, r3, #1
 80020aa:	687b      	ldr	r3, [r7, #4]
 80020ac:	629a      	str	r2, [r3, #40]	; 0x28
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_READY);
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80020ae:	687b      	ldr	r3, [r7, #4]
 80020b0:	2200      	movs	r2, #0
 80020b2:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  /* Return function status */
  return tmp_hal_status;
 80020b6:	7bfb      	ldrb	r3, [r7, #15]
}
 80020b8:	4618      	mov	r0, r3
 80020ba:	3710      	adds	r7, #16
 80020bc:	46bd      	mov	sp, r7
 80020be:	bd80      	pop	{r7, pc}

080020c0 <HAL_ADC_PollForConversion>:
  * @param  hadc: ADC handle
  * @param  Timeout: Timeout value in millisecond.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef* hadc, uint32_t Timeout)
{
 80020c0:	b590      	push	{r4, r7, lr}
 80020c2:	b087      	sub	sp, #28
 80020c4:	af00      	add	r7, sp, #0
 80020c6:	6078      	str	r0, [r7, #4]
 80020c8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 80020ca:	2300      	movs	r3, #0
 80020cc:	617b      	str	r3, [r7, #20]
  
  /* Variables for polling in case of scan mode enabled and polling for each  */
  /* conversion.                                                              */
  __IO uint32_t Conversion_Timeout_CPU_cycles = 0U;
 80020ce:	2300      	movs	r3, #0
 80020d0:	60fb      	str	r3, [r7, #12]
  uint32_t Conversion_Timeout_CPU_cycles_max = 0U;
 80020d2:	2300      	movs	r3, #0
 80020d4:	613b      	str	r3, [r7, #16]
 
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Get tick count */
  tickstart = HAL_GetTick();
 80020d6:	f7ff fe13 	bl	8001d00 <HAL_GetTick>
 80020da:	6178      	str	r0, [r7, #20]
  
  /* Verification that ADC configuration is compliant with polling for        */
  /* each conversion:                                                         */
  /* Particular case is ADC configured in DMA mode                            */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_DMA))
 80020dc:	687b      	ldr	r3, [r7, #4]
 80020de:	681b      	ldr	r3, [r3, #0]
 80020e0:	689b      	ldr	r3, [r3, #8]
 80020e2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80020e6:	2b00      	cmp	r3, #0
 80020e8:	d00b      	beq.n	8002102 <HAL_ADC_PollForConversion+0x42>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80020ea:	687b      	ldr	r3, [r7, #4]
 80020ec:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80020ee:	f043 0220 	orr.w	r2, r3, #32
 80020f2:	687b      	ldr	r3, [r7, #4]
 80020f4:	629a      	str	r2, [r3, #40]	; 0x28
    
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 80020f6:	687b      	ldr	r3, [r7, #4]
 80020f8:	2200      	movs	r2, #0
 80020fa:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    
    return HAL_ERROR;
 80020fe:	2301      	movs	r3, #1
 8002100:	e0d3      	b.n	80022aa <HAL_ADC_PollForConversion+0x1ea>
  /*    from ADC conversion time (selected sampling time + conversion time of */
  /*    12.5 ADC clock cycles) and APB2/ADC clock prescalers (depending on    */
  /*    settings, conversion time range can be from 28 to 32256 CPU cycles).  */
  /*    As flag EOC is not set after each conversion, no timeout status can   */
  /*    be set.                                                               */
  if (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_SCAN) &&
 8002102:	687b      	ldr	r3, [r7, #4]
 8002104:	681b      	ldr	r3, [r3, #0]
 8002106:	685b      	ldr	r3, [r3, #4]
 8002108:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800210c:	2b00      	cmp	r3, #0
 800210e:	d131      	bne.n	8002174 <HAL_ADC_PollForConversion+0xb4>
      HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L)    )
 8002110:	687b      	ldr	r3, [r7, #4]
 8002112:	681b      	ldr	r3, [r3, #0]
 8002114:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002116:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
  if (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_SCAN) &&
 800211a:	2b00      	cmp	r3, #0
 800211c:	d12a      	bne.n	8002174 <HAL_ADC_PollForConversion+0xb4>
  {
    /* Wait until End of Conversion flag is raised */
    while(HAL_IS_BIT_CLR(hadc->Instance->SR, ADC_FLAG_EOC))
 800211e:	e021      	b.n	8002164 <HAL_ADC_PollForConversion+0xa4>
    {
      /* Check if timeout is disabled (set to infinite wait) */
      if(Timeout != HAL_MAX_DELAY)
 8002120:	683b      	ldr	r3, [r7, #0]
 8002122:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002126:	d01d      	beq.n	8002164 <HAL_ADC_PollForConversion+0xa4>
      {
        if((Timeout == 0U) || ((HAL_GetTick() - tickstart ) > Timeout))
 8002128:	683b      	ldr	r3, [r7, #0]
 800212a:	2b00      	cmp	r3, #0
 800212c:	d007      	beq.n	800213e <HAL_ADC_PollForConversion+0x7e>
 800212e:	f7ff fde7 	bl	8001d00 <HAL_GetTick>
 8002132:	4602      	mov	r2, r0
 8002134:	697b      	ldr	r3, [r7, #20]
 8002136:	1ad3      	subs	r3, r2, r3
 8002138:	683a      	ldr	r2, [r7, #0]
 800213a:	429a      	cmp	r2, r3
 800213c:	d212      	bcs.n	8002164 <HAL_ADC_PollForConversion+0xa4>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if(HAL_IS_BIT_CLR(hadc->Instance->SR, ADC_FLAG_EOC))
 800213e:	687b      	ldr	r3, [r7, #4]
 8002140:	681b      	ldr	r3, [r3, #0]
 8002142:	681b      	ldr	r3, [r3, #0]
 8002144:	f003 0302 	and.w	r3, r3, #2
 8002148:	2b00      	cmp	r3, #0
 800214a:	d10b      	bne.n	8002164 <HAL_ADC_PollForConversion+0xa4>
          {
            /* Update ADC state machine to timeout */
            SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 800214c:	687b      	ldr	r3, [r7, #4]
 800214e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002150:	f043 0204 	orr.w	r2, r3, #4
 8002154:	687b      	ldr	r3, [r7, #4]
 8002156:	629a      	str	r2, [r3, #40]	; 0x28
            
            /* Process unlocked */
            __HAL_UNLOCK(hadc);
 8002158:	687b      	ldr	r3, [r7, #4]
 800215a:	2200      	movs	r2, #0
 800215c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
            
            return HAL_TIMEOUT;
 8002160:	2303      	movs	r3, #3
 8002162:	e0a2      	b.n	80022aa <HAL_ADC_PollForConversion+0x1ea>
    while(HAL_IS_BIT_CLR(hadc->Instance->SR, ADC_FLAG_EOC))
 8002164:	687b      	ldr	r3, [r7, #4]
 8002166:	681b      	ldr	r3, [r3, #0]
 8002168:	681b      	ldr	r3, [r3, #0]
 800216a:	f003 0302 	and.w	r3, r3, #2
 800216e:	2b00      	cmp	r3, #0
 8002170:	d0d6      	beq.n	8002120 <HAL_ADC_PollForConversion+0x60>
  if (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_SCAN) &&
 8002172:	e070      	b.n	8002256 <HAL_ADC_PollForConversion+0x196>
    /* Replace polling by wait for maximum conversion time */
    /*  - Computation of CPU clock cycles corresponding to ADC clock cycles   */
    /*    and ADC maximum conversion cycles on all channels.                  */
    /*  - Wait for the expected ADC clock cycles delay                        */
    Conversion_Timeout_CPU_cycles_max = ((SystemCoreClock
                                          / HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_ADC))
 8002174:	4b4f      	ldr	r3, [pc, #316]	; (80022b4 <HAL_ADC_PollForConversion+0x1f4>)
 8002176:	681c      	ldr	r4, [r3, #0]
 8002178:	2002      	movs	r0, #2
 800217a:	f002 f94d 	bl	8004418 <HAL_RCCEx_GetPeriphCLKFreq>
 800217e:	4603      	mov	r3, r0
 8002180:	fbb4 f2f3 	udiv	r2, r4, r3
                                         * ADC_CONVCYCLES_MAX_RANGE(hadc)                 );
 8002184:	687b      	ldr	r3, [r7, #4]
 8002186:	681b      	ldr	r3, [r3, #0]
 8002188:	6919      	ldr	r1, [r3, #16]
 800218a:	4b4b      	ldr	r3, [pc, #300]	; (80022b8 <HAL_ADC_PollForConversion+0x1f8>)
 800218c:	400b      	ands	r3, r1
 800218e:	2b00      	cmp	r3, #0
 8002190:	d118      	bne.n	80021c4 <HAL_ADC_PollForConversion+0x104>
 8002192:	687b      	ldr	r3, [r7, #4]
 8002194:	681b      	ldr	r3, [r3, #0]
 8002196:	68d9      	ldr	r1, [r3, #12]
 8002198:	4b48      	ldr	r3, [pc, #288]	; (80022bc <HAL_ADC_PollForConversion+0x1fc>)
 800219a:	400b      	ands	r3, r1
 800219c:	2b00      	cmp	r3, #0
 800219e:	d111      	bne.n	80021c4 <HAL_ADC_PollForConversion+0x104>
 80021a0:	687b      	ldr	r3, [r7, #4]
 80021a2:	681b      	ldr	r3, [r3, #0]
 80021a4:	6919      	ldr	r1, [r3, #16]
 80021a6:	4b46      	ldr	r3, [pc, #280]	; (80022c0 <HAL_ADC_PollForConversion+0x200>)
 80021a8:	400b      	ands	r3, r1
 80021aa:	2b00      	cmp	r3, #0
 80021ac:	d108      	bne.n	80021c0 <HAL_ADC_PollForConversion+0x100>
 80021ae:	687b      	ldr	r3, [r7, #4]
 80021b0:	681b      	ldr	r3, [r3, #0]
 80021b2:	68d9      	ldr	r1, [r3, #12]
 80021b4:	4b43      	ldr	r3, [pc, #268]	; (80022c4 <HAL_ADC_PollForConversion+0x204>)
 80021b6:	400b      	ands	r3, r1
 80021b8:	2b00      	cmp	r3, #0
 80021ba:	d101      	bne.n	80021c0 <HAL_ADC_PollForConversion+0x100>
 80021bc:	2314      	movs	r3, #20
 80021be:	e020      	b.n	8002202 <HAL_ADC_PollForConversion+0x142>
 80021c0:	2329      	movs	r3, #41	; 0x29
 80021c2:	e01e      	b.n	8002202 <HAL_ADC_PollForConversion+0x142>
 80021c4:	687b      	ldr	r3, [r7, #4]
 80021c6:	681b      	ldr	r3, [r3, #0]
 80021c8:	6919      	ldr	r1, [r3, #16]
 80021ca:	4b3d      	ldr	r3, [pc, #244]	; (80022c0 <HAL_ADC_PollForConversion+0x200>)
 80021cc:	400b      	ands	r3, r1
 80021ce:	2b00      	cmp	r3, #0
 80021d0:	d106      	bne.n	80021e0 <HAL_ADC_PollForConversion+0x120>
 80021d2:	687b      	ldr	r3, [r7, #4]
 80021d4:	681b      	ldr	r3, [r3, #0]
 80021d6:	68d9      	ldr	r1, [r3, #12]
 80021d8:	4b3a      	ldr	r3, [pc, #232]	; (80022c4 <HAL_ADC_PollForConversion+0x204>)
 80021da:	400b      	ands	r3, r1
 80021dc:	2b00      	cmp	r3, #0
 80021de:	d00d      	beq.n	80021fc <HAL_ADC_PollForConversion+0x13c>
 80021e0:	687b      	ldr	r3, [r7, #4]
 80021e2:	681b      	ldr	r3, [r3, #0]
 80021e4:	6919      	ldr	r1, [r3, #16]
 80021e6:	4b38      	ldr	r3, [pc, #224]	; (80022c8 <HAL_ADC_PollForConversion+0x208>)
 80021e8:	400b      	ands	r3, r1
 80021ea:	2b00      	cmp	r3, #0
 80021ec:	d108      	bne.n	8002200 <HAL_ADC_PollForConversion+0x140>
 80021ee:	687b      	ldr	r3, [r7, #4]
 80021f0:	681b      	ldr	r3, [r3, #0]
 80021f2:	68d9      	ldr	r1, [r3, #12]
 80021f4:	4b34      	ldr	r3, [pc, #208]	; (80022c8 <HAL_ADC_PollForConversion+0x208>)
 80021f6:	400b      	ands	r3, r1
 80021f8:	2b00      	cmp	r3, #0
 80021fa:	d101      	bne.n	8002200 <HAL_ADC_PollForConversion+0x140>
 80021fc:	2354      	movs	r3, #84	; 0x54
 80021fe:	e000      	b.n	8002202 <HAL_ADC_PollForConversion+0x142>
 8002200:	23fc      	movs	r3, #252	; 0xfc
    Conversion_Timeout_CPU_cycles_max = ((SystemCoreClock
 8002202:	fb02 f303 	mul.w	r3, r2, r3
 8002206:	613b      	str	r3, [r7, #16]
    
    while(Conversion_Timeout_CPU_cycles < Conversion_Timeout_CPU_cycles_max)
 8002208:	e021      	b.n	800224e <HAL_ADC_PollForConversion+0x18e>
    {
      /* Check if timeout is disabled (set to infinite wait) */
      if(Timeout != HAL_MAX_DELAY)
 800220a:	683b      	ldr	r3, [r7, #0]
 800220c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002210:	d01a      	beq.n	8002248 <HAL_ADC_PollForConversion+0x188>
      {
        if((Timeout == 0U) || ((HAL_GetTick() - tickstart) > Timeout))
 8002212:	683b      	ldr	r3, [r7, #0]
 8002214:	2b00      	cmp	r3, #0
 8002216:	d007      	beq.n	8002228 <HAL_ADC_PollForConversion+0x168>
 8002218:	f7ff fd72 	bl	8001d00 <HAL_GetTick>
 800221c:	4602      	mov	r2, r0
 800221e:	697b      	ldr	r3, [r7, #20]
 8002220:	1ad3      	subs	r3, r2, r3
 8002222:	683a      	ldr	r2, [r7, #0]
 8002224:	429a      	cmp	r2, r3
 8002226:	d20f      	bcs.n	8002248 <HAL_ADC_PollForConversion+0x188>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if(Conversion_Timeout_CPU_cycles < Conversion_Timeout_CPU_cycles_max)
 8002228:	68fb      	ldr	r3, [r7, #12]
 800222a:	693a      	ldr	r2, [r7, #16]
 800222c:	429a      	cmp	r2, r3
 800222e:	d90b      	bls.n	8002248 <HAL_ADC_PollForConversion+0x188>
          {
            /* Update ADC state machine to timeout */
            SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8002230:	687b      	ldr	r3, [r7, #4]
 8002232:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002234:	f043 0204 	orr.w	r2, r3, #4
 8002238:	687b      	ldr	r3, [r7, #4]
 800223a:	629a      	str	r2, [r3, #40]	; 0x28

            /* Process unlocked */
            __HAL_UNLOCK(hadc);
 800223c:	687b      	ldr	r3, [r7, #4]
 800223e:	2200      	movs	r2, #0
 8002240:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

            return HAL_TIMEOUT;
 8002244:	2303      	movs	r3, #3
 8002246:	e030      	b.n	80022aa <HAL_ADC_PollForConversion+0x1ea>
          }
        }
      }
      Conversion_Timeout_CPU_cycles ++;
 8002248:	68fb      	ldr	r3, [r7, #12]
 800224a:	3301      	adds	r3, #1
 800224c:	60fb      	str	r3, [r7, #12]
    while(Conversion_Timeout_CPU_cycles < Conversion_Timeout_CPU_cycles_max)
 800224e:	68fb      	ldr	r3, [r7, #12]
 8002250:	693a      	ldr	r2, [r7, #16]
 8002252:	429a      	cmp	r2, r3
 8002254:	d8d9      	bhi.n	800220a <HAL_ADC_PollForConversion+0x14a>
    }
  }
  
  /* Clear regular group conversion flag */
  __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 8002256:	687b      	ldr	r3, [r7, #4]
 8002258:	681b      	ldr	r3, [r3, #0]
 800225a:	f06f 0212 	mvn.w	r2, #18
 800225e:	601a      	str	r2, [r3, #0]
  
  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8002260:	687b      	ldr	r3, [r7, #4]
 8002262:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002264:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8002268:	687b      	ldr	r3, [r7, #4]
 800226a:	629a      	str	r2, [r3, #40]	; 0x28
  /* Determine whether any further conversion upcoming on group regular       */
  /* by external trigger, continuous mode or scan sequence on going.          */
  /* Note: On STM32F1 devices, in case of sequencer enabled                   */
  /*       (several ranks selected), end of conversion flag is raised         */
  /*       at the end of the sequence.                                        */
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 800226c:	687b      	ldr	r3, [r7, #4]
 800226e:	681b      	ldr	r3, [r3, #0]
 8002270:	689b      	ldr	r3, [r3, #8]
 8002272:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
 8002276:	f5b3 2f60 	cmp.w	r3, #917504	; 0xe0000
 800227a:	d115      	bne.n	80022a8 <HAL_ADC_PollForConversion+0x1e8>
     (hadc->Init.ContinuousConvMode == DISABLE)   )
 800227c:	687b      	ldr	r3, [r7, #4]
 800227e:	7b1b      	ldrb	r3, [r3, #12]
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8002280:	2b00      	cmp	r3, #0
 8002282:	d111      	bne.n	80022a8 <HAL_ADC_PollForConversion+0x1e8>
  {   
    /* Set ADC state */
    CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8002284:	687b      	ldr	r3, [r7, #4]
 8002286:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002288:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800228c:	687b      	ldr	r3, [r7, #4]
 800228e:	629a      	str	r2, [r3, #40]	; 0x28

    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8002290:	687b      	ldr	r3, [r7, #4]
 8002292:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002294:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002298:	2b00      	cmp	r3, #0
 800229a:	d105      	bne.n	80022a8 <HAL_ADC_PollForConversion+0x1e8>
    { 
      SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 800229c:	687b      	ldr	r3, [r7, #4]
 800229e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80022a0:	f043 0201 	orr.w	r2, r3, #1
 80022a4:	687b      	ldr	r3, [r7, #4]
 80022a6:	629a      	str	r2, [r3, #40]	; 0x28
    }
  }
  
  /* Return ADC state */
  return HAL_OK;
 80022a8:	2300      	movs	r3, #0
}
 80022aa:	4618      	mov	r0, r3
 80022ac:	371c      	adds	r7, #28
 80022ae:	46bd      	mov	sp, r7
 80022b0:	bd90      	pop	{r4, r7, pc}
 80022b2:	bf00      	nop
 80022b4:	20000000 	.word	0x20000000
 80022b8:	24924924 	.word	0x24924924
 80022bc:	00924924 	.word	0x00924924
 80022c0:	12492492 	.word	0x12492492
 80022c4:	00492492 	.word	0x00492492
 80022c8:	00249249 	.word	0x00249249

080022cc <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param  hadc: ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{
 80022cc:	b480      	push	{r7}
 80022ce:	b083      	sub	sp, #12
 80022d0:	af00      	add	r7, sp, #0
 80022d2:	6078      	str	r0, [r7, #4]

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */
  
  /* Return ADC converted value */ 
  return hadc->Instance->DR;
 80022d4:	687b      	ldr	r3, [r7, #4]
 80022d6:	681b      	ldr	r3, [r3, #0]
 80022d8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
}
 80022da:	4618      	mov	r0, r3
 80022dc:	370c      	adds	r7, #12
 80022de:	46bd      	mov	sp, r7
 80022e0:	bc80      	pop	{r7}
 80022e2:	4770      	bx	lr

080022e4 <HAL_ADC_ConfigChannel>:
  * @param  hadc: ADC handle
  * @param  sConfig: Structure of ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{ 
 80022e4:	b480      	push	{r7}
 80022e6:	b085      	sub	sp, #20
 80022e8:	af00      	add	r7, sp, #0
 80022ea:	6078      	str	r0, [r7, #4]
 80022ec:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80022ee:	2300      	movs	r3, #0
 80022f0:	73fb      	strb	r3, [r7, #15]
  __IO uint32_t wait_loop_index = 0U;
 80022f2:	2300      	movs	r3, #0
 80022f4:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80022f6:	687b      	ldr	r3, [r7, #4]
 80022f8:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80022fc:	2b01      	cmp	r3, #1
 80022fe:	d101      	bne.n	8002304 <HAL_ADC_ConfigChannel+0x20>
 8002300:	2302      	movs	r3, #2
 8002302:	e0dc      	b.n	80024be <HAL_ADC_ConfigChannel+0x1da>
 8002304:	687b      	ldr	r3, [r7, #4]
 8002306:	2201      	movs	r2, #1
 8002308:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  
  /* Regular sequence configuration */
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 800230c:	683b      	ldr	r3, [r7, #0]
 800230e:	685b      	ldr	r3, [r3, #4]
 8002310:	2b06      	cmp	r3, #6
 8002312:	d81c      	bhi.n	800234e <HAL_ADC_ConfigChannel+0x6a>
  {
    MODIFY_REG(hadc->Instance->SQR3                        ,
 8002314:	687b      	ldr	r3, [r7, #4]
 8002316:	681b      	ldr	r3, [r3, #0]
 8002318:	6b59      	ldr	r1, [r3, #52]	; 0x34
 800231a:	683b      	ldr	r3, [r7, #0]
 800231c:	685a      	ldr	r2, [r3, #4]
 800231e:	4613      	mov	r3, r2
 8002320:	009b      	lsls	r3, r3, #2
 8002322:	4413      	add	r3, r2
 8002324:	3b05      	subs	r3, #5
 8002326:	221f      	movs	r2, #31
 8002328:	fa02 f303 	lsl.w	r3, r2, r3
 800232c:	43db      	mvns	r3, r3
 800232e:	4019      	ands	r1, r3
 8002330:	683b      	ldr	r3, [r7, #0]
 8002332:	6818      	ldr	r0, [r3, #0]
 8002334:	683b      	ldr	r3, [r7, #0]
 8002336:	685a      	ldr	r2, [r3, #4]
 8002338:	4613      	mov	r3, r2
 800233a:	009b      	lsls	r3, r3, #2
 800233c:	4413      	add	r3, r2
 800233e:	3b05      	subs	r3, #5
 8002340:	fa00 f203 	lsl.w	r2, r0, r3
 8002344:	687b      	ldr	r3, [r7, #4]
 8002346:	681b      	ldr	r3, [r3, #0]
 8002348:	430a      	orrs	r2, r1
 800234a:	635a      	str	r2, [r3, #52]	; 0x34
 800234c:	e03c      	b.n	80023c8 <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank)    ,
               ADC_SQR3_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 800234e:	683b      	ldr	r3, [r7, #0]
 8002350:	685b      	ldr	r3, [r3, #4]
 8002352:	2b0c      	cmp	r3, #12
 8002354:	d81c      	bhi.n	8002390 <HAL_ADC_ConfigChannel+0xac>
  {
    MODIFY_REG(hadc->Instance->SQR2                        ,
 8002356:	687b      	ldr	r3, [r7, #4]
 8002358:	681b      	ldr	r3, [r3, #0]
 800235a:	6b19      	ldr	r1, [r3, #48]	; 0x30
 800235c:	683b      	ldr	r3, [r7, #0]
 800235e:	685a      	ldr	r2, [r3, #4]
 8002360:	4613      	mov	r3, r2
 8002362:	009b      	lsls	r3, r3, #2
 8002364:	4413      	add	r3, r2
 8002366:	3b23      	subs	r3, #35	; 0x23
 8002368:	221f      	movs	r2, #31
 800236a:	fa02 f303 	lsl.w	r3, r2, r3
 800236e:	43db      	mvns	r3, r3
 8002370:	4019      	ands	r1, r3
 8002372:	683b      	ldr	r3, [r7, #0]
 8002374:	6818      	ldr	r0, [r3, #0]
 8002376:	683b      	ldr	r3, [r7, #0]
 8002378:	685a      	ldr	r2, [r3, #4]
 800237a:	4613      	mov	r3, r2
 800237c:	009b      	lsls	r3, r3, #2
 800237e:	4413      	add	r3, r2
 8002380:	3b23      	subs	r3, #35	; 0x23
 8002382:	fa00 f203 	lsl.w	r2, r0, r3
 8002386:	687b      	ldr	r3, [r7, #4]
 8002388:	681b      	ldr	r3, [r3, #0]
 800238a:	430a      	orrs	r2, r1
 800238c:	631a      	str	r2, [r3, #48]	; 0x30
 800238e:	e01b      	b.n	80023c8 <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR2_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 13 to 16 */
  else
  {
    MODIFY_REG(hadc->Instance->SQR1                        ,
 8002390:	687b      	ldr	r3, [r7, #4]
 8002392:	681b      	ldr	r3, [r3, #0]
 8002394:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8002396:	683b      	ldr	r3, [r7, #0]
 8002398:	685a      	ldr	r2, [r3, #4]
 800239a:	4613      	mov	r3, r2
 800239c:	009b      	lsls	r3, r3, #2
 800239e:	4413      	add	r3, r2
 80023a0:	3b41      	subs	r3, #65	; 0x41
 80023a2:	221f      	movs	r2, #31
 80023a4:	fa02 f303 	lsl.w	r3, r2, r3
 80023a8:	43db      	mvns	r3, r3
 80023aa:	4019      	ands	r1, r3
 80023ac:	683b      	ldr	r3, [r7, #0]
 80023ae:	6818      	ldr	r0, [r3, #0]
 80023b0:	683b      	ldr	r3, [r7, #0]
 80023b2:	685a      	ldr	r2, [r3, #4]
 80023b4:	4613      	mov	r3, r2
 80023b6:	009b      	lsls	r3, r3, #2
 80023b8:	4413      	add	r3, r2
 80023ba:	3b41      	subs	r3, #65	; 0x41
 80023bc:	fa00 f203 	lsl.w	r2, r0, r3
 80023c0:	687b      	ldr	r3, [r7, #4]
 80023c2:	681b      	ldr	r3, [r3, #0]
 80023c4:	430a      	orrs	r2, r1
 80023c6:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  
  
  /* Channel sampling time configuration */
  /* For channels 10 to 17 */
  if (sConfig->Channel >= ADC_CHANNEL_10)
 80023c8:	683b      	ldr	r3, [r7, #0]
 80023ca:	681b      	ldr	r3, [r3, #0]
 80023cc:	2b09      	cmp	r3, #9
 80023ce:	d91c      	bls.n	800240a <HAL_ADC_ConfigChannel+0x126>
  {
    MODIFY_REG(hadc->Instance->SMPR1                             ,
 80023d0:	687b      	ldr	r3, [r7, #4]
 80023d2:	681b      	ldr	r3, [r3, #0]
 80023d4:	68d9      	ldr	r1, [r3, #12]
 80023d6:	683b      	ldr	r3, [r7, #0]
 80023d8:	681a      	ldr	r2, [r3, #0]
 80023da:	4613      	mov	r3, r2
 80023dc:	005b      	lsls	r3, r3, #1
 80023de:	4413      	add	r3, r2
 80023e0:	3b1e      	subs	r3, #30
 80023e2:	2207      	movs	r2, #7
 80023e4:	fa02 f303 	lsl.w	r3, r2, r3
 80023e8:	43db      	mvns	r3, r3
 80023ea:	4019      	ands	r1, r3
 80023ec:	683b      	ldr	r3, [r7, #0]
 80023ee:	6898      	ldr	r0, [r3, #8]
 80023f0:	683b      	ldr	r3, [r7, #0]
 80023f2:	681a      	ldr	r2, [r3, #0]
 80023f4:	4613      	mov	r3, r2
 80023f6:	005b      	lsls	r3, r3, #1
 80023f8:	4413      	add	r3, r2
 80023fa:	3b1e      	subs	r3, #30
 80023fc:	fa00 f203 	lsl.w	r2, r0, r3
 8002400:	687b      	ldr	r3, [r7, #4]
 8002402:	681b      	ldr	r3, [r3, #0]
 8002404:	430a      	orrs	r2, r1
 8002406:	60da      	str	r2, [r3, #12]
 8002408:	e019      	b.n	800243e <HAL_ADC_ConfigChannel+0x15a>
               ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel)      ,
               ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel) );
  }
  else /* For channels 0 to 9 */
  {
    MODIFY_REG(hadc->Instance->SMPR2                             ,
 800240a:	687b      	ldr	r3, [r7, #4]
 800240c:	681b      	ldr	r3, [r3, #0]
 800240e:	6919      	ldr	r1, [r3, #16]
 8002410:	683b      	ldr	r3, [r7, #0]
 8002412:	681a      	ldr	r2, [r3, #0]
 8002414:	4613      	mov	r3, r2
 8002416:	005b      	lsls	r3, r3, #1
 8002418:	4413      	add	r3, r2
 800241a:	2207      	movs	r2, #7
 800241c:	fa02 f303 	lsl.w	r3, r2, r3
 8002420:	43db      	mvns	r3, r3
 8002422:	4019      	ands	r1, r3
 8002424:	683b      	ldr	r3, [r7, #0]
 8002426:	6898      	ldr	r0, [r3, #8]
 8002428:	683b      	ldr	r3, [r7, #0]
 800242a:	681a      	ldr	r2, [r3, #0]
 800242c:	4613      	mov	r3, r2
 800242e:	005b      	lsls	r3, r3, #1
 8002430:	4413      	add	r3, r2
 8002432:	fa00 f203 	lsl.w	r2, r0, r3
 8002436:	687b      	ldr	r3, [r7, #4]
 8002438:	681b      	ldr	r3, [r3, #0]
 800243a:	430a      	orrs	r2, r1
 800243c:	611a      	str	r2, [r3, #16]
               ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel) );
  }
  
  /* If ADC1 Channel_16 or Channel_17 is selected, enable Temperature sensor  */
  /* and VREFINT measurement path.                                            */
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 800243e:	683b      	ldr	r3, [r7, #0]
 8002440:	681b      	ldr	r3, [r3, #0]
 8002442:	2b10      	cmp	r3, #16
 8002444:	d003      	beq.n	800244e <HAL_ADC_ConfigChannel+0x16a>
      (sConfig->Channel == ADC_CHANNEL_VREFINT)      )
 8002446:	683b      	ldr	r3, [r7, #0]
 8002448:	681b      	ldr	r3, [r3, #0]
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 800244a:	2b11      	cmp	r3, #17
 800244c:	d132      	bne.n	80024b4 <HAL_ADC_ConfigChannel+0x1d0>
  {
    /* For STM32F1 devices with several ADC: Only ADC1 can access internal    */
    /* measurement channels (VrefInt/TempSensor). If these channels are       */
    /* intended to be set on other ADC instances, an error is reported.       */
    if (hadc->Instance == ADC1)
 800244e:	687b      	ldr	r3, [r7, #4]
 8002450:	681b      	ldr	r3, [r3, #0]
 8002452:	4a1d      	ldr	r2, [pc, #116]	; (80024c8 <HAL_ADC_ConfigChannel+0x1e4>)
 8002454:	4293      	cmp	r3, r2
 8002456:	d125      	bne.n	80024a4 <HAL_ADC_ConfigChannel+0x1c0>
    {
      if (READ_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE) == RESET)
 8002458:	687b      	ldr	r3, [r7, #4]
 800245a:	681b      	ldr	r3, [r3, #0]
 800245c:	689b      	ldr	r3, [r3, #8]
 800245e:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8002462:	2b00      	cmp	r3, #0
 8002464:	d126      	bne.n	80024b4 <HAL_ADC_ConfigChannel+0x1d0>
      {
        SET_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE);
 8002466:	687b      	ldr	r3, [r7, #4]
 8002468:	681b      	ldr	r3, [r3, #0]
 800246a:	689a      	ldr	r2, [r3, #8]
 800246c:	687b      	ldr	r3, [r7, #4]
 800246e:	681b      	ldr	r3, [r3, #0]
 8002470:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 8002474:	609a      	str	r2, [r3, #8]
        
        if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8002476:	683b      	ldr	r3, [r7, #0]
 8002478:	681b      	ldr	r3, [r3, #0]
 800247a:	2b10      	cmp	r3, #16
 800247c:	d11a      	bne.n	80024b4 <HAL_ADC_ConfigChannel+0x1d0>
        {
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 800247e:	4b13      	ldr	r3, [pc, #76]	; (80024cc <HAL_ADC_ConfigChannel+0x1e8>)
 8002480:	681b      	ldr	r3, [r3, #0]
 8002482:	4a13      	ldr	r2, [pc, #76]	; (80024d0 <HAL_ADC_ConfigChannel+0x1ec>)
 8002484:	fba2 2303 	umull	r2, r3, r2, r3
 8002488:	0c9a      	lsrs	r2, r3, #18
 800248a:	4613      	mov	r3, r2
 800248c:	009b      	lsls	r3, r3, #2
 800248e:	4413      	add	r3, r2
 8002490:	005b      	lsls	r3, r3, #1
 8002492:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8002494:	e002      	b.n	800249c <HAL_ADC_ConfigChannel+0x1b8>
          {
            wait_loop_index--;
 8002496:	68bb      	ldr	r3, [r7, #8]
 8002498:	3b01      	subs	r3, #1
 800249a:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 800249c:	68bb      	ldr	r3, [r7, #8]
 800249e:	2b00      	cmp	r3, #0
 80024a0:	d1f9      	bne.n	8002496 <HAL_ADC_ConfigChannel+0x1b2>
 80024a2:	e007      	b.n	80024b4 <HAL_ADC_ConfigChannel+0x1d0>
      }
    }
    else
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80024a4:	687b      	ldr	r3, [r7, #4]
 80024a6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80024a8:	f043 0220 	orr.w	r2, r3, #32
 80024ac:	687b      	ldr	r3, [r7, #4]
 80024ae:	629a      	str	r2, [r3, #40]	; 0x28
      
      tmp_hal_status = HAL_ERROR;
 80024b0:	2301      	movs	r3, #1
 80024b2:	73fb      	strb	r3, [r7, #15]
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80024b4:	687b      	ldr	r3, [r7, #4]
 80024b6:	2200      	movs	r2, #0
 80024b8:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  /* Return function status */
  return tmp_hal_status;
 80024bc:	7bfb      	ldrb	r3, [r7, #15]
}
 80024be:	4618      	mov	r0, r3
 80024c0:	3714      	adds	r7, #20
 80024c2:	46bd      	mov	sp, r7
 80024c4:	bc80      	pop	{r7}
 80024c6:	4770      	bx	lr
 80024c8:	40012400 	.word	0x40012400
 80024cc:	20000000 	.word	0x20000000
 80024d0:	431bde83 	.word	0x431bde83

080024d4 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef* hadc)
{
 80024d4:	b580      	push	{r7, lr}
 80024d6:	b084      	sub	sp, #16
 80024d8:	af00      	add	r7, sp, #0
 80024da:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80024dc:	2300      	movs	r3, #0
 80024de:	60fb      	str	r3, [r7, #12]
  __IO uint32_t wait_loop_index = 0U;
 80024e0:	2300      	movs	r3, #0
 80024e2:	60bb      	str	r3, [r7, #8]
  
  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (ADC_IS_ENABLE(hadc) == RESET)
 80024e4:	687b      	ldr	r3, [r7, #4]
 80024e6:	681b      	ldr	r3, [r3, #0]
 80024e8:	689b      	ldr	r3, [r3, #8]
 80024ea:	f003 0301 	and.w	r3, r3, #1
 80024ee:	2b01      	cmp	r3, #1
 80024f0:	d040      	beq.n	8002574 <ADC_Enable+0xa0>
  {
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 80024f2:	687b      	ldr	r3, [r7, #4]
 80024f4:	681b      	ldr	r3, [r3, #0]
 80024f6:	689a      	ldr	r2, [r3, #8]
 80024f8:	687b      	ldr	r3, [r7, #4]
 80024fa:	681b      	ldr	r3, [r3, #0]
 80024fc:	f042 0201 	orr.w	r2, r2, #1
 8002500:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8002502:	4b1f      	ldr	r3, [pc, #124]	; (8002580 <ADC_Enable+0xac>)
 8002504:	681b      	ldr	r3, [r3, #0]
 8002506:	4a1f      	ldr	r2, [pc, #124]	; (8002584 <ADC_Enable+0xb0>)
 8002508:	fba2 2303 	umull	r2, r3, r2, r3
 800250c:	0c9b      	lsrs	r3, r3, #18
 800250e:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 8002510:	e002      	b.n	8002518 <ADC_Enable+0x44>
    {
      wait_loop_index--;
 8002512:	68bb      	ldr	r3, [r7, #8]
 8002514:	3b01      	subs	r3, #1
 8002516:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 8002518:	68bb      	ldr	r3, [r7, #8]
 800251a:	2b00      	cmp	r3, #0
 800251c:	d1f9      	bne.n	8002512 <ADC_Enable+0x3e>
    }
    
    /* Get tick count */
    tickstart = HAL_GetTick();
 800251e:	f7ff fbef 	bl	8001d00 <HAL_GetTick>
 8002522:	60f8      	str	r0, [r7, #12]

    /* Wait for ADC effectively enabled */
    while(ADC_IS_ENABLE(hadc) == RESET)
 8002524:	e01f      	b.n	8002566 <ADC_Enable+0x92>
    {
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8002526:	f7ff fbeb 	bl	8001d00 <HAL_GetTick>
 800252a:	4602      	mov	r2, r0
 800252c:	68fb      	ldr	r3, [r7, #12]
 800252e:	1ad3      	subs	r3, r2, r3
 8002530:	2b02      	cmp	r3, #2
 8002532:	d918      	bls.n	8002566 <ADC_Enable+0x92>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(ADC_IS_ENABLE(hadc) == RESET)
 8002534:	687b      	ldr	r3, [r7, #4]
 8002536:	681b      	ldr	r3, [r3, #0]
 8002538:	689b      	ldr	r3, [r3, #8]
 800253a:	f003 0301 	and.w	r3, r3, #1
 800253e:	2b01      	cmp	r3, #1
 8002540:	d011      	beq.n	8002566 <ADC_Enable+0x92>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002542:	687b      	ldr	r3, [r7, #4]
 8002544:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002546:	f043 0210 	orr.w	r2, r3, #16
 800254a:	687b      	ldr	r3, [r7, #4]
 800254c:	629a      	str	r2, [r3, #40]	; 0x28

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800254e:	687b      	ldr	r3, [r7, #4]
 8002550:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002552:	f043 0201 	orr.w	r2, r3, #1
 8002556:	687b      	ldr	r3, [r7, #4]
 8002558:	62da      	str	r2, [r3, #44]	; 0x2c

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 800255a:	687b      	ldr	r3, [r7, #4]
 800255c:	2200      	movs	r2, #0
 800255e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

          return HAL_ERROR;
 8002562:	2301      	movs	r3, #1
 8002564:	e007      	b.n	8002576 <ADC_Enable+0xa2>
    while(ADC_IS_ENABLE(hadc) == RESET)
 8002566:	687b      	ldr	r3, [r7, #4]
 8002568:	681b      	ldr	r3, [r3, #0]
 800256a:	689b      	ldr	r3, [r3, #8]
 800256c:	f003 0301 	and.w	r3, r3, #1
 8002570:	2b01      	cmp	r3, #1
 8002572:	d1d8      	bne.n	8002526 <ADC_Enable+0x52>
      }
    }
  }
   
  /* Return HAL status */
  return HAL_OK;
 8002574:	2300      	movs	r3, #0
}
 8002576:	4618      	mov	r0, r3
 8002578:	3710      	adds	r7, #16
 800257a:	46bd      	mov	sp, r7
 800257c:	bd80      	pop	{r7, pc}
 800257e:	bf00      	nop
 8002580:	20000000 	.word	0x20000000
 8002584:	431bde83 	.word	0x431bde83

08002588 <ADC_ConversionStop_Disable>:
  *         stopped to disable the ADC.
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop_Disable(ADC_HandleTypeDef* hadc)
{
 8002588:	b580      	push	{r7, lr}
 800258a:	b084      	sub	sp, #16
 800258c:	af00      	add	r7, sp, #0
 800258e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8002590:	2300      	movs	r3, #0
 8002592:	60fb      	str	r3, [r7, #12]
  
  /* Verification if ADC is not already disabled */
  if (ADC_IS_ENABLE(hadc) != RESET)
 8002594:	687b      	ldr	r3, [r7, #4]
 8002596:	681b      	ldr	r3, [r3, #0]
 8002598:	689b      	ldr	r3, [r3, #8]
 800259a:	f003 0301 	and.w	r3, r3, #1
 800259e:	2b01      	cmp	r3, #1
 80025a0:	d12e      	bne.n	8002600 <ADC_ConversionStop_Disable+0x78>
  {
    /* Disable the ADC peripheral */
    __HAL_ADC_DISABLE(hadc);
 80025a2:	687b      	ldr	r3, [r7, #4]
 80025a4:	681b      	ldr	r3, [r3, #0]
 80025a6:	689a      	ldr	r2, [r3, #8]
 80025a8:	687b      	ldr	r3, [r7, #4]
 80025aa:	681b      	ldr	r3, [r3, #0]
 80025ac:	f022 0201 	bic.w	r2, r2, #1
 80025b0:	609a      	str	r2, [r3, #8]
     
    /* Get tick count */
    tickstart = HAL_GetTick();
 80025b2:	f7ff fba5 	bl	8001d00 <HAL_GetTick>
 80025b6:	60f8      	str	r0, [r7, #12]
    
    /* Wait for ADC effectively disabled */
    while(ADC_IS_ENABLE(hadc) != RESET)
 80025b8:	e01b      	b.n	80025f2 <ADC_ConversionStop_Disable+0x6a>
    {
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 80025ba:	f7ff fba1 	bl	8001d00 <HAL_GetTick>
 80025be:	4602      	mov	r2, r0
 80025c0:	68fb      	ldr	r3, [r7, #12]
 80025c2:	1ad3      	subs	r3, r2, r3
 80025c4:	2b02      	cmp	r3, #2
 80025c6:	d914      	bls.n	80025f2 <ADC_ConversionStop_Disable+0x6a>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(ADC_IS_ENABLE(hadc) != RESET)
 80025c8:	687b      	ldr	r3, [r7, #4]
 80025ca:	681b      	ldr	r3, [r3, #0]
 80025cc:	689b      	ldr	r3, [r3, #8]
 80025ce:	f003 0301 	and.w	r3, r3, #1
 80025d2:	2b01      	cmp	r3, #1
 80025d4:	d10d      	bne.n	80025f2 <ADC_ConversionStop_Disable+0x6a>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80025d6:	687b      	ldr	r3, [r7, #4]
 80025d8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80025da:	f043 0210 	orr.w	r2, r3, #16
 80025de:	687b      	ldr	r3, [r7, #4]
 80025e0:	629a      	str	r2, [r3, #40]	; 0x28

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80025e2:	687b      	ldr	r3, [r7, #4]
 80025e4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80025e6:	f043 0201 	orr.w	r2, r3, #1
 80025ea:	687b      	ldr	r3, [r7, #4]
 80025ec:	62da      	str	r2, [r3, #44]	; 0x2c

          return HAL_ERROR;
 80025ee:	2301      	movs	r3, #1
 80025f0:	e007      	b.n	8002602 <ADC_ConversionStop_Disable+0x7a>
    while(ADC_IS_ENABLE(hadc) != RESET)
 80025f2:	687b      	ldr	r3, [r7, #4]
 80025f4:	681b      	ldr	r3, [r3, #0]
 80025f6:	689b      	ldr	r3, [r3, #8]
 80025f8:	f003 0301 	and.w	r3, r3, #1
 80025fc:	2b01      	cmp	r3, #1
 80025fe:	d0dc      	beq.n	80025ba <ADC_ConversionStop_Disable+0x32>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 8002600:	2300      	movs	r3, #0
}
 8002602:	4618      	mov	r0, r3
 8002604:	3710      	adds	r7, #16
 8002606:	46bd      	mov	sp, r7
 8002608:	bd80      	pop	{r7, pc}
	...

0800260c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800260c:	b480      	push	{r7}
 800260e:	b085      	sub	sp, #20
 8002610:	af00      	add	r7, sp, #0
 8002612:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002614:	687b      	ldr	r3, [r7, #4]
 8002616:	f003 0307 	and.w	r3, r3, #7
 800261a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800261c:	4b0c      	ldr	r3, [pc, #48]	; (8002650 <__NVIC_SetPriorityGrouping+0x44>)
 800261e:	68db      	ldr	r3, [r3, #12]
 8002620:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002622:	68ba      	ldr	r2, [r7, #8]
 8002624:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002628:	4013      	ands	r3, r2
 800262a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 800262c:	68fb      	ldr	r3, [r7, #12]
 800262e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002630:	68bb      	ldr	r3, [r7, #8]
 8002632:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002634:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002638:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800263c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800263e:	4a04      	ldr	r2, [pc, #16]	; (8002650 <__NVIC_SetPriorityGrouping+0x44>)
 8002640:	68bb      	ldr	r3, [r7, #8]
 8002642:	60d3      	str	r3, [r2, #12]
}
 8002644:	bf00      	nop
 8002646:	3714      	adds	r7, #20
 8002648:	46bd      	mov	sp, r7
 800264a:	bc80      	pop	{r7}
 800264c:	4770      	bx	lr
 800264e:	bf00      	nop
 8002650:	e000ed00 	.word	0xe000ed00

08002654 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002654:	b480      	push	{r7}
 8002656:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002658:	4b04      	ldr	r3, [pc, #16]	; (800266c <__NVIC_GetPriorityGrouping+0x18>)
 800265a:	68db      	ldr	r3, [r3, #12]
 800265c:	0a1b      	lsrs	r3, r3, #8
 800265e:	f003 0307 	and.w	r3, r3, #7
}
 8002662:	4618      	mov	r0, r3
 8002664:	46bd      	mov	sp, r7
 8002666:	bc80      	pop	{r7}
 8002668:	4770      	bx	lr
 800266a:	bf00      	nop
 800266c:	e000ed00 	.word	0xe000ed00

08002670 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002670:	b480      	push	{r7}
 8002672:	b083      	sub	sp, #12
 8002674:	af00      	add	r7, sp, #0
 8002676:	4603      	mov	r3, r0
 8002678:	6039      	str	r1, [r7, #0]
 800267a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800267c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002680:	2b00      	cmp	r3, #0
 8002682:	db0a      	blt.n	800269a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002684:	683b      	ldr	r3, [r7, #0]
 8002686:	b2da      	uxtb	r2, r3
 8002688:	490c      	ldr	r1, [pc, #48]	; (80026bc <__NVIC_SetPriority+0x4c>)
 800268a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800268e:	0112      	lsls	r2, r2, #4
 8002690:	b2d2      	uxtb	r2, r2
 8002692:	440b      	add	r3, r1
 8002694:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002698:	e00a      	b.n	80026b0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800269a:	683b      	ldr	r3, [r7, #0]
 800269c:	b2da      	uxtb	r2, r3
 800269e:	4908      	ldr	r1, [pc, #32]	; (80026c0 <__NVIC_SetPriority+0x50>)
 80026a0:	79fb      	ldrb	r3, [r7, #7]
 80026a2:	f003 030f 	and.w	r3, r3, #15
 80026a6:	3b04      	subs	r3, #4
 80026a8:	0112      	lsls	r2, r2, #4
 80026aa:	b2d2      	uxtb	r2, r2
 80026ac:	440b      	add	r3, r1
 80026ae:	761a      	strb	r2, [r3, #24]
}
 80026b0:	bf00      	nop
 80026b2:	370c      	adds	r7, #12
 80026b4:	46bd      	mov	sp, r7
 80026b6:	bc80      	pop	{r7}
 80026b8:	4770      	bx	lr
 80026ba:	bf00      	nop
 80026bc:	e000e100 	.word	0xe000e100
 80026c0:	e000ed00 	.word	0xe000ed00

080026c4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80026c4:	b480      	push	{r7}
 80026c6:	b089      	sub	sp, #36	; 0x24
 80026c8:	af00      	add	r7, sp, #0
 80026ca:	60f8      	str	r0, [r7, #12]
 80026cc:	60b9      	str	r1, [r7, #8]
 80026ce:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80026d0:	68fb      	ldr	r3, [r7, #12]
 80026d2:	f003 0307 	and.w	r3, r3, #7
 80026d6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80026d8:	69fb      	ldr	r3, [r7, #28]
 80026da:	f1c3 0307 	rsb	r3, r3, #7
 80026de:	2b04      	cmp	r3, #4
 80026e0:	bf28      	it	cs
 80026e2:	2304      	movcs	r3, #4
 80026e4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80026e6:	69fb      	ldr	r3, [r7, #28]
 80026e8:	3304      	adds	r3, #4
 80026ea:	2b06      	cmp	r3, #6
 80026ec:	d902      	bls.n	80026f4 <NVIC_EncodePriority+0x30>
 80026ee:	69fb      	ldr	r3, [r7, #28]
 80026f0:	3b03      	subs	r3, #3
 80026f2:	e000      	b.n	80026f6 <NVIC_EncodePriority+0x32>
 80026f4:	2300      	movs	r3, #0
 80026f6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80026f8:	f04f 32ff 	mov.w	r2, #4294967295
 80026fc:	69bb      	ldr	r3, [r7, #24]
 80026fe:	fa02 f303 	lsl.w	r3, r2, r3
 8002702:	43da      	mvns	r2, r3
 8002704:	68bb      	ldr	r3, [r7, #8]
 8002706:	401a      	ands	r2, r3
 8002708:	697b      	ldr	r3, [r7, #20]
 800270a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800270c:	f04f 31ff 	mov.w	r1, #4294967295
 8002710:	697b      	ldr	r3, [r7, #20]
 8002712:	fa01 f303 	lsl.w	r3, r1, r3
 8002716:	43d9      	mvns	r1, r3
 8002718:	687b      	ldr	r3, [r7, #4]
 800271a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800271c:	4313      	orrs	r3, r2
         );
}
 800271e:	4618      	mov	r0, r3
 8002720:	3724      	adds	r7, #36	; 0x24
 8002722:	46bd      	mov	sp, r7
 8002724:	bc80      	pop	{r7}
 8002726:	4770      	bx	lr

08002728 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002728:	b580      	push	{r7, lr}
 800272a:	b082      	sub	sp, #8
 800272c:	af00      	add	r7, sp, #0
 800272e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002730:	687b      	ldr	r3, [r7, #4]
 8002732:	3b01      	subs	r3, #1
 8002734:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002738:	d301      	bcc.n	800273e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800273a:	2301      	movs	r3, #1
 800273c:	e00f      	b.n	800275e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800273e:	4a0a      	ldr	r2, [pc, #40]	; (8002768 <SysTick_Config+0x40>)
 8002740:	687b      	ldr	r3, [r7, #4]
 8002742:	3b01      	subs	r3, #1
 8002744:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002746:	210f      	movs	r1, #15
 8002748:	f04f 30ff 	mov.w	r0, #4294967295
 800274c:	f7ff ff90 	bl	8002670 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002750:	4b05      	ldr	r3, [pc, #20]	; (8002768 <SysTick_Config+0x40>)
 8002752:	2200      	movs	r2, #0
 8002754:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002756:	4b04      	ldr	r3, [pc, #16]	; (8002768 <SysTick_Config+0x40>)
 8002758:	2207      	movs	r2, #7
 800275a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800275c:	2300      	movs	r3, #0
}
 800275e:	4618      	mov	r0, r3
 8002760:	3708      	adds	r7, #8
 8002762:	46bd      	mov	sp, r7
 8002764:	bd80      	pop	{r7, pc}
 8002766:	bf00      	nop
 8002768:	e000e010 	.word	0xe000e010

0800276c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800276c:	b580      	push	{r7, lr}
 800276e:	b082      	sub	sp, #8
 8002770:	af00      	add	r7, sp, #0
 8002772:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002774:	6878      	ldr	r0, [r7, #4]
 8002776:	f7ff ff49 	bl	800260c <__NVIC_SetPriorityGrouping>
}
 800277a:	bf00      	nop
 800277c:	3708      	adds	r7, #8
 800277e:	46bd      	mov	sp, r7
 8002780:	bd80      	pop	{r7, pc}

08002782 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002782:	b580      	push	{r7, lr}
 8002784:	b086      	sub	sp, #24
 8002786:	af00      	add	r7, sp, #0
 8002788:	4603      	mov	r3, r0
 800278a:	60b9      	str	r1, [r7, #8]
 800278c:	607a      	str	r2, [r7, #4]
 800278e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002790:	2300      	movs	r3, #0
 8002792:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002794:	f7ff ff5e 	bl	8002654 <__NVIC_GetPriorityGrouping>
 8002798:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800279a:	687a      	ldr	r2, [r7, #4]
 800279c:	68b9      	ldr	r1, [r7, #8]
 800279e:	6978      	ldr	r0, [r7, #20]
 80027a0:	f7ff ff90 	bl	80026c4 <NVIC_EncodePriority>
 80027a4:	4602      	mov	r2, r0
 80027a6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80027aa:	4611      	mov	r1, r2
 80027ac:	4618      	mov	r0, r3
 80027ae:	f7ff ff5f 	bl	8002670 <__NVIC_SetPriority>
}
 80027b2:	bf00      	nop
 80027b4:	3718      	adds	r7, #24
 80027b6:	46bd      	mov	sp, r7
 80027b8:	bd80      	pop	{r7, pc}

080027ba <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80027ba:	b580      	push	{r7, lr}
 80027bc:	b082      	sub	sp, #8
 80027be:	af00      	add	r7, sp, #0
 80027c0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80027c2:	6878      	ldr	r0, [r7, #4]
 80027c4:	f7ff ffb0 	bl	8002728 <SysTick_Config>
 80027c8:	4603      	mov	r3, r0
}
 80027ca:	4618      	mov	r0, r3
 80027cc:	3708      	adds	r7, #8
 80027ce:	46bd      	mov	sp, r7
 80027d0:	bd80      	pop	{r7, pc}
	...

080027d4 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80027d4:	b480      	push	{r7}
 80027d6:	b08b      	sub	sp, #44	; 0x2c
 80027d8:	af00      	add	r7, sp, #0
 80027da:	6078      	str	r0, [r7, #4]
 80027dc:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80027de:	2300      	movs	r3, #0
 80027e0:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 80027e2:	2300      	movs	r3, #0
 80027e4:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80027e6:	e169      	b.n	8002abc <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 80027e8:	2201      	movs	r2, #1
 80027ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80027ec:	fa02 f303 	lsl.w	r3, r2, r3
 80027f0:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80027f2:	683b      	ldr	r3, [r7, #0]
 80027f4:	681b      	ldr	r3, [r3, #0]
 80027f6:	69fa      	ldr	r2, [r7, #28]
 80027f8:	4013      	ands	r3, r2
 80027fa:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 80027fc:	69ba      	ldr	r2, [r7, #24]
 80027fe:	69fb      	ldr	r3, [r7, #28]
 8002800:	429a      	cmp	r2, r3
 8002802:	f040 8158 	bne.w	8002ab6 <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8002806:	683b      	ldr	r3, [r7, #0]
 8002808:	685b      	ldr	r3, [r3, #4]
 800280a:	4a9a      	ldr	r2, [pc, #616]	; (8002a74 <HAL_GPIO_Init+0x2a0>)
 800280c:	4293      	cmp	r3, r2
 800280e:	d05e      	beq.n	80028ce <HAL_GPIO_Init+0xfa>
 8002810:	4a98      	ldr	r2, [pc, #608]	; (8002a74 <HAL_GPIO_Init+0x2a0>)
 8002812:	4293      	cmp	r3, r2
 8002814:	d875      	bhi.n	8002902 <HAL_GPIO_Init+0x12e>
 8002816:	4a98      	ldr	r2, [pc, #608]	; (8002a78 <HAL_GPIO_Init+0x2a4>)
 8002818:	4293      	cmp	r3, r2
 800281a:	d058      	beq.n	80028ce <HAL_GPIO_Init+0xfa>
 800281c:	4a96      	ldr	r2, [pc, #600]	; (8002a78 <HAL_GPIO_Init+0x2a4>)
 800281e:	4293      	cmp	r3, r2
 8002820:	d86f      	bhi.n	8002902 <HAL_GPIO_Init+0x12e>
 8002822:	4a96      	ldr	r2, [pc, #600]	; (8002a7c <HAL_GPIO_Init+0x2a8>)
 8002824:	4293      	cmp	r3, r2
 8002826:	d052      	beq.n	80028ce <HAL_GPIO_Init+0xfa>
 8002828:	4a94      	ldr	r2, [pc, #592]	; (8002a7c <HAL_GPIO_Init+0x2a8>)
 800282a:	4293      	cmp	r3, r2
 800282c:	d869      	bhi.n	8002902 <HAL_GPIO_Init+0x12e>
 800282e:	4a94      	ldr	r2, [pc, #592]	; (8002a80 <HAL_GPIO_Init+0x2ac>)
 8002830:	4293      	cmp	r3, r2
 8002832:	d04c      	beq.n	80028ce <HAL_GPIO_Init+0xfa>
 8002834:	4a92      	ldr	r2, [pc, #584]	; (8002a80 <HAL_GPIO_Init+0x2ac>)
 8002836:	4293      	cmp	r3, r2
 8002838:	d863      	bhi.n	8002902 <HAL_GPIO_Init+0x12e>
 800283a:	4a92      	ldr	r2, [pc, #584]	; (8002a84 <HAL_GPIO_Init+0x2b0>)
 800283c:	4293      	cmp	r3, r2
 800283e:	d046      	beq.n	80028ce <HAL_GPIO_Init+0xfa>
 8002840:	4a90      	ldr	r2, [pc, #576]	; (8002a84 <HAL_GPIO_Init+0x2b0>)
 8002842:	4293      	cmp	r3, r2
 8002844:	d85d      	bhi.n	8002902 <HAL_GPIO_Init+0x12e>
 8002846:	2b12      	cmp	r3, #18
 8002848:	d82a      	bhi.n	80028a0 <HAL_GPIO_Init+0xcc>
 800284a:	2b12      	cmp	r3, #18
 800284c:	d859      	bhi.n	8002902 <HAL_GPIO_Init+0x12e>
 800284e:	a201      	add	r2, pc, #4	; (adr r2, 8002854 <HAL_GPIO_Init+0x80>)
 8002850:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002854:	080028cf 	.word	0x080028cf
 8002858:	080028a9 	.word	0x080028a9
 800285c:	080028bb 	.word	0x080028bb
 8002860:	080028fd 	.word	0x080028fd
 8002864:	08002903 	.word	0x08002903
 8002868:	08002903 	.word	0x08002903
 800286c:	08002903 	.word	0x08002903
 8002870:	08002903 	.word	0x08002903
 8002874:	08002903 	.word	0x08002903
 8002878:	08002903 	.word	0x08002903
 800287c:	08002903 	.word	0x08002903
 8002880:	08002903 	.word	0x08002903
 8002884:	08002903 	.word	0x08002903
 8002888:	08002903 	.word	0x08002903
 800288c:	08002903 	.word	0x08002903
 8002890:	08002903 	.word	0x08002903
 8002894:	08002903 	.word	0x08002903
 8002898:	080028b1 	.word	0x080028b1
 800289c:	080028c5 	.word	0x080028c5
 80028a0:	4a79      	ldr	r2, [pc, #484]	; (8002a88 <HAL_GPIO_Init+0x2b4>)
 80028a2:	4293      	cmp	r3, r2
 80028a4:	d013      	beq.n	80028ce <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 80028a6:	e02c      	b.n	8002902 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 80028a8:	683b      	ldr	r3, [r7, #0]
 80028aa:	68db      	ldr	r3, [r3, #12]
 80028ac:	623b      	str	r3, [r7, #32]
          break;
 80028ae:	e029      	b.n	8002904 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 80028b0:	683b      	ldr	r3, [r7, #0]
 80028b2:	68db      	ldr	r3, [r3, #12]
 80028b4:	3304      	adds	r3, #4
 80028b6:	623b      	str	r3, [r7, #32]
          break;
 80028b8:	e024      	b.n	8002904 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 80028ba:	683b      	ldr	r3, [r7, #0]
 80028bc:	68db      	ldr	r3, [r3, #12]
 80028be:	3308      	adds	r3, #8
 80028c0:	623b      	str	r3, [r7, #32]
          break;
 80028c2:	e01f      	b.n	8002904 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 80028c4:	683b      	ldr	r3, [r7, #0]
 80028c6:	68db      	ldr	r3, [r3, #12]
 80028c8:	330c      	adds	r3, #12
 80028ca:	623b      	str	r3, [r7, #32]
          break;
 80028cc:	e01a      	b.n	8002904 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 80028ce:	683b      	ldr	r3, [r7, #0]
 80028d0:	689b      	ldr	r3, [r3, #8]
 80028d2:	2b00      	cmp	r3, #0
 80028d4:	d102      	bne.n	80028dc <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 80028d6:	2304      	movs	r3, #4
 80028d8:	623b      	str	r3, [r7, #32]
          break;
 80028da:	e013      	b.n	8002904 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 80028dc:	683b      	ldr	r3, [r7, #0]
 80028de:	689b      	ldr	r3, [r3, #8]
 80028e0:	2b01      	cmp	r3, #1
 80028e2:	d105      	bne.n	80028f0 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80028e4:	2308      	movs	r3, #8
 80028e6:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 80028e8:	687b      	ldr	r3, [r7, #4]
 80028ea:	69fa      	ldr	r2, [r7, #28]
 80028ec:	611a      	str	r2, [r3, #16]
          break;
 80028ee:	e009      	b.n	8002904 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80028f0:	2308      	movs	r3, #8
 80028f2:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 80028f4:	687b      	ldr	r3, [r7, #4]
 80028f6:	69fa      	ldr	r2, [r7, #28]
 80028f8:	615a      	str	r2, [r3, #20]
          break;
 80028fa:	e003      	b.n	8002904 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 80028fc:	2300      	movs	r3, #0
 80028fe:	623b      	str	r3, [r7, #32]
          break;
 8002900:	e000      	b.n	8002904 <HAL_GPIO_Init+0x130>
          break;
 8002902:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8002904:	69bb      	ldr	r3, [r7, #24]
 8002906:	2bff      	cmp	r3, #255	; 0xff
 8002908:	d801      	bhi.n	800290e <HAL_GPIO_Init+0x13a>
 800290a:	687b      	ldr	r3, [r7, #4]
 800290c:	e001      	b.n	8002912 <HAL_GPIO_Init+0x13e>
 800290e:	687b      	ldr	r3, [r7, #4]
 8002910:	3304      	adds	r3, #4
 8002912:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8002914:	69bb      	ldr	r3, [r7, #24]
 8002916:	2bff      	cmp	r3, #255	; 0xff
 8002918:	d802      	bhi.n	8002920 <HAL_GPIO_Init+0x14c>
 800291a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800291c:	009b      	lsls	r3, r3, #2
 800291e:	e002      	b.n	8002926 <HAL_GPIO_Init+0x152>
 8002920:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002922:	3b08      	subs	r3, #8
 8002924:	009b      	lsls	r3, r3, #2
 8002926:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8002928:	697b      	ldr	r3, [r7, #20]
 800292a:	681a      	ldr	r2, [r3, #0]
 800292c:	210f      	movs	r1, #15
 800292e:	693b      	ldr	r3, [r7, #16]
 8002930:	fa01 f303 	lsl.w	r3, r1, r3
 8002934:	43db      	mvns	r3, r3
 8002936:	401a      	ands	r2, r3
 8002938:	6a39      	ldr	r1, [r7, #32]
 800293a:	693b      	ldr	r3, [r7, #16]
 800293c:	fa01 f303 	lsl.w	r3, r1, r3
 8002940:	431a      	orrs	r2, r3
 8002942:	697b      	ldr	r3, [r7, #20]
 8002944:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8002946:	683b      	ldr	r3, [r7, #0]
 8002948:	685b      	ldr	r3, [r3, #4]
 800294a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800294e:	2b00      	cmp	r3, #0
 8002950:	f000 80b1 	beq.w	8002ab6 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8002954:	4b4d      	ldr	r3, [pc, #308]	; (8002a8c <HAL_GPIO_Init+0x2b8>)
 8002956:	699b      	ldr	r3, [r3, #24]
 8002958:	4a4c      	ldr	r2, [pc, #304]	; (8002a8c <HAL_GPIO_Init+0x2b8>)
 800295a:	f043 0301 	orr.w	r3, r3, #1
 800295e:	6193      	str	r3, [r2, #24]
 8002960:	4b4a      	ldr	r3, [pc, #296]	; (8002a8c <HAL_GPIO_Init+0x2b8>)
 8002962:	699b      	ldr	r3, [r3, #24]
 8002964:	f003 0301 	and.w	r3, r3, #1
 8002968:	60bb      	str	r3, [r7, #8]
 800296a:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 800296c:	4a48      	ldr	r2, [pc, #288]	; (8002a90 <HAL_GPIO_Init+0x2bc>)
 800296e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002970:	089b      	lsrs	r3, r3, #2
 8002972:	3302      	adds	r3, #2
 8002974:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002978:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 800297a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800297c:	f003 0303 	and.w	r3, r3, #3
 8002980:	009b      	lsls	r3, r3, #2
 8002982:	220f      	movs	r2, #15
 8002984:	fa02 f303 	lsl.w	r3, r2, r3
 8002988:	43db      	mvns	r3, r3
 800298a:	68fa      	ldr	r2, [r7, #12]
 800298c:	4013      	ands	r3, r2
 800298e:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8002990:	687b      	ldr	r3, [r7, #4]
 8002992:	4a40      	ldr	r2, [pc, #256]	; (8002a94 <HAL_GPIO_Init+0x2c0>)
 8002994:	4293      	cmp	r3, r2
 8002996:	d013      	beq.n	80029c0 <HAL_GPIO_Init+0x1ec>
 8002998:	687b      	ldr	r3, [r7, #4]
 800299a:	4a3f      	ldr	r2, [pc, #252]	; (8002a98 <HAL_GPIO_Init+0x2c4>)
 800299c:	4293      	cmp	r3, r2
 800299e:	d00d      	beq.n	80029bc <HAL_GPIO_Init+0x1e8>
 80029a0:	687b      	ldr	r3, [r7, #4]
 80029a2:	4a3e      	ldr	r2, [pc, #248]	; (8002a9c <HAL_GPIO_Init+0x2c8>)
 80029a4:	4293      	cmp	r3, r2
 80029a6:	d007      	beq.n	80029b8 <HAL_GPIO_Init+0x1e4>
 80029a8:	687b      	ldr	r3, [r7, #4]
 80029aa:	4a3d      	ldr	r2, [pc, #244]	; (8002aa0 <HAL_GPIO_Init+0x2cc>)
 80029ac:	4293      	cmp	r3, r2
 80029ae:	d101      	bne.n	80029b4 <HAL_GPIO_Init+0x1e0>
 80029b0:	2303      	movs	r3, #3
 80029b2:	e006      	b.n	80029c2 <HAL_GPIO_Init+0x1ee>
 80029b4:	2304      	movs	r3, #4
 80029b6:	e004      	b.n	80029c2 <HAL_GPIO_Init+0x1ee>
 80029b8:	2302      	movs	r3, #2
 80029ba:	e002      	b.n	80029c2 <HAL_GPIO_Init+0x1ee>
 80029bc:	2301      	movs	r3, #1
 80029be:	e000      	b.n	80029c2 <HAL_GPIO_Init+0x1ee>
 80029c0:	2300      	movs	r3, #0
 80029c2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80029c4:	f002 0203 	and.w	r2, r2, #3
 80029c8:	0092      	lsls	r2, r2, #2
 80029ca:	4093      	lsls	r3, r2
 80029cc:	68fa      	ldr	r2, [r7, #12]
 80029ce:	4313      	orrs	r3, r2
 80029d0:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 80029d2:	492f      	ldr	r1, [pc, #188]	; (8002a90 <HAL_GPIO_Init+0x2bc>)
 80029d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80029d6:	089b      	lsrs	r3, r3, #2
 80029d8:	3302      	adds	r3, #2
 80029da:	68fa      	ldr	r2, [r7, #12]
 80029dc:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80029e0:	683b      	ldr	r3, [r7, #0]
 80029e2:	685b      	ldr	r3, [r3, #4]
 80029e4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80029e8:	2b00      	cmp	r3, #0
 80029ea:	d006      	beq.n	80029fa <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 80029ec:	4b2d      	ldr	r3, [pc, #180]	; (8002aa4 <HAL_GPIO_Init+0x2d0>)
 80029ee:	681a      	ldr	r2, [r3, #0]
 80029f0:	492c      	ldr	r1, [pc, #176]	; (8002aa4 <HAL_GPIO_Init+0x2d0>)
 80029f2:	69bb      	ldr	r3, [r7, #24]
 80029f4:	4313      	orrs	r3, r2
 80029f6:	600b      	str	r3, [r1, #0]
 80029f8:	e006      	b.n	8002a08 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 80029fa:	4b2a      	ldr	r3, [pc, #168]	; (8002aa4 <HAL_GPIO_Init+0x2d0>)
 80029fc:	681a      	ldr	r2, [r3, #0]
 80029fe:	69bb      	ldr	r3, [r7, #24]
 8002a00:	43db      	mvns	r3, r3
 8002a02:	4928      	ldr	r1, [pc, #160]	; (8002aa4 <HAL_GPIO_Init+0x2d0>)
 8002a04:	4013      	ands	r3, r2
 8002a06:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8002a08:	683b      	ldr	r3, [r7, #0]
 8002a0a:	685b      	ldr	r3, [r3, #4]
 8002a0c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002a10:	2b00      	cmp	r3, #0
 8002a12:	d006      	beq.n	8002a22 <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8002a14:	4b23      	ldr	r3, [pc, #140]	; (8002aa4 <HAL_GPIO_Init+0x2d0>)
 8002a16:	685a      	ldr	r2, [r3, #4]
 8002a18:	4922      	ldr	r1, [pc, #136]	; (8002aa4 <HAL_GPIO_Init+0x2d0>)
 8002a1a:	69bb      	ldr	r3, [r7, #24]
 8002a1c:	4313      	orrs	r3, r2
 8002a1e:	604b      	str	r3, [r1, #4]
 8002a20:	e006      	b.n	8002a30 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8002a22:	4b20      	ldr	r3, [pc, #128]	; (8002aa4 <HAL_GPIO_Init+0x2d0>)
 8002a24:	685a      	ldr	r2, [r3, #4]
 8002a26:	69bb      	ldr	r3, [r7, #24]
 8002a28:	43db      	mvns	r3, r3
 8002a2a:	491e      	ldr	r1, [pc, #120]	; (8002aa4 <HAL_GPIO_Init+0x2d0>)
 8002a2c:	4013      	ands	r3, r2
 8002a2e:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8002a30:	683b      	ldr	r3, [r7, #0]
 8002a32:	685b      	ldr	r3, [r3, #4]
 8002a34:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002a38:	2b00      	cmp	r3, #0
 8002a3a:	d006      	beq.n	8002a4a <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8002a3c:	4b19      	ldr	r3, [pc, #100]	; (8002aa4 <HAL_GPIO_Init+0x2d0>)
 8002a3e:	689a      	ldr	r2, [r3, #8]
 8002a40:	4918      	ldr	r1, [pc, #96]	; (8002aa4 <HAL_GPIO_Init+0x2d0>)
 8002a42:	69bb      	ldr	r3, [r7, #24]
 8002a44:	4313      	orrs	r3, r2
 8002a46:	608b      	str	r3, [r1, #8]
 8002a48:	e006      	b.n	8002a58 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8002a4a:	4b16      	ldr	r3, [pc, #88]	; (8002aa4 <HAL_GPIO_Init+0x2d0>)
 8002a4c:	689a      	ldr	r2, [r3, #8]
 8002a4e:	69bb      	ldr	r3, [r7, #24]
 8002a50:	43db      	mvns	r3, r3
 8002a52:	4914      	ldr	r1, [pc, #80]	; (8002aa4 <HAL_GPIO_Init+0x2d0>)
 8002a54:	4013      	ands	r3, r2
 8002a56:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8002a58:	683b      	ldr	r3, [r7, #0]
 8002a5a:	685b      	ldr	r3, [r3, #4]
 8002a5c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002a60:	2b00      	cmp	r3, #0
 8002a62:	d021      	beq.n	8002aa8 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8002a64:	4b0f      	ldr	r3, [pc, #60]	; (8002aa4 <HAL_GPIO_Init+0x2d0>)
 8002a66:	68da      	ldr	r2, [r3, #12]
 8002a68:	490e      	ldr	r1, [pc, #56]	; (8002aa4 <HAL_GPIO_Init+0x2d0>)
 8002a6a:	69bb      	ldr	r3, [r7, #24]
 8002a6c:	4313      	orrs	r3, r2
 8002a6e:	60cb      	str	r3, [r1, #12]
 8002a70:	e021      	b.n	8002ab6 <HAL_GPIO_Init+0x2e2>
 8002a72:	bf00      	nop
 8002a74:	10320000 	.word	0x10320000
 8002a78:	10310000 	.word	0x10310000
 8002a7c:	10220000 	.word	0x10220000
 8002a80:	10210000 	.word	0x10210000
 8002a84:	10120000 	.word	0x10120000
 8002a88:	10110000 	.word	0x10110000
 8002a8c:	40021000 	.word	0x40021000
 8002a90:	40010000 	.word	0x40010000
 8002a94:	40010800 	.word	0x40010800
 8002a98:	40010c00 	.word	0x40010c00
 8002a9c:	40011000 	.word	0x40011000
 8002aa0:	40011400 	.word	0x40011400
 8002aa4:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8002aa8:	4b0b      	ldr	r3, [pc, #44]	; (8002ad8 <HAL_GPIO_Init+0x304>)
 8002aaa:	68da      	ldr	r2, [r3, #12]
 8002aac:	69bb      	ldr	r3, [r7, #24]
 8002aae:	43db      	mvns	r3, r3
 8002ab0:	4909      	ldr	r1, [pc, #36]	; (8002ad8 <HAL_GPIO_Init+0x304>)
 8002ab2:	4013      	ands	r3, r2
 8002ab4:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 8002ab6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ab8:	3301      	adds	r3, #1
 8002aba:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002abc:	683b      	ldr	r3, [r7, #0]
 8002abe:	681a      	ldr	r2, [r3, #0]
 8002ac0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ac2:	fa22 f303 	lsr.w	r3, r2, r3
 8002ac6:	2b00      	cmp	r3, #0
 8002ac8:	f47f ae8e 	bne.w	80027e8 <HAL_GPIO_Init+0x14>
  }
}
 8002acc:	bf00      	nop
 8002ace:	bf00      	nop
 8002ad0:	372c      	adds	r7, #44	; 0x2c
 8002ad2:	46bd      	mov	sp, r7
 8002ad4:	bc80      	pop	{r7}
 8002ad6:	4770      	bx	lr
 8002ad8:	40010400 	.word	0x40010400

08002adc <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8002adc:	b580      	push	{r7, lr}
 8002ade:	b084      	sub	sp, #16
 8002ae0:	af00      	add	r7, sp, #0
 8002ae2:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8002ae4:	687b      	ldr	r3, [r7, #4]
 8002ae6:	2b00      	cmp	r3, #0
 8002ae8:	d101      	bne.n	8002aee <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8002aea:	2301      	movs	r3, #1
 8002aec:	e12b      	b.n	8002d46 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8002aee:	687b      	ldr	r3, [r7, #4]
 8002af0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002af4:	b2db      	uxtb	r3, r3
 8002af6:	2b00      	cmp	r3, #0
 8002af8:	d106      	bne.n	8002b08 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8002afa:	687b      	ldr	r3, [r7, #4]
 8002afc:	2200      	movs	r2, #0
 8002afe:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8002b02:	6878      	ldr	r0, [r7, #4]
 8002b04:	f7fe ff06 	bl	8001914 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8002b08:	687b      	ldr	r3, [r7, #4]
 8002b0a:	2224      	movs	r2, #36	; 0x24
 8002b0c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8002b10:	687b      	ldr	r3, [r7, #4]
 8002b12:	681b      	ldr	r3, [r3, #0]
 8002b14:	681a      	ldr	r2, [r3, #0]
 8002b16:	687b      	ldr	r3, [r7, #4]
 8002b18:	681b      	ldr	r3, [r3, #0]
 8002b1a:	f022 0201 	bic.w	r2, r2, #1
 8002b1e:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8002b20:	687b      	ldr	r3, [r7, #4]
 8002b22:	681b      	ldr	r3, [r3, #0]
 8002b24:	681a      	ldr	r2, [r3, #0]
 8002b26:	687b      	ldr	r3, [r7, #4]
 8002b28:	681b      	ldr	r3, [r3, #0]
 8002b2a:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8002b2e:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8002b30:	687b      	ldr	r3, [r7, #4]
 8002b32:	681b      	ldr	r3, [r3, #0]
 8002b34:	681a      	ldr	r2, [r3, #0]
 8002b36:	687b      	ldr	r3, [r7, #4]
 8002b38:	681b      	ldr	r3, [r3, #0]
 8002b3a:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8002b3e:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8002b40:	f001 fb6e 	bl	8004220 <HAL_RCC_GetPCLK1Freq>
 8002b44:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8002b46:	687b      	ldr	r3, [r7, #4]
 8002b48:	685b      	ldr	r3, [r3, #4]
 8002b4a:	4a81      	ldr	r2, [pc, #516]	; (8002d50 <HAL_I2C_Init+0x274>)
 8002b4c:	4293      	cmp	r3, r2
 8002b4e:	d807      	bhi.n	8002b60 <HAL_I2C_Init+0x84>
 8002b50:	68fb      	ldr	r3, [r7, #12]
 8002b52:	4a80      	ldr	r2, [pc, #512]	; (8002d54 <HAL_I2C_Init+0x278>)
 8002b54:	4293      	cmp	r3, r2
 8002b56:	bf94      	ite	ls
 8002b58:	2301      	movls	r3, #1
 8002b5a:	2300      	movhi	r3, #0
 8002b5c:	b2db      	uxtb	r3, r3
 8002b5e:	e006      	b.n	8002b6e <HAL_I2C_Init+0x92>
 8002b60:	68fb      	ldr	r3, [r7, #12]
 8002b62:	4a7d      	ldr	r2, [pc, #500]	; (8002d58 <HAL_I2C_Init+0x27c>)
 8002b64:	4293      	cmp	r3, r2
 8002b66:	bf94      	ite	ls
 8002b68:	2301      	movls	r3, #1
 8002b6a:	2300      	movhi	r3, #0
 8002b6c:	b2db      	uxtb	r3, r3
 8002b6e:	2b00      	cmp	r3, #0
 8002b70:	d001      	beq.n	8002b76 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8002b72:	2301      	movs	r3, #1
 8002b74:	e0e7      	b.n	8002d46 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8002b76:	68fb      	ldr	r3, [r7, #12]
 8002b78:	4a78      	ldr	r2, [pc, #480]	; (8002d5c <HAL_I2C_Init+0x280>)
 8002b7a:	fba2 2303 	umull	r2, r3, r2, r3
 8002b7e:	0c9b      	lsrs	r3, r3, #18
 8002b80:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8002b82:	687b      	ldr	r3, [r7, #4]
 8002b84:	681b      	ldr	r3, [r3, #0]
 8002b86:	685b      	ldr	r3, [r3, #4]
 8002b88:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8002b8c:	687b      	ldr	r3, [r7, #4]
 8002b8e:	681b      	ldr	r3, [r3, #0]
 8002b90:	68ba      	ldr	r2, [r7, #8]
 8002b92:	430a      	orrs	r2, r1
 8002b94:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8002b96:	687b      	ldr	r3, [r7, #4]
 8002b98:	681b      	ldr	r3, [r3, #0]
 8002b9a:	6a1b      	ldr	r3, [r3, #32]
 8002b9c:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8002ba0:	687b      	ldr	r3, [r7, #4]
 8002ba2:	685b      	ldr	r3, [r3, #4]
 8002ba4:	4a6a      	ldr	r2, [pc, #424]	; (8002d50 <HAL_I2C_Init+0x274>)
 8002ba6:	4293      	cmp	r3, r2
 8002ba8:	d802      	bhi.n	8002bb0 <HAL_I2C_Init+0xd4>
 8002baa:	68bb      	ldr	r3, [r7, #8]
 8002bac:	3301      	adds	r3, #1
 8002bae:	e009      	b.n	8002bc4 <HAL_I2C_Init+0xe8>
 8002bb0:	68bb      	ldr	r3, [r7, #8]
 8002bb2:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8002bb6:	fb02 f303 	mul.w	r3, r2, r3
 8002bba:	4a69      	ldr	r2, [pc, #420]	; (8002d60 <HAL_I2C_Init+0x284>)
 8002bbc:	fba2 2303 	umull	r2, r3, r2, r3
 8002bc0:	099b      	lsrs	r3, r3, #6
 8002bc2:	3301      	adds	r3, #1
 8002bc4:	687a      	ldr	r2, [r7, #4]
 8002bc6:	6812      	ldr	r2, [r2, #0]
 8002bc8:	430b      	orrs	r3, r1
 8002bca:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8002bcc:	687b      	ldr	r3, [r7, #4]
 8002bce:	681b      	ldr	r3, [r3, #0]
 8002bd0:	69db      	ldr	r3, [r3, #28]
 8002bd2:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8002bd6:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8002bda:	687b      	ldr	r3, [r7, #4]
 8002bdc:	685b      	ldr	r3, [r3, #4]
 8002bde:	495c      	ldr	r1, [pc, #368]	; (8002d50 <HAL_I2C_Init+0x274>)
 8002be0:	428b      	cmp	r3, r1
 8002be2:	d819      	bhi.n	8002c18 <HAL_I2C_Init+0x13c>
 8002be4:	68fb      	ldr	r3, [r7, #12]
 8002be6:	1e59      	subs	r1, r3, #1
 8002be8:	687b      	ldr	r3, [r7, #4]
 8002bea:	685b      	ldr	r3, [r3, #4]
 8002bec:	005b      	lsls	r3, r3, #1
 8002bee:	fbb1 f3f3 	udiv	r3, r1, r3
 8002bf2:	1c59      	adds	r1, r3, #1
 8002bf4:	f640 73fc 	movw	r3, #4092	; 0xffc
 8002bf8:	400b      	ands	r3, r1
 8002bfa:	2b00      	cmp	r3, #0
 8002bfc:	d00a      	beq.n	8002c14 <HAL_I2C_Init+0x138>
 8002bfe:	68fb      	ldr	r3, [r7, #12]
 8002c00:	1e59      	subs	r1, r3, #1
 8002c02:	687b      	ldr	r3, [r7, #4]
 8002c04:	685b      	ldr	r3, [r3, #4]
 8002c06:	005b      	lsls	r3, r3, #1
 8002c08:	fbb1 f3f3 	udiv	r3, r1, r3
 8002c0c:	3301      	adds	r3, #1
 8002c0e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002c12:	e051      	b.n	8002cb8 <HAL_I2C_Init+0x1dc>
 8002c14:	2304      	movs	r3, #4
 8002c16:	e04f      	b.n	8002cb8 <HAL_I2C_Init+0x1dc>
 8002c18:	687b      	ldr	r3, [r7, #4]
 8002c1a:	689b      	ldr	r3, [r3, #8]
 8002c1c:	2b00      	cmp	r3, #0
 8002c1e:	d111      	bne.n	8002c44 <HAL_I2C_Init+0x168>
 8002c20:	68fb      	ldr	r3, [r7, #12]
 8002c22:	1e58      	subs	r0, r3, #1
 8002c24:	687b      	ldr	r3, [r7, #4]
 8002c26:	6859      	ldr	r1, [r3, #4]
 8002c28:	460b      	mov	r3, r1
 8002c2a:	005b      	lsls	r3, r3, #1
 8002c2c:	440b      	add	r3, r1
 8002c2e:	fbb0 f3f3 	udiv	r3, r0, r3
 8002c32:	3301      	adds	r3, #1
 8002c34:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002c38:	2b00      	cmp	r3, #0
 8002c3a:	bf0c      	ite	eq
 8002c3c:	2301      	moveq	r3, #1
 8002c3e:	2300      	movne	r3, #0
 8002c40:	b2db      	uxtb	r3, r3
 8002c42:	e012      	b.n	8002c6a <HAL_I2C_Init+0x18e>
 8002c44:	68fb      	ldr	r3, [r7, #12]
 8002c46:	1e58      	subs	r0, r3, #1
 8002c48:	687b      	ldr	r3, [r7, #4]
 8002c4a:	6859      	ldr	r1, [r3, #4]
 8002c4c:	460b      	mov	r3, r1
 8002c4e:	009b      	lsls	r3, r3, #2
 8002c50:	440b      	add	r3, r1
 8002c52:	0099      	lsls	r1, r3, #2
 8002c54:	440b      	add	r3, r1
 8002c56:	fbb0 f3f3 	udiv	r3, r0, r3
 8002c5a:	3301      	adds	r3, #1
 8002c5c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002c60:	2b00      	cmp	r3, #0
 8002c62:	bf0c      	ite	eq
 8002c64:	2301      	moveq	r3, #1
 8002c66:	2300      	movne	r3, #0
 8002c68:	b2db      	uxtb	r3, r3
 8002c6a:	2b00      	cmp	r3, #0
 8002c6c:	d001      	beq.n	8002c72 <HAL_I2C_Init+0x196>
 8002c6e:	2301      	movs	r3, #1
 8002c70:	e022      	b.n	8002cb8 <HAL_I2C_Init+0x1dc>
 8002c72:	687b      	ldr	r3, [r7, #4]
 8002c74:	689b      	ldr	r3, [r3, #8]
 8002c76:	2b00      	cmp	r3, #0
 8002c78:	d10e      	bne.n	8002c98 <HAL_I2C_Init+0x1bc>
 8002c7a:	68fb      	ldr	r3, [r7, #12]
 8002c7c:	1e58      	subs	r0, r3, #1
 8002c7e:	687b      	ldr	r3, [r7, #4]
 8002c80:	6859      	ldr	r1, [r3, #4]
 8002c82:	460b      	mov	r3, r1
 8002c84:	005b      	lsls	r3, r3, #1
 8002c86:	440b      	add	r3, r1
 8002c88:	fbb0 f3f3 	udiv	r3, r0, r3
 8002c8c:	3301      	adds	r3, #1
 8002c8e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002c92:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002c96:	e00f      	b.n	8002cb8 <HAL_I2C_Init+0x1dc>
 8002c98:	68fb      	ldr	r3, [r7, #12]
 8002c9a:	1e58      	subs	r0, r3, #1
 8002c9c:	687b      	ldr	r3, [r7, #4]
 8002c9e:	6859      	ldr	r1, [r3, #4]
 8002ca0:	460b      	mov	r3, r1
 8002ca2:	009b      	lsls	r3, r3, #2
 8002ca4:	440b      	add	r3, r1
 8002ca6:	0099      	lsls	r1, r3, #2
 8002ca8:	440b      	add	r3, r1
 8002caa:	fbb0 f3f3 	udiv	r3, r0, r3
 8002cae:	3301      	adds	r3, #1
 8002cb0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002cb4:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8002cb8:	6879      	ldr	r1, [r7, #4]
 8002cba:	6809      	ldr	r1, [r1, #0]
 8002cbc:	4313      	orrs	r3, r2
 8002cbe:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8002cc0:	687b      	ldr	r3, [r7, #4]
 8002cc2:	681b      	ldr	r3, [r3, #0]
 8002cc4:	681b      	ldr	r3, [r3, #0]
 8002cc6:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8002cca:	687b      	ldr	r3, [r7, #4]
 8002ccc:	69da      	ldr	r2, [r3, #28]
 8002cce:	687b      	ldr	r3, [r7, #4]
 8002cd0:	6a1b      	ldr	r3, [r3, #32]
 8002cd2:	431a      	orrs	r2, r3
 8002cd4:	687b      	ldr	r3, [r7, #4]
 8002cd6:	681b      	ldr	r3, [r3, #0]
 8002cd8:	430a      	orrs	r2, r1
 8002cda:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8002cdc:	687b      	ldr	r3, [r7, #4]
 8002cde:	681b      	ldr	r3, [r3, #0]
 8002ce0:	689b      	ldr	r3, [r3, #8]
 8002ce2:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8002ce6:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8002cea:	687a      	ldr	r2, [r7, #4]
 8002cec:	6911      	ldr	r1, [r2, #16]
 8002cee:	687a      	ldr	r2, [r7, #4]
 8002cf0:	68d2      	ldr	r2, [r2, #12]
 8002cf2:	4311      	orrs	r1, r2
 8002cf4:	687a      	ldr	r2, [r7, #4]
 8002cf6:	6812      	ldr	r2, [r2, #0]
 8002cf8:	430b      	orrs	r3, r1
 8002cfa:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8002cfc:	687b      	ldr	r3, [r7, #4]
 8002cfe:	681b      	ldr	r3, [r3, #0]
 8002d00:	68db      	ldr	r3, [r3, #12]
 8002d02:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8002d06:	687b      	ldr	r3, [r7, #4]
 8002d08:	695a      	ldr	r2, [r3, #20]
 8002d0a:	687b      	ldr	r3, [r7, #4]
 8002d0c:	699b      	ldr	r3, [r3, #24]
 8002d0e:	431a      	orrs	r2, r3
 8002d10:	687b      	ldr	r3, [r7, #4]
 8002d12:	681b      	ldr	r3, [r3, #0]
 8002d14:	430a      	orrs	r2, r1
 8002d16:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8002d18:	687b      	ldr	r3, [r7, #4]
 8002d1a:	681b      	ldr	r3, [r3, #0]
 8002d1c:	681a      	ldr	r2, [r3, #0]
 8002d1e:	687b      	ldr	r3, [r7, #4]
 8002d20:	681b      	ldr	r3, [r3, #0]
 8002d22:	f042 0201 	orr.w	r2, r2, #1
 8002d26:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002d28:	687b      	ldr	r3, [r7, #4]
 8002d2a:	2200      	movs	r2, #0
 8002d2c:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8002d2e:	687b      	ldr	r3, [r7, #4]
 8002d30:	2220      	movs	r2, #32
 8002d32:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8002d36:	687b      	ldr	r3, [r7, #4]
 8002d38:	2200      	movs	r2, #0
 8002d3a:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002d3c:	687b      	ldr	r3, [r7, #4]
 8002d3e:	2200      	movs	r2, #0
 8002d40:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8002d44:	2300      	movs	r3, #0
}
 8002d46:	4618      	mov	r0, r3
 8002d48:	3710      	adds	r7, #16
 8002d4a:	46bd      	mov	sp, r7
 8002d4c:	bd80      	pop	{r7, pc}
 8002d4e:	bf00      	nop
 8002d50:	000186a0 	.word	0x000186a0
 8002d54:	001e847f 	.word	0x001e847f
 8002d58:	003d08ff 	.word	0x003d08ff
 8002d5c:	431bde83 	.word	0x431bde83
 8002d60:	10624dd3 	.word	0x10624dd3

08002d64 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002d64:	b580      	push	{r7, lr}
 8002d66:	b088      	sub	sp, #32
 8002d68:	af02      	add	r7, sp, #8
 8002d6a:	60f8      	str	r0, [r7, #12]
 8002d6c:	607a      	str	r2, [r7, #4]
 8002d6e:	461a      	mov	r2, r3
 8002d70:	460b      	mov	r3, r1
 8002d72:	817b      	strh	r3, [r7, #10]
 8002d74:	4613      	mov	r3, r2
 8002d76:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8002d78:	f7fe ffc2 	bl	8001d00 <HAL_GetTick>
 8002d7c:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002d7e:	68fb      	ldr	r3, [r7, #12]
 8002d80:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002d84:	b2db      	uxtb	r3, r3
 8002d86:	2b20      	cmp	r3, #32
 8002d88:	f040 80e0 	bne.w	8002f4c <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8002d8c:	697b      	ldr	r3, [r7, #20]
 8002d8e:	9300      	str	r3, [sp, #0]
 8002d90:	2319      	movs	r3, #25
 8002d92:	2201      	movs	r2, #1
 8002d94:	4970      	ldr	r1, [pc, #448]	; (8002f58 <HAL_I2C_Master_Transmit+0x1f4>)
 8002d96:	68f8      	ldr	r0, [r7, #12]
 8002d98:	f000 fc92 	bl	80036c0 <I2C_WaitOnFlagUntilTimeout>
 8002d9c:	4603      	mov	r3, r0
 8002d9e:	2b00      	cmp	r3, #0
 8002da0:	d001      	beq.n	8002da6 <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 8002da2:	2302      	movs	r3, #2
 8002da4:	e0d3      	b.n	8002f4e <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002da6:	68fb      	ldr	r3, [r7, #12]
 8002da8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002dac:	2b01      	cmp	r3, #1
 8002dae:	d101      	bne.n	8002db4 <HAL_I2C_Master_Transmit+0x50>
 8002db0:	2302      	movs	r3, #2
 8002db2:	e0cc      	b.n	8002f4e <HAL_I2C_Master_Transmit+0x1ea>
 8002db4:	68fb      	ldr	r3, [r7, #12]
 8002db6:	2201      	movs	r2, #1
 8002db8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8002dbc:	68fb      	ldr	r3, [r7, #12]
 8002dbe:	681b      	ldr	r3, [r3, #0]
 8002dc0:	681b      	ldr	r3, [r3, #0]
 8002dc2:	f003 0301 	and.w	r3, r3, #1
 8002dc6:	2b01      	cmp	r3, #1
 8002dc8:	d007      	beq.n	8002dda <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8002dca:	68fb      	ldr	r3, [r7, #12]
 8002dcc:	681b      	ldr	r3, [r3, #0]
 8002dce:	681a      	ldr	r2, [r3, #0]
 8002dd0:	68fb      	ldr	r3, [r7, #12]
 8002dd2:	681b      	ldr	r3, [r3, #0]
 8002dd4:	f042 0201 	orr.w	r2, r2, #1
 8002dd8:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002dda:	68fb      	ldr	r3, [r7, #12]
 8002ddc:	681b      	ldr	r3, [r3, #0]
 8002dde:	681a      	ldr	r2, [r3, #0]
 8002de0:	68fb      	ldr	r3, [r7, #12]
 8002de2:	681b      	ldr	r3, [r3, #0]
 8002de4:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002de8:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 8002dea:	68fb      	ldr	r3, [r7, #12]
 8002dec:	2221      	movs	r2, #33	; 0x21
 8002dee:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8002df2:	68fb      	ldr	r3, [r7, #12]
 8002df4:	2210      	movs	r2, #16
 8002df6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8002dfa:	68fb      	ldr	r3, [r7, #12]
 8002dfc:	2200      	movs	r2, #0
 8002dfe:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8002e00:	68fb      	ldr	r3, [r7, #12]
 8002e02:	687a      	ldr	r2, [r7, #4]
 8002e04:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8002e06:	68fb      	ldr	r3, [r7, #12]
 8002e08:	893a      	ldrh	r2, [r7, #8]
 8002e0a:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8002e0c:	68fb      	ldr	r3, [r7, #12]
 8002e0e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002e10:	b29a      	uxth	r2, r3
 8002e12:	68fb      	ldr	r3, [r7, #12]
 8002e14:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8002e16:	68fb      	ldr	r3, [r7, #12]
 8002e18:	4a50      	ldr	r2, [pc, #320]	; (8002f5c <HAL_I2C_Master_Transmit+0x1f8>)
 8002e1a:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8002e1c:	8979      	ldrh	r1, [r7, #10]
 8002e1e:	697b      	ldr	r3, [r7, #20]
 8002e20:	6a3a      	ldr	r2, [r7, #32]
 8002e22:	68f8      	ldr	r0, [r7, #12]
 8002e24:	f000 fafc 	bl	8003420 <I2C_MasterRequestWrite>
 8002e28:	4603      	mov	r3, r0
 8002e2a:	2b00      	cmp	r3, #0
 8002e2c:	d001      	beq.n	8002e32 <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 8002e2e:	2301      	movs	r3, #1
 8002e30:	e08d      	b.n	8002f4e <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002e32:	2300      	movs	r3, #0
 8002e34:	613b      	str	r3, [r7, #16]
 8002e36:	68fb      	ldr	r3, [r7, #12]
 8002e38:	681b      	ldr	r3, [r3, #0]
 8002e3a:	695b      	ldr	r3, [r3, #20]
 8002e3c:	613b      	str	r3, [r7, #16]
 8002e3e:	68fb      	ldr	r3, [r7, #12]
 8002e40:	681b      	ldr	r3, [r3, #0]
 8002e42:	699b      	ldr	r3, [r3, #24]
 8002e44:	613b      	str	r3, [r7, #16]
 8002e46:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 8002e48:	e066      	b.n	8002f18 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002e4a:	697a      	ldr	r2, [r7, #20]
 8002e4c:	6a39      	ldr	r1, [r7, #32]
 8002e4e:	68f8      	ldr	r0, [r7, #12]
 8002e50:	f000 fd0c 	bl	800386c <I2C_WaitOnTXEFlagUntilTimeout>
 8002e54:	4603      	mov	r3, r0
 8002e56:	2b00      	cmp	r3, #0
 8002e58:	d00d      	beq.n	8002e76 <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002e5a:	68fb      	ldr	r3, [r7, #12]
 8002e5c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e5e:	2b04      	cmp	r3, #4
 8002e60:	d107      	bne.n	8002e72 <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002e62:	68fb      	ldr	r3, [r7, #12]
 8002e64:	681b      	ldr	r3, [r3, #0]
 8002e66:	681a      	ldr	r2, [r3, #0]
 8002e68:	68fb      	ldr	r3, [r7, #12]
 8002e6a:	681b      	ldr	r3, [r3, #0]
 8002e6c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002e70:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8002e72:	2301      	movs	r3, #1
 8002e74:	e06b      	b.n	8002f4e <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002e76:	68fb      	ldr	r3, [r7, #12]
 8002e78:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e7a:	781a      	ldrb	r2, [r3, #0]
 8002e7c:	68fb      	ldr	r3, [r7, #12]
 8002e7e:	681b      	ldr	r3, [r3, #0]
 8002e80:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002e82:	68fb      	ldr	r3, [r7, #12]
 8002e84:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e86:	1c5a      	adds	r2, r3, #1
 8002e88:	68fb      	ldr	r3, [r7, #12]
 8002e8a:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8002e8c:	68fb      	ldr	r3, [r7, #12]
 8002e8e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002e90:	b29b      	uxth	r3, r3
 8002e92:	3b01      	subs	r3, #1
 8002e94:	b29a      	uxth	r2, r3
 8002e96:	68fb      	ldr	r3, [r7, #12]
 8002e98:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8002e9a:	68fb      	ldr	r3, [r7, #12]
 8002e9c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002e9e:	3b01      	subs	r3, #1
 8002ea0:	b29a      	uxth	r2, r3
 8002ea2:	68fb      	ldr	r3, [r7, #12]
 8002ea4:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8002ea6:	68fb      	ldr	r3, [r7, #12]
 8002ea8:	681b      	ldr	r3, [r3, #0]
 8002eaa:	695b      	ldr	r3, [r3, #20]
 8002eac:	f003 0304 	and.w	r3, r3, #4
 8002eb0:	2b04      	cmp	r3, #4
 8002eb2:	d11b      	bne.n	8002eec <HAL_I2C_Master_Transmit+0x188>
 8002eb4:	68fb      	ldr	r3, [r7, #12]
 8002eb6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002eb8:	2b00      	cmp	r3, #0
 8002eba:	d017      	beq.n	8002eec <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002ebc:	68fb      	ldr	r3, [r7, #12]
 8002ebe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ec0:	781a      	ldrb	r2, [r3, #0]
 8002ec2:	68fb      	ldr	r3, [r7, #12]
 8002ec4:	681b      	ldr	r3, [r3, #0]
 8002ec6:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8002ec8:	68fb      	ldr	r3, [r7, #12]
 8002eca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ecc:	1c5a      	adds	r2, r3, #1
 8002ece:	68fb      	ldr	r3, [r7, #12]
 8002ed0:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferCount--;
 8002ed2:	68fb      	ldr	r3, [r7, #12]
 8002ed4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002ed6:	b29b      	uxth	r3, r3
 8002ed8:	3b01      	subs	r3, #1
 8002eda:	b29a      	uxth	r2, r3
 8002edc:	68fb      	ldr	r3, [r7, #12]
 8002ede:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 8002ee0:	68fb      	ldr	r3, [r7, #12]
 8002ee2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002ee4:	3b01      	subs	r3, #1
 8002ee6:	b29a      	uxth	r2, r3
 8002ee8:	68fb      	ldr	r3, [r7, #12]
 8002eea:	851a      	strh	r2, [r3, #40]	; 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002eec:	697a      	ldr	r2, [r7, #20]
 8002eee:	6a39      	ldr	r1, [r7, #32]
 8002ef0:	68f8      	ldr	r0, [r7, #12]
 8002ef2:	f000 fcfc 	bl	80038ee <I2C_WaitOnBTFFlagUntilTimeout>
 8002ef6:	4603      	mov	r3, r0
 8002ef8:	2b00      	cmp	r3, #0
 8002efa:	d00d      	beq.n	8002f18 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002efc:	68fb      	ldr	r3, [r7, #12]
 8002efe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f00:	2b04      	cmp	r3, #4
 8002f02:	d107      	bne.n	8002f14 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002f04:	68fb      	ldr	r3, [r7, #12]
 8002f06:	681b      	ldr	r3, [r3, #0]
 8002f08:	681a      	ldr	r2, [r3, #0]
 8002f0a:	68fb      	ldr	r3, [r7, #12]
 8002f0c:	681b      	ldr	r3, [r3, #0]
 8002f0e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002f12:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8002f14:	2301      	movs	r3, #1
 8002f16:	e01a      	b.n	8002f4e <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 8002f18:	68fb      	ldr	r3, [r7, #12]
 8002f1a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002f1c:	2b00      	cmp	r3, #0
 8002f1e:	d194      	bne.n	8002e4a <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002f20:	68fb      	ldr	r3, [r7, #12]
 8002f22:	681b      	ldr	r3, [r3, #0]
 8002f24:	681a      	ldr	r2, [r3, #0]
 8002f26:	68fb      	ldr	r3, [r7, #12]
 8002f28:	681b      	ldr	r3, [r3, #0]
 8002f2a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002f2e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002f30:	68fb      	ldr	r3, [r7, #12]
 8002f32:	2220      	movs	r2, #32
 8002f34:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8002f38:	68fb      	ldr	r3, [r7, #12]
 8002f3a:	2200      	movs	r2, #0
 8002f3c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002f40:	68fb      	ldr	r3, [r7, #12]
 8002f42:	2200      	movs	r2, #0
 8002f44:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8002f48:	2300      	movs	r3, #0
 8002f4a:	e000      	b.n	8002f4e <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 8002f4c:	2302      	movs	r3, #2
  }
}
 8002f4e:	4618      	mov	r0, r3
 8002f50:	3718      	adds	r7, #24
 8002f52:	46bd      	mov	sp, r7
 8002f54:	bd80      	pop	{r7, pc}
 8002f56:	bf00      	nop
 8002f58:	00100002 	.word	0x00100002
 8002f5c:	ffff0000 	.word	0xffff0000

08002f60 <HAL_I2C_Master_Receive>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002f60:	b580      	push	{r7, lr}
 8002f62:	b08c      	sub	sp, #48	; 0x30
 8002f64:	af02      	add	r7, sp, #8
 8002f66:	60f8      	str	r0, [r7, #12]
 8002f68:	607a      	str	r2, [r7, #4]
 8002f6a:	461a      	mov	r2, r3
 8002f6c:	460b      	mov	r3, r1
 8002f6e:	817b      	strh	r3, [r7, #10]
 8002f70:	4613      	mov	r3, r2
 8002f72:	813b      	strh	r3, [r7, #8]
  __IO uint32_t count = 0U;
 8002f74:	2300      	movs	r3, #0
 8002f76:	623b      	str	r3, [r7, #32]

  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8002f78:	f7fe fec2 	bl	8001d00 <HAL_GetTick>
 8002f7c:	6278      	str	r0, [r7, #36]	; 0x24

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002f7e:	68fb      	ldr	r3, [r7, #12]
 8002f80:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002f84:	b2db      	uxtb	r3, r3
 8002f86:	2b20      	cmp	r3, #32
 8002f88:	f040 823f 	bne.w	800340a <HAL_I2C_Master_Receive+0x4aa>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8002f8c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f8e:	9300      	str	r3, [sp, #0]
 8002f90:	2319      	movs	r3, #25
 8002f92:	2201      	movs	r2, #1
 8002f94:	497f      	ldr	r1, [pc, #508]	; (8003194 <HAL_I2C_Master_Receive+0x234>)
 8002f96:	68f8      	ldr	r0, [r7, #12]
 8002f98:	f000 fb92 	bl	80036c0 <I2C_WaitOnFlagUntilTimeout>
 8002f9c:	4603      	mov	r3, r0
 8002f9e:	2b00      	cmp	r3, #0
 8002fa0:	d001      	beq.n	8002fa6 <HAL_I2C_Master_Receive+0x46>
    {
      return HAL_BUSY;
 8002fa2:	2302      	movs	r3, #2
 8002fa4:	e232      	b.n	800340c <HAL_I2C_Master_Receive+0x4ac>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002fa6:	68fb      	ldr	r3, [r7, #12]
 8002fa8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002fac:	2b01      	cmp	r3, #1
 8002fae:	d101      	bne.n	8002fb4 <HAL_I2C_Master_Receive+0x54>
 8002fb0:	2302      	movs	r3, #2
 8002fb2:	e22b      	b.n	800340c <HAL_I2C_Master_Receive+0x4ac>
 8002fb4:	68fb      	ldr	r3, [r7, #12]
 8002fb6:	2201      	movs	r2, #1
 8002fb8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8002fbc:	68fb      	ldr	r3, [r7, #12]
 8002fbe:	681b      	ldr	r3, [r3, #0]
 8002fc0:	681b      	ldr	r3, [r3, #0]
 8002fc2:	f003 0301 	and.w	r3, r3, #1
 8002fc6:	2b01      	cmp	r3, #1
 8002fc8:	d007      	beq.n	8002fda <HAL_I2C_Master_Receive+0x7a>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8002fca:	68fb      	ldr	r3, [r7, #12]
 8002fcc:	681b      	ldr	r3, [r3, #0]
 8002fce:	681a      	ldr	r2, [r3, #0]
 8002fd0:	68fb      	ldr	r3, [r7, #12]
 8002fd2:	681b      	ldr	r3, [r3, #0]
 8002fd4:	f042 0201 	orr.w	r2, r2, #1
 8002fd8:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002fda:	68fb      	ldr	r3, [r7, #12]
 8002fdc:	681b      	ldr	r3, [r3, #0]
 8002fde:	681a      	ldr	r2, [r3, #0]
 8002fe0:	68fb      	ldr	r3, [r7, #12]
 8002fe2:	681b      	ldr	r3, [r3, #0]
 8002fe4:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002fe8:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_RX;
 8002fea:	68fb      	ldr	r3, [r7, #12]
 8002fec:	2222      	movs	r2, #34	; 0x22
 8002fee:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8002ff2:	68fb      	ldr	r3, [r7, #12]
 8002ff4:	2210      	movs	r2, #16
 8002ff6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8002ffa:	68fb      	ldr	r3, [r7, #12]
 8002ffc:	2200      	movs	r2, #0
 8002ffe:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8003000:	68fb      	ldr	r3, [r7, #12]
 8003002:	687a      	ldr	r2, [r7, #4]
 8003004:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8003006:	68fb      	ldr	r3, [r7, #12]
 8003008:	893a      	ldrh	r2, [r7, #8]
 800300a:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800300c:	68fb      	ldr	r3, [r7, #12]
 800300e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003010:	b29a      	uxth	r2, r3
 8003012:	68fb      	ldr	r3, [r7, #12]
 8003014:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8003016:	68fb      	ldr	r3, [r7, #12]
 8003018:	4a5f      	ldr	r2, [pc, #380]	; (8003198 <HAL_I2C_Master_Receive+0x238>)
 800301a:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestRead(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 800301c:	8979      	ldrh	r1, [r7, #10]
 800301e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003020:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003022:	68f8      	ldr	r0, [r7, #12]
 8003024:	f000 fa7e 	bl	8003524 <I2C_MasterRequestRead>
 8003028:	4603      	mov	r3, r0
 800302a:	2b00      	cmp	r3, #0
 800302c:	d001      	beq.n	8003032 <HAL_I2C_Master_Receive+0xd2>
    {
      return HAL_ERROR;
 800302e:	2301      	movs	r3, #1
 8003030:	e1ec      	b.n	800340c <HAL_I2C_Master_Receive+0x4ac>
    }

    if (hi2c->XferSize == 0U)
 8003032:	68fb      	ldr	r3, [r7, #12]
 8003034:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003036:	2b00      	cmp	r3, #0
 8003038:	d113      	bne.n	8003062 <HAL_I2C_Master_Receive+0x102>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800303a:	2300      	movs	r3, #0
 800303c:	61fb      	str	r3, [r7, #28]
 800303e:	68fb      	ldr	r3, [r7, #12]
 8003040:	681b      	ldr	r3, [r3, #0]
 8003042:	695b      	ldr	r3, [r3, #20]
 8003044:	61fb      	str	r3, [r7, #28]
 8003046:	68fb      	ldr	r3, [r7, #12]
 8003048:	681b      	ldr	r3, [r3, #0]
 800304a:	699b      	ldr	r3, [r3, #24]
 800304c:	61fb      	str	r3, [r7, #28]
 800304e:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003050:	68fb      	ldr	r3, [r7, #12]
 8003052:	681b      	ldr	r3, [r3, #0]
 8003054:	681a      	ldr	r2, [r3, #0]
 8003056:	68fb      	ldr	r3, [r7, #12]
 8003058:	681b      	ldr	r3, [r3, #0]
 800305a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800305e:	601a      	str	r2, [r3, #0]
 8003060:	e1c0      	b.n	80033e4 <HAL_I2C_Master_Receive+0x484>
    }
    else if (hi2c->XferSize == 1U)
 8003062:	68fb      	ldr	r3, [r7, #12]
 8003064:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003066:	2b01      	cmp	r3, #1
 8003068:	d11e      	bne.n	80030a8 <HAL_I2C_Master_Receive+0x148>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800306a:	68fb      	ldr	r3, [r7, #12]
 800306c:	681b      	ldr	r3, [r3, #0]
 800306e:	681a      	ldr	r2, [r3, #0]
 8003070:	68fb      	ldr	r3, [r7, #12]
 8003072:	681b      	ldr	r3, [r3, #0]
 8003074:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003078:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 800307a:	b672      	cpsid	i
}
 800307c:	bf00      	nop
      /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
      software sequence must complete before the current byte end of transfer */
      __disable_irq();

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800307e:	2300      	movs	r3, #0
 8003080:	61bb      	str	r3, [r7, #24]
 8003082:	68fb      	ldr	r3, [r7, #12]
 8003084:	681b      	ldr	r3, [r3, #0]
 8003086:	695b      	ldr	r3, [r3, #20]
 8003088:	61bb      	str	r3, [r7, #24]
 800308a:	68fb      	ldr	r3, [r7, #12]
 800308c:	681b      	ldr	r3, [r3, #0]
 800308e:	699b      	ldr	r3, [r3, #24]
 8003090:	61bb      	str	r3, [r7, #24]
 8003092:	69bb      	ldr	r3, [r7, #24]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003094:	68fb      	ldr	r3, [r7, #12]
 8003096:	681b      	ldr	r3, [r3, #0]
 8003098:	681a      	ldr	r2, [r3, #0]
 800309a:	68fb      	ldr	r3, [r7, #12]
 800309c:	681b      	ldr	r3, [r3, #0]
 800309e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80030a2:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 80030a4:	b662      	cpsie	i
}
 80030a6:	e035      	b.n	8003114 <HAL_I2C_Master_Receive+0x1b4>

      /* Re-enable IRQs */
      __enable_irq();
    }
    else if (hi2c->XferSize == 2U)
 80030a8:	68fb      	ldr	r3, [r7, #12]
 80030aa:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80030ac:	2b02      	cmp	r3, #2
 80030ae:	d11e      	bne.n	80030ee <HAL_I2C_Master_Receive+0x18e>
    {
      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80030b0:	68fb      	ldr	r3, [r7, #12]
 80030b2:	681b      	ldr	r3, [r3, #0]
 80030b4:	681a      	ldr	r2, [r3, #0]
 80030b6:	68fb      	ldr	r3, [r7, #12]
 80030b8:	681b      	ldr	r3, [r3, #0]
 80030ba:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80030be:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 80030c0:	b672      	cpsid	i
}
 80030c2:	bf00      	nop
      /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
      software sequence must complete before the current byte end of transfer */
      __disable_irq();

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80030c4:	2300      	movs	r3, #0
 80030c6:	617b      	str	r3, [r7, #20]
 80030c8:	68fb      	ldr	r3, [r7, #12]
 80030ca:	681b      	ldr	r3, [r3, #0]
 80030cc:	695b      	ldr	r3, [r3, #20]
 80030ce:	617b      	str	r3, [r7, #20]
 80030d0:	68fb      	ldr	r3, [r7, #12]
 80030d2:	681b      	ldr	r3, [r3, #0]
 80030d4:	699b      	ldr	r3, [r3, #24]
 80030d6:	617b      	str	r3, [r7, #20]
 80030d8:	697b      	ldr	r3, [r7, #20]

      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80030da:	68fb      	ldr	r3, [r7, #12]
 80030dc:	681b      	ldr	r3, [r3, #0]
 80030de:	681a      	ldr	r2, [r3, #0]
 80030e0:	68fb      	ldr	r3, [r7, #12]
 80030e2:	681b      	ldr	r3, [r3, #0]
 80030e4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80030e8:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 80030ea:	b662      	cpsie	i
}
 80030ec:	e012      	b.n	8003114 <HAL_I2C_Master_Receive+0x1b4>
      __enable_irq();
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80030ee:	68fb      	ldr	r3, [r7, #12]
 80030f0:	681b      	ldr	r3, [r3, #0]
 80030f2:	681a      	ldr	r2, [r3, #0]
 80030f4:	68fb      	ldr	r3, [r7, #12]
 80030f6:	681b      	ldr	r3, [r3, #0]
 80030f8:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80030fc:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80030fe:	2300      	movs	r3, #0
 8003100:	613b      	str	r3, [r7, #16]
 8003102:	68fb      	ldr	r3, [r7, #12]
 8003104:	681b      	ldr	r3, [r3, #0]
 8003106:	695b      	ldr	r3, [r3, #20]
 8003108:	613b      	str	r3, [r7, #16]
 800310a:	68fb      	ldr	r3, [r7, #12]
 800310c:	681b      	ldr	r3, [r3, #0]
 800310e:	699b      	ldr	r3, [r3, #24]
 8003110:	613b      	str	r3, [r7, #16]
 8003112:	693b      	ldr	r3, [r7, #16]
    }

    while (hi2c->XferSize > 0U)
 8003114:	e166      	b.n	80033e4 <HAL_I2C_Master_Receive+0x484>
    {
      if (hi2c->XferSize <= 3U)
 8003116:	68fb      	ldr	r3, [r7, #12]
 8003118:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800311a:	2b03      	cmp	r3, #3
 800311c:	f200 811f 	bhi.w	800335e <HAL_I2C_Master_Receive+0x3fe>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8003120:	68fb      	ldr	r3, [r7, #12]
 8003122:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003124:	2b01      	cmp	r3, #1
 8003126:	d123      	bne.n	8003170 <HAL_I2C_Master_Receive+0x210>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003128:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800312a:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800312c:	68f8      	ldr	r0, [r7, #12]
 800312e:	f000 fc1f 	bl	8003970 <I2C_WaitOnRXNEFlagUntilTimeout>
 8003132:	4603      	mov	r3, r0
 8003134:	2b00      	cmp	r3, #0
 8003136:	d001      	beq.n	800313c <HAL_I2C_Master_Receive+0x1dc>
          {
            return HAL_ERROR;
 8003138:	2301      	movs	r3, #1
 800313a:	e167      	b.n	800340c <HAL_I2C_Master_Receive+0x4ac>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800313c:	68fb      	ldr	r3, [r7, #12]
 800313e:	681b      	ldr	r3, [r3, #0]
 8003140:	691a      	ldr	r2, [r3, #16]
 8003142:	68fb      	ldr	r3, [r7, #12]
 8003144:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003146:	b2d2      	uxtb	r2, r2
 8003148:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800314a:	68fb      	ldr	r3, [r7, #12]
 800314c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800314e:	1c5a      	adds	r2, r3, #1
 8003150:	68fb      	ldr	r3, [r7, #12]
 8003152:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003154:	68fb      	ldr	r3, [r7, #12]
 8003156:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003158:	3b01      	subs	r3, #1
 800315a:	b29a      	uxth	r2, r3
 800315c:	68fb      	ldr	r3, [r7, #12]
 800315e:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003160:	68fb      	ldr	r3, [r7, #12]
 8003162:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003164:	b29b      	uxth	r3, r3
 8003166:	3b01      	subs	r3, #1
 8003168:	b29a      	uxth	r2, r3
 800316a:	68fb      	ldr	r3, [r7, #12]
 800316c:	855a      	strh	r2, [r3, #42]	; 0x2a
 800316e:	e139      	b.n	80033e4 <HAL_I2C_Master_Receive+0x484>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8003170:	68fb      	ldr	r3, [r7, #12]
 8003172:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003174:	2b02      	cmp	r3, #2
 8003176:	d152      	bne.n	800321e <HAL_I2C_Master_Receive+0x2be>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8003178:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800317a:	9300      	str	r3, [sp, #0]
 800317c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800317e:	2200      	movs	r2, #0
 8003180:	4906      	ldr	r1, [pc, #24]	; (800319c <HAL_I2C_Master_Receive+0x23c>)
 8003182:	68f8      	ldr	r0, [r7, #12]
 8003184:	f000 fa9c 	bl	80036c0 <I2C_WaitOnFlagUntilTimeout>
 8003188:	4603      	mov	r3, r0
 800318a:	2b00      	cmp	r3, #0
 800318c:	d008      	beq.n	80031a0 <HAL_I2C_Master_Receive+0x240>
          {
            return HAL_ERROR;
 800318e:	2301      	movs	r3, #1
 8003190:	e13c      	b.n	800340c <HAL_I2C_Master_Receive+0x4ac>
 8003192:	bf00      	nop
 8003194:	00100002 	.word	0x00100002
 8003198:	ffff0000 	.word	0xffff0000
 800319c:	00010004 	.word	0x00010004
  __ASM volatile ("cpsid i" : : : "memory");
 80031a0:	b672      	cpsid	i
}
 80031a2:	bf00      	nop
          /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
             software sequence must complete before the current byte end of transfer */
          __disable_irq();

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80031a4:	68fb      	ldr	r3, [r7, #12]
 80031a6:	681b      	ldr	r3, [r3, #0]
 80031a8:	681a      	ldr	r2, [r3, #0]
 80031aa:	68fb      	ldr	r3, [r7, #12]
 80031ac:	681b      	ldr	r3, [r3, #0]
 80031ae:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80031b2:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80031b4:	68fb      	ldr	r3, [r7, #12]
 80031b6:	681b      	ldr	r3, [r3, #0]
 80031b8:	691a      	ldr	r2, [r3, #16]
 80031ba:	68fb      	ldr	r3, [r7, #12]
 80031bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80031be:	b2d2      	uxtb	r2, r2
 80031c0:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80031c2:	68fb      	ldr	r3, [r7, #12]
 80031c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80031c6:	1c5a      	adds	r2, r3, #1
 80031c8:	68fb      	ldr	r3, [r7, #12]
 80031ca:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80031cc:	68fb      	ldr	r3, [r7, #12]
 80031ce:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80031d0:	3b01      	subs	r3, #1
 80031d2:	b29a      	uxth	r2, r3
 80031d4:	68fb      	ldr	r3, [r7, #12]
 80031d6:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80031d8:	68fb      	ldr	r3, [r7, #12]
 80031da:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80031dc:	b29b      	uxth	r3, r3
 80031de:	3b01      	subs	r3, #1
 80031e0:	b29a      	uxth	r2, r3
 80031e2:	68fb      	ldr	r3, [r7, #12]
 80031e4:	855a      	strh	r2, [r3, #42]	; 0x2a
  __ASM volatile ("cpsie i" : : : "memory");
 80031e6:	b662      	cpsie	i
}
 80031e8:	bf00      	nop

          /* Re-enable IRQs */
          __enable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80031ea:	68fb      	ldr	r3, [r7, #12]
 80031ec:	681b      	ldr	r3, [r3, #0]
 80031ee:	691a      	ldr	r2, [r3, #16]
 80031f0:	68fb      	ldr	r3, [r7, #12]
 80031f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80031f4:	b2d2      	uxtb	r2, r2
 80031f6:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80031f8:	68fb      	ldr	r3, [r7, #12]
 80031fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80031fc:	1c5a      	adds	r2, r3, #1
 80031fe:	68fb      	ldr	r3, [r7, #12]
 8003200:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003202:	68fb      	ldr	r3, [r7, #12]
 8003204:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003206:	3b01      	subs	r3, #1
 8003208:	b29a      	uxth	r2, r3
 800320a:	68fb      	ldr	r3, [r7, #12]
 800320c:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800320e:	68fb      	ldr	r3, [r7, #12]
 8003210:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003212:	b29b      	uxth	r3, r3
 8003214:	3b01      	subs	r3, #1
 8003216:	b29a      	uxth	r2, r3
 8003218:	68fb      	ldr	r3, [r7, #12]
 800321a:	855a      	strh	r2, [r3, #42]	; 0x2a
 800321c:	e0e2      	b.n	80033e4 <HAL_I2C_Master_Receive+0x484>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800321e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003220:	9300      	str	r3, [sp, #0]
 8003222:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003224:	2200      	movs	r2, #0
 8003226:	497b      	ldr	r1, [pc, #492]	; (8003414 <HAL_I2C_Master_Receive+0x4b4>)
 8003228:	68f8      	ldr	r0, [r7, #12]
 800322a:	f000 fa49 	bl	80036c0 <I2C_WaitOnFlagUntilTimeout>
 800322e:	4603      	mov	r3, r0
 8003230:	2b00      	cmp	r3, #0
 8003232:	d001      	beq.n	8003238 <HAL_I2C_Master_Receive+0x2d8>
          {
            return HAL_ERROR;
 8003234:	2301      	movs	r3, #1
 8003236:	e0e9      	b.n	800340c <HAL_I2C_Master_Receive+0x4ac>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003238:	68fb      	ldr	r3, [r7, #12]
 800323a:	681b      	ldr	r3, [r3, #0]
 800323c:	681a      	ldr	r2, [r3, #0]
 800323e:	68fb      	ldr	r3, [r7, #12]
 8003240:	681b      	ldr	r3, [r3, #0]
 8003242:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003246:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 8003248:	b672      	cpsid	i
}
 800324a:	bf00      	nop
          /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
             software sequence must complete before the current byte end of transfer */
          __disable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800324c:	68fb      	ldr	r3, [r7, #12]
 800324e:	681b      	ldr	r3, [r3, #0]
 8003250:	691a      	ldr	r2, [r3, #16]
 8003252:	68fb      	ldr	r3, [r7, #12]
 8003254:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003256:	b2d2      	uxtb	r2, r2
 8003258:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800325a:	68fb      	ldr	r3, [r7, #12]
 800325c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800325e:	1c5a      	adds	r2, r3, #1
 8003260:	68fb      	ldr	r3, [r7, #12]
 8003262:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003264:	68fb      	ldr	r3, [r7, #12]
 8003266:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003268:	3b01      	subs	r3, #1
 800326a:	b29a      	uxth	r2, r3
 800326c:	68fb      	ldr	r3, [r7, #12]
 800326e:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003270:	68fb      	ldr	r3, [r7, #12]
 8003272:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003274:	b29b      	uxth	r3, r3
 8003276:	3b01      	subs	r3, #1
 8003278:	b29a      	uxth	r2, r3
 800327a:	68fb      	ldr	r3, [r7, #12]
 800327c:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 800327e:	4b66      	ldr	r3, [pc, #408]	; (8003418 <HAL_I2C_Master_Receive+0x4b8>)
 8003280:	681b      	ldr	r3, [r3, #0]
 8003282:	08db      	lsrs	r3, r3, #3
 8003284:	4a65      	ldr	r2, [pc, #404]	; (800341c <HAL_I2C_Master_Receive+0x4bc>)
 8003286:	fba2 2303 	umull	r2, r3, r2, r3
 800328a:	0a1a      	lsrs	r2, r3, #8
 800328c:	4613      	mov	r3, r2
 800328e:	009b      	lsls	r3, r3, #2
 8003290:	4413      	add	r3, r2
 8003292:	00da      	lsls	r2, r3, #3
 8003294:	1ad3      	subs	r3, r2, r3
 8003296:	623b      	str	r3, [r7, #32]
          do
          {
            count--;
 8003298:	6a3b      	ldr	r3, [r7, #32]
 800329a:	3b01      	subs	r3, #1
 800329c:	623b      	str	r3, [r7, #32]
            if (count == 0U)
 800329e:	6a3b      	ldr	r3, [r7, #32]
 80032a0:	2b00      	cmp	r3, #0
 80032a2:	d118      	bne.n	80032d6 <HAL_I2C_Master_Receive+0x376>
            {
              hi2c->PreviousState       = I2C_STATE_NONE;
 80032a4:	68fb      	ldr	r3, [r7, #12]
 80032a6:	2200      	movs	r2, #0
 80032a8:	631a      	str	r2, [r3, #48]	; 0x30
              hi2c->State               = HAL_I2C_STATE_READY;
 80032aa:	68fb      	ldr	r3, [r7, #12]
 80032ac:	2220      	movs	r2, #32
 80032ae:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
              hi2c->Mode                = HAL_I2C_MODE_NONE;
 80032b2:	68fb      	ldr	r3, [r7, #12]
 80032b4:	2200      	movs	r2, #0
 80032b6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
              hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80032ba:	68fb      	ldr	r3, [r7, #12]
 80032bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80032be:	f043 0220 	orr.w	r2, r3, #32
 80032c2:	68fb      	ldr	r3, [r7, #12]
 80032c4:	641a      	str	r2, [r3, #64]	; 0x40
  __ASM volatile ("cpsie i" : : : "memory");
 80032c6:	b662      	cpsie	i
}
 80032c8:	bf00      	nop

              /* Re-enable IRQs */
              __enable_irq();

              /* Process Unlocked */
              __HAL_UNLOCK(hi2c);
 80032ca:	68fb      	ldr	r3, [r7, #12]
 80032cc:	2200      	movs	r2, #0
 80032ce:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

              return HAL_ERROR;
 80032d2:	2301      	movs	r3, #1
 80032d4:	e09a      	b.n	800340c <HAL_I2C_Master_Receive+0x4ac>
            }
          }
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET);
 80032d6:	68fb      	ldr	r3, [r7, #12]
 80032d8:	681b      	ldr	r3, [r3, #0]
 80032da:	695b      	ldr	r3, [r3, #20]
 80032dc:	f003 0304 	and.w	r3, r3, #4
 80032e0:	2b04      	cmp	r3, #4
 80032e2:	d1d9      	bne.n	8003298 <HAL_I2C_Master_Receive+0x338>

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80032e4:	68fb      	ldr	r3, [r7, #12]
 80032e6:	681b      	ldr	r3, [r3, #0]
 80032e8:	681a      	ldr	r2, [r3, #0]
 80032ea:	68fb      	ldr	r3, [r7, #12]
 80032ec:	681b      	ldr	r3, [r3, #0]
 80032ee:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80032f2:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80032f4:	68fb      	ldr	r3, [r7, #12]
 80032f6:	681b      	ldr	r3, [r3, #0]
 80032f8:	691a      	ldr	r2, [r3, #16]
 80032fa:	68fb      	ldr	r3, [r7, #12]
 80032fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80032fe:	b2d2      	uxtb	r2, r2
 8003300:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003302:	68fb      	ldr	r3, [r7, #12]
 8003304:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003306:	1c5a      	adds	r2, r3, #1
 8003308:	68fb      	ldr	r3, [r7, #12]
 800330a:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800330c:	68fb      	ldr	r3, [r7, #12]
 800330e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003310:	3b01      	subs	r3, #1
 8003312:	b29a      	uxth	r2, r3
 8003314:	68fb      	ldr	r3, [r7, #12]
 8003316:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003318:	68fb      	ldr	r3, [r7, #12]
 800331a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800331c:	b29b      	uxth	r3, r3
 800331e:	3b01      	subs	r3, #1
 8003320:	b29a      	uxth	r2, r3
 8003322:	68fb      	ldr	r3, [r7, #12]
 8003324:	855a      	strh	r2, [r3, #42]	; 0x2a
  __ASM volatile ("cpsie i" : : : "memory");
 8003326:	b662      	cpsie	i
}
 8003328:	bf00      	nop

          /* Re-enable IRQs */
          __enable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800332a:	68fb      	ldr	r3, [r7, #12]
 800332c:	681b      	ldr	r3, [r3, #0]
 800332e:	691a      	ldr	r2, [r3, #16]
 8003330:	68fb      	ldr	r3, [r7, #12]
 8003332:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003334:	b2d2      	uxtb	r2, r2
 8003336:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003338:	68fb      	ldr	r3, [r7, #12]
 800333a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800333c:	1c5a      	adds	r2, r3, #1
 800333e:	68fb      	ldr	r3, [r7, #12]
 8003340:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003342:	68fb      	ldr	r3, [r7, #12]
 8003344:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003346:	3b01      	subs	r3, #1
 8003348:	b29a      	uxth	r2, r3
 800334a:	68fb      	ldr	r3, [r7, #12]
 800334c:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800334e:	68fb      	ldr	r3, [r7, #12]
 8003350:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003352:	b29b      	uxth	r3, r3
 8003354:	3b01      	subs	r3, #1
 8003356:	b29a      	uxth	r2, r3
 8003358:	68fb      	ldr	r3, [r7, #12]
 800335a:	855a      	strh	r2, [r3, #42]	; 0x2a
 800335c:	e042      	b.n	80033e4 <HAL_I2C_Master_Receive+0x484>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800335e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003360:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8003362:	68f8      	ldr	r0, [r7, #12]
 8003364:	f000 fb04 	bl	8003970 <I2C_WaitOnRXNEFlagUntilTimeout>
 8003368:	4603      	mov	r3, r0
 800336a:	2b00      	cmp	r3, #0
 800336c:	d001      	beq.n	8003372 <HAL_I2C_Master_Receive+0x412>
        {
          return HAL_ERROR;
 800336e:	2301      	movs	r3, #1
 8003370:	e04c      	b.n	800340c <HAL_I2C_Master_Receive+0x4ac>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003372:	68fb      	ldr	r3, [r7, #12]
 8003374:	681b      	ldr	r3, [r3, #0]
 8003376:	691a      	ldr	r2, [r3, #16]
 8003378:	68fb      	ldr	r3, [r7, #12]
 800337a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800337c:	b2d2      	uxtb	r2, r2
 800337e:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8003380:	68fb      	ldr	r3, [r7, #12]
 8003382:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003384:	1c5a      	adds	r2, r3, #1
 8003386:	68fb      	ldr	r3, [r7, #12]
 8003388:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 800338a:	68fb      	ldr	r3, [r7, #12]
 800338c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800338e:	3b01      	subs	r3, #1
 8003390:	b29a      	uxth	r2, r3
 8003392:	68fb      	ldr	r3, [r7, #12]
 8003394:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8003396:	68fb      	ldr	r3, [r7, #12]
 8003398:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800339a:	b29b      	uxth	r3, r3
 800339c:	3b01      	subs	r3, #1
 800339e:	b29a      	uxth	r2, r3
 80033a0:	68fb      	ldr	r3, [r7, #12]
 80033a2:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 80033a4:	68fb      	ldr	r3, [r7, #12]
 80033a6:	681b      	ldr	r3, [r3, #0]
 80033a8:	695b      	ldr	r3, [r3, #20]
 80033aa:	f003 0304 	and.w	r3, r3, #4
 80033ae:	2b04      	cmp	r3, #4
 80033b0:	d118      	bne.n	80033e4 <HAL_I2C_Master_Receive+0x484>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80033b2:	68fb      	ldr	r3, [r7, #12]
 80033b4:	681b      	ldr	r3, [r3, #0]
 80033b6:	691a      	ldr	r2, [r3, #16]
 80033b8:	68fb      	ldr	r3, [r7, #12]
 80033ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80033bc:	b2d2      	uxtb	r2, r2
 80033be:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80033c0:	68fb      	ldr	r3, [r7, #12]
 80033c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80033c4:	1c5a      	adds	r2, r3, #1
 80033c6:	68fb      	ldr	r3, [r7, #12]
 80033c8:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80033ca:	68fb      	ldr	r3, [r7, #12]
 80033cc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80033ce:	3b01      	subs	r3, #1
 80033d0:	b29a      	uxth	r2, r3
 80033d2:	68fb      	ldr	r3, [r7, #12]
 80033d4:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80033d6:	68fb      	ldr	r3, [r7, #12]
 80033d8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80033da:	b29b      	uxth	r3, r3
 80033dc:	3b01      	subs	r3, #1
 80033de:	b29a      	uxth	r2, r3
 80033e0:	68fb      	ldr	r3, [r7, #12]
 80033e2:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 80033e4:	68fb      	ldr	r3, [r7, #12]
 80033e6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80033e8:	2b00      	cmp	r3, #0
 80033ea:	f47f ae94 	bne.w	8003116 <HAL_I2C_Master_Receive+0x1b6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 80033ee:	68fb      	ldr	r3, [r7, #12]
 80033f0:	2220      	movs	r2, #32
 80033f2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80033f6:	68fb      	ldr	r3, [r7, #12]
 80033f8:	2200      	movs	r2, #0
 80033fa:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80033fe:	68fb      	ldr	r3, [r7, #12]
 8003400:	2200      	movs	r2, #0
 8003402:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8003406:	2300      	movs	r3, #0
 8003408:	e000      	b.n	800340c <HAL_I2C_Master_Receive+0x4ac>
  }
  else
  {
    return HAL_BUSY;
 800340a:	2302      	movs	r3, #2
  }
}
 800340c:	4618      	mov	r0, r3
 800340e:	3728      	adds	r7, #40	; 0x28
 8003410:	46bd      	mov	sp, r7
 8003412:	bd80      	pop	{r7, pc}
 8003414:	00010004 	.word	0x00010004
 8003418:	20000000 	.word	0x20000000
 800341c:	14f8b589 	.word	0x14f8b589

08003420 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8003420:	b580      	push	{r7, lr}
 8003422:	b088      	sub	sp, #32
 8003424:	af02      	add	r7, sp, #8
 8003426:	60f8      	str	r0, [r7, #12]
 8003428:	607a      	str	r2, [r7, #4]
 800342a:	603b      	str	r3, [r7, #0]
 800342c:	460b      	mov	r3, r1
 800342e:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8003430:	68fb      	ldr	r3, [r7, #12]
 8003432:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003434:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8003436:	697b      	ldr	r3, [r7, #20]
 8003438:	2b08      	cmp	r3, #8
 800343a:	d006      	beq.n	800344a <I2C_MasterRequestWrite+0x2a>
 800343c:	697b      	ldr	r3, [r7, #20]
 800343e:	2b01      	cmp	r3, #1
 8003440:	d003      	beq.n	800344a <I2C_MasterRequestWrite+0x2a>
 8003442:	697b      	ldr	r3, [r7, #20]
 8003444:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8003448:	d108      	bne.n	800345c <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800344a:	68fb      	ldr	r3, [r7, #12]
 800344c:	681b      	ldr	r3, [r3, #0]
 800344e:	681a      	ldr	r2, [r3, #0]
 8003450:	68fb      	ldr	r3, [r7, #12]
 8003452:	681b      	ldr	r3, [r3, #0]
 8003454:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003458:	601a      	str	r2, [r3, #0]
 800345a:	e00b      	b.n	8003474 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 800345c:	68fb      	ldr	r3, [r7, #12]
 800345e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003460:	2b12      	cmp	r3, #18
 8003462:	d107      	bne.n	8003474 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003464:	68fb      	ldr	r3, [r7, #12]
 8003466:	681b      	ldr	r3, [r3, #0]
 8003468:	681a      	ldr	r2, [r3, #0]
 800346a:	68fb      	ldr	r3, [r7, #12]
 800346c:	681b      	ldr	r3, [r3, #0]
 800346e:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003472:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8003474:	683b      	ldr	r3, [r7, #0]
 8003476:	9300      	str	r3, [sp, #0]
 8003478:	687b      	ldr	r3, [r7, #4]
 800347a:	2200      	movs	r2, #0
 800347c:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8003480:	68f8      	ldr	r0, [r7, #12]
 8003482:	f000 f91d 	bl	80036c0 <I2C_WaitOnFlagUntilTimeout>
 8003486:	4603      	mov	r3, r0
 8003488:	2b00      	cmp	r3, #0
 800348a:	d00d      	beq.n	80034a8 <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800348c:	68fb      	ldr	r3, [r7, #12]
 800348e:	681b      	ldr	r3, [r3, #0]
 8003490:	681b      	ldr	r3, [r3, #0]
 8003492:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003496:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800349a:	d103      	bne.n	80034a4 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800349c:	68fb      	ldr	r3, [r7, #12]
 800349e:	f44f 7200 	mov.w	r2, #512	; 0x200
 80034a2:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 80034a4:	2303      	movs	r3, #3
 80034a6:	e035      	b.n	8003514 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80034a8:	68fb      	ldr	r3, [r7, #12]
 80034aa:	691b      	ldr	r3, [r3, #16]
 80034ac:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80034b0:	d108      	bne.n	80034c4 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80034b2:	897b      	ldrh	r3, [r7, #10]
 80034b4:	b2db      	uxtb	r3, r3
 80034b6:	461a      	mov	r2, r3
 80034b8:	68fb      	ldr	r3, [r7, #12]
 80034ba:	681b      	ldr	r3, [r3, #0]
 80034bc:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 80034c0:	611a      	str	r2, [r3, #16]
 80034c2:	e01b      	b.n	80034fc <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 80034c4:	897b      	ldrh	r3, [r7, #10]
 80034c6:	11db      	asrs	r3, r3, #7
 80034c8:	b2db      	uxtb	r3, r3
 80034ca:	f003 0306 	and.w	r3, r3, #6
 80034ce:	b2db      	uxtb	r3, r3
 80034d0:	f063 030f 	orn	r3, r3, #15
 80034d4:	b2da      	uxtb	r2, r3
 80034d6:	68fb      	ldr	r3, [r7, #12]
 80034d8:	681b      	ldr	r3, [r3, #0]
 80034da:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 80034dc:	683b      	ldr	r3, [r7, #0]
 80034de:	687a      	ldr	r2, [r7, #4]
 80034e0:	490e      	ldr	r1, [pc, #56]	; (800351c <I2C_MasterRequestWrite+0xfc>)
 80034e2:	68f8      	ldr	r0, [r7, #12]
 80034e4:	f000 f943 	bl	800376e <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80034e8:	4603      	mov	r3, r0
 80034ea:	2b00      	cmp	r3, #0
 80034ec:	d001      	beq.n	80034f2 <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 80034ee:	2301      	movs	r3, #1
 80034f0:	e010      	b.n	8003514 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 80034f2:	897b      	ldrh	r3, [r7, #10]
 80034f4:	b2da      	uxtb	r2, r3
 80034f6:	68fb      	ldr	r3, [r7, #12]
 80034f8:	681b      	ldr	r3, [r3, #0]
 80034fa:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80034fc:	683b      	ldr	r3, [r7, #0]
 80034fe:	687a      	ldr	r2, [r7, #4]
 8003500:	4907      	ldr	r1, [pc, #28]	; (8003520 <I2C_MasterRequestWrite+0x100>)
 8003502:	68f8      	ldr	r0, [r7, #12]
 8003504:	f000 f933 	bl	800376e <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003508:	4603      	mov	r3, r0
 800350a:	2b00      	cmp	r3, #0
 800350c:	d001      	beq.n	8003512 <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 800350e:	2301      	movs	r3, #1
 8003510:	e000      	b.n	8003514 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 8003512:	2300      	movs	r3, #0
}
 8003514:	4618      	mov	r0, r3
 8003516:	3718      	adds	r7, #24
 8003518:	46bd      	mov	sp, r7
 800351a:	bd80      	pop	{r7, pc}
 800351c:	00010008 	.word	0x00010008
 8003520:	00010002 	.word	0x00010002

08003524 <I2C_MasterRequestRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8003524:	b580      	push	{r7, lr}
 8003526:	b088      	sub	sp, #32
 8003528:	af02      	add	r7, sp, #8
 800352a:	60f8      	str	r0, [r7, #12]
 800352c:	607a      	str	r2, [r7, #4]
 800352e:	603b      	str	r3, [r7, #0]
 8003530:	460b      	mov	r3, r1
 8003532:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8003534:	68fb      	ldr	r3, [r7, #12]
 8003536:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003538:	617b      	str	r3, [r7, #20]

  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800353a:	68fb      	ldr	r3, [r7, #12]
 800353c:	681b      	ldr	r3, [r3, #0]
 800353e:	681a      	ldr	r2, [r3, #0]
 8003540:	68fb      	ldr	r3, [r7, #12]
 8003542:	681b      	ldr	r3, [r3, #0]
 8003544:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8003548:	601a      	str	r2, [r3, #0]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME)  || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 800354a:	697b      	ldr	r3, [r7, #20]
 800354c:	2b08      	cmp	r3, #8
 800354e:	d006      	beq.n	800355e <I2C_MasterRequestRead+0x3a>
 8003550:	697b      	ldr	r3, [r7, #20]
 8003552:	2b01      	cmp	r3, #1
 8003554:	d003      	beq.n	800355e <I2C_MasterRequestRead+0x3a>
 8003556:	697b      	ldr	r3, [r7, #20]
 8003558:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 800355c:	d108      	bne.n	8003570 <I2C_MasterRequestRead+0x4c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800355e:	68fb      	ldr	r3, [r7, #12]
 8003560:	681b      	ldr	r3, [r3, #0]
 8003562:	681a      	ldr	r2, [r3, #0]
 8003564:	68fb      	ldr	r3, [r7, #12]
 8003566:	681b      	ldr	r3, [r3, #0]
 8003568:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800356c:	601a      	str	r2, [r3, #0]
 800356e:	e00b      	b.n	8003588 <I2C_MasterRequestRead+0x64>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_TX)
 8003570:	68fb      	ldr	r3, [r7, #12]
 8003572:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003574:	2b11      	cmp	r3, #17
 8003576:	d107      	bne.n	8003588 <I2C_MasterRequestRead+0x64>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003578:	68fb      	ldr	r3, [r7, #12]
 800357a:	681b      	ldr	r3, [r3, #0]
 800357c:	681a      	ldr	r2, [r3, #0]
 800357e:	68fb      	ldr	r3, [r7, #12]
 8003580:	681b      	ldr	r3, [r3, #0]
 8003582:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003586:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8003588:	683b      	ldr	r3, [r7, #0]
 800358a:	9300      	str	r3, [sp, #0]
 800358c:	687b      	ldr	r3, [r7, #4]
 800358e:	2200      	movs	r2, #0
 8003590:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8003594:	68f8      	ldr	r0, [r7, #12]
 8003596:	f000 f893 	bl	80036c0 <I2C_WaitOnFlagUntilTimeout>
 800359a:	4603      	mov	r3, r0
 800359c:	2b00      	cmp	r3, #0
 800359e:	d00d      	beq.n	80035bc <I2C_MasterRequestRead+0x98>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80035a0:	68fb      	ldr	r3, [r7, #12]
 80035a2:	681b      	ldr	r3, [r3, #0]
 80035a4:	681b      	ldr	r3, [r3, #0]
 80035a6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80035aa:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80035ae:	d103      	bne.n	80035b8 <I2C_MasterRequestRead+0x94>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80035b0:	68fb      	ldr	r3, [r7, #12]
 80035b2:	f44f 7200 	mov.w	r2, #512	; 0x200
 80035b6:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 80035b8:	2303      	movs	r3, #3
 80035ba:	e079      	b.n	80036b0 <I2C_MasterRequestRead+0x18c>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80035bc:	68fb      	ldr	r3, [r7, #12]
 80035be:	691b      	ldr	r3, [r3, #16]
 80035c0:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80035c4:	d108      	bne.n	80035d8 <I2C_MasterRequestRead+0xb4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 80035c6:	897b      	ldrh	r3, [r7, #10]
 80035c8:	b2db      	uxtb	r3, r3
 80035ca:	f043 0301 	orr.w	r3, r3, #1
 80035ce:	b2da      	uxtb	r2, r3
 80035d0:	68fb      	ldr	r3, [r7, #12]
 80035d2:	681b      	ldr	r3, [r3, #0]
 80035d4:	611a      	str	r2, [r3, #16]
 80035d6:	e05f      	b.n	8003698 <I2C_MasterRequestRead+0x174>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 80035d8:	897b      	ldrh	r3, [r7, #10]
 80035da:	11db      	asrs	r3, r3, #7
 80035dc:	b2db      	uxtb	r3, r3
 80035de:	f003 0306 	and.w	r3, r3, #6
 80035e2:	b2db      	uxtb	r3, r3
 80035e4:	f063 030f 	orn	r3, r3, #15
 80035e8:	b2da      	uxtb	r2, r3
 80035ea:	68fb      	ldr	r3, [r7, #12]
 80035ec:	681b      	ldr	r3, [r3, #0]
 80035ee:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 80035f0:	683b      	ldr	r3, [r7, #0]
 80035f2:	687a      	ldr	r2, [r7, #4]
 80035f4:	4930      	ldr	r1, [pc, #192]	; (80036b8 <I2C_MasterRequestRead+0x194>)
 80035f6:	68f8      	ldr	r0, [r7, #12]
 80035f8:	f000 f8b9 	bl	800376e <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80035fc:	4603      	mov	r3, r0
 80035fe:	2b00      	cmp	r3, #0
 8003600:	d001      	beq.n	8003606 <I2C_MasterRequestRead+0xe2>
    {
      return HAL_ERROR;
 8003602:	2301      	movs	r3, #1
 8003604:	e054      	b.n	80036b0 <I2C_MasterRequestRead+0x18c>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8003606:	897b      	ldrh	r3, [r7, #10]
 8003608:	b2da      	uxtb	r2, r3
 800360a:	68fb      	ldr	r3, [r7, #12]
 800360c:	681b      	ldr	r3, [r3, #0]
 800360e:	611a      	str	r2, [r3, #16]

    /* Wait until ADDR flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8003610:	683b      	ldr	r3, [r7, #0]
 8003612:	687a      	ldr	r2, [r7, #4]
 8003614:	4929      	ldr	r1, [pc, #164]	; (80036bc <I2C_MasterRequestRead+0x198>)
 8003616:	68f8      	ldr	r0, [r7, #12]
 8003618:	f000 f8a9 	bl	800376e <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800361c:	4603      	mov	r3, r0
 800361e:	2b00      	cmp	r3, #0
 8003620:	d001      	beq.n	8003626 <I2C_MasterRequestRead+0x102>
    {
      return HAL_ERROR;
 8003622:	2301      	movs	r3, #1
 8003624:	e044      	b.n	80036b0 <I2C_MasterRequestRead+0x18c>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003626:	2300      	movs	r3, #0
 8003628:	613b      	str	r3, [r7, #16]
 800362a:	68fb      	ldr	r3, [r7, #12]
 800362c:	681b      	ldr	r3, [r3, #0]
 800362e:	695b      	ldr	r3, [r3, #20]
 8003630:	613b      	str	r3, [r7, #16]
 8003632:	68fb      	ldr	r3, [r7, #12]
 8003634:	681b      	ldr	r3, [r3, #0]
 8003636:	699b      	ldr	r3, [r3, #24]
 8003638:	613b      	str	r3, [r7, #16]
 800363a:	693b      	ldr	r3, [r7, #16]

    /* Generate Restart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800363c:	68fb      	ldr	r3, [r7, #12]
 800363e:	681b      	ldr	r3, [r3, #0]
 8003640:	681a      	ldr	r2, [r3, #0]
 8003642:	68fb      	ldr	r3, [r7, #12]
 8003644:	681b      	ldr	r3, [r3, #0]
 8003646:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800364a:	601a      	str	r2, [r3, #0]

    /* Wait until SB flag is set */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800364c:	683b      	ldr	r3, [r7, #0]
 800364e:	9300      	str	r3, [sp, #0]
 8003650:	687b      	ldr	r3, [r7, #4]
 8003652:	2200      	movs	r2, #0
 8003654:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8003658:	68f8      	ldr	r0, [r7, #12]
 800365a:	f000 f831 	bl	80036c0 <I2C_WaitOnFlagUntilTimeout>
 800365e:	4603      	mov	r3, r0
 8003660:	2b00      	cmp	r3, #0
 8003662:	d00d      	beq.n	8003680 <I2C_MasterRequestRead+0x15c>
    {
      if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8003664:	68fb      	ldr	r3, [r7, #12]
 8003666:	681b      	ldr	r3, [r3, #0]
 8003668:	681b      	ldr	r3, [r3, #0]
 800366a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800366e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003672:	d103      	bne.n	800367c <I2C_MasterRequestRead+0x158>
      {
        hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8003674:	68fb      	ldr	r3, [r7, #12]
 8003676:	f44f 7200 	mov.w	r2, #512	; 0x200
 800367a:	641a      	str	r2, [r3, #64]	; 0x40
      }
      return HAL_TIMEOUT;
 800367c:	2303      	movs	r3, #3
 800367e:	e017      	b.n	80036b0 <I2C_MasterRequestRead+0x18c>
    }

    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_READ(DevAddress);
 8003680:	897b      	ldrh	r3, [r7, #10]
 8003682:	11db      	asrs	r3, r3, #7
 8003684:	b2db      	uxtb	r3, r3
 8003686:	f003 0306 	and.w	r3, r3, #6
 800368a:	b2db      	uxtb	r3, r3
 800368c:	f063 030e 	orn	r3, r3, #14
 8003690:	b2da      	uxtb	r2, r3
 8003692:	68fb      	ldr	r3, [r7, #12]
 8003694:	681b      	ldr	r3, [r3, #0]
 8003696:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8003698:	683b      	ldr	r3, [r7, #0]
 800369a:	687a      	ldr	r2, [r7, #4]
 800369c:	4907      	ldr	r1, [pc, #28]	; (80036bc <I2C_MasterRequestRead+0x198>)
 800369e:	68f8      	ldr	r0, [r7, #12]
 80036a0:	f000 f865 	bl	800376e <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80036a4:	4603      	mov	r3, r0
 80036a6:	2b00      	cmp	r3, #0
 80036a8:	d001      	beq.n	80036ae <I2C_MasterRequestRead+0x18a>
  {
    return HAL_ERROR;
 80036aa:	2301      	movs	r3, #1
 80036ac:	e000      	b.n	80036b0 <I2C_MasterRequestRead+0x18c>
  }

  return HAL_OK;
 80036ae:	2300      	movs	r3, #0
}
 80036b0:	4618      	mov	r0, r3
 80036b2:	3718      	adds	r7, #24
 80036b4:	46bd      	mov	sp, r7
 80036b6:	bd80      	pop	{r7, pc}
 80036b8:	00010008 	.word	0x00010008
 80036bc:	00010002 	.word	0x00010002

080036c0 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 80036c0:	b580      	push	{r7, lr}
 80036c2:	b084      	sub	sp, #16
 80036c4:	af00      	add	r7, sp, #0
 80036c6:	60f8      	str	r0, [r7, #12]
 80036c8:	60b9      	str	r1, [r7, #8]
 80036ca:	603b      	str	r3, [r7, #0]
 80036cc:	4613      	mov	r3, r2
 80036ce:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80036d0:	e025      	b.n	800371e <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80036d2:	683b      	ldr	r3, [r7, #0]
 80036d4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80036d8:	d021      	beq.n	800371e <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80036da:	f7fe fb11 	bl	8001d00 <HAL_GetTick>
 80036de:	4602      	mov	r2, r0
 80036e0:	69bb      	ldr	r3, [r7, #24]
 80036e2:	1ad3      	subs	r3, r2, r3
 80036e4:	683a      	ldr	r2, [r7, #0]
 80036e6:	429a      	cmp	r2, r3
 80036e8:	d302      	bcc.n	80036f0 <I2C_WaitOnFlagUntilTimeout+0x30>
 80036ea:	683b      	ldr	r3, [r7, #0]
 80036ec:	2b00      	cmp	r3, #0
 80036ee:	d116      	bne.n	800371e <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 80036f0:	68fb      	ldr	r3, [r7, #12]
 80036f2:	2200      	movs	r2, #0
 80036f4:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 80036f6:	68fb      	ldr	r3, [r7, #12]
 80036f8:	2220      	movs	r2, #32
 80036fa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 80036fe:	68fb      	ldr	r3, [r7, #12]
 8003700:	2200      	movs	r2, #0
 8003702:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8003706:	68fb      	ldr	r3, [r7, #12]
 8003708:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800370a:	f043 0220 	orr.w	r2, r3, #32
 800370e:	68fb      	ldr	r3, [r7, #12]
 8003710:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003712:	68fb      	ldr	r3, [r7, #12]
 8003714:	2200      	movs	r2, #0
 8003716:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800371a:	2301      	movs	r3, #1
 800371c:	e023      	b.n	8003766 <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800371e:	68bb      	ldr	r3, [r7, #8]
 8003720:	0c1b      	lsrs	r3, r3, #16
 8003722:	b2db      	uxtb	r3, r3
 8003724:	2b01      	cmp	r3, #1
 8003726:	d10d      	bne.n	8003744 <I2C_WaitOnFlagUntilTimeout+0x84>
 8003728:	68fb      	ldr	r3, [r7, #12]
 800372a:	681b      	ldr	r3, [r3, #0]
 800372c:	695b      	ldr	r3, [r3, #20]
 800372e:	43da      	mvns	r2, r3
 8003730:	68bb      	ldr	r3, [r7, #8]
 8003732:	4013      	ands	r3, r2
 8003734:	b29b      	uxth	r3, r3
 8003736:	2b00      	cmp	r3, #0
 8003738:	bf0c      	ite	eq
 800373a:	2301      	moveq	r3, #1
 800373c:	2300      	movne	r3, #0
 800373e:	b2db      	uxtb	r3, r3
 8003740:	461a      	mov	r2, r3
 8003742:	e00c      	b.n	800375e <I2C_WaitOnFlagUntilTimeout+0x9e>
 8003744:	68fb      	ldr	r3, [r7, #12]
 8003746:	681b      	ldr	r3, [r3, #0]
 8003748:	699b      	ldr	r3, [r3, #24]
 800374a:	43da      	mvns	r2, r3
 800374c:	68bb      	ldr	r3, [r7, #8]
 800374e:	4013      	ands	r3, r2
 8003750:	b29b      	uxth	r3, r3
 8003752:	2b00      	cmp	r3, #0
 8003754:	bf0c      	ite	eq
 8003756:	2301      	moveq	r3, #1
 8003758:	2300      	movne	r3, #0
 800375a:	b2db      	uxtb	r3, r3
 800375c:	461a      	mov	r2, r3
 800375e:	79fb      	ldrb	r3, [r7, #7]
 8003760:	429a      	cmp	r2, r3
 8003762:	d0b6      	beq.n	80036d2 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8003764:	2300      	movs	r3, #0
}
 8003766:	4618      	mov	r0, r3
 8003768:	3710      	adds	r7, #16
 800376a:	46bd      	mov	sp, r7
 800376c:	bd80      	pop	{r7, pc}

0800376e <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 800376e:	b580      	push	{r7, lr}
 8003770:	b084      	sub	sp, #16
 8003772:	af00      	add	r7, sp, #0
 8003774:	60f8      	str	r0, [r7, #12]
 8003776:	60b9      	str	r1, [r7, #8]
 8003778:	607a      	str	r2, [r7, #4]
 800377a:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800377c:	e051      	b.n	8003822 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800377e:	68fb      	ldr	r3, [r7, #12]
 8003780:	681b      	ldr	r3, [r3, #0]
 8003782:	695b      	ldr	r3, [r3, #20]
 8003784:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003788:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800378c:	d123      	bne.n	80037d6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800378e:	68fb      	ldr	r3, [r7, #12]
 8003790:	681b      	ldr	r3, [r3, #0]
 8003792:	681a      	ldr	r2, [r3, #0]
 8003794:	68fb      	ldr	r3, [r7, #12]
 8003796:	681b      	ldr	r3, [r3, #0]
 8003798:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800379c:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800379e:	68fb      	ldr	r3, [r7, #12]
 80037a0:	681b      	ldr	r3, [r3, #0]
 80037a2:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80037a6:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 80037a8:	68fb      	ldr	r3, [r7, #12]
 80037aa:	2200      	movs	r2, #0
 80037ac:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80037ae:	68fb      	ldr	r3, [r7, #12]
 80037b0:	2220      	movs	r2, #32
 80037b2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80037b6:	68fb      	ldr	r3, [r7, #12]
 80037b8:	2200      	movs	r2, #0
 80037ba:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80037be:	68fb      	ldr	r3, [r7, #12]
 80037c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80037c2:	f043 0204 	orr.w	r2, r3, #4
 80037c6:	68fb      	ldr	r3, [r7, #12]
 80037c8:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80037ca:	68fb      	ldr	r3, [r7, #12]
 80037cc:	2200      	movs	r2, #0
 80037ce:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 80037d2:	2301      	movs	r3, #1
 80037d4:	e046      	b.n	8003864 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80037d6:	687b      	ldr	r3, [r7, #4]
 80037d8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80037dc:	d021      	beq.n	8003822 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80037de:	f7fe fa8f 	bl	8001d00 <HAL_GetTick>
 80037e2:	4602      	mov	r2, r0
 80037e4:	683b      	ldr	r3, [r7, #0]
 80037e6:	1ad3      	subs	r3, r2, r3
 80037e8:	687a      	ldr	r2, [r7, #4]
 80037ea:	429a      	cmp	r2, r3
 80037ec:	d302      	bcc.n	80037f4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 80037ee:	687b      	ldr	r3, [r7, #4]
 80037f0:	2b00      	cmp	r3, #0
 80037f2:	d116      	bne.n	8003822 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80037f4:	68fb      	ldr	r3, [r7, #12]
 80037f6:	2200      	movs	r2, #0
 80037f8:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80037fa:	68fb      	ldr	r3, [r7, #12]
 80037fc:	2220      	movs	r2, #32
 80037fe:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003802:	68fb      	ldr	r3, [r7, #12]
 8003804:	2200      	movs	r2, #0
 8003806:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800380a:	68fb      	ldr	r3, [r7, #12]
 800380c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800380e:	f043 0220 	orr.w	r2, r3, #32
 8003812:	68fb      	ldr	r3, [r7, #12]
 8003814:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003816:	68fb      	ldr	r3, [r7, #12]
 8003818:	2200      	movs	r2, #0
 800381a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800381e:	2301      	movs	r3, #1
 8003820:	e020      	b.n	8003864 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8003822:	68bb      	ldr	r3, [r7, #8]
 8003824:	0c1b      	lsrs	r3, r3, #16
 8003826:	b2db      	uxtb	r3, r3
 8003828:	2b01      	cmp	r3, #1
 800382a:	d10c      	bne.n	8003846 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 800382c:	68fb      	ldr	r3, [r7, #12]
 800382e:	681b      	ldr	r3, [r3, #0]
 8003830:	695b      	ldr	r3, [r3, #20]
 8003832:	43da      	mvns	r2, r3
 8003834:	68bb      	ldr	r3, [r7, #8]
 8003836:	4013      	ands	r3, r2
 8003838:	b29b      	uxth	r3, r3
 800383a:	2b00      	cmp	r3, #0
 800383c:	bf14      	ite	ne
 800383e:	2301      	movne	r3, #1
 8003840:	2300      	moveq	r3, #0
 8003842:	b2db      	uxtb	r3, r3
 8003844:	e00b      	b.n	800385e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 8003846:	68fb      	ldr	r3, [r7, #12]
 8003848:	681b      	ldr	r3, [r3, #0]
 800384a:	699b      	ldr	r3, [r3, #24]
 800384c:	43da      	mvns	r2, r3
 800384e:	68bb      	ldr	r3, [r7, #8]
 8003850:	4013      	ands	r3, r2
 8003852:	b29b      	uxth	r3, r3
 8003854:	2b00      	cmp	r3, #0
 8003856:	bf14      	ite	ne
 8003858:	2301      	movne	r3, #1
 800385a:	2300      	moveq	r3, #0
 800385c:	b2db      	uxtb	r3, r3
 800385e:	2b00      	cmp	r3, #0
 8003860:	d18d      	bne.n	800377e <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 8003862:	2300      	movs	r3, #0
}
 8003864:	4618      	mov	r0, r3
 8003866:	3710      	adds	r7, #16
 8003868:	46bd      	mov	sp, r7
 800386a:	bd80      	pop	{r7, pc}

0800386c <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800386c:	b580      	push	{r7, lr}
 800386e:	b084      	sub	sp, #16
 8003870:	af00      	add	r7, sp, #0
 8003872:	60f8      	str	r0, [r7, #12]
 8003874:	60b9      	str	r1, [r7, #8]
 8003876:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8003878:	e02d      	b.n	80038d6 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800387a:	68f8      	ldr	r0, [r7, #12]
 800387c:	f000 f8ce 	bl	8003a1c <I2C_IsAcknowledgeFailed>
 8003880:	4603      	mov	r3, r0
 8003882:	2b00      	cmp	r3, #0
 8003884:	d001      	beq.n	800388a <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8003886:	2301      	movs	r3, #1
 8003888:	e02d      	b.n	80038e6 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800388a:	68bb      	ldr	r3, [r7, #8]
 800388c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003890:	d021      	beq.n	80038d6 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003892:	f7fe fa35 	bl	8001d00 <HAL_GetTick>
 8003896:	4602      	mov	r2, r0
 8003898:	687b      	ldr	r3, [r7, #4]
 800389a:	1ad3      	subs	r3, r2, r3
 800389c:	68ba      	ldr	r2, [r7, #8]
 800389e:	429a      	cmp	r2, r3
 80038a0:	d302      	bcc.n	80038a8 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 80038a2:	68bb      	ldr	r3, [r7, #8]
 80038a4:	2b00      	cmp	r3, #0
 80038a6:	d116      	bne.n	80038d6 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80038a8:	68fb      	ldr	r3, [r7, #12]
 80038aa:	2200      	movs	r2, #0
 80038ac:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80038ae:	68fb      	ldr	r3, [r7, #12]
 80038b0:	2220      	movs	r2, #32
 80038b2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80038b6:	68fb      	ldr	r3, [r7, #12]
 80038b8:	2200      	movs	r2, #0
 80038ba:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80038be:	68fb      	ldr	r3, [r7, #12]
 80038c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80038c2:	f043 0220 	orr.w	r2, r3, #32
 80038c6:	68fb      	ldr	r3, [r7, #12]
 80038c8:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80038ca:	68fb      	ldr	r3, [r7, #12]
 80038cc:	2200      	movs	r2, #0
 80038ce:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80038d2:	2301      	movs	r3, #1
 80038d4:	e007      	b.n	80038e6 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80038d6:	68fb      	ldr	r3, [r7, #12]
 80038d8:	681b      	ldr	r3, [r3, #0]
 80038da:	695b      	ldr	r3, [r3, #20]
 80038dc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80038e0:	2b80      	cmp	r3, #128	; 0x80
 80038e2:	d1ca      	bne.n	800387a <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80038e4:	2300      	movs	r3, #0
}
 80038e6:	4618      	mov	r0, r3
 80038e8:	3710      	adds	r7, #16
 80038ea:	46bd      	mov	sp, r7
 80038ec:	bd80      	pop	{r7, pc}

080038ee <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80038ee:	b580      	push	{r7, lr}
 80038f0:	b084      	sub	sp, #16
 80038f2:	af00      	add	r7, sp, #0
 80038f4:	60f8      	str	r0, [r7, #12]
 80038f6:	60b9      	str	r1, [r7, #8]
 80038f8:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80038fa:	e02d      	b.n	8003958 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80038fc:	68f8      	ldr	r0, [r7, #12]
 80038fe:	f000 f88d 	bl	8003a1c <I2C_IsAcknowledgeFailed>
 8003902:	4603      	mov	r3, r0
 8003904:	2b00      	cmp	r3, #0
 8003906:	d001      	beq.n	800390c <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8003908:	2301      	movs	r3, #1
 800390a:	e02d      	b.n	8003968 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800390c:	68bb      	ldr	r3, [r7, #8]
 800390e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003912:	d021      	beq.n	8003958 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003914:	f7fe f9f4 	bl	8001d00 <HAL_GetTick>
 8003918:	4602      	mov	r2, r0
 800391a:	687b      	ldr	r3, [r7, #4]
 800391c:	1ad3      	subs	r3, r2, r3
 800391e:	68ba      	ldr	r2, [r7, #8]
 8003920:	429a      	cmp	r2, r3
 8003922:	d302      	bcc.n	800392a <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8003924:	68bb      	ldr	r3, [r7, #8]
 8003926:	2b00      	cmp	r3, #0
 8003928:	d116      	bne.n	8003958 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 800392a:	68fb      	ldr	r3, [r7, #12]
 800392c:	2200      	movs	r2, #0
 800392e:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8003930:	68fb      	ldr	r3, [r7, #12]
 8003932:	2220      	movs	r2, #32
 8003934:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003938:	68fb      	ldr	r3, [r7, #12]
 800393a:	2200      	movs	r2, #0
 800393c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003940:	68fb      	ldr	r3, [r7, #12]
 8003942:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003944:	f043 0220 	orr.w	r2, r3, #32
 8003948:	68fb      	ldr	r3, [r7, #12]
 800394a:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800394c:	68fb      	ldr	r3, [r7, #12]
 800394e:	2200      	movs	r2, #0
 8003950:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8003954:	2301      	movs	r3, #1
 8003956:	e007      	b.n	8003968 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8003958:	68fb      	ldr	r3, [r7, #12]
 800395a:	681b      	ldr	r3, [r3, #0]
 800395c:	695b      	ldr	r3, [r3, #20]
 800395e:	f003 0304 	and.w	r3, r3, #4
 8003962:	2b04      	cmp	r3, #4
 8003964:	d1ca      	bne.n	80038fc <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8003966:	2300      	movs	r3, #0
}
 8003968:	4618      	mov	r0, r3
 800396a:	3710      	adds	r7, #16
 800396c:	46bd      	mov	sp, r7
 800396e:	bd80      	pop	{r7, pc}

08003970 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003970:	b580      	push	{r7, lr}
 8003972:	b084      	sub	sp, #16
 8003974:	af00      	add	r7, sp, #0
 8003976:	60f8      	str	r0, [r7, #12]
 8003978:	60b9      	str	r1, [r7, #8]
 800397a:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 800397c:	e042      	b.n	8003a04 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 800397e:	68fb      	ldr	r3, [r7, #12]
 8003980:	681b      	ldr	r3, [r3, #0]
 8003982:	695b      	ldr	r3, [r3, #20]
 8003984:	f003 0310 	and.w	r3, r3, #16
 8003988:	2b10      	cmp	r3, #16
 800398a:	d119      	bne.n	80039c0 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800398c:	68fb      	ldr	r3, [r7, #12]
 800398e:	681b      	ldr	r3, [r3, #0]
 8003990:	f06f 0210 	mvn.w	r2, #16
 8003994:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8003996:	68fb      	ldr	r3, [r7, #12]
 8003998:	2200      	movs	r2, #0
 800399a:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 800399c:	68fb      	ldr	r3, [r7, #12]
 800399e:	2220      	movs	r2, #32
 80039a0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80039a4:	68fb      	ldr	r3, [r7, #12]
 80039a6:	2200      	movs	r2, #0
 80039a8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 80039ac:	68fb      	ldr	r3, [r7, #12]
 80039ae:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80039b0:	68fb      	ldr	r3, [r7, #12]
 80039b2:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80039b4:	68fb      	ldr	r3, [r7, #12]
 80039b6:	2200      	movs	r2, #0
 80039b8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 80039bc:	2301      	movs	r3, #1
 80039be:	e029      	b.n	8003a14 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80039c0:	f7fe f99e 	bl	8001d00 <HAL_GetTick>
 80039c4:	4602      	mov	r2, r0
 80039c6:	687b      	ldr	r3, [r7, #4]
 80039c8:	1ad3      	subs	r3, r2, r3
 80039ca:	68ba      	ldr	r2, [r7, #8]
 80039cc:	429a      	cmp	r2, r3
 80039ce:	d302      	bcc.n	80039d6 <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 80039d0:	68bb      	ldr	r3, [r7, #8]
 80039d2:	2b00      	cmp	r3, #0
 80039d4:	d116      	bne.n	8003a04 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 80039d6:	68fb      	ldr	r3, [r7, #12]
 80039d8:	2200      	movs	r2, #0
 80039da:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80039dc:	68fb      	ldr	r3, [r7, #12]
 80039de:	2220      	movs	r2, #32
 80039e0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80039e4:	68fb      	ldr	r3, [r7, #12]
 80039e6:	2200      	movs	r2, #0
 80039e8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80039ec:	68fb      	ldr	r3, [r7, #12]
 80039ee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80039f0:	f043 0220 	orr.w	r2, r3, #32
 80039f4:	68fb      	ldr	r3, [r7, #12]
 80039f6:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80039f8:	68fb      	ldr	r3, [r7, #12]
 80039fa:	2200      	movs	r2, #0
 80039fc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8003a00:	2301      	movs	r3, #1
 8003a02:	e007      	b.n	8003a14 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8003a04:	68fb      	ldr	r3, [r7, #12]
 8003a06:	681b      	ldr	r3, [r3, #0]
 8003a08:	695b      	ldr	r3, [r3, #20]
 8003a0a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003a0e:	2b40      	cmp	r3, #64	; 0x40
 8003a10:	d1b5      	bne.n	800397e <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8003a12:	2300      	movs	r3, #0
}
 8003a14:	4618      	mov	r0, r3
 8003a16:	3710      	adds	r7, #16
 8003a18:	46bd      	mov	sp, r7
 8003a1a:	bd80      	pop	{r7, pc}

08003a1c <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8003a1c:	b480      	push	{r7}
 8003a1e:	b083      	sub	sp, #12
 8003a20:	af00      	add	r7, sp, #0
 8003a22:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8003a24:	687b      	ldr	r3, [r7, #4]
 8003a26:	681b      	ldr	r3, [r3, #0]
 8003a28:	695b      	ldr	r3, [r3, #20]
 8003a2a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003a2e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003a32:	d11b      	bne.n	8003a6c <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003a34:	687b      	ldr	r3, [r7, #4]
 8003a36:	681b      	ldr	r3, [r3, #0]
 8003a38:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8003a3c:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8003a3e:	687b      	ldr	r3, [r7, #4]
 8003a40:	2200      	movs	r2, #0
 8003a42:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8003a44:	687b      	ldr	r3, [r7, #4]
 8003a46:	2220      	movs	r2, #32
 8003a48:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003a4c:	687b      	ldr	r3, [r7, #4]
 8003a4e:	2200      	movs	r2, #0
 8003a50:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8003a54:	687b      	ldr	r3, [r7, #4]
 8003a56:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a58:	f043 0204 	orr.w	r2, r3, #4
 8003a5c:	687b      	ldr	r3, [r7, #4]
 8003a5e:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003a60:	687b      	ldr	r3, [r7, #4]
 8003a62:	2200      	movs	r2, #0
 8003a64:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8003a68:	2301      	movs	r3, #1
 8003a6a:	e000      	b.n	8003a6e <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8003a6c:	2300      	movs	r3, #0
}
 8003a6e:	4618      	mov	r0, r3
 8003a70:	370c      	adds	r7, #12
 8003a72:	46bd      	mov	sp, r7
 8003a74:	bc80      	pop	{r7}
 8003a76:	4770      	bx	lr

08003a78 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003a78:	b580      	push	{r7, lr}
 8003a7a:	b086      	sub	sp, #24
 8003a7c:	af00      	add	r7, sp, #0
 8003a7e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8003a80:	687b      	ldr	r3, [r7, #4]
 8003a82:	2b00      	cmp	r3, #0
 8003a84:	d101      	bne.n	8003a8a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003a86:	2301      	movs	r3, #1
 8003a88:	e26c      	b.n	8003f64 <HAL_RCC_OscConfig+0x4ec>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003a8a:	687b      	ldr	r3, [r7, #4]
 8003a8c:	681b      	ldr	r3, [r3, #0]
 8003a8e:	f003 0301 	and.w	r3, r3, #1
 8003a92:	2b00      	cmp	r3, #0
 8003a94:	f000 8087 	beq.w	8003ba6 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8003a98:	4b92      	ldr	r3, [pc, #584]	; (8003ce4 <HAL_RCC_OscConfig+0x26c>)
 8003a9a:	685b      	ldr	r3, [r3, #4]
 8003a9c:	f003 030c 	and.w	r3, r3, #12
 8003aa0:	2b04      	cmp	r3, #4
 8003aa2:	d00c      	beq.n	8003abe <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8003aa4:	4b8f      	ldr	r3, [pc, #572]	; (8003ce4 <HAL_RCC_OscConfig+0x26c>)
 8003aa6:	685b      	ldr	r3, [r3, #4]
 8003aa8:	f003 030c 	and.w	r3, r3, #12
 8003aac:	2b08      	cmp	r3, #8
 8003aae:	d112      	bne.n	8003ad6 <HAL_RCC_OscConfig+0x5e>
 8003ab0:	4b8c      	ldr	r3, [pc, #560]	; (8003ce4 <HAL_RCC_OscConfig+0x26c>)
 8003ab2:	685b      	ldr	r3, [r3, #4]
 8003ab4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003ab8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003abc:	d10b      	bne.n	8003ad6 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003abe:	4b89      	ldr	r3, [pc, #548]	; (8003ce4 <HAL_RCC_OscConfig+0x26c>)
 8003ac0:	681b      	ldr	r3, [r3, #0]
 8003ac2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003ac6:	2b00      	cmp	r3, #0
 8003ac8:	d06c      	beq.n	8003ba4 <HAL_RCC_OscConfig+0x12c>
 8003aca:	687b      	ldr	r3, [r7, #4]
 8003acc:	685b      	ldr	r3, [r3, #4]
 8003ace:	2b00      	cmp	r3, #0
 8003ad0:	d168      	bne.n	8003ba4 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8003ad2:	2301      	movs	r3, #1
 8003ad4:	e246      	b.n	8003f64 <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003ad6:	687b      	ldr	r3, [r7, #4]
 8003ad8:	685b      	ldr	r3, [r3, #4]
 8003ada:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003ade:	d106      	bne.n	8003aee <HAL_RCC_OscConfig+0x76>
 8003ae0:	4b80      	ldr	r3, [pc, #512]	; (8003ce4 <HAL_RCC_OscConfig+0x26c>)
 8003ae2:	681b      	ldr	r3, [r3, #0]
 8003ae4:	4a7f      	ldr	r2, [pc, #508]	; (8003ce4 <HAL_RCC_OscConfig+0x26c>)
 8003ae6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003aea:	6013      	str	r3, [r2, #0]
 8003aec:	e02e      	b.n	8003b4c <HAL_RCC_OscConfig+0xd4>
 8003aee:	687b      	ldr	r3, [r7, #4]
 8003af0:	685b      	ldr	r3, [r3, #4]
 8003af2:	2b00      	cmp	r3, #0
 8003af4:	d10c      	bne.n	8003b10 <HAL_RCC_OscConfig+0x98>
 8003af6:	4b7b      	ldr	r3, [pc, #492]	; (8003ce4 <HAL_RCC_OscConfig+0x26c>)
 8003af8:	681b      	ldr	r3, [r3, #0]
 8003afa:	4a7a      	ldr	r2, [pc, #488]	; (8003ce4 <HAL_RCC_OscConfig+0x26c>)
 8003afc:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003b00:	6013      	str	r3, [r2, #0]
 8003b02:	4b78      	ldr	r3, [pc, #480]	; (8003ce4 <HAL_RCC_OscConfig+0x26c>)
 8003b04:	681b      	ldr	r3, [r3, #0]
 8003b06:	4a77      	ldr	r2, [pc, #476]	; (8003ce4 <HAL_RCC_OscConfig+0x26c>)
 8003b08:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003b0c:	6013      	str	r3, [r2, #0]
 8003b0e:	e01d      	b.n	8003b4c <HAL_RCC_OscConfig+0xd4>
 8003b10:	687b      	ldr	r3, [r7, #4]
 8003b12:	685b      	ldr	r3, [r3, #4]
 8003b14:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003b18:	d10c      	bne.n	8003b34 <HAL_RCC_OscConfig+0xbc>
 8003b1a:	4b72      	ldr	r3, [pc, #456]	; (8003ce4 <HAL_RCC_OscConfig+0x26c>)
 8003b1c:	681b      	ldr	r3, [r3, #0]
 8003b1e:	4a71      	ldr	r2, [pc, #452]	; (8003ce4 <HAL_RCC_OscConfig+0x26c>)
 8003b20:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003b24:	6013      	str	r3, [r2, #0]
 8003b26:	4b6f      	ldr	r3, [pc, #444]	; (8003ce4 <HAL_RCC_OscConfig+0x26c>)
 8003b28:	681b      	ldr	r3, [r3, #0]
 8003b2a:	4a6e      	ldr	r2, [pc, #440]	; (8003ce4 <HAL_RCC_OscConfig+0x26c>)
 8003b2c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003b30:	6013      	str	r3, [r2, #0]
 8003b32:	e00b      	b.n	8003b4c <HAL_RCC_OscConfig+0xd4>
 8003b34:	4b6b      	ldr	r3, [pc, #428]	; (8003ce4 <HAL_RCC_OscConfig+0x26c>)
 8003b36:	681b      	ldr	r3, [r3, #0]
 8003b38:	4a6a      	ldr	r2, [pc, #424]	; (8003ce4 <HAL_RCC_OscConfig+0x26c>)
 8003b3a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003b3e:	6013      	str	r3, [r2, #0]
 8003b40:	4b68      	ldr	r3, [pc, #416]	; (8003ce4 <HAL_RCC_OscConfig+0x26c>)
 8003b42:	681b      	ldr	r3, [r3, #0]
 8003b44:	4a67      	ldr	r2, [pc, #412]	; (8003ce4 <HAL_RCC_OscConfig+0x26c>)
 8003b46:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003b4a:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003b4c:	687b      	ldr	r3, [r7, #4]
 8003b4e:	685b      	ldr	r3, [r3, #4]
 8003b50:	2b00      	cmp	r3, #0
 8003b52:	d013      	beq.n	8003b7c <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003b54:	f7fe f8d4 	bl	8001d00 <HAL_GetTick>
 8003b58:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003b5a:	e008      	b.n	8003b6e <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003b5c:	f7fe f8d0 	bl	8001d00 <HAL_GetTick>
 8003b60:	4602      	mov	r2, r0
 8003b62:	693b      	ldr	r3, [r7, #16]
 8003b64:	1ad3      	subs	r3, r2, r3
 8003b66:	2b64      	cmp	r3, #100	; 0x64
 8003b68:	d901      	bls.n	8003b6e <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8003b6a:	2303      	movs	r3, #3
 8003b6c:	e1fa      	b.n	8003f64 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003b6e:	4b5d      	ldr	r3, [pc, #372]	; (8003ce4 <HAL_RCC_OscConfig+0x26c>)
 8003b70:	681b      	ldr	r3, [r3, #0]
 8003b72:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003b76:	2b00      	cmp	r3, #0
 8003b78:	d0f0      	beq.n	8003b5c <HAL_RCC_OscConfig+0xe4>
 8003b7a:	e014      	b.n	8003ba6 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003b7c:	f7fe f8c0 	bl	8001d00 <HAL_GetTick>
 8003b80:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003b82:	e008      	b.n	8003b96 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003b84:	f7fe f8bc 	bl	8001d00 <HAL_GetTick>
 8003b88:	4602      	mov	r2, r0
 8003b8a:	693b      	ldr	r3, [r7, #16]
 8003b8c:	1ad3      	subs	r3, r2, r3
 8003b8e:	2b64      	cmp	r3, #100	; 0x64
 8003b90:	d901      	bls.n	8003b96 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8003b92:	2303      	movs	r3, #3
 8003b94:	e1e6      	b.n	8003f64 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003b96:	4b53      	ldr	r3, [pc, #332]	; (8003ce4 <HAL_RCC_OscConfig+0x26c>)
 8003b98:	681b      	ldr	r3, [r3, #0]
 8003b9a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003b9e:	2b00      	cmp	r3, #0
 8003ba0:	d1f0      	bne.n	8003b84 <HAL_RCC_OscConfig+0x10c>
 8003ba2:	e000      	b.n	8003ba6 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003ba4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003ba6:	687b      	ldr	r3, [r7, #4]
 8003ba8:	681b      	ldr	r3, [r3, #0]
 8003baa:	f003 0302 	and.w	r3, r3, #2
 8003bae:	2b00      	cmp	r3, #0
 8003bb0:	d063      	beq.n	8003c7a <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8003bb2:	4b4c      	ldr	r3, [pc, #304]	; (8003ce4 <HAL_RCC_OscConfig+0x26c>)
 8003bb4:	685b      	ldr	r3, [r3, #4]
 8003bb6:	f003 030c 	and.w	r3, r3, #12
 8003bba:	2b00      	cmp	r3, #0
 8003bbc:	d00b      	beq.n	8003bd6 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8003bbe:	4b49      	ldr	r3, [pc, #292]	; (8003ce4 <HAL_RCC_OscConfig+0x26c>)
 8003bc0:	685b      	ldr	r3, [r3, #4]
 8003bc2:	f003 030c 	and.w	r3, r3, #12
 8003bc6:	2b08      	cmp	r3, #8
 8003bc8:	d11c      	bne.n	8003c04 <HAL_RCC_OscConfig+0x18c>
 8003bca:	4b46      	ldr	r3, [pc, #280]	; (8003ce4 <HAL_RCC_OscConfig+0x26c>)
 8003bcc:	685b      	ldr	r3, [r3, #4]
 8003bce:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003bd2:	2b00      	cmp	r3, #0
 8003bd4:	d116      	bne.n	8003c04 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003bd6:	4b43      	ldr	r3, [pc, #268]	; (8003ce4 <HAL_RCC_OscConfig+0x26c>)
 8003bd8:	681b      	ldr	r3, [r3, #0]
 8003bda:	f003 0302 	and.w	r3, r3, #2
 8003bde:	2b00      	cmp	r3, #0
 8003be0:	d005      	beq.n	8003bee <HAL_RCC_OscConfig+0x176>
 8003be2:	687b      	ldr	r3, [r7, #4]
 8003be4:	691b      	ldr	r3, [r3, #16]
 8003be6:	2b01      	cmp	r3, #1
 8003be8:	d001      	beq.n	8003bee <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8003bea:	2301      	movs	r3, #1
 8003bec:	e1ba      	b.n	8003f64 <HAL_RCC_OscConfig+0x4ec>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003bee:	4b3d      	ldr	r3, [pc, #244]	; (8003ce4 <HAL_RCC_OscConfig+0x26c>)
 8003bf0:	681b      	ldr	r3, [r3, #0]
 8003bf2:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003bf6:	687b      	ldr	r3, [r7, #4]
 8003bf8:	695b      	ldr	r3, [r3, #20]
 8003bfa:	00db      	lsls	r3, r3, #3
 8003bfc:	4939      	ldr	r1, [pc, #228]	; (8003ce4 <HAL_RCC_OscConfig+0x26c>)
 8003bfe:	4313      	orrs	r3, r2
 8003c00:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003c02:	e03a      	b.n	8003c7a <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8003c04:	687b      	ldr	r3, [r7, #4]
 8003c06:	691b      	ldr	r3, [r3, #16]
 8003c08:	2b00      	cmp	r3, #0
 8003c0a:	d020      	beq.n	8003c4e <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003c0c:	4b36      	ldr	r3, [pc, #216]	; (8003ce8 <HAL_RCC_OscConfig+0x270>)
 8003c0e:	2201      	movs	r2, #1
 8003c10:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003c12:	f7fe f875 	bl	8001d00 <HAL_GetTick>
 8003c16:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003c18:	e008      	b.n	8003c2c <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003c1a:	f7fe f871 	bl	8001d00 <HAL_GetTick>
 8003c1e:	4602      	mov	r2, r0
 8003c20:	693b      	ldr	r3, [r7, #16]
 8003c22:	1ad3      	subs	r3, r2, r3
 8003c24:	2b02      	cmp	r3, #2
 8003c26:	d901      	bls.n	8003c2c <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8003c28:	2303      	movs	r3, #3
 8003c2a:	e19b      	b.n	8003f64 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003c2c:	4b2d      	ldr	r3, [pc, #180]	; (8003ce4 <HAL_RCC_OscConfig+0x26c>)
 8003c2e:	681b      	ldr	r3, [r3, #0]
 8003c30:	f003 0302 	and.w	r3, r3, #2
 8003c34:	2b00      	cmp	r3, #0
 8003c36:	d0f0      	beq.n	8003c1a <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003c38:	4b2a      	ldr	r3, [pc, #168]	; (8003ce4 <HAL_RCC_OscConfig+0x26c>)
 8003c3a:	681b      	ldr	r3, [r3, #0]
 8003c3c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003c40:	687b      	ldr	r3, [r7, #4]
 8003c42:	695b      	ldr	r3, [r3, #20]
 8003c44:	00db      	lsls	r3, r3, #3
 8003c46:	4927      	ldr	r1, [pc, #156]	; (8003ce4 <HAL_RCC_OscConfig+0x26c>)
 8003c48:	4313      	orrs	r3, r2
 8003c4a:	600b      	str	r3, [r1, #0]
 8003c4c:	e015      	b.n	8003c7a <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003c4e:	4b26      	ldr	r3, [pc, #152]	; (8003ce8 <HAL_RCC_OscConfig+0x270>)
 8003c50:	2200      	movs	r2, #0
 8003c52:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003c54:	f7fe f854 	bl	8001d00 <HAL_GetTick>
 8003c58:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003c5a:	e008      	b.n	8003c6e <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003c5c:	f7fe f850 	bl	8001d00 <HAL_GetTick>
 8003c60:	4602      	mov	r2, r0
 8003c62:	693b      	ldr	r3, [r7, #16]
 8003c64:	1ad3      	subs	r3, r2, r3
 8003c66:	2b02      	cmp	r3, #2
 8003c68:	d901      	bls.n	8003c6e <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8003c6a:	2303      	movs	r3, #3
 8003c6c:	e17a      	b.n	8003f64 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003c6e:	4b1d      	ldr	r3, [pc, #116]	; (8003ce4 <HAL_RCC_OscConfig+0x26c>)
 8003c70:	681b      	ldr	r3, [r3, #0]
 8003c72:	f003 0302 	and.w	r3, r3, #2
 8003c76:	2b00      	cmp	r3, #0
 8003c78:	d1f0      	bne.n	8003c5c <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003c7a:	687b      	ldr	r3, [r7, #4]
 8003c7c:	681b      	ldr	r3, [r3, #0]
 8003c7e:	f003 0308 	and.w	r3, r3, #8
 8003c82:	2b00      	cmp	r3, #0
 8003c84:	d03a      	beq.n	8003cfc <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8003c86:	687b      	ldr	r3, [r7, #4]
 8003c88:	699b      	ldr	r3, [r3, #24]
 8003c8a:	2b00      	cmp	r3, #0
 8003c8c:	d019      	beq.n	8003cc2 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003c8e:	4b17      	ldr	r3, [pc, #92]	; (8003cec <HAL_RCC_OscConfig+0x274>)
 8003c90:	2201      	movs	r2, #1
 8003c92:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003c94:	f7fe f834 	bl	8001d00 <HAL_GetTick>
 8003c98:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003c9a:	e008      	b.n	8003cae <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003c9c:	f7fe f830 	bl	8001d00 <HAL_GetTick>
 8003ca0:	4602      	mov	r2, r0
 8003ca2:	693b      	ldr	r3, [r7, #16]
 8003ca4:	1ad3      	subs	r3, r2, r3
 8003ca6:	2b02      	cmp	r3, #2
 8003ca8:	d901      	bls.n	8003cae <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8003caa:	2303      	movs	r3, #3
 8003cac:	e15a      	b.n	8003f64 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003cae:	4b0d      	ldr	r3, [pc, #52]	; (8003ce4 <HAL_RCC_OscConfig+0x26c>)
 8003cb0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003cb2:	f003 0302 	and.w	r3, r3, #2
 8003cb6:	2b00      	cmp	r3, #0
 8003cb8:	d0f0      	beq.n	8003c9c <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8003cba:	2001      	movs	r0, #1
 8003cbc:	f000 fad8 	bl	8004270 <RCC_Delay>
 8003cc0:	e01c      	b.n	8003cfc <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003cc2:	4b0a      	ldr	r3, [pc, #40]	; (8003cec <HAL_RCC_OscConfig+0x274>)
 8003cc4:	2200      	movs	r2, #0
 8003cc6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003cc8:	f7fe f81a 	bl	8001d00 <HAL_GetTick>
 8003ccc:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003cce:	e00f      	b.n	8003cf0 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003cd0:	f7fe f816 	bl	8001d00 <HAL_GetTick>
 8003cd4:	4602      	mov	r2, r0
 8003cd6:	693b      	ldr	r3, [r7, #16]
 8003cd8:	1ad3      	subs	r3, r2, r3
 8003cda:	2b02      	cmp	r3, #2
 8003cdc:	d908      	bls.n	8003cf0 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8003cde:	2303      	movs	r3, #3
 8003ce0:	e140      	b.n	8003f64 <HAL_RCC_OscConfig+0x4ec>
 8003ce2:	bf00      	nop
 8003ce4:	40021000 	.word	0x40021000
 8003ce8:	42420000 	.word	0x42420000
 8003cec:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003cf0:	4b9e      	ldr	r3, [pc, #632]	; (8003f6c <HAL_RCC_OscConfig+0x4f4>)
 8003cf2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003cf4:	f003 0302 	and.w	r3, r3, #2
 8003cf8:	2b00      	cmp	r3, #0
 8003cfa:	d1e9      	bne.n	8003cd0 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003cfc:	687b      	ldr	r3, [r7, #4]
 8003cfe:	681b      	ldr	r3, [r3, #0]
 8003d00:	f003 0304 	and.w	r3, r3, #4
 8003d04:	2b00      	cmp	r3, #0
 8003d06:	f000 80a6 	beq.w	8003e56 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003d0a:	2300      	movs	r3, #0
 8003d0c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003d0e:	4b97      	ldr	r3, [pc, #604]	; (8003f6c <HAL_RCC_OscConfig+0x4f4>)
 8003d10:	69db      	ldr	r3, [r3, #28]
 8003d12:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003d16:	2b00      	cmp	r3, #0
 8003d18:	d10d      	bne.n	8003d36 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003d1a:	4b94      	ldr	r3, [pc, #592]	; (8003f6c <HAL_RCC_OscConfig+0x4f4>)
 8003d1c:	69db      	ldr	r3, [r3, #28]
 8003d1e:	4a93      	ldr	r2, [pc, #588]	; (8003f6c <HAL_RCC_OscConfig+0x4f4>)
 8003d20:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003d24:	61d3      	str	r3, [r2, #28]
 8003d26:	4b91      	ldr	r3, [pc, #580]	; (8003f6c <HAL_RCC_OscConfig+0x4f4>)
 8003d28:	69db      	ldr	r3, [r3, #28]
 8003d2a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003d2e:	60bb      	str	r3, [r7, #8]
 8003d30:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003d32:	2301      	movs	r3, #1
 8003d34:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003d36:	4b8e      	ldr	r3, [pc, #568]	; (8003f70 <HAL_RCC_OscConfig+0x4f8>)
 8003d38:	681b      	ldr	r3, [r3, #0]
 8003d3a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003d3e:	2b00      	cmp	r3, #0
 8003d40:	d118      	bne.n	8003d74 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003d42:	4b8b      	ldr	r3, [pc, #556]	; (8003f70 <HAL_RCC_OscConfig+0x4f8>)
 8003d44:	681b      	ldr	r3, [r3, #0]
 8003d46:	4a8a      	ldr	r2, [pc, #552]	; (8003f70 <HAL_RCC_OscConfig+0x4f8>)
 8003d48:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003d4c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003d4e:	f7fd ffd7 	bl	8001d00 <HAL_GetTick>
 8003d52:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003d54:	e008      	b.n	8003d68 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003d56:	f7fd ffd3 	bl	8001d00 <HAL_GetTick>
 8003d5a:	4602      	mov	r2, r0
 8003d5c:	693b      	ldr	r3, [r7, #16]
 8003d5e:	1ad3      	subs	r3, r2, r3
 8003d60:	2b64      	cmp	r3, #100	; 0x64
 8003d62:	d901      	bls.n	8003d68 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8003d64:	2303      	movs	r3, #3
 8003d66:	e0fd      	b.n	8003f64 <HAL_RCC_OscConfig+0x4ec>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003d68:	4b81      	ldr	r3, [pc, #516]	; (8003f70 <HAL_RCC_OscConfig+0x4f8>)
 8003d6a:	681b      	ldr	r3, [r3, #0]
 8003d6c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003d70:	2b00      	cmp	r3, #0
 8003d72:	d0f0      	beq.n	8003d56 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003d74:	687b      	ldr	r3, [r7, #4]
 8003d76:	68db      	ldr	r3, [r3, #12]
 8003d78:	2b01      	cmp	r3, #1
 8003d7a:	d106      	bne.n	8003d8a <HAL_RCC_OscConfig+0x312>
 8003d7c:	4b7b      	ldr	r3, [pc, #492]	; (8003f6c <HAL_RCC_OscConfig+0x4f4>)
 8003d7e:	6a1b      	ldr	r3, [r3, #32]
 8003d80:	4a7a      	ldr	r2, [pc, #488]	; (8003f6c <HAL_RCC_OscConfig+0x4f4>)
 8003d82:	f043 0301 	orr.w	r3, r3, #1
 8003d86:	6213      	str	r3, [r2, #32]
 8003d88:	e02d      	b.n	8003de6 <HAL_RCC_OscConfig+0x36e>
 8003d8a:	687b      	ldr	r3, [r7, #4]
 8003d8c:	68db      	ldr	r3, [r3, #12]
 8003d8e:	2b00      	cmp	r3, #0
 8003d90:	d10c      	bne.n	8003dac <HAL_RCC_OscConfig+0x334>
 8003d92:	4b76      	ldr	r3, [pc, #472]	; (8003f6c <HAL_RCC_OscConfig+0x4f4>)
 8003d94:	6a1b      	ldr	r3, [r3, #32]
 8003d96:	4a75      	ldr	r2, [pc, #468]	; (8003f6c <HAL_RCC_OscConfig+0x4f4>)
 8003d98:	f023 0301 	bic.w	r3, r3, #1
 8003d9c:	6213      	str	r3, [r2, #32]
 8003d9e:	4b73      	ldr	r3, [pc, #460]	; (8003f6c <HAL_RCC_OscConfig+0x4f4>)
 8003da0:	6a1b      	ldr	r3, [r3, #32]
 8003da2:	4a72      	ldr	r2, [pc, #456]	; (8003f6c <HAL_RCC_OscConfig+0x4f4>)
 8003da4:	f023 0304 	bic.w	r3, r3, #4
 8003da8:	6213      	str	r3, [r2, #32]
 8003daa:	e01c      	b.n	8003de6 <HAL_RCC_OscConfig+0x36e>
 8003dac:	687b      	ldr	r3, [r7, #4]
 8003dae:	68db      	ldr	r3, [r3, #12]
 8003db0:	2b05      	cmp	r3, #5
 8003db2:	d10c      	bne.n	8003dce <HAL_RCC_OscConfig+0x356>
 8003db4:	4b6d      	ldr	r3, [pc, #436]	; (8003f6c <HAL_RCC_OscConfig+0x4f4>)
 8003db6:	6a1b      	ldr	r3, [r3, #32]
 8003db8:	4a6c      	ldr	r2, [pc, #432]	; (8003f6c <HAL_RCC_OscConfig+0x4f4>)
 8003dba:	f043 0304 	orr.w	r3, r3, #4
 8003dbe:	6213      	str	r3, [r2, #32]
 8003dc0:	4b6a      	ldr	r3, [pc, #424]	; (8003f6c <HAL_RCC_OscConfig+0x4f4>)
 8003dc2:	6a1b      	ldr	r3, [r3, #32]
 8003dc4:	4a69      	ldr	r2, [pc, #420]	; (8003f6c <HAL_RCC_OscConfig+0x4f4>)
 8003dc6:	f043 0301 	orr.w	r3, r3, #1
 8003dca:	6213      	str	r3, [r2, #32]
 8003dcc:	e00b      	b.n	8003de6 <HAL_RCC_OscConfig+0x36e>
 8003dce:	4b67      	ldr	r3, [pc, #412]	; (8003f6c <HAL_RCC_OscConfig+0x4f4>)
 8003dd0:	6a1b      	ldr	r3, [r3, #32]
 8003dd2:	4a66      	ldr	r2, [pc, #408]	; (8003f6c <HAL_RCC_OscConfig+0x4f4>)
 8003dd4:	f023 0301 	bic.w	r3, r3, #1
 8003dd8:	6213      	str	r3, [r2, #32]
 8003dda:	4b64      	ldr	r3, [pc, #400]	; (8003f6c <HAL_RCC_OscConfig+0x4f4>)
 8003ddc:	6a1b      	ldr	r3, [r3, #32]
 8003dde:	4a63      	ldr	r2, [pc, #396]	; (8003f6c <HAL_RCC_OscConfig+0x4f4>)
 8003de0:	f023 0304 	bic.w	r3, r3, #4
 8003de4:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8003de6:	687b      	ldr	r3, [r7, #4]
 8003de8:	68db      	ldr	r3, [r3, #12]
 8003dea:	2b00      	cmp	r3, #0
 8003dec:	d015      	beq.n	8003e1a <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003dee:	f7fd ff87 	bl	8001d00 <HAL_GetTick>
 8003df2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003df4:	e00a      	b.n	8003e0c <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003df6:	f7fd ff83 	bl	8001d00 <HAL_GetTick>
 8003dfa:	4602      	mov	r2, r0
 8003dfc:	693b      	ldr	r3, [r7, #16]
 8003dfe:	1ad3      	subs	r3, r2, r3
 8003e00:	f241 3288 	movw	r2, #5000	; 0x1388
 8003e04:	4293      	cmp	r3, r2
 8003e06:	d901      	bls.n	8003e0c <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8003e08:	2303      	movs	r3, #3
 8003e0a:	e0ab      	b.n	8003f64 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003e0c:	4b57      	ldr	r3, [pc, #348]	; (8003f6c <HAL_RCC_OscConfig+0x4f4>)
 8003e0e:	6a1b      	ldr	r3, [r3, #32]
 8003e10:	f003 0302 	and.w	r3, r3, #2
 8003e14:	2b00      	cmp	r3, #0
 8003e16:	d0ee      	beq.n	8003df6 <HAL_RCC_OscConfig+0x37e>
 8003e18:	e014      	b.n	8003e44 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003e1a:	f7fd ff71 	bl	8001d00 <HAL_GetTick>
 8003e1e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003e20:	e00a      	b.n	8003e38 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003e22:	f7fd ff6d 	bl	8001d00 <HAL_GetTick>
 8003e26:	4602      	mov	r2, r0
 8003e28:	693b      	ldr	r3, [r7, #16]
 8003e2a:	1ad3      	subs	r3, r2, r3
 8003e2c:	f241 3288 	movw	r2, #5000	; 0x1388
 8003e30:	4293      	cmp	r3, r2
 8003e32:	d901      	bls.n	8003e38 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8003e34:	2303      	movs	r3, #3
 8003e36:	e095      	b.n	8003f64 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003e38:	4b4c      	ldr	r3, [pc, #304]	; (8003f6c <HAL_RCC_OscConfig+0x4f4>)
 8003e3a:	6a1b      	ldr	r3, [r3, #32]
 8003e3c:	f003 0302 	and.w	r3, r3, #2
 8003e40:	2b00      	cmp	r3, #0
 8003e42:	d1ee      	bne.n	8003e22 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8003e44:	7dfb      	ldrb	r3, [r7, #23]
 8003e46:	2b01      	cmp	r3, #1
 8003e48:	d105      	bne.n	8003e56 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003e4a:	4b48      	ldr	r3, [pc, #288]	; (8003f6c <HAL_RCC_OscConfig+0x4f4>)
 8003e4c:	69db      	ldr	r3, [r3, #28]
 8003e4e:	4a47      	ldr	r2, [pc, #284]	; (8003f6c <HAL_RCC_OscConfig+0x4f4>)
 8003e50:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003e54:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003e56:	687b      	ldr	r3, [r7, #4]
 8003e58:	69db      	ldr	r3, [r3, #28]
 8003e5a:	2b00      	cmp	r3, #0
 8003e5c:	f000 8081 	beq.w	8003f62 <HAL_RCC_OscConfig+0x4ea>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8003e60:	4b42      	ldr	r3, [pc, #264]	; (8003f6c <HAL_RCC_OscConfig+0x4f4>)
 8003e62:	685b      	ldr	r3, [r3, #4]
 8003e64:	f003 030c 	and.w	r3, r3, #12
 8003e68:	2b08      	cmp	r3, #8
 8003e6a:	d061      	beq.n	8003f30 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003e6c:	687b      	ldr	r3, [r7, #4]
 8003e6e:	69db      	ldr	r3, [r3, #28]
 8003e70:	2b02      	cmp	r3, #2
 8003e72:	d146      	bne.n	8003f02 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003e74:	4b3f      	ldr	r3, [pc, #252]	; (8003f74 <HAL_RCC_OscConfig+0x4fc>)
 8003e76:	2200      	movs	r2, #0
 8003e78:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003e7a:	f7fd ff41 	bl	8001d00 <HAL_GetTick>
 8003e7e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003e80:	e008      	b.n	8003e94 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003e82:	f7fd ff3d 	bl	8001d00 <HAL_GetTick>
 8003e86:	4602      	mov	r2, r0
 8003e88:	693b      	ldr	r3, [r7, #16]
 8003e8a:	1ad3      	subs	r3, r2, r3
 8003e8c:	2b02      	cmp	r3, #2
 8003e8e:	d901      	bls.n	8003e94 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8003e90:	2303      	movs	r3, #3
 8003e92:	e067      	b.n	8003f64 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003e94:	4b35      	ldr	r3, [pc, #212]	; (8003f6c <HAL_RCC_OscConfig+0x4f4>)
 8003e96:	681b      	ldr	r3, [r3, #0]
 8003e98:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003e9c:	2b00      	cmp	r3, #0
 8003e9e:	d1f0      	bne.n	8003e82 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8003ea0:	687b      	ldr	r3, [r7, #4]
 8003ea2:	6a1b      	ldr	r3, [r3, #32]
 8003ea4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003ea8:	d108      	bne.n	8003ebc <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8003eaa:	4b30      	ldr	r3, [pc, #192]	; (8003f6c <HAL_RCC_OscConfig+0x4f4>)
 8003eac:	685b      	ldr	r3, [r3, #4]
 8003eae:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8003eb2:	687b      	ldr	r3, [r7, #4]
 8003eb4:	689b      	ldr	r3, [r3, #8]
 8003eb6:	492d      	ldr	r1, [pc, #180]	; (8003f6c <HAL_RCC_OscConfig+0x4f4>)
 8003eb8:	4313      	orrs	r3, r2
 8003eba:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003ebc:	4b2b      	ldr	r3, [pc, #172]	; (8003f6c <HAL_RCC_OscConfig+0x4f4>)
 8003ebe:	685b      	ldr	r3, [r3, #4]
 8003ec0:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8003ec4:	687b      	ldr	r3, [r7, #4]
 8003ec6:	6a19      	ldr	r1, [r3, #32]
 8003ec8:	687b      	ldr	r3, [r7, #4]
 8003eca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ecc:	430b      	orrs	r3, r1
 8003ece:	4927      	ldr	r1, [pc, #156]	; (8003f6c <HAL_RCC_OscConfig+0x4f4>)
 8003ed0:	4313      	orrs	r3, r2
 8003ed2:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003ed4:	4b27      	ldr	r3, [pc, #156]	; (8003f74 <HAL_RCC_OscConfig+0x4fc>)
 8003ed6:	2201      	movs	r2, #1
 8003ed8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003eda:	f7fd ff11 	bl	8001d00 <HAL_GetTick>
 8003ede:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8003ee0:	e008      	b.n	8003ef4 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003ee2:	f7fd ff0d 	bl	8001d00 <HAL_GetTick>
 8003ee6:	4602      	mov	r2, r0
 8003ee8:	693b      	ldr	r3, [r7, #16]
 8003eea:	1ad3      	subs	r3, r2, r3
 8003eec:	2b02      	cmp	r3, #2
 8003eee:	d901      	bls.n	8003ef4 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8003ef0:	2303      	movs	r3, #3
 8003ef2:	e037      	b.n	8003f64 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8003ef4:	4b1d      	ldr	r3, [pc, #116]	; (8003f6c <HAL_RCC_OscConfig+0x4f4>)
 8003ef6:	681b      	ldr	r3, [r3, #0]
 8003ef8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003efc:	2b00      	cmp	r3, #0
 8003efe:	d0f0      	beq.n	8003ee2 <HAL_RCC_OscConfig+0x46a>
 8003f00:	e02f      	b.n	8003f62 <HAL_RCC_OscConfig+0x4ea>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003f02:	4b1c      	ldr	r3, [pc, #112]	; (8003f74 <HAL_RCC_OscConfig+0x4fc>)
 8003f04:	2200      	movs	r2, #0
 8003f06:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003f08:	f7fd fefa 	bl	8001d00 <HAL_GetTick>
 8003f0c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003f0e:	e008      	b.n	8003f22 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003f10:	f7fd fef6 	bl	8001d00 <HAL_GetTick>
 8003f14:	4602      	mov	r2, r0
 8003f16:	693b      	ldr	r3, [r7, #16]
 8003f18:	1ad3      	subs	r3, r2, r3
 8003f1a:	2b02      	cmp	r3, #2
 8003f1c:	d901      	bls.n	8003f22 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8003f1e:	2303      	movs	r3, #3
 8003f20:	e020      	b.n	8003f64 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003f22:	4b12      	ldr	r3, [pc, #72]	; (8003f6c <HAL_RCC_OscConfig+0x4f4>)
 8003f24:	681b      	ldr	r3, [r3, #0]
 8003f26:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003f2a:	2b00      	cmp	r3, #0
 8003f2c:	d1f0      	bne.n	8003f10 <HAL_RCC_OscConfig+0x498>
 8003f2e:	e018      	b.n	8003f62 <HAL_RCC_OscConfig+0x4ea>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003f30:	687b      	ldr	r3, [r7, #4]
 8003f32:	69db      	ldr	r3, [r3, #28]
 8003f34:	2b01      	cmp	r3, #1
 8003f36:	d101      	bne.n	8003f3c <HAL_RCC_OscConfig+0x4c4>
      {
        return HAL_ERROR;
 8003f38:	2301      	movs	r3, #1
 8003f3a:	e013      	b.n	8003f64 <HAL_RCC_OscConfig+0x4ec>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8003f3c:	4b0b      	ldr	r3, [pc, #44]	; (8003f6c <HAL_RCC_OscConfig+0x4f4>)
 8003f3e:	685b      	ldr	r3, [r3, #4]
 8003f40:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003f42:	68fb      	ldr	r3, [r7, #12]
 8003f44:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8003f48:	687b      	ldr	r3, [r7, #4]
 8003f4a:	6a1b      	ldr	r3, [r3, #32]
 8003f4c:	429a      	cmp	r2, r3
 8003f4e:	d106      	bne.n	8003f5e <HAL_RCC_OscConfig+0x4e6>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8003f50:	68fb      	ldr	r3, [r7, #12]
 8003f52:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8003f56:	687b      	ldr	r3, [r7, #4]
 8003f58:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003f5a:	429a      	cmp	r2, r3
 8003f5c:	d001      	beq.n	8003f62 <HAL_RCC_OscConfig+0x4ea>
        {
          return HAL_ERROR;
 8003f5e:	2301      	movs	r3, #1
 8003f60:	e000      	b.n	8003f64 <HAL_RCC_OscConfig+0x4ec>
        }
      }
    }
  }

  return HAL_OK;
 8003f62:	2300      	movs	r3, #0
}
 8003f64:	4618      	mov	r0, r3
 8003f66:	3718      	adds	r7, #24
 8003f68:	46bd      	mov	sp, r7
 8003f6a:	bd80      	pop	{r7, pc}
 8003f6c:	40021000 	.word	0x40021000
 8003f70:	40007000 	.word	0x40007000
 8003f74:	42420060 	.word	0x42420060

08003f78 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003f78:	b580      	push	{r7, lr}
 8003f7a:	b084      	sub	sp, #16
 8003f7c:	af00      	add	r7, sp, #0
 8003f7e:	6078      	str	r0, [r7, #4]
 8003f80:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8003f82:	687b      	ldr	r3, [r7, #4]
 8003f84:	2b00      	cmp	r3, #0
 8003f86:	d101      	bne.n	8003f8c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003f88:	2301      	movs	r3, #1
 8003f8a:	e0d0      	b.n	800412e <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8003f8c:	4b6a      	ldr	r3, [pc, #424]	; (8004138 <HAL_RCC_ClockConfig+0x1c0>)
 8003f8e:	681b      	ldr	r3, [r3, #0]
 8003f90:	f003 0307 	and.w	r3, r3, #7
 8003f94:	683a      	ldr	r2, [r7, #0]
 8003f96:	429a      	cmp	r2, r3
 8003f98:	d910      	bls.n	8003fbc <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003f9a:	4b67      	ldr	r3, [pc, #412]	; (8004138 <HAL_RCC_ClockConfig+0x1c0>)
 8003f9c:	681b      	ldr	r3, [r3, #0]
 8003f9e:	f023 0207 	bic.w	r2, r3, #7
 8003fa2:	4965      	ldr	r1, [pc, #404]	; (8004138 <HAL_RCC_ClockConfig+0x1c0>)
 8003fa4:	683b      	ldr	r3, [r7, #0]
 8003fa6:	4313      	orrs	r3, r2
 8003fa8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003faa:	4b63      	ldr	r3, [pc, #396]	; (8004138 <HAL_RCC_ClockConfig+0x1c0>)
 8003fac:	681b      	ldr	r3, [r3, #0]
 8003fae:	f003 0307 	and.w	r3, r3, #7
 8003fb2:	683a      	ldr	r2, [r7, #0]
 8003fb4:	429a      	cmp	r2, r3
 8003fb6:	d001      	beq.n	8003fbc <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8003fb8:	2301      	movs	r3, #1
 8003fba:	e0b8      	b.n	800412e <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003fbc:	687b      	ldr	r3, [r7, #4]
 8003fbe:	681b      	ldr	r3, [r3, #0]
 8003fc0:	f003 0302 	and.w	r3, r3, #2
 8003fc4:	2b00      	cmp	r3, #0
 8003fc6:	d020      	beq.n	800400a <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003fc8:	687b      	ldr	r3, [r7, #4]
 8003fca:	681b      	ldr	r3, [r3, #0]
 8003fcc:	f003 0304 	and.w	r3, r3, #4
 8003fd0:	2b00      	cmp	r3, #0
 8003fd2:	d005      	beq.n	8003fe0 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003fd4:	4b59      	ldr	r3, [pc, #356]	; (800413c <HAL_RCC_ClockConfig+0x1c4>)
 8003fd6:	685b      	ldr	r3, [r3, #4]
 8003fd8:	4a58      	ldr	r2, [pc, #352]	; (800413c <HAL_RCC_ClockConfig+0x1c4>)
 8003fda:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8003fde:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003fe0:	687b      	ldr	r3, [r7, #4]
 8003fe2:	681b      	ldr	r3, [r3, #0]
 8003fe4:	f003 0308 	and.w	r3, r3, #8
 8003fe8:	2b00      	cmp	r3, #0
 8003fea:	d005      	beq.n	8003ff8 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003fec:	4b53      	ldr	r3, [pc, #332]	; (800413c <HAL_RCC_ClockConfig+0x1c4>)
 8003fee:	685b      	ldr	r3, [r3, #4]
 8003ff0:	4a52      	ldr	r2, [pc, #328]	; (800413c <HAL_RCC_ClockConfig+0x1c4>)
 8003ff2:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8003ff6:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003ff8:	4b50      	ldr	r3, [pc, #320]	; (800413c <HAL_RCC_ClockConfig+0x1c4>)
 8003ffa:	685b      	ldr	r3, [r3, #4]
 8003ffc:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004000:	687b      	ldr	r3, [r7, #4]
 8004002:	689b      	ldr	r3, [r3, #8]
 8004004:	494d      	ldr	r1, [pc, #308]	; (800413c <HAL_RCC_ClockConfig+0x1c4>)
 8004006:	4313      	orrs	r3, r2
 8004008:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800400a:	687b      	ldr	r3, [r7, #4]
 800400c:	681b      	ldr	r3, [r3, #0]
 800400e:	f003 0301 	and.w	r3, r3, #1
 8004012:	2b00      	cmp	r3, #0
 8004014:	d040      	beq.n	8004098 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004016:	687b      	ldr	r3, [r7, #4]
 8004018:	685b      	ldr	r3, [r3, #4]
 800401a:	2b01      	cmp	r3, #1
 800401c:	d107      	bne.n	800402e <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800401e:	4b47      	ldr	r3, [pc, #284]	; (800413c <HAL_RCC_ClockConfig+0x1c4>)
 8004020:	681b      	ldr	r3, [r3, #0]
 8004022:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004026:	2b00      	cmp	r3, #0
 8004028:	d115      	bne.n	8004056 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800402a:	2301      	movs	r3, #1
 800402c:	e07f      	b.n	800412e <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800402e:	687b      	ldr	r3, [r7, #4]
 8004030:	685b      	ldr	r3, [r3, #4]
 8004032:	2b02      	cmp	r3, #2
 8004034:	d107      	bne.n	8004046 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004036:	4b41      	ldr	r3, [pc, #260]	; (800413c <HAL_RCC_ClockConfig+0x1c4>)
 8004038:	681b      	ldr	r3, [r3, #0]
 800403a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800403e:	2b00      	cmp	r3, #0
 8004040:	d109      	bne.n	8004056 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004042:	2301      	movs	r3, #1
 8004044:	e073      	b.n	800412e <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004046:	4b3d      	ldr	r3, [pc, #244]	; (800413c <HAL_RCC_ClockConfig+0x1c4>)
 8004048:	681b      	ldr	r3, [r3, #0]
 800404a:	f003 0302 	and.w	r3, r3, #2
 800404e:	2b00      	cmp	r3, #0
 8004050:	d101      	bne.n	8004056 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004052:	2301      	movs	r3, #1
 8004054:	e06b      	b.n	800412e <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8004056:	4b39      	ldr	r3, [pc, #228]	; (800413c <HAL_RCC_ClockConfig+0x1c4>)
 8004058:	685b      	ldr	r3, [r3, #4]
 800405a:	f023 0203 	bic.w	r2, r3, #3
 800405e:	687b      	ldr	r3, [r7, #4]
 8004060:	685b      	ldr	r3, [r3, #4]
 8004062:	4936      	ldr	r1, [pc, #216]	; (800413c <HAL_RCC_ClockConfig+0x1c4>)
 8004064:	4313      	orrs	r3, r2
 8004066:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8004068:	f7fd fe4a 	bl	8001d00 <HAL_GetTick>
 800406c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800406e:	e00a      	b.n	8004086 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004070:	f7fd fe46 	bl	8001d00 <HAL_GetTick>
 8004074:	4602      	mov	r2, r0
 8004076:	68fb      	ldr	r3, [r7, #12]
 8004078:	1ad3      	subs	r3, r2, r3
 800407a:	f241 3288 	movw	r2, #5000	; 0x1388
 800407e:	4293      	cmp	r3, r2
 8004080:	d901      	bls.n	8004086 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8004082:	2303      	movs	r3, #3
 8004084:	e053      	b.n	800412e <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004086:	4b2d      	ldr	r3, [pc, #180]	; (800413c <HAL_RCC_ClockConfig+0x1c4>)
 8004088:	685b      	ldr	r3, [r3, #4]
 800408a:	f003 020c 	and.w	r2, r3, #12
 800408e:	687b      	ldr	r3, [r7, #4]
 8004090:	685b      	ldr	r3, [r3, #4]
 8004092:	009b      	lsls	r3, r3, #2
 8004094:	429a      	cmp	r2, r3
 8004096:	d1eb      	bne.n	8004070 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8004098:	4b27      	ldr	r3, [pc, #156]	; (8004138 <HAL_RCC_ClockConfig+0x1c0>)
 800409a:	681b      	ldr	r3, [r3, #0]
 800409c:	f003 0307 	and.w	r3, r3, #7
 80040a0:	683a      	ldr	r2, [r7, #0]
 80040a2:	429a      	cmp	r2, r3
 80040a4:	d210      	bcs.n	80040c8 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80040a6:	4b24      	ldr	r3, [pc, #144]	; (8004138 <HAL_RCC_ClockConfig+0x1c0>)
 80040a8:	681b      	ldr	r3, [r3, #0]
 80040aa:	f023 0207 	bic.w	r2, r3, #7
 80040ae:	4922      	ldr	r1, [pc, #136]	; (8004138 <HAL_RCC_ClockConfig+0x1c0>)
 80040b0:	683b      	ldr	r3, [r7, #0]
 80040b2:	4313      	orrs	r3, r2
 80040b4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80040b6:	4b20      	ldr	r3, [pc, #128]	; (8004138 <HAL_RCC_ClockConfig+0x1c0>)
 80040b8:	681b      	ldr	r3, [r3, #0]
 80040ba:	f003 0307 	and.w	r3, r3, #7
 80040be:	683a      	ldr	r2, [r7, #0]
 80040c0:	429a      	cmp	r2, r3
 80040c2:	d001      	beq.n	80040c8 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 80040c4:	2301      	movs	r3, #1
 80040c6:	e032      	b.n	800412e <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80040c8:	687b      	ldr	r3, [r7, #4]
 80040ca:	681b      	ldr	r3, [r3, #0]
 80040cc:	f003 0304 	and.w	r3, r3, #4
 80040d0:	2b00      	cmp	r3, #0
 80040d2:	d008      	beq.n	80040e6 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80040d4:	4b19      	ldr	r3, [pc, #100]	; (800413c <HAL_RCC_ClockConfig+0x1c4>)
 80040d6:	685b      	ldr	r3, [r3, #4]
 80040d8:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80040dc:	687b      	ldr	r3, [r7, #4]
 80040de:	68db      	ldr	r3, [r3, #12]
 80040e0:	4916      	ldr	r1, [pc, #88]	; (800413c <HAL_RCC_ClockConfig+0x1c4>)
 80040e2:	4313      	orrs	r3, r2
 80040e4:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80040e6:	687b      	ldr	r3, [r7, #4]
 80040e8:	681b      	ldr	r3, [r3, #0]
 80040ea:	f003 0308 	and.w	r3, r3, #8
 80040ee:	2b00      	cmp	r3, #0
 80040f0:	d009      	beq.n	8004106 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80040f2:	4b12      	ldr	r3, [pc, #72]	; (800413c <HAL_RCC_ClockConfig+0x1c4>)
 80040f4:	685b      	ldr	r3, [r3, #4]
 80040f6:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80040fa:	687b      	ldr	r3, [r7, #4]
 80040fc:	691b      	ldr	r3, [r3, #16]
 80040fe:	00db      	lsls	r3, r3, #3
 8004100:	490e      	ldr	r1, [pc, #56]	; (800413c <HAL_RCC_ClockConfig+0x1c4>)
 8004102:	4313      	orrs	r3, r2
 8004104:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8004106:	f000 f821 	bl	800414c <HAL_RCC_GetSysClockFreq>
 800410a:	4602      	mov	r2, r0
 800410c:	4b0b      	ldr	r3, [pc, #44]	; (800413c <HAL_RCC_ClockConfig+0x1c4>)
 800410e:	685b      	ldr	r3, [r3, #4]
 8004110:	091b      	lsrs	r3, r3, #4
 8004112:	f003 030f 	and.w	r3, r3, #15
 8004116:	490a      	ldr	r1, [pc, #40]	; (8004140 <HAL_RCC_ClockConfig+0x1c8>)
 8004118:	5ccb      	ldrb	r3, [r1, r3]
 800411a:	fa22 f303 	lsr.w	r3, r2, r3
 800411e:	4a09      	ldr	r2, [pc, #36]	; (8004144 <HAL_RCC_ClockConfig+0x1cc>)
 8004120:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8004122:	4b09      	ldr	r3, [pc, #36]	; (8004148 <HAL_RCC_ClockConfig+0x1d0>)
 8004124:	681b      	ldr	r3, [r3, #0]
 8004126:	4618      	mov	r0, r3
 8004128:	f7fd fda8 	bl	8001c7c <HAL_InitTick>

  return HAL_OK;
 800412c:	2300      	movs	r3, #0
}
 800412e:	4618      	mov	r0, r3
 8004130:	3710      	adds	r7, #16
 8004132:	46bd      	mov	sp, r7
 8004134:	bd80      	pop	{r7, pc}
 8004136:	bf00      	nop
 8004138:	40022000 	.word	0x40022000
 800413c:	40021000 	.word	0x40021000
 8004140:	080093e4 	.word	0x080093e4
 8004144:	20000000 	.word	0x20000000
 8004148:	20000004 	.word	0x20000004

0800414c <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800414c:	b490      	push	{r4, r7}
 800414e:	b08a      	sub	sp, #40	; 0x28
 8004150:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8004152:	4b2a      	ldr	r3, [pc, #168]	; (80041fc <HAL_RCC_GetSysClockFreq+0xb0>)
 8004154:	1d3c      	adds	r4, r7, #4
 8004156:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8004158:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 800415c:	f240 2301 	movw	r3, #513	; 0x201
 8004160:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8004162:	2300      	movs	r3, #0
 8004164:	61fb      	str	r3, [r7, #28]
 8004166:	2300      	movs	r3, #0
 8004168:	61bb      	str	r3, [r7, #24]
 800416a:	2300      	movs	r3, #0
 800416c:	627b      	str	r3, [r7, #36]	; 0x24
 800416e:	2300      	movs	r3, #0
 8004170:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8004172:	2300      	movs	r3, #0
 8004174:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8004176:	4b22      	ldr	r3, [pc, #136]	; (8004200 <HAL_RCC_GetSysClockFreq+0xb4>)
 8004178:	685b      	ldr	r3, [r3, #4]
 800417a:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 800417c:	69fb      	ldr	r3, [r7, #28]
 800417e:	f003 030c 	and.w	r3, r3, #12
 8004182:	2b04      	cmp	r3, #4
 8004184:	d002      	beq.n	800418c <HAL_RCC_GetSysClockFreq+0x40>
 8004186:	2b08      	cmp	r3, #8
 8004188:	d003      	beq.n	8004192 <HAL_RCC_GetSysClockFreq+0x46>
 800418a:	e02d      	b.n	80041e8 <HAL_RCC_GetSysClockFreq+0x9c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 800418c:	4b1d      	ldr	r3, [pc, #116]	; (8004204 <HAL_RCC_GetSysClockFreq+0xb8>)
 800418e:	623b      	str	r3, [r7, #32]
      break;
 8004190:	e02d      	b.n	80041ee <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8004192:	69fb      	ldr	r3, [r7, #28]
 8004194:	0c9b      	lsrs	r3, r3, #18
 8004196:	f003 030f 	and.w	r3, r3, #15
 800419a:	f107 0228 	add.w	r2, r7, #40	; 0x28
 800419e:	4413      	add	r3, r2
 80041a0:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 80041a4:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 80041a6:	69fb      	ldr	r3, [r7, #28]
 80041a8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80041ac:	2b00      	cmp	r3, #0
 80041ae:	d013      	beq.n	80041d8 <HAL_RCC_GetSysClockFreq+0x8c>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 80041b0:	4b13      	ldr	r3, [pc, #76]	; (8004200 <HAL_RCC_GetSysClockFreq+0xb4>)
 80041b2:	685b      	ldr	r3, [r3, #4]
 80041b4:	0c5b      	lsrs	r3, r3, #17
 80041b6:	f003 0301 	and.w	r3, r3, #1
 80041ba:	f107 0228 	add.w	r2, r7, #40	; 0x28
 80041be:	4413      	add	r3, r2
 80041c0:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 80041c4:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 80041c6:	697b      	ldr	r3, [r7, #20]
 80041c8:	4a0e      	ldr	r2, [pc, #56]	; (8004204 <HAL_RCC_GetSysClockFreq+0xb8>)
 80041ca:	fb02 f203 	mul.w	r2, r2, r3
 80041ce:	69bb      	ldr	r3, [r7, #24]
 80041d0:	fbb2 f3f3 	udiv	r3, r2, r3
 80041d4:	627b      	str	r3, [r7, #36]	; 0x24
 80041d6:	e004      	b.n	80041e2 <HAL_RCC_GetSysClockFreq+0x96>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 80041d8:	697b      	ldr	r3, [r7, #20]
 80041da:	4a0b      	ldr	r2, [pc, #44]	; (8004208 <HAL_RCC_GetSysClockFreq+0xbc>)
 80041dc:	fb02 f303 	mul.w	r3, r2, r3
 80041e0:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 80041e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80041e4:	623b      	str	r3, [r7, #32]
      break;
 80041e6:	e002      	b.n	80041ee <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 80041e8:	4b06      	ldr	r3, [pc, #24]	; (8004204 <HAL_RCC_GetSysClockFreq+0xb8>)
 80041ea:	623b      	str	r3, [r7, #32]
      break;
 80041ec:	bf00      	nop
    }
  }
  return sysclockfreq;
 80041ee:	6a3b      	ldr	r3, [r7, #32]
}
 80041f0:	4618      	mov	r0, r3
 80041f2:	3728      	adds	r7, #40	; 0x28
 80041f4:	46bd      	mov	sp, r7
 80041f6:	bc90      	pop	{r4, r7}
 80041f8:	4770      	bx	lr
 80041fa:	bf00      	nop
 80041fc:	080093c4 	.word	0x080093c4
 8004200:	40021000 	.word	0x40021000
 8004204:	007a1200 	.word	0x007a1200
 8004208:	003d0900 	.word	0x003d0900

0800420c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800420c:	b480      	push	{r7}
 800420e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004210:	4b02      	ldr	r3, [pc, #8]	; (800421c <HAL_RCC_GetHCLKFreq+0x10>)
 8004212:	681b      	ldr	r3, [r3, #0]
}
 8004214:	4618      	mov	r0, r3
 8004216:	46bd      	mov	sp, r7
 8004218:	bc80      	pop	{r7}
 800421a:	4770      	bx	lr
 800421c:	20000000 	.word	0x20000000

08004220 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004220:	b580      	push	{r7, lr}
 8004222:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8004224:	f7ff fff2 	bl	800420c <HAL_RCC_GetHCLKFreq>
 8004228:	4602      	mov	r2, r0
 800422a:	4b05      	ldr	r3, [pc, #20]	; (8004240 <HAL_RCC_GetPCLK1Freq+0x20>)
 800422c:	685b      	ldr	r3, [r3, #4]
 800422e:	0a1b      	lsrs	r3, r3, #8
 8004230:	f003 0307 	and.w	r3, r3, #7
 8004234:	4903      	ldr	r1, [pc, #12]	; (8004244 <HAL_RCC_GetPCLK1Freq+0x24>)
 8004236:	5ccb      	ldrb	r3, [r1, r3]
 8004238:	fa22 f303 	lsr.w	r3, r2, r3
}
 800423c:	4618      	mov	r0, r3
 800423e:	bd80      	pop	{r7, pc}
 8004240:	40021000 	.word	0x40021000
 8004244:	080093f4 	.word	0x080093f4

08004248 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004248:	b580      	push	{r7, lr}
 800424a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 800424c:	f7ff ffde 	bl	800420c <HAL_RCC_GetHCLKFreq>
 8004250:	4602      	mov	r2, r0
 8004252:	4b05      	ldr	r3, [pc, #20]	; (8004268 <HAL_RCC_GetPCLK2Freq+0x20>)
 8004254:	685b      	ldr	r3, [r3, #4]
 8004256:	0adb      	lsrs	r3, r3, #11
 8004258:	f003 0307 	and.w	r3, r3, #7
 800425c:	4903      	ldr	r1, [pc, #12]	; (800426c <HAL_RCC_GetPCLK2Freq+0x24>)
 800425e:	5ccb      	ldrb	r3, [r1, r3]
 8004260:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004264:	4618      	mov	r0, r3
 8004266:	bd80      	pop	{r7, pc}
 8004268:	40021000 	.word	0x40021000
 800426c:	080093f4 	.word	0x080093f4

08004270 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8004270:	b480      	push	{r7}
 8004272:	b085      	sub	sp, #20
 8004274:	af00      	add	r7, sp, #0
 8004276:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8004278:	4b0a      	ldr	r3, [pc, #40]	; (80042a4 <RCC_Delay+0x34>)
 800427a:	681b      	ldr	r3, [r3, #0]
 800427c:	4a0a      	ldr	r2, [pc, #40]	; (80042a8 <RCC_Delay+0x38>)
 800427e:	fba2 2303 	umull	r2, r3, r2, r3
 8004282:	0a5b      	lsrs	r3, r3, #9
 8004284:	687a      	ldr	r2, [r7, #4]
 8004286:	fb02 f303 	mul.w	r3, r2, r3
 800428a:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 800428c:	bf00      	nop
  }
  while (Delay --);
 800428e:	68fb      	ldr	r3, [r7, #12]
 8004290:	1e5a      	subs	r2, r3, #1
 8004292:	60fa      	str	r2, [r7, #12]
 8004294:	2b00      	cmp	r3, #0
 8004296:	d1f9      	bne.n	800428c <RCC_Delay+0x1c>
}
 8004298:	bf00      	nop
 800429a:	bf00      	nop
 800429c:	3714      	adds	r7, #20
 800429e:	46bd      	mov	sp, r7
 80042a0:	bc80      	pop	{r7}
 80042a2:	4770      	bx	lr
 80042a4:	20000000 	.word	0x20000000
 80042a8:	10624dd3 	.word	0x10624dd3

080042ac <HAL_RCCEx_PeriphCLKConfig>:
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80042ac:	b580      	push	{r7, lr}
 80042ae:	b086      	sub	sp, #24
 80042b0:	af00      	add	r7, sp, #0
 80042b2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U, temp_reg = 0U;
 80042b4:	2300      	movs	r3, #0
 80042b6:	613b      	str	r3, [r7, #16]
 80042b8:	2300      	movs	r3, #0
 80042ba:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 80042bc:	687b      	ldr	r3, [r7, #4]
 80042be:	681b      	ldr	r3, [r3, #0]
 80042c0:	f003 0301 	and.w	r3, r3, #1
 80042c4:	2b00      	cmp	r3, #0
 80042c6:	d07d      	beq.n	80043c4 <HAL_RCCEx_PeriphCLKConfig+0x118>
  {
    FlagStatus pwrclkchanged = RESET;
 80042c8:	2300      	movs	r3, #0
 80042ca:	75fb      	strb	r3, [r7, #23]
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80042cc:	4b4f      	ldr	r3, [pc, #316]	; (800440c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80042ce:	69db      	ldr	r3, [r3, #28]
 80042d0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80042d4:	2b00      	cmp	r3, #0
 80042d6:	d10d      	bne.n	80042f4 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80042d8:	4b4c      	ldr	r3, [pc, #304]	; (800440c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80042da:	69db      	ldr	r3, [r3, #28]
 80042dc:	4a4b      	ldr	r2, [pc, #300]	; (800440c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80042de:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80042e2:	61d3      	str	r3, [r2, #28]
 80042e4:	4b49      	ldr	r3, [pc, #292]	; (800440c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80042e6:	69db      	ldr	r3, [r3, #28]
 80042e8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80042ec:	60bb      	str	r3, [r7, #8]
 80042ee:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80042f0:	2301      	movs	r3, #1
 80042f2:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80042f4:	4b46      	ldr	r3, [pc, #280]	; (8004410 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80042f6:	681b      	ldr	r3, [r3, #0]
 80042f8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80042fc:	2b00      	cmp	r3, #0
 80042fe:	d118      	bne.n	8004332 <HAL_RCCEx_PeriphCLKConfig+0x86>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8004300:	4b43      	ldr	r3, [pc, #268]	; (8004410 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8004302:	681b      	ldr	r3, [r3, #0]
 8004304:	4a42      	ldr	r2, [pc, #264]	; (8004410 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8004306:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800430a:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800430c:	f7fd fcf8 	bl	8001d00 <HAL_GetTick>
 8004310:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004312:	e008      	b.n	8004326 <HAL_RCCEx_PeriphCLKConfig+0x7a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004314:	f7fd fcf4 	bl	8001d00 <HAL_GetTick>
 8004318:	4602      	mov	r2, r0
 800431a:	693b      	ldr	r3, [r7, #16]
 800431c:	1ad3      	subs	r3, r2, r3
 800431e:	2b64      	cmp	r3, #100	; 0x64
 8004320:	d901      	bls.n	8004326 <HAL_RCCEx_PeriphCLKConfig+0x7a>
        {
          return HAL_TIMEOUT;
 8004322:	2303      	movs	r3, #3
 8004324:	e06d      	b.n	8004402 <HAL_RCCEx_PeriphCLKConfig+0x156>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004326:	4b3a      	ldr	r3, [pc, #232]	; (8004410 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8004328:	681b      	ldr	r3, [r3, #0]
 800432a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800432e:	2b00      	cmp	r3, #0
 8004330:	d0f0      	beq.n	8004314 <HAL_RCCEx_PeriphCLKConfig+0x68>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8004332:	4b36      	ldr	r3, [pc, #216]	; (800440c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004334:	6a1b      	ldr	r3, [r3, #32]
 8004336:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800433a:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 800433c:	68fb      	ldr	r3, [r7, #12]
 800433e:	2b00      	cmp	r3, #0
 8004340:	d02e      	beq.n	80043a0 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 8004342:	687b      	ldr	r3, [r7, #4]
 8004344:	685b      	ldr	r3, [r3, #4]
 8004346:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800434a:	68fa      	ldr	r2, [r7, #12]
 800434c:	429a      	cmp	r2, r3
 800434e:	d027      	beq.n	80043a0 <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8004350:	4b2e      	ldr	r3, [pc, #184]	; (800440c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004352:	6a1b      	ldr	r3, [r3, #32]
 8004354:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004358:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 800435a:	4b2e      	ldr	r3, [pc, #184]	; (8004414 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 800435c:	2201      	movs	r2, #1
 800435e:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8004360:	4b2c      	ldr	r3, [pc, #176]	; (8004414 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8004362:	2200      	movs	r2, #0
 8004364:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8004366:	4a29      	ldr	r2, [pc, #164]	; (800440c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004368:	68fb      	ldr	r3, [r7, #12]
 800436a:	6213      	str	r3, [r2, #32]

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 800436c:	68fb      	ldr	r3, [r7, #12]
 800436e:	f003 0301 	and.w	r3, r3, #1
 8004372:	2b00      	cmp	r3, #0
 8004374:	d014      	beq.n	80043a0 <HAL_RCCEx_PeriphCLKConfig+0xf4>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004376:	f7fd fcc3 	bl	8001d00 <HAL_GetTick>
 800437a:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800437c:	e00a      	b.n	8004394 <HAL_RCCEx_PeriphCLKConfig+0xe8>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800437e:	f7fd fcbf 	bl	8001d00 <HAL_GetTick>
 8004382:	4602      	mov	r2, r0
 8004384:	693b      	ldr	r3, [r7, #16]
 8004386:	1ad3      	subs	r3, r2, r3
 8004388:	f241 3288 	movw	r2, #5000	; 0x1388
 800438c:	4293      	cmp	r3, r2
 800438e:	d901      	bls.n	8004394 <HAL_RCCEx_PeriphCLKConfig+0xe8>
          {
            return HAL_TIMEOUT;
 8004390:	2303      	movs	r3, #3
 8004392:	e036      	b.n	8004402 <HAL_RCCEx_PeriphCLKConfig+0x156>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004394:	4b1d      	ldr	r3, [pc, #116]	; (800440c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004396:	6a1b      	ldr	r3, [r3, #32]
 8004398:	f003 0302 	and.w	r3, r3, #2
 800439c:	2b00      	cmp	r3, #0
 800439e:	d0ee      	beq.n	800437e <HAL_RCCEx_PeriphCLKConfig+0xd2>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80043a0:	4b1a      	ldr	r3, [pc, #104]	; (800440c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80043a2:	6a1b      	ldr	r3, [r3, #32]
 80043a4:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80043a8:	687b      	ldr	r3, [r7, #4]
 80043aa:	685b      	ldr	r3, [r3, #4]
 80043ac:	4917      	ldr	r1, [pc, #92]	; (800440c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80043ae:	4313      	orrs	r3, r2
 80043b0:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 80043b2:	7dfb      	ldrb	r3, [r7, #23]
 80043b4:	2b01      	cmp	r3, #1
 80043b6:	d105      	bne.n	80043c4 <HAL_RCCEx_PeriphCLKConfig+0x118>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80043b8:	4b14      	ldr	r3, [pc, #80]	; (800440c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80043ba:	69db      	ldr	r3, [r3, #28]
 80043bc:	4a13      	ldr	r2, [pc, #76]	; (800440c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80043be:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80043c2:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80043c4:	687b      	ldr	r3, [r7, #4]
 80043c6:	681b      	ldr	r3, [r3, #0]
 80043c8:	f003 0302 	and.w	r3, r3, #2
 80043cc:	2b00      	cmp	r3, #0
 80043ce:	d008      	beq.n	80043e2 <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80043d0:	4b0e      	ldr	r3, [pc, #56]	; (800440c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80043d2:	685b      	ldr	r3, [r3, #4]
 80043d4:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 80043d8:	687b      	ldr	r3, [r7, #4]
 80043da:	689b      	ldr	r3, [r3, #8]
 80043dc:	490b      	ldr	r1, [pc, #44]	; (800440c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80043de:	4313      	orrs	r3, r2
 80043e0:	604b      	str	r3, [r1, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 80043e2:	687b      	ldr	r3, [r7, #4]
 80043e4:	681b      	ldr	r3, [r3, #0]
 80043e6:	f003 0310 	and.w	r3, r3, #16
 80043ea:	2b00      	cmp	r3, #0
 80043ec:	d008      	beq.n	8004400 <HAL_RCCEx_PeriphCLKConfig+0x154>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80043ee:	4b07      	ldr	r3, [pc, #28]	; (800440c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80043f0:	685b      	ldr	r3, [r3, #4]
 80043f2:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 80043f6:	687b      	ldr	r3, [r7, #4]
 80043f8:	68db      	ldr	r3, [r3, #12]
 80043fa:	4904      	ldr	r1, [pc, #16]	; (800440c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80043fc:	4313      	orrs	r3, r2
 80043fe:	604b      	str	r3, [r1, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 8004400:	2300      	movs	r3, #0
}
 8004402:	4618      	mov	r0, r3
 8004404:	3718      	adds	r7, #24
 8004406:	46bd      	mov	sp, r7
 8004408:	bd80      	pop	{r7, pc}
 800440a:	bf00      	nop
 800440c:	40021000 	.word	0x40021000
 8004410:	40007000 	.word	0x40007000
 8004414:	42420440 	.word	0x42420440

08004418 <HAL_RCCEx_GetPeriphCLKFreq>:
  *            @arg @ref RCC_PERIPHCLK_USB  USB peripheral clock
  @endif
  * @retval Frequency in Hz (0: means that no available frequency for the peripheral)
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 8004418:	b590      	push	{r4, r7, lr}
 800441a:	b08d      	sub	sp, #52	; 0x34
 800441c:	af00      	add	r7, sp, #0
 800441e:	6078      	str	r0, [r7, #4]
  uint32_t prediv1 = 0U, pllclk = 0U, pllmul = 0U;
  uint32_t pll2mul = 0U, pll3mul = 0U, prediv2 = 0U;
#endif /* STM32F105xC || STM32F107xC */
#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6) || \
    defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8004420:	4b5a      	ldr	r3, [pc, #360]	; (800458c <HAL_RCCEx_GetPeriphCLKFreq+0x174>)
 8004422:	f107 040c 	add.w	r4, r7, #12
 8004426:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8004428:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  const uint8_t aPredivFactorTable[2] = {1, 2};
 800442c:	f240 2301 	movw	r3, #513	; 0x201
 8004430:	813b      	strh	r3, [r7, #8]

  uint32_t prediv1 = 0U, pllclk = 0U, pllmul = 0U;
 8004432:	2300      	movs	r3, #0
 8004434:	627b      	str	r3, [r7, #36]	; 0x24
 8004436:	2300      	movs	r3, #0
 8004438:	62fb      	str	r3, [r7, #44]	; 0x2c
 800443a:	2300      	movs	r3, #0
 800443c:	623b      	str	r3, [r7, #32]
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG */
  uint32_t temp_reg = 0U, frequency = 0U;
 800443e:	2300      	movs	r3, #0
 8004440:	61fb      	str	r3, [r7, #28]
 8004442:	2300      	movs	r3, #0
 8004444:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClk));

  switch (PeriphClk)
 8004446:	687b      	ldr	r3, [r7, #4]
 8004448:	2b10      	cmp	r3, #16
 800444a:	d00a      	beq.n	8004462 <HAL_RCCEx_GetPeriphCLKFreq+0x4a>
 800444c:	687b      	ldr	r3, [r7, #4]
 800444e:	2b10      	cmp	r3, #16
 8004450:	f200 8091 	bhi.w	8004576 <HAL_RCCEx_GetPeriphCLKFreq+0x15e>
 8004454:	687b      	ldr	r3, [r7, #4]
 8004456:	2b01      	cmp	r3, #1
 8004458:	d04c      	beq.n	80044f4 <HAL_RCCEx_GetPeriphCLKFreq+0xdc>
 800445a:	687b      	ldr	r3, [r7, #4]
 800445c:	2b02      	cmp	r3, #2
 800445e:	d07c      	beq.n	800455a <HAL_RCCEx_GetPeriphCLKFreq+0x142>
      frequency = HAL_RCC_GetPCLK2Freq() / (((__HAL_RCC_GET_ADC_SOURCE() >> RCC_CFGR_ADCPRE_Pos) + 1) * 2);
      break;
    }
    default:
    {
      break;
 8004460:	e089      	b.n	8004576 <HAL_RCCEx_GetPeriphCLKFreq+0x15e>
      temp_reg = RCC->CFGR;
 8004462:	4b4b      	ldr	r3, [pc, #300]	; (8004590 <HAL_RCCEx_GetPeriphCLKFreq+0x178>)
 8004464:	685b      	ldr	r3, [r3, #4]
 8004466:	61fb      	str	r3, [r7, #28]
      if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLON))
 8004468:	4b49      	ldr	r3, [pc, #292]	; (8004590 <HAL_RCCEx_GetPeriphCLKFreq+0x178>)
 800446a:	681b      	ldr	r3, [r3, #0]
 800446c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004470:	2b00      	cmp	r3, #0
 8004472:	f000 8082 	beq.w	800457a <HAL_RCCEx_GetPeriphCLKFreq+0x162>
        pllmul = aPLLMULFactorTable[(uint32_t)(temp_reg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8004476:	69fb      	ldr	r3, [r7, #28]
 8004478:	0c9b      	lsrs	r3, r3, #18
 800447a:	f003 030f 	and.w	r3, r3, #15
 800447e:	f107 0230 	add.w	r2, r7, #48	; 0x30
 8004482:	4413      	add	r3, r2
 8004484:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 8004488:	623b      	str	r3, [r7, #32]
        if ((temp_reg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 800448a:	69fb      	ldr	r3, [r7, #28]
 800448c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004490:	2b00      	cmp	r3, #0
 8004492:	d018      	beq.n	80044c6 <HAL_RCCEx_GetPeriphCLKFreq+0xae>
          prediv1 = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8004494:	4b3e      	ldr	r3, [pc, #248]	; (8004590 <HAL_RCCEx_GetPeriphCLKFreq+0x178>)
 8004496:	685b      	ldr	r3, [r3, #4]
 8004498:	0c5b      	lsrs	r3, r3, #17
 800449a:	f003 0301 	and.w	r3, r3, #1
 800449e:	f107 0230 	add.w	r2, r7, #48	; 0x30
 80044a2:	4413      	add	r3, r2
 80044a4:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 80044a8:	627b      	str	r3, [r7, #36]	; 0x24
          if ((temp_reg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 80044aa:	69fb      	ldr	r3, [r7, #28]
 80044ac:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80044b0:	2b00      	cmp	r3, #0
 80044b2:	d00d      	beq.n	80044d0 <HAL_RCCEx_GetPeriphCLKFreq+0xb8>
            pllclk = (uint32_t)((HSE_VALUE / prediv1) * pllmul);
 80044b4:	4a37      	ldr	r2, [pc, #220]	; (8004594 <HAL_RCCEx_GetPeriphCLKFreq+0x17c>)
 80044b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80044b8:	fbb2 f2f3 	udiv	r2, r2, r3
 80044bc:	6a3b      	ldr	r3, [r7, #32]
 80044be:	fb02 f303 	mul.w	r3, r2, r3
 80044c2:	62fb      	str	r3, [r7, #44]	; 0x2c
 80044c4:	e004      	b.n	80044d0 <HAL_RCCEx_GetPeriphCLKFreq+0xb8>
          pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 80044c6:	6a3b      	ldr	r3, [r7, #32]
 80044c8:	4a33      	ldr	r2, [pc, #204]	; (8004598 <HAL_RCCEx_GetPeriphCLKFreq+0x180>)
 80044ca:	fb02 f303 	mul.w	r3, r2, r3
 80044ce:	62fb      	str	r3, [r7, #44]	; 0x2c
        if (__HAL_RCC_GET_USB_SOURCE() == RCC_USBCLKSOURCE_PLL)
 80044d0:	4b2f      	ldr	r3, [pc, #188]	; (8004590 <HAL_RCCEx_GetPeriphCLKFreq+0x178>)
 80044d2:	685b      	ldr	r3, [r3, #4]
 80044d4:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80044d8:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80044dc:	d102      	bne.n	80044e4 <HAL_RCCEx_GetPeriphCLKFreq+0xcc>
          frequency = pllclk;
 80044de:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80044e0:	62bb      	str	r3, [r7, #40]	; 0x28
      break;
 80044e2:	e04a      	b.n	800457a <HAL_RCCEx_GetPeriphCLKFreq+0x162>
          frequency = (pllclk * 2) / 3;
 80044e4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80044e6:	005b      	lsls	r3, r3, #1
 80044e8:	4a2c      	ldr	r2, [pc, #176]	; (800459c <HAL_RCCEx_GetPeriphCLKFreq+0x184>)
 80044ea:	fba2 2303 	umull	r2, r3, r2, r3
 80044ee:	085b      	lsrs	r3, r3, #1
 80044f0:	62bb      	str	r3, [r7, #40]	; 0x28
      break;
 80044f2:	e042      	b.n	800457a <HAL_RCCEx_GetPeriphCLKFreq+0x162>
      temp_reg = RCC->BDCR;
 80044f4:	4b26      	ldr	r3, [pc, #152]	; (8004590 <HAL_RCCEx_GetPeriphCLKFreq+0x178>)
 80044f6:	6a1b      	ldr	r3, [r3, #32]
 80044f8:	61fb      	str	r3, [r7, #28]
      if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_LSE) && (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSERDY)))
 80044fa:	69fb      	ldr	r3, [r7, #28]
 80044fc:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004500:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004504:	d108      	bne.n	8004518 <HAL_RCCEx_GetPeriphCLKFreq+0x100>
 8004506:	69fb      	ldr	r3, [r7, #28]
 8004508:	f003 0302 	and.w	r3, r3, #2
 800450c:	2b00      	cmp	r3, #0
 800450e:	d003      	beq.n	8004518 <HAL_RCCEx_GetPeriphCLKFreq+0x100>
        frequency = LSE_VALUE;
 8004510:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004514:	62bb      	str	r3, [r7, #40]	; 0x28
 8004516:	e01f      	b.n	8004558 <HAL_RCCEx_GetPeriphCLKFreq+0x140>
      else if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_LSI) && (HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSIRDY)))
 8004518:	69fb      	ldr	r3, [r7, #28]
 800451a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800451e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004522:	d109      	bne.n	8004538 <HAL_RCCEx_GetPeriphCLKFreq+0x120>
 8004524:	4b1a      	ldr	r3, [pc, #104]	; (8004590 <HAL_RCCEx_GetPeriphCLKFreq+0x178>)
 8004526:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004528:	f003 0302 	and.w	r3, r3, #2
 800452c:	2b00      	cmp	r3, #0
 800452e:	d003      	beq.n	8004538 <HAL_RCCEx_GetPeriphCLKFreq+0x120>
        frequency = LSI_VALUE;
 8004530:	f649 4340 	movw	r3, #40000	; 0x9c40
 8004534:	62bb      	str	r3, [r7, #40]	; 0x28
 8004536:	e00f      	b.n	8004558 <HAL_RCCEx_GetPeriphCLKFreq+0x140>
      else if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_HSE_DIV128) && (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)))
 8004538:	69fb      	ldr	r3, [r7, #28]
 800453a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800453e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004542:	d11c      	bne.n	800457e <HAL_RCCEx_GetPeriphCLKFreq+0x166>
 8004544:	4b12      	ldr	r3, [pc, #72]	; (8004590 <HAL_RCCEx_GetPeriphCLKFreq+0x178>)
 8004546:	681b      	ldr	r3, [r3, #0]
 8004548:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800454c:	2b00      	cmp	r3, #0
 800454e:	d016      	beq.n	800457e <HAL_RCCEx_GetPeriphCLKFreq+0x166>
        frequency = HSE_VALUE / 128U;
 8004550:	f24f 4324 	movw	r3, #62500	; 0xf424
 8004554:	62bb      	str	r3, [r7, #40]	; 0x28
      break;
 8004556:	e012      	b.n	800457e <HAL_RCCEx_GetPeriphCLKFreq+0x166>
 8004558:	e011      	b.n	800457e <HAL_RCCEx_GetPeriphCLKFreq+0x166>
      frequency = HAL_RCC_GetPCLK2Freq() / (((__HAL_RCC_GET_ADC_SOURCE() >> RCC_CFGR_ADCPRE_Pos) + 1) * 2);
 800455a:	f7ff fe75 	bl	8004248 <HAL_RCC_GetPCLK2Freq>
 800455e:	4602      	mov	r2, r0
 8004560:	4b0b      	ldr	r3, [pc, #44]	; (8004590 <HAL_RCCEx_GetPeriphCLKFreq+0x178>)
 8004562:	685b      	ldr	r3, [r3, #4]
 8004564:	0b9b      	lsrs	r3, r3, #14
 8004566:	f003 0303 	and.w	r3, r3, #3
 800456a:	3301      	adds	r3, #1
 800456c:	005b      	lsls	r3, r3, #1
 800456e:	fbb2 f3f3 	udiv	r3, r2, r3
 8004572:	62bb      	str	r3, [r7, #40]	; 0x28
      break;
 8004574:	e004      	b.n	8004580 <HAL_RCCEx_GetPeriphCLKFreq+0x168>
      break;
 8004576:	bf00      	nop
 8004578:	e002      	b.n	8004580 <HAL_RCCEx_GetPeriphCLKFreq+0x168>
      break;
 800457a:	bf00      	nop
 800457c:	e000      	b.n	8004580 <HAL_RCCEx_GetPeriphCLKFreq+0x168>
      break;
 800457e:	bf00      	nop
    }
  }
  return (frequency);
 8004580:	6abb      	ldr	r3, [r7, #40]	; 0x28
}
 8004582:	4618      	mov	r0, r3
 8004584:	3734      	adds	r7, #52	; 0x34
 8004586:	46bd      	mov	sp, r7
 8004588:	bd90      	pop	{r4, r7, pc}
 800458a:	bf00      	nop
 800458c:	080093d4 	.word	0x080093d4
 8004590:	40021000 	.word	0x40021000
 8004594:	007a1200 	.word	0x007a1200
 8004598:	003d0900 	.word	0x003d0900
 800459c:	aaaaaaab 	.word	0xaaaaaaab

080045a0 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80045a0:	b580      	push	{r7, lr}
 80045a2:	b082      	sub	sp, #8
 80045a4:	af00      	add	r7, sp, #0
 80045a6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80045a8:	687b      	ldr	r3, [r7, #4]
 80045aa:	2b00      	cmp	r3, #0
 80045ac:	d101      	bne.n	80045b2 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80045ae:	2301      	movs	r3, #1
 80045b0:	e041      	b.n	8004636 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80045b2:	687b      	ldr	r3, [r7, #4]
 80045b4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80045b8:	b2db      	uxtb	r3, r3
 80045ba:	2b00      	cmp	r3, #0
 80045bc:	d106      	bne.n	80045cc <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80045be:	687b      	ldr	r3, [r7, #4]
 80045c0:	2200      	movs	r2, #0
 80045c2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80045c6:	6878      	ldr	r0, [r7, #4]
 80045c8:	f7fd f9e4 	bl	8001994 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80045cc:	687b      	ldr	r3, [r7, #4]
 80045ce:	2202      	movs	r2, #2
 80045d0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80045d4:	687b      	ldr	r3, [r7, #4]
 80045d6:	681a      	ldr	r2, [r3, #0]
 80045d8:	687b      	ldr	r3, [r7, #4]
 80045da:	3304      	adds	r3, #4
 80045dc:	4619      	mov	r1, r3
 80045de:	4610      	mov	r0, r2
 80045e0:	f000 f93c 	bl	800485c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80045e4:	687b      	ldr	r3, [r7, #4]
 80045e6:	2201      	movs	r2, #1
 80045e8:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80045ec:	687b      	ldr	r3, [r7, #4]
 80045ee:	2201      	movs	r2, #1
 80045f0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80045f4:	687b      	ldr	r3, [r7, #4]
 80045f6:	2201      	movs	r2, #1
 80045f8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80045fc:	687b      	ldr	r3, [r7, #4]
 80045fe:	2201      	movs	r2, #1
 8004600:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004604:	687b      	ldr	r3, [r7, #4]
 8004606:	2201      	movs	r2, #1
 8004608:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800460c:	687b      	ldr	r3, [r7, #4]
 800460e:	2201      	movs	r2, #1
 8004610:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004614:	687b      	ldr	r3, [r7, #4]
 8004616:	2201      	movs	r2, #1
 8004618:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800461c:	687b      	ldr	r3, [r7, #4]
 800461e:	2201      	movs	r2, #1
 8004620:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004624:	687b      	ldr	r3, [r7, #4]
 8004626:	2201      	movs	r2, #1
 8004628:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800462c:	687b      	ldr	r3, [r7, #4]
 800462e:	2201      	movs	r2, #1
 8004630:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004634:	2300      	movs	r3, #0
}
 8004636:	4618      	mov	r0, r3
 8004638:	3708      	adds	r7, #8
 800463a:	46bd      	mov	sp, r7
 800463c:	bd80      	pop	{r7, pc}
	...

08004640 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8004640:	b480      	push	{r7}
 8004642:	b085      	sub	sp, #20
 8004644:	af00      	add	r7, sp, #0
 8004646:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8004648:	687b      	ldr	r3, [r7, #4]
 800464a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800464e:	b2db      	uxtb	r3, r3
 8004650:	2b01      	cmp	r3, #1
 8004652:	d001      	beq.n	8004658 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8004654:	2301      	movs	r3, #1
 8004656:	e032      	b.n	80046be <HAL_TIM_Base_Start+0x7e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004658:	687b      	ldr	r3, [r7, #4]
 800465a:	2202      	movs	r2, #2
 800465c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004660:	687b      	ldr	r3, [r7, #4]
 8004662:	681b      	ldr	r3, [r3, #0]
 8004664:	4a18      	ldr	r2, [pc, #96]	; (80046c8 <HAL_TIM_Base_Start+0x88>)
 8004666:	4293      	cmp	r3, r2
 8004668:	d00e      	beq.n	8004688 <HAL_TIM_Base_Start+0x48>
 800466a:	687b      	ldr	r3, [r7, #4]
 800466c:	681b      	ldr	r3, [r3, #0]
 800466e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004672:	d009      	beq.n	8004688 <HAL_TIM_Base_Start+0x48>
 8004674:	687b      	ldr	r3, [r7, #4]
 8004676:	681b      	ldr	r3, [r3, #0]
 8004678:	4a14      	ldr	r2, [pc, #80]	; (80046cc <HAL_TIM_Base_Start+0x8c>)
 800467a:	4293      	cmp	r3, r2
 800467c:	d004      	beq.n	8004688 <HAL_TIM_Base_Start+0x48>
 800467e:	687b      	ldr	r3, [r7, #4]
 8004680:	681b      	ldr	r3, [r3, #0]
 8004682:	4a13      	ldr	r2, [pc, #76]	; (80046d0 <HAL_TIM_Base_Start+0x90>)
 8004684:	4293      	cmp	r3, r2
 8004686:	d111      	bne.n	80046ac <HAL_TIM_Base_Start+0x6c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004688:	687b      	ldr	r3, [r7, #4]
 800468a:	681b      	ldr	r3, [r3, #0]
 800468c:	689b      	ldr	r3, [r3, #8]
 800468e:	f003 0307 	and.w	r3, r3, #7
 8004692:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004694:	68fb      	ldr	r3, [r7, #12]
 8004696:	2b06      	cmp	r3, #6
 8004698:	d010      	beq.n	80046bc <HAL_TIM_Base_Start+0x7c>
    {
      __HAL_TIM_ENABLE(htim);
 800469a:	687b      	ldr	r3, [r7, #4]
 800469c:	681b      	ldr	r3, [r3, #0]
 800469e:	681a      	ldr	r2, [r3, #0]
 80046a0:	687b      	ldr	r3, [r7, #4]
 80046a2:	681b      	ldr	r3, [r3, #0]
 80046a4:	f042 0201 	orr.w	r2, r2, #1
 80046a8:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80046aa:	e007      	b.n	80046bc <HAL_TIM_Base_Start+0x7c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80046ac:	687b      	ldr	r3, [r7, #4]
 80046ae:	681b      	ldr	r3, [r3, #0]
 80046b0:	681a      	ldr	r2, [r3, #0]
 80046b2:	687b      	ldr	r3, [r7, #4]
 80046b4:	681b      	ldr	r3, [r3, #0]
 80046b6:	f042 0201 	orr.w	r2, r2, #1
 80046ba:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80046bc:	2300      	movs	r3, #0
}
 80046be:	4618      	mov	r0, r3
 80046c0:	3714      	adds	r7, #20
 80046c2:	46bd      	mov	sp, r7
 80046c4:	bc80      	pop	{r7}
 80046c6:	4770      	bx	lr
 80046c8:	40012c00 	.word	0x40012c00
 80046cc:	40000400 	.word	0x40000400
 80046d0:	40000800 	.word	0x40000800

080046d4 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80046d4:	b580      	push	{r7, lr}
 80046d6:	b084      	sub	sp, #16
 80046d8:	af00      	add	r7, sp, #0
 80046da:	6078      	str	r0, [r7, #4]
 80046dc:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80046de:	687b      	ldr	r3, [r7, #4]
 80046e0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80046e4:	2b01      	cmp	r3, #1
 80046e6:	d101      	bne.n	80046ec <HAL_TIM_ConfigClockSource+0x18>
 80046e8:	2302      	movs	r3, #2
 80046ea:	e0b3      	b.n	8004854 <HAL_TIM_ConfigClockSource+0x180>
 80046ec:	687b      	ldr	r3, [r7, #4]
 80046ee:	2201      	movs	r2, #1
 80046f0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80046f4:	687b      	ldr	r3, [r7, #4]
 80046f6:	2202      	movs	r2, #2
 80046f8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80046fc:	687b      	ldr	r3, [r7, #4]
 80046fe:	681b      	ldr	r3, [r3, #0]
 8004700:	689b      	ldr	r3, [r3, #8]
 8004702:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8004704:	68fb      	ldr	r3, [r7, #12]
 8004706:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 800470a:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800470c:	68fb      	ldr	r3, [r7, #12]
 800470e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8004712:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8004714:	687b      	ldr	r3, [r7, #4]
 8004716:	681b      	ldr	r3, [r3, #0]
 8004718:	68fa      	ldr	r2, [r7, #12]
 800471a:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800471c:	683b      	ldr	r3, [r7, #0]
 800471e:	681b      	ldr	r3, [r3, #0]
 8004720:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004724:	d03e      	beq.n	80047a4 <HAL_TIM_ConfigClockSource+0xd0>
 8004726:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800472a:	f200 8087 	bhi.w	800483c <HAL_TIM_ConfigClockSource+0x168>
 800472e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004732:	f000 8085 	beq.w	8004840 <HAL_TIM_ConfigClockSource+0x16c>
 8004736:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800473a:	d87f      	bhi.n	800483c <HAL_TIM_ConfigClockSource+0x168>
 800473c:	2b70      	cmp	r3, #112	; 0x70
 800473e:	d01a      	beq.n	8004776 <HAL_TIM_ConfigClockSource+0xa2>
 8004740:	2b70      	cmp	r3, #112	; 0x70
 8004742:	d87b      	bhi.n	800483c <HAL_TIM_ConfigClockSource+0x168>
 8004744:	2b60      	cmp	r3, #96	; 0x60
 8004746:	d050      	beq.n	80047ea <HAL_TIM_ConfigClockSource+0x116>
 8004748:	2b60      	cmp	r3, #96	; 0x60
 800474a:	d877      	bhi.n	800483c <HAL_TIM_ConfigClockSource+0x168>
 800474c:	2b50      	cmp	r3, #80	; 0x50
 800474e:	d03c      	beq.n	80047ca <HAL_TIM_ConfigClockSource+0xf6>
 8004750:	2b50      	cmp	r3, #80	; 0x50
 8004752:	d873      	bhi.n	800483c <HAL_TIM_ConfigClockSource+0x168>
 8004754:	2b40      	cmp	r3, #64	; 0x40
 8004756:	d058      	beq.n	800480a <HAL_TIM_ConfigClockSource+0x136>
 8004758:	2b40      	cmp	r3, #64	; 0x40
 800475a:	d86f      	bhi.n	800483c <HAL_TIM_ConfigClockSource+0x168>
 800475c:	2b30      	cmp	r3, #48	; 0x30
 800475e:	d064      	beq.n	800482a <HAL_TIM_ConfigClockSource+0x156>
 8004760:	2b30      	cmp	r3, #48	; 0x30
 8004762:	d86b      	bhi.n	800483c <HAL_TIM_ConfigClockSource+0x168>
 8004764:	2b20      	cmp	r3, #32
 8004766:	d060      	beq.n	800482a <HAL_TIM_ConfigClockSource+0x156>
 8004768:	2b20      	cmp	r3, #32
 800476a:	d867      	bhi.n	800483c <HAL_TIM_ConfigClockSource+0x168>
 800476c:	2b00      	cmp	r3, #0
 800476e:	d05c      	beq.n	800482a <HAL_TIM_ConfigClockSource+0x156>
 8004770:	2b10      	cmp	r3, #16
 8004772:	d05a      	beq.n	800482a <HAL_TIM_ConfigClockSource+0x156>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
        break;
      }

    default:
      break;
 8004774:	e062      	b.n	800483c <HAL_TIM_ConfigClockSource+0x168>
      TIM_ETR_SetConfig(htim->Instance,
 8004776:	687b      	ldr	r3, [r7, #4]
 8004778:	6818      	ldr	r0, [r3, #0]
 800477a:	683b      	ldr	r3, [r7, #0]
 800477c:	6899      	ldr	r1, [r3, #8]
 800477e:	683b      	ldr	r3, [r7, #0]
 8004780:	685a      	ldr	r2, [r3, #4]
 8004782:	683b      	ldr	r3, [r7, #0]
 8004784:	68db      	ldr	r3, [r3, #12]
 8004786:	f000 f942 	bl	8004a0e <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 800478a:	687b      	ldr	r3, [r7, #4]
 800478c:	681b      	ldr	r3, [r3, #0]
 800478e:	689b      	ldr	r3, [r3, #8]
 8004790:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8004792:	68fb      	ldr	r3, [r7, #12]
 8004794:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8004798:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 800479a:	687b      	ldr	r3, [r7, #4]
 800479c:	681b      	ldr	r3, [r3, #0]
 800479e:	68fa      	ldr	r2, [r7, #12]
 80047a0:	609a      	str	r2, [r3, #8]
      break;
 80047a2:	e04e      	b.n	8004842 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_ETR_SetConfig(htim->Instance,
 80047a4:	687b      	ldr	r3, [r7, #4]
 80047a6:	6818      	ldr	r0, [r3, #0]
 80047a8:	683b      	ldr	r3, [r7, #0]
 80047aa:	6899      	ldr	r1, [r3, #8]
 80047ac:	683b      	ldr	r3, [r7, #0]
 80047ae:	685a      	ldr	r2, [r3, #4]
 80047b0:	683b      	ldr	r3, [r7, #0]
 80047b2:	68db      	ldr	r3, [r3, #12]
 80047b4:	f000 f92b 	bl	8004a0e <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80047b8:	687b      	ldr	r3, [r7, #4]
 80047ba:	681b      	ldr	r3, [r3, #0]
 80047bc:	689a      	ldr	r2, [r3, #8]
 80047be:	687b      	ldr	r3, [r7, #4]
 80047c0:	681b      	ldr	r3, [r3, #0]
 80047c2:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80047c6:	609a      	str	r2, [r3, #8]
      break;
 80047c8:	e03b      	b.n	8004842 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 80047ca:	687b      	ldr	r3, [r7, #4]
 80047cc:	6818      	ldr	r0, [r3, #0]
 80047ce:	683b      	ldr	r3, [r7, #0]
 80047d0:	6859      	ldr	r1, [r3, #4]
 80047d2:	683b      	ldr	r3, [r7, #0]
 80047d4:	68db      	ldr	r3, [r3, #12]
 80047d6:	461a      	mov	r2, r3
 80047d8:	f000 f8a2 	bl	8004920 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80047dc:	687b      	ldr	r3, [r7, #4]
 80047de:	681b      	ldr	r3, [r3, #0]
 80047e0:	2150      	movs	r1, #80	; 0x50
 80047e2:	4618      	mov	r0, r3
 80047e4:	f000 f8f9 	bl	80049da <TIM_ITRx_SetConfig>
      break;
 80047e8:	e02b      	b.n	8004842 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI2_ConfigInputStage(htim->Instance,
 80047ea:	687b      	ldr	r3, [r7, #4]
 80047ec:	6818      	ldr	r0, [r3, #0]
 80047ee:	683b      	ldr	r3, [r7, #0]
 80047f0:	6859      	ldr	r1, [r3, #4]
 80047f2:	683b      	ldr	r3, [r7, #0]
 80047f4:	68db      	ldr	r3, [r3, #12]
 80047f6:	461a      	mov	r2, r3
 80047f8:	f000 f8c0 	bl	800497c <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80047fc:	687b      	ldr	r3, [r7, #4]
 80047fe:	681b      	ldr	r3, [r3, #0]
 8004800:	2160      	movs	r1, #96	; 0x60
 8004802:	4618      	mov	r0, r3
 8004804:	f000 f8e9 	bl	80049da <TIM_ITRx_SetConfig>
      break;
 8004808:	e01b      	b.n	8004842 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 800480a:	687b      	ldr	r3, [r7, #4]
 800480c:	6818      	ldr	r0, [r3, #0]
 800480e:	683b      	ldr	r3, [r7, #0]
 8004810:	6859      	ldr	r1, [r3, #4]
 8004812:	683b      	ldr	r3, [r7, #0]
 8004814:	68db      	ldr	r3, [r3, #12]
 8004816:	461a      	mov	r2, r3
 8004818:	f000 f882 	bl	8004920 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800481c:	687b      	ldr	r3, [r7, #4]
 800481e:	681b      	ldr	r3, [r3, #0]
 8004820:	2140      	movs	r1, #64	; 0x40
 8004822:	4618      	mov	r0, r3
 8004824:	f000 f8d9 	bl	80049da <TIM_ITRx_SetConfig>
      break;
 8004828:	e00b      	b.n	8004842 <HAL_TIM_ConfigClockSource+0x16e>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800482a:	687b      	ldr	r3, [r7, #4]
 800482c:	681a      	ldr	r2, [r3, #0]
 800482e:	683b      	ldr	r3, [r7, #0]
 8004830:	681b      	ldr	r3, [r3, #0]
 8004832:	4619      	mov	r1, r3
 8004834:	4610      	mov	r0, r2
 8004836:	f000 f8d0 	bl	80049da <TIM_ITRx_SetConfig>
        break;
 800483a:	e002      	b.n	8004842 <HAL_TIM_ConfigClockSource+0x16e>
      break;
 800483c:	bf00      	nop
 800483e:	e000      	b.n	8004842 <HAL_TIM_ConfigClockSource+0x16e>
      break;
 8004840:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8004842:	687b      	ldr	r3, [r7, #4]
 8004844:	2201      	movs	r2, #1
 8004846:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800484a:	687b      	ldr	r3, [r7, #4]
 800484c:	2200      	movs	r2, #0
 800484e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8004852:	2300      	movs	r3, #0
}
 8004854:	4618      	mov	r0, r3
 8004856:	3710      	adds	r7, #16
 8004858:	46bd      	mov	sp, r7
 800485a:	bd80      	pop	{r7, pc}

0800485c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 800485c:	b480      	push	{r7}
 800485e:	b085      	sub	sp, #20
 8004860:	af00      	add	r7, sp, #0
 8004862:	6078      	str	r0, [r7, #4]
 8004864:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8004866:	687b      	ldr	r3, [r7, #4]
 8004868:	681b      	ldr	r3, [r3, #0]
 800486a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800486c:	687b      	ldr	r3, [r7, #4]
 800486e:	4a29      	ldr	r2, [pc, #164]	; (8004914 <TIM_Base_SetConfig+0xb8>)
 8004870:	4293      	cmp	r3, r2
 8004872:	d00b      	beq.n	800488c <TIM_Base_SetConfig+0x30>
 8004874:	687b      	ldr	r3, [r7, #4]
 8004876:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800487a:	d007      	beq.n	800488c <TIM_Base_SetConfig+0x30>
 800487c:	687b      	ldr	r3, [r7, #4]
 800487e:	4a26      	ldr	r2, [pc, #152]	; (8004918 <TIM_Base_SetConfig+0xbc>)
 8004880:	4293      	cmp	r3, r2
 8004882:	d003      	beq.n	800488c <TIM_Base_SetConfig+0x30>
 8004884:	687b      	ldr	r3, [r7, #4]
 8004886:	4a25      	ldr	r2, [pc, #148]	; (800491c <TIM_Base_SetConfig+0xc0>)
 8004888:	4293      	cmp	r3, r2
 800488a:	d108      	bne.n	800489e <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800488c:	68fb      	ldr	r3, [r7, #12]
 800488e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004892:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004894:	683b      	ldr	r3, [r7, #0]
 8004896:	685b      	ldr	r3, [r3, #4]
 8004898:	68fa      	ldr	r2, [r7, #12]
 800489a:	4313      	orrs	r3, r2
 800489c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800489e:	687b      	ldr	r3, [r7, #4]
 80048a0:	4a1c      	ldr	r2, [pc, #112]	; (8004914 <TIM_Base_SetConfig+0xb8>)
 80048a2:	4293      	cmp	r3, r2
 80048a4:	d00b      	beq.n	80048be <TIM_Base_SetConfig+0x62>
 80048a6:	687b      	ldr	r3, [r7, #4]
 80048a8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80048ac:	d007      	beq.n	80048be <TIM_Base_SetConfig+0x62>
 80048ae:	687b      	ldr	r3, [r7, #4]
 80048b0:	4a19      	ldr	r2, [pc, #100]	; (8004918 <TIM_Base_SetConfig+0xbc>)
 80048b2:	4293      	cmp	r3, r2
 80048b4:	d003      	beq.n	80048be <TIM_Base_SetConfig+0x62>
 80048b6:	687b      	ldr	r3, [r7, #4]
 80048b8:	4a18      	ldr	r2, [pc, #96]	; (800491c <TIM_Base_SetConfig+0xc0>)
 80048ba:	4293      	cmp	r3, r2
 80048bc:	d108      	bne.n	80048d0 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80048be:	68fb      	ldr	r3, [r7, #12]
 80048c0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80048c4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80048c6:	683b      	ldr	r3, [r7, #0]
 80048c8:	68db      	ldr	r3, [r3, #12]
 80048ca:	68fa      	ldr	r2, [r7, #12]
 80048cc:	4313      	orrs	r3, r2
 80048ce:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80048d0:	68fb      	ldr	r3, [r7, #12]
 80048d2:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80048d6:	683b      	ldr	r3, [r7, #0]
 80048d8:	695b      	ldr	r3, [r3, #20]
 80048da:	4313      	orrs	r3, r2
 80048dc:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80048de:	687b      	ldr	r3, [r7, #4]
 80048e0:	68fa      	ldr	r2, [r7, #12]
 80048e2:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80048e4:	683b      	ldr	r3, [r7, #0]
 80048e6:	689a      	ldr	r2, [r3, #8]
 80048e8:	687b      	ldr	r3, [r7, #4]
 80048ea:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80048ec:	683b      	ldr	r3, [r7, #0]
 80048ee:	681a      	ldr	r2, [r3, #0]
 80048f0:	687b      	ldr	r3, [r7, #4]
 80048f2:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80048f4:	687b      	ldr	r3, [r7, #4]
 80048f6:	4a07      	ldr	r2, [pc, #28]	; (8004914 <TIM_Base_SetConfig+0xb8>)
 80048f8:	4293      	cmp	r3, r2
 80048fa:	d103      	bne.n	8004904 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80048fc:	683b      	ldr	r3, [r7, #0]
 80048fe:	691a      	ldr	r2, [r3, #16]
 8004900:	687b      	ldr	r3, [r7, #4]
 8004902:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004904:	687b      	ldr	r3, [r7, #4]
 8004906:	2201      	movs	r2, #1
 8004908:	615a      	str	r2, [r3, #20]
}
 800490a:	bf00      	nop
 800490c:	3714      	adds	r7, #20
 800490e:	46bd      	mov	sp, r7
 8004910:	bc80      	pop	{r7}
 8004912:	4770      	bx	lr
 8004914:	40012c00 	.word	0x40012c00
 8004918:	40000400 	.word	0x40000400
 800491c:	40000800 	.word	0x40000800

08004920 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004920:	b480      	push	{r7}
 8004922:	b087      	sub	sp, #28
 8004924:	af00      	add	r7, sp, #0
 8004926:	60f8      	str	r0, [r7, #12]
 8004928:	60b9      	str	r1, [r7, #8]
 800492a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800492c:	68fb      	ldr	r3, [r7, #12]
 800492e:	6a1b      	ldr	r3, [r3, #32]
 8004930:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004932:	68fb      	ldr	r3, [r7, #12]
 8004934:	6a1b      	ldr	r3, [r3, #32]
 8004936:	f023 0201 	bic.w	r2, r3, #1
 800493a:	68fb      	ldr	r3, [r7, #12]
 800493c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800493e:	68fb      	ldr	r3, [r7, #12]
 8004940:	699b      	ldr	r3, [r3, #24]
 8004942:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8004944:	693b      	ldr	r3, [r7, #16]
 8004946:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800494a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800494c:	687b      	ldr	r3, [r7, #4]
 800494e:	011b      	lsls	r3, r3, #4
 8004950:	693a      	ldr	r2, [r7, #16]
 8004952:	4313      	orrs	r3, r2
 8004954:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8004956:	697b      	ldr	r3, [r7, #20]
 8004958:	f023 030a 	bic.w	r3, r3, #10
 800495c:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800495e:	697a      	ldr	r2, [r7, #20]
 8004960:	68bb      	ldr	r3, [r7, #8]
 8004962:	4313      	orrs	r3, r2
 8004964:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8004966:	68fb      	ldr	r3, [r7, #12]
 8004968:	693a      	ldr	r2, [r7, #16]
 800496a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800496c:	68fb      	ldr	r3, [r7, #12]
 800496e:	697a      	ldr	r2, [r7, #20]
 8004970:	621a      	str	r2, [r3, #32]
}
 8004972:	bf00      	nop
 8004974:	371c      	adds	r7, #28
 8004976:	46bd      	mov	sp, r7
 8004978:	bc80      	pop	{r7}
 800497a:	4770      	bx	lr

0800497c <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800497c:	b480      	push	{r7}
 800497e:	b087      	sub	sp, #28
 8004980:	af00      	add	r7, sp, #0
 8004982:	60f8      	str	r0, [r7, #12]
 8004984:	60b9      	str	r1, [r7, #8]
 8004986:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004988:	68fb      	ldr	r3, [r7, #12]
 800498a:	6a1b      	ldr	r3, [r3, #32]
 800498c:	f023 0210 	bic.w	r2, r3, #16
 8004990:	68fb      	ldr	r3, [r7, #12]
 8004992:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004994:	68fb      	ldr	r3, [r7, #12]
 8004996:	699b      	ldr	r3, [r3, #24]
 8004998:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800499a:	68fb      	ldr	r3, [r7, #12]
 800499c:	6a1b      	ldr	r3, [r3, #32]
 800499e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80049a0:	697b      	ldr	r3, [r7, #20]
 80049a2:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80049a6:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80049a8:	687b      	ldr	r3, [r7, #4]
 80049aa:	031b      	lsls	r3, r3, #12
 80049ac:	697a      	ldr	r2, [r7, #20]
 80049ae:	4313      	orrs	r3, r2
 80049b0:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80049b2:	693b      	ldr	r3, [r7, #16]
 80049b4:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80049b8:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 80049ba:	68bb      	ldr	r3, [r7, #8]
 80049bc:	011b      	lsls	r3, r3, #4
 80049be:	693a      	ldr	r2, [r7, #16]
 80049c0:	4313      	orrs	r3, r2
 80049c2:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80049c4:	68fb      	ldr	r3, [r7, #12]
 80049c6:	697a      	ldr	r2, [r7, #20]
 80049c8:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80049ca:	68fb      	ldr	r3, [r7, #12]
 80049cc:	693a      	ldr	r2, [r7, #16]
 80049ce:	621a      	str	r2, [r3, #32]
}
 80049d0:	bf00      	nop
 80049d2:	371c      	adds	r7, #28
 80049d4:	46bd      	mov	sp, r7
 80049d6:	bc80      	pop	{r7}
 80049d8:	4770      	bx	lr

080049da <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80049da:	b480      	push	{r7}
 80049dc:	b085      	sub	sp, #20
 80049de:	af00      	add	r7, sp, #0
 80049e0:	6078      	str	r0, [r7, #4]
 80049e2:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80049e4:	687b      	ldr	r3, [r7, #4]
 80049e6:	689b      	ldr	r3, [r3, #8]
 80049e8:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80049ea:	68fb      	ldr	r3, [r7, #12]
 80049ec:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80049f0:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80049f2:	683a      	ldr	r2, [r7, #0]
 80049f4:	68fb      	ldr	r3, [r7, #12]
 80049f6:	4313      	orrs	r3, r2
 80049f8:	f043 0307 	orr.w	r3, r3, #7
 80049fc:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80049fe:	687b      	ldr	r3, [r7, #4]
 8004a00:	68fa      	ldr	r2, [r7, #12]
 8004a02:	609a      	str	r2, [r3, #8]
}
 8004a04:	bf00      	nop
 8004a06:	3714      	adds	r7, #20
 8004a08:	46bd      	mov	sp, r7
 8004a0a:	bc80      	pop	{r7}
 8004a0c:	4770      	bx	lr

08004a0e <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8004a0e:	b480      	push	{r7}
 8004a10:	b087      	sub	sp, #28
 8004a12:	af00      	add	r7, sp, #0
 8004a14:	60f8      	str	r0, [r7, #12]
 8004a16:	60b9      	str	r1, [r7, #8]
 8004a18:	607a      	str	r2, [r7, #4]
 8004a1a:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8004a1c:	68fb      	ldr	r3, [r7, #12]
 8004a1e:	689b      	ldr	r3, [r3, #8]
 8004a20:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004a22:	697b      	ldr	r3, [r7, #20]
 8004a24:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8004a28:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8004a2a:	683b      	ldr	r3, [r7, #0]
 8004a2c:	021a      	lsls	r2, r3, #8
 8004a2e:	687b      	ldr	r3, [r7, #4]
 8004a30:	431a      	orrs	r2, r3
 8004a32:	68bb      	ldr	r3, [r7, #8]
 8004a34:	4313      	orrs	r3, r2
 8004a36:	697a      	ldr	r2, [r7, #20]
 8004a38:	4313      	orrs	r3, r2
 8004a3a:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004a3c:	68fb      	ldr	r3, [r7, #12]
 8004a3e:	697a      	ldr	r2, [r7, #20]
 8004a40:	609a      	str	r2, [r3, #8]
}
 8004a42:	bf00      	nop
 8004a44:	371c      	adds	r7, #28
 8004a46:	46bd      	mov	sp, r7
 8004a48:	bc80      	pop	{r7}
 8004a4a:	4770      	bx	lr

08004a4c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8004a4c:	b480      	push	{r7}
 8004a4e:	b085      	sub	sp, #20
 8004a50:	af00      	add	r7, sp, #0
 8004a52:	6078      	str	r0, [r7, #4]
 8004a54:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8004a56:	687b      	ldr	r3, [r7, #4]
 8004a58:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004a5c:	2b01      	cmp	r3, #1
 8004a5e:	d101      	bne.n	8004a64 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8004a60:	2302      	movs	r3, #2
 8004a62:	e046      	b.n	8004af2 <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 8004a64:	687b      	ldr	r3, [r7, #4]
 8004a66:	2201      	movs	r2, #1
 8004a68:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004a6c:	687b      	ldr	r3, [r7, #4]
 8004a6e:	2202      	movs	r2, #2
 8004a70:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8004a74:	687b      	ldr	r3, [r7, #4]
 8004a76:	681b      	ldr	r3, [r3, #0]
 8004a78:	685b      	ldr	r3, [r3, #4]
 8004a7a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8004a7c:	687b      	ldr	r3, [r7, #4]
 8004a7e:	681b      	ldr	r3, [r3, #0]
 8004a80:	689b      	ldr	r3, [r3, #8]
 8004a82:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8004a84:	68fb      	ldr	r3, [r7, #12]
 8004a86:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004a8a:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8004a8c:	683b      	ldr	r3, [r7, #0]
 8004a8e:	681b      	ldr	r3, [r3, #0]
 8004a90:	68fa      	ldr	r2, [r7, #12]
 8004a92:	4313      	orrs	r3, r2
 8004a94:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8004a96:	687b      	ldr	r3, [r7, #4]
 8004a98:	681b      	ldr	r3, [r3, #0]
 8004a9a:	68fa      	ldr	r2, [r7, #12]
 8004a9c:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004a9e:	687b      	ldr	r3, [r7, #4]
 8004aa0:	681b      	ldr	r3, [r3, #0]
 8004aa2:	4a16      	ldr	r2, [pc, #88]	; (8004afc <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 8004aa4:	4293      	cmp	r3, r2
 8004aa6:	d00e      	beq.n	8004ac6 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8004aa8:	687b      	ldr	r3, [r7, #4]
 8004aaa:	681b      	ldr	r3, [r3, #0]
 8004aac:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004ab0:	d009      	beq.n	8004ac6 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8004ab2:	687b      	ldr	r3, [r7, #4]
 8004ab4:	681b      	ldr	r3, [r3, #0]
 8004ab6:	4a12      	ldr	r2, [pc, #72]	; (8004b00 <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 8004ab8:	4293      	cmp	r3, r2
 8004aba:	d004      	beq.n	8004ac6 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8004abc:	687b      	ldr	r3, [r7, #4]
 8004abe:	681b      	ldr	r3, [r3, #0]
 8004ac0:	4a10      	ldr	r2, [pc, #64]	; (8004b04 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 8004ac2:	4293      	cmp	r3, r2
 8004ac4:	d10c      	bne.n	8004ae0 <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8004ac6:	68bb      	ldr	r3, [r7, #8]
 8004ac8:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004acc:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8004ace:	683b      	ldr	r3, [r7, #0]
 8004ad0:	685b      	ldr	r3, [r3, #4]
 8004ad2:	68ba      	ldr	r2, [r7, #8]
 8004ad4:	4313      	orrs	r3, r2
 8004ad6:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8004ad8:	687b      	ldr	r3, [r7, #4]
 8004ada:	681b      	ldr	r3, [r3, #0]
 8004adc:	68ba      	ldr	r2, [r7, #8]
 8004ade:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8004ae0:	687b      	ldr	r3, [r7, #4]
 8004ae2:	2201      	movs	r2, #1
 8004ae4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004ae8:	687b      	ldr	r3, [r7, #4]
 8004aea:	2200      	movs	r2, #0
 8004aec:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8004af0:	2300      	movs	r3, #0
}
 8004af2:	4618      	mov	r0, r3
 8004af4:	3714      	adds	r7, #20
 8004af6:	46bd      	mov	sp, r7
 8004af8:	bc80      	pop	{r7}
 8004afa:	4770      	bx	lr
 8004afc:	40012c00 	.word	0x40012c00
 8004b00:	40000400 	.word	0x40000400
 8004b04:	40000800 	.word	0x40000800

08004b08 <__errno>:
 8004b08:	4b01      	ldr	r3, [pc, #4]	; (8004b10 <__errno+0x8>)
 8004b0a:	6818      	ldr	r0, [r3, #0]
 8004b0c:	4770      	bx	lr
 8004b0e:	bf00      	nop
 8004b10:	2000000c 	.word	0x2000000c

08004b14 <__libc_init_array>:
 8004b14:	b570      	push	{r4, r5, r6, lr}
 8004b16:	2600      	movs	r6, #0
 8004b18:	4d0c      	ldr	r5, [pc, #48]	; (8004b4c <__libc_init_array+0x38>)
 8004b1a:	4c0d      	ldr	r4, [pc, #52]	; (8004b50 <__libc_init_array+0x3c>)
 8004b1c:	1b64      	subs	r4, r4, r5
 8004b1e:	10a4      	asrs	r4, r4, #2
 8004b20:	42a6      	cmp	r6, r4
 8004b22:	d109      	bne.n	8004b38 <__libc_init_array+0x24>
 8004b24:	f004 fc2a 	bl	800937c <_init>
 8004b28:	2600      	movs	r6, #0
 8004b2a:	4d0a      	ldr	r5, [pc, #40]	; (8004b54 <__libc_init_array+0x40>)
 8004b2c:	4c0a      	ldr	r4, [pc, #40]	; (8004b58 <__libc_init_array+0x44>)
 8004b2e:	1b64      	subs	r4, r4, r5
 8004b30:	10a4      	asrs	r4, r4, #2
 8004b32:	42a6      	cmp	r6, r4
 8004b34:	d105      	bne.n	8004b42 <__libc_init_array+0x2e>
 8004b36:	bd70      	pop	{r4, r5, r6, pc}
 8004b38:	f855 3b04 	ldr.w	r3, [r5], #4
 8004b3c:	4798      	blx	r3
 8004b3e:	3601      	adds	r6, #1
 8004b40:	e7ee      	b.n	8004b20 <__libc_init_array+0xc>
 8004b42:	f855 3b04 	ldr.w	r3, [r5], #4
 8004b46:	4798      	blx	r3
 8004b48:	3601      	adds	r6, #1
 8004b4a:	e7f2      	b.n	8004b32 <__libc_init_array+0x1e>
 8004b4c:	080098b4 	.word	0x080098b4
 8004b50:	080098b4 	.word	0x080098b4
 8004b54:	080098b4 	.word	0x080098b4
 8004b58:	080098b8 	.word	0x080098b8

08004b5c <memset>:
 8004b5c:	4603      	mov	r3, r0
 8004b5e:	4402      	add	r2, r0
 8004b60:	4293      	cmp	r3, r2
 8004b62:	d100      	bne.n	8004b66 <memset+0xa>
 8004b64:	4770      	bx	lr
 8004b66:	f803 1b01 	strb.w	r1, [r3], #1
 8004b6a:	e7f9      	b.n	8004b60 <memset+0x4>

08004b6c <__cvt>:
 8004b6c:	2b00      	cmp	r3, #0
 8004b6e:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004b72:	461f      	mov	r7, r3
 8004b74:	bfbb      	ittet	lt
 8004b76:	f103 4300 	addlt.w	r3, r3, #2147483648	; 0x80000000
 8004b7a:	461f      	movlt	r7, r3
 8004b7c:	2300      	movge	r3, #0
 8004b7e:	232d      	movlt	r3, #45	; 0x2d
 8004b80:	b088      	sub	sp, #32
 8004b82:	4614      	mov	r4, r2
 8004b84:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8004b86:	9d10      	ldr	r5, [sp, #64]	; 0x40
 8004b88:	7013      	strb	r3, [r2, #0]
 8004b8a:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8004b8c:	f8dd a04c 	ldr.w	sl, [sp, #76]	; 0x4c
 8004b90:	f023 0820 	bic.w	r8, r3, #32
 8004b94:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8004b98:	d005      	beq.n	8004ba6 <__cvt+0x3a>
 8004b9a:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 8004b9e:	d100      	bne.n	8004ba2 <__cvt+0x36>
 8004ba0:	3501      	adds	r5, #1
 8004ba2:	2302      	movs	r3, #2
 8004ba4:	e000      	b.n	8004ba8 <__cvt+0x3c>
 8004ba6:	2303      	movs	r3, #3
 8004ba8:	aa07      	add	r2, sp, #28
 8004baa:	9204      	str	r2, [sp, #16]
 8004bac:	aa06      	add	r2, sp, #24
 8004bae:	e9cd a202 	strd	sl, r2, [sp, #8]
 8004bb2:	e9cd 3500 	strd	r3, r5, [sp]
 8004bb6:	4622      	mov	r2, r4
 8004bb8:	463b      	mov	r3, r7
 8004bba:	f001 fda1 	bl	8006700 <_dtoa_r>
 8004bbe:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 8004bc2:	4606      	mov	r6, r0
 8004bc4:	d102      	bne.n	8004bcc <__cvt+0x60>
 8004bc6:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8004bc8:	07db      	lsls	r3, r3, #31
 8004bca:	d522      	bpl.n	8004c12 <__cvt+0xa6>
 8004bcc:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8004bd0:	eb06 0905 	add.w	r9, r6, r5
 8004bd4:	d110      	bne.n	8004bf8 <__cvt+0x8c>
 8004bd6:	7833      	ldrb	r3, [r6, #0]
 8004bd8:	2b30      	cmp	r3, #48	; 0x30
 8004bda:	d10a      	bne.n	8004bf2 <__cvt+0x86>
 8004bdc:	2200      	movs	r2, #0
 8004bde:	2300      	movs	r3, #0
 8004be0:	4620      	mov	r0, r4
 8004be2:	4639      	mov	r1, r7
 8004be4:	f7fb fee0 	bl	80009a8 <__aeabi_dcmpeq>
 8004be8:	b918      	cbnz	r0, 8004bf2 <__cvt+0x86>
 8004bea:	f1c5 0501 	rsb	r5, r5, #1
 8004bee:	f8ca 5000 	str.w	r5, [sl]
 8004bf2:	f8da 3000 	ldr.w	r3, [sl]
 8004bf6:	4499      	add	r9, r3
 8004bf8:	2200      	movs	r2, #0
 8004bfa:	2300      	movs	r3, #0
 8004bfc:	4620      	mov	r0, r4
 8004bfe:	4639      	mov	r1, r7
 8004c00:	f7fb fed2 	bl	80009a8 <__aeabi_dcmpeq>
 8004c04:	b108      	cbz	r0, 8004c0a <__cvt+0x9e>
 8004c06:	f8cd 901c 	str.w	r9, [sp, #28]
 8004c0a:	2230      	movs	r2, #48	; 0x30
 8004c0c:	9b07      	ldr	r3, [sp, #28]
 8004c0e:	454b      	cmp	r3, r9
 8004c10:	d307      	bcc.n	8004c22 <__cvt+0xb6>
 8004c12:	4630      	mov	r0, r6
 8004c14:	9b07      	ldr	r3, [sp, #28]
 8004c16:	9a15      	ldr	r2, [sp, #84]	; 0x54
 8004c18:	1b9b      	subs	r3, r3, r6
 8004c1a:	6013      	str	r3, [r2, #0]
 8004c1c:	b008      	add	sp, #32
 8004c1e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004c22:	1c59      	adds	r1, r3, #1
 8004c24:	9107      	str	r1, [sp, #28]
 8004c26:	701a      	strb	r2, [r3, #0]
 8004c28:	e7f0      	b.n	8004c0c <__cvt+0xa0>

08004c2a <__exponent>:
 8004c2a:	4603      	mov	r3, r0
 8004c2c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8004c2e:	2900      	cmp	r1, #0
 8004c30:	f803 2b02 	strb.w	r2, [r3], #2
 8004c34:	bfb6      	itet	lt
 8004c36:	222d      	movlt	r2, #45	; 0x2d
 8004c38:	222b      	movge	r2, #43	; 0x2b
 8004c3a:	4249      	neglt	r1, r1
 8004c3c:	2909      	cmp	r1, #9
 8004c3e:	7042      	strb	r2, [r0, #1]
 8004c40:	dd2b      	ble.n	8004c9a <__exponent+0x70>
 8004c42:	f10d 0407 	add.w	r4, sp, #7
 8004c46:	46a4      	mov	ip, r4
 8004c48:	270a      	movs	r7, #10
 8004c4a:	fb91 f6f7 	sdiv	r6, r1, r7
 8004c4e:	460a      	mov	r2, r1
 8004c50:	46a6      	mov	lr, r4
 8004c52:	fb07 1516 	mls	r5, r7, r6, r1
 8004c56:	2a63      	cmp	r2, #99	; 0x63
 8004c58:	f105 0530 	add.w	r5, r5, #48	; 0x30
 8004c5c:	4631      	mov	r1, r6
 8004c5e:	f104 34ff 	add.w	r4, r4, #4294967295
 8004c62:	f80e 5c01 	strb.w	r5, [lr, #-1]
 8004c66:	dcf0      	bgt.n	8004c4a <__exponent+0x20>
 8004c68:	3130      	adds	r1, #48	; 0x30
 8004c6a:	f1ae 0502 	sub.w	r5, lr, #2
 8004c6e:	f804 1c01 	strb.w	r1, [r4, #-1]
 8004c72:	4629      	mov	r1, r5
 8004c74:	1c44      	adds	r4, r0, #1
 8004c76:	4561      	cmp	r1, ip
 8004c78:	d30a      	bcc.n	8004c90 <__exponent+0x66>
 8004c7a:	f10d 0209 	add.w	r2, sp, #9
 8004c7e:	eba2 020e 	sub.w	r2, r2, lr
 8004c82:	4565      	cmp	r5, ip
 8004c84:	bf88      	it	hi
 8004c86:	2200      	movhi	r2, #0
 8004c88:	4413      	add	r3, r2
 8004c8a:	1a18      	subs	r0, r3, r0
 8004c8c:	b003      	add	sp, #12
 8004c8e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004c90:	f811 2b01 	ldrb.w	r2, [r1], #1
 8004c94:	f804 2f01 	strb.w	r2, [r4, #1]!
 8004c98:	e7ed      	b.n	8004c76 <__exponent+0x4c>
 8004c9a:	2330      	movs	r3, #48	; 0x30
 8004c9c:	3130      	adds	r1, #48	; 0x30
 8004c9e:	7083      	strb	r3, [r0, #2]
 8004ca0:	70c1      	strb	r1, [r0, #3]
 8004ca2:	1d03      	adds	r3, r0, #4
 8004ca4:	e7f1      	b.n	8004c8a <__exponent+0x60>
	...

08004ca8 <_printf_float>:
 8004ca8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004cac:	b091      	sub	sp, #68	; 0x44
 8004cae:	460c      	mov	r4, r1
 8004cb0:	f8dd 8068 	ldr.w	r8, [sp, #104]	; 0x68
 8004cb4:	4616      	mov	r6, r2
 8004cb6:	461f      	mov	r7, r3
 8004cb8:	4605      	mov	r5, r0
 8004cba:	f002 fe75 	bl	80079a8 <_localeconv_r>
 8004cbe:	6803      	ldr	r3, [r0, #0]
 8004cc0:	4618      	mov	r0, r3
 8004cc2:	9309      	str	r3, [sp, #36]	; 0x24
 8004cc4:	f7fb fa44 	bl	8000150 <strlen>
 8004cc8:	2300      	movs	r3, #0
 8004cca:	930e      	str	r3, [sp, #56]	; 0x38
 8004ccc:	f8d8 3000 	ldr.w	r3, [r8]
 8004cd0:	900a      	str	r0, [sp, #40]	; 0x28
 8004cd2:	3307      	adds	r3, #7
 8004cd4:	f023 0307 	bic.w	r3, r3, #7
 8004cd8:	f103 0208 	add.w	r2, r3, #8
 8004cdc:	f894 9018 	ldrb.w	r9, [r4, #24]
 8004ce0:	f8d4 b000 	ldr.w	fp, [r4]
 8004ce4:	f8c8 2000 	str.w	r2, [r8]
 8004ce8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004cec:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 8004cf0:	e9d4 8a12 	ldrd	r8, sl, [r4, #72]	; 0x48
 8004cf4:	f02a 4300 	bic.w	r3, sl, #2147483648	; 0x80000000
 8004cf8:	930b      	str	r3, [sp, #44]	; 0x2c
 8004cfa:	f04f 32ff 	mov.w	r2, #4294967295
 8004cfe:	4640      	mov	r0, r8
 8004d00:	4b9c      	ldr	r3, [pc, #624]	; (8004f74 <_printf_float+0x2cc>)
 8004d02:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8004d04:	f7fb fe82 	bl	8000a0c <__aeabi_dcmpun>
 8004d08:	bb70      	cbnz	r0, 8004d68 <_printf_float+0xc0>
 8004d0a:	f04f 32ff 	mov.w	r2, #4294967295
 8004d0e:	4640      	mov	r0, r8
 8004d10:	4b98      	ldr	r3, [pc, #608]	; (8004f74 <_printf_float+0x2cc>)
 8004d12:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8004d14:	f7fb fe5c 	bl	80009d0 <__aeabi_dcmple>
 8004d18:	bb30      	cbnz	r0, 8004d68 <_printf_float+0xc0>
 8004d1a:	2200      	movs	r2, #0
 8004d1c:	2300      	movs	r3, #0
 8004d1e:	4640      	mov	r0, r8
 8004d20:	4651      	mov	r1, sl
 8004d22:	f7fb fe4b 	bl	80009bc <__aeabi_dcmplt>
 8004d26:	b110      	cbz	r0, 8004d2e <_printf_float+0x86>
 8004d28:	232d      	movs	r3, #45	; 0x2d
 8004d2a:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004d2e:	4b92      	ldr	r3, [pc, #584]	; (8004f78 <_printf_float+0x2d0>)
 8004d30:	4892      	ldr	r0, [pc, #584]	; (8004f7c <_printf_float+0x2d4>)
 8004d32:	f1b9 0f47 	cmp.w	r9, #71	; 0x47
 8004d36:	bf94      	ite	ls
 8004d38:	4698      	movls	r8, r3
 8004d3a:	4680      	movhi	r8, r0
 8004d3c:	2303      	movs	r3, #3
 8004d3e:	f04f 0a00 	mov.w	sl, #0
 8004d42:	6123      	str	r3, [r4, #16]
 8004d44:	f02b 0304 	bic.w	r3, fp, #4
 8004d48:	6023      	str	r3, [r4, #0]
 8004d4a:	4633      	mov	r3, r6
 8004d4c:	4621      	mov	r1, r4
 8004d4e:	4628      	mov	r0, r5
 8004d50:	9700      	str	r7, [sp, #0]
 8004d52:	aa0f      	add	r2, sp, #60	; 0x3c
 8004d54:	f000 f9d4 	bl	8005100 <_printf_common>
 8004d58:	3001      	adds	r0, #1
 8004d5a:	f040 8090 	bne.w	8004e7e <_printf_float+0x1d6>
 8004d5e:	f04f 30ff 	mov.w	r0, #4294967295
 8004d62:	b011      	add	sp, #68	; 0x44
 8004d64:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004d68:	4642      	mov	r2, r8
 8004d6a:	4653      	mov	r3, sl
 8004d6c:	4640      	mov	r0, r8
 8004d6e:	4651      	mov	r1, sl
 8004d70:	f7fb fe4c 	bl	8000a0c <__aeabi_dcmpun>
 8004d74:	b148      	cbz	r0, 8004d8a <_printf_float+0xe2>
 8004d76:	f1ba 0f00 	cmp.w	sl, #0
 8004d7a:	bfb8      	it	lt
 8004d7c:	232d      	movlt	r3, #45	; 0x2d
 8004d7e:	4880      	ldr	r0, [pc, #512]	; (8004f80 <_printf_float+0x2d8>)
 8004d80:	bfb8      	it	lt
 8004d82:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 8004d86:	4b7f      	ldr	r3, [pc, #508]	; (8004f84 <_printf_float+0x2dc>)
 8004d88:	e7d3      	b.n	8004d32 <_printf_float+0x8a>
 8004d8a:	6863      	ldr	r3, [r4, #4]
 8004d8c:	f009 01df 	and.w	r1, r9, #223	; 0xdf
 8004d90:	1c5a      	adds	r2, r3, #1
 8004d92:	d142      	bne.n	8004e1a <_printf_float+0x172>
 8004d94:	2306      	movs	r3, #6
 8004d96:	6063      	str	r3, [r4, #4]
 8004d98:	2200      	movs	r2, #0
 8004d9a:	9206      	str	r2, [sp, #24]
 8004d9c:	aa0e      	add	r2, sp, #56	; 0x38
 8004d9e:	e9cd 9204 	strd	r9, r2, [sp, #16]
 8004da2:	aa0d      	add	r2, sp, #52	; 0x34
 8004da4:	f44b 6380 	orr.w	r3, fp, #1024	; 0x400
 8004da8:	9203      	str	r2, [sp, #12]
 8004daa:	f10d 0233 	add.w	r2, sp, #51	; 0x33
 8004dae:	e9cd 3201 	strd	r3, r2, [sp, #4]
 8004db2:	6023      	str	r3, [r4, #0]
 8004db4:	6863      	ldr	r3, [r4, #4]
 8004db6:	4642      	mov	r2, r8
 8004db8:	9300      	str	r3, [sp, #0]
 8004dba:	4628      	mov	r0, r5
 8004dbc:	4653      	mov	r3, sl
 8004dbe:	910b      	str	r1, [sp, #44]	; 0x2c
 8004dc0:	f7ff fed4 	bl	8004b6c <__cvt>
 8004dc4:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8004dc6:	4680      	mov	r8, r0
 8004dc8:	2947      	cmp	r1, #71	; 0x47
 8004dca:	990d      	ldr	r1, [sp, #52]	; 0x34
 8004dcc:	d108      	bne.n	8004de0 <_printf_float+0x138>
 8004dce:	1cc8      	adds	r0, r1, #3
 8004dd0:	db02      	blt.n	8004dd8 <_printf_float+0x130>
 8004dd2:	6863      	ldr	r3, [r4, #4]
 8004dd4:	4299      	cmp	r1, r3
 8004dd6:	dd40      	ble.n	8004e5a <_printf_float+0x1b2>
 8004dd8:	f1a9 0902 	sub.w	r9, r9, #2
 8004ddc:	fa5f f989 	uxtb.w	r9, r9
 8004de0:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 8004de4:	d81f      	bhi.n	8004e26 <_printf_float+0x17e>
 8004de6:	464a      	mov	r2, r9
 8004de8:	3901      	subs	r1, #1
 8004dea:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8004dee:	910d      	str	r1, [sp, #52]	; 0x34
 8004df0:	f7ff ff1b 	bl	8004c2a <__exponent>
 8004df4:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8004df6:	4682      	mov	sl, r0
 8004df8:	1813      	adds	r3, r2, r0
 8004dfa:	2a01      	cmp	r2, #1
 8004dfc:	6123      	str	r3, [r4, #16]
 8004dfe:	dc02      	bgt.n	8004e06 <_printf_float+0x15e>
 8004e00:	6822      	ldr	r2, [r4, #0]
 8004e02:	07d2      	lsls	r2, r2, #31
 8004e04:	d501      	bpl.n	8004e0a <_printf_float+0x162>
 8004e06:	3301      	adds	r3, #1
 8004e08:	6123      	str	r3, [r4, #16]
 8004e0a:	f89d 3033 	ldrb.w	r3, [sp, #51]	; 0x33
 8004e0e:	2b00      	cmp	r3, #0
 8004e10:	d09b      	beq.n	8004d4a <_printf_float+0xa2>
 8004e12:	232d      	movs	r3, #45	; 0x2d
 8004e14:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004e18:	e797      	b.n	8004d4a <_printf_float+0xa2>
 8004e1a:	2947      	cmp	r1, #71	; 0x47
 8004e1c:	d1bc      	bne.n	8004d98 <_printf_float+0xf0>
 8004e1e:	2b00      	cmp	r3, #0
 8004e20:	d1ba      	bne.n	8004d98 <_printf_float+0xf0>
 8004e22:	2301      	movs	r3, #1
 8004e24:	e7b7      	b.n	8004d96 <_printf_float+0xee>
 8004e26:	f1b9 0f66 	cmp.w	r9, #102	; 0x66
 8004e2a:	d118      	bne.n	8004e5e <_printf_float+0x1b6>
 8004e2c:	2900      	cmp	r1, #0
 8004e2e:	6863      	ldr	r3, [r4, #4]
 8004e30:	dd0b      	ble.n	8004e4a <_printf_float+0x1a2>
 8004e32:	6121      	str	r1, [r4, #16]
 8004e34:	b913      	cbnz	r3, 8004e3c <_printf_float+0x194>
 8004e36:	6822      	ldr	r2, [r4, #0]
 8004e38:	07d0      	lsls	r0, r2, #31
 8004e3a:	d502      	bpl.n	8004e42 <_printf_float+0x19a>
 8004e3c:	3301      	adds	r3, #1
 8004e3e:	440b      	add	r3, r1
 8004e40:	6123      	str	r3, [r4, #16]
 8004e42:	f04f 0a00 	mov.w	sl, #0
 8004e46:	65a1      	str	r1, [r4, #88]	; 0x58
 8004e48:	e7df      	b.n	8004e0a <_printf_float+0x162>
 8004e4a:	b913      	cbnz	r3, 8004e52 <_printf_float+0x1aa>
 8004e4c:	6822      	ldr	r2, [r4, #0]
 8004e4e:	07d2      	lsls	r2, r2, #31
 8004e50:	d501      	bpl.n	8004e56 <_printf_float+0x1ae>
 8004e52:	3302      	adds	r3, #2
 8004e54:	e7f4      	b.n	8004e40 <_printf_float+0x198>
 8004e56:	2301      	movs	r3, #1
 8004e58:	e7f2      	b.n	8004e40 <_printf_float+0x198>
 8004e5a:	f04f 0967 	mov.w	r9, #103	; 0x67
 8004e5e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8004e60:	4299      	cmp	r1, r3
 8004e62:	db05      	blt.n	8004e70 <_printf_float+0x1c8>
 8004e64:	6823      	ldr	r3, [r4, #0]
 8004e66:	6121      	str	r1, [r4, #16]
 8004e68:	07d8      	lsls	r0, r3, #31
 8004e6a:	d5ea      	bpl.n	8004e42 <_printf_float+0x19a>
 8004e6c:	1c4b      	adds	r3, r1, #1
 8004e6e:	e7e7      	b.n	8004e40 <_printf_float+0x198>
 8004e70:	2900      	cmp	r1, #0
 8004e72:	bfcc      	ite	gt
 8004e74:	2201      	movgt	r2, #1
 8004e76:	f1c1 0202 	rsble	r2, r1, #2
 8004e7a:	4413      	add	r3, r2
 8004e7c:	e7e0      	b.n	8004e40 <_printf_float+0x198>
 8004e7e:	6823      	ldr	r3, [r4, #0]
 8004e80:	055a      	lsls	r2, r3, #21
 8004e82:	d407      	bmi.n	8004e94 <_printf_float+0x1ec>
 8004e84:	6923      	ldr	r3, [r4, #16]
 8004e86:	4642      	mov	r2, r8
 8004e88:	4631      	mov	r1, r6
 8004e8a:	4628      	mov	r0, r5
 8004e8c:	47b8      	blx	r7
 8004e8e:	3001      	adds	r0, #1
 8004e90:	d12b      	bne.n	8004eea <_printf_float+0x242>
 8004e92:	e764      	b.n	8004d5e <_printf_float+0xb6>
 8004e94:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 8004e98:	f240 80dd 	bls.w	8005056 <_printf_float+0x3ae>
 8004e9c:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8004ea0:	2200      	movs	r2, #0
 8004ea2:	2300      	movs	r3, #0
 8004ea4:	f7fb fd80 	bl	80009a8 <__aeabi_dcmpeq>
 8004ea8:	2800      	cmp	r0, #0
 8004eaa:	d033      	beq.n	8004f14 <_printf_float+0x26c>
 8004eac:	2301      	movs	r3, #1
 8004eae:	4631      	mov	r1, r6
 8004eb0:	4628      	mov	r0, r5
 8004eb2:	4a35      	ldr	r2, [pc, #212]	; (8004f88 <_printf_float+0x2e0>)
 8004eb4:	47b8      	blx	r7
 8004eb6:	3001      	adds	r0, #1
 8004eb8:	f43f af51 	beq.w	8004d5e <_printf_float+0xb6>
 8004ebc:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 8004ec0:	429a      	cmp	r2, r3
 8004ec2:	db02      	blt.n	8004eca <_printf_float+0x222>
 8004ec4:	6823      	ldr	r3, [r4, #0]
 8004ec6:	07d8      	lsls	r0, r3, #31
 8004ec8:	d50f      	bpl.n	8004eea <_printf_float+0x242>
 8004eca:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8004ece:	4631      	mov	r1, r6
 8004ed0:	4628      	mov	r0, r5
 8004ed2:	47b8      	blx	r7
 8004ed4:	3001      	adds	r0, #1
 8004ed6:	f43f af42 	beq.w	8004d5e <_printf_float+0xb6>
 8004eda:	f04f 0800 	mov.w	r8, #0
 8004ede:	f104 091a 	add.w	r9, r4, #26
 8004ee2:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8004ee4:	3b01      	subs	r3, #1
 8004ee6:	4543      	cmp	r3, r8
 8004ee8:	dc09      	bgt.n	8004efe <_printf_float+0x256>
 8004eea:	6823      	ldr	r3, [r4, #0]
 8004eec:	079b      	lsls	r3, r3, #30
 8004eee:	f100 8102 	bmi.w	80050f6 <_printf_float+0x44e>
 8004ef2:	68e0      	ldr	r0, [r4, #12]
 8004ef4:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8004ef6:	4298      	cmp	r0, r3
 8004ef8:	bfb8      	it	lt
 8004efa:	4618      	movlt	r0, r3
 8004efc:	e731      	b.n	8004d62 <_printf_float+0xba>
 8004efe:	2301      	movs	r3, #1
 8004f00:	464a      	mov	r2, r9
 8004f02:	4631      	mov	r1, r6
 8004f04:	4628      	mov	r0, r5
 8004f06:	47b8      	blx	r7
 8004f08:	3001      	adds	r0, #1
 8004f0a:	f43f af28 	beq.w	8004d5e <_printf_float+0xb6>
 8004f0e:	f108 0801 	add.w	r8, r8, #1
 8004f12:	e7e6      	b.n	8004ee2 <_printf_float+0x23a>
 8004f14:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8004f16:	2b00      	cmp	r3, #0
 8004f18:	dc38      	bgt.n	8004f8c <_printf_float+0x2e4>
 8004f1a:	2301      	movs	r3, #1
 8004f1c:	4631      	mov	r1, r6
 8004f1e:	4628      	mov	r0, r5
 8004f20:	4a19      	ldr	r2, [pc, #100]	; (8004f88 <_printf_float+0x2e0>)
 8004f22:	47b8      	blx	r7
 8004f24:	3001      	adds	r0, #1
 8004f26:	f43f af1a 	beq.w	8004d5e <_printf_float+0xb6>
 8004f2a:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 8004f2e:	4313      	orrs	r3, r2
 8004f30:	d102      	bne.n	8004f38 <_printf_float+0x290>
 8004f32:	6823      	ldr	r3, [r4, #0]
 8004f34:	07d9      	lsls	r1, r3, #31
 8004f36:	d5d8      	bpl.n	8004eea <_printf_float+0x242>
 8004f38:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8004f3c:	4631      	mov	r1, r6
 8004f3e:	4628      	mov	r0, r5
 8004f40:	47b8      	blx	r7
 8004f42:	3001      	adds	r0, #1
 8004f44:	f43f af0b 	beq.w	8004d5e <_printf_float+0xb6>
 8004f48:	f04f 0900 	mov.w	r9, #0
 8004f4c:	f104 0a1a 	add.w	sl, r4, #26
 8004f50:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8004f52:	425b      	negs	r3, r3
 8004f54:	454b      	cmp	r3, r9
 8004f56:	dc01      	bgt.n	8004f5c <_printf_float+0x2b4>
 8004f58:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8004f5a:	e794      	b.n	8004e86 <_printf_float+0x1de>
 8004f5c:	2301      	movs	r3, #1
 8004f5e:	4652      	mov	r2, sl
 8004f60:	4631      	mov	r1, r6
 8004f62:	4628      	mov	r0, r5
 8004f64:	47b8      	blx	r7
 8004f66:	3001      	adds	r0, #1
 8004f68:	f43f aef9 	beq.w	8004d5e <_printf_float+0xb6>
 8004f6c:	f109 0901 	add.w	r9, r9, #1
 8004f70:	e7ee      	b.n	8004f50 <_printf_float+0x2a8>
 8004f72:	bf00      	nop
 8004f74:	7fefffff 	.word	0x7fefffff
 8004f78:	08009400 	.word	0x08009400
 8004f7c:	08009404 	.word	0x08009404
 8004f80:	0800940c 	.word	0x0800940c
 8004f84:	08009408 	.word	0x08009408
 8004f88:	08009410 	.word	0x08009410
 8004f8c:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8004f8e:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8004f90:	429a      	cmp	r2, r3
 8004f92:	bfa8      	it	ge
 8004f94:	461a      	movge	r2, r3
 8004f96:	2a00      	cmp	r2, #0
 8004f98:	4691      	mov	r9, r2
 8004f9a:	dc37      	bgt.n	800500c <_printf_float+0x364>
 8004f9c:	f04f 0b00 	mov.w	fp, #0
 8004fa0:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8004fa4:	f104 021a 	add.w	r2, r4, #26
 8004fa8:	f8d4 a058 	ldr.w	sl, [r4, #88]	; 0x58
 8004fac:	ebaa 0309 	sub.w	r3, sl, r9
 8004fb0:	455b      	cmp	r3, fp
 8004fb2:	dc33      	bgt.n	800501c <_printf_float+0x374>
 8004fb4:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 8004fb8:	429a      	cmp	r2, r3
 8004fba:	db3b      	blt.n	8005034 <_printf_float+0x38c>
 8004fbc:	6823      	ldr	r3, [r4, #0]
 8004fbe:	07da      	lsls	r2, r3, #31
 8004fc0:	d438      	bmi.n	8005034 <_printf_float+0x38c>
 8004fc2:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8004fc4:	990d      	ldr	r1, [sp, #52]	; 0x34
 8004fc6:	eba2 030a 	sub.w	r3, r2, sl
 8004fca:	eba2 0901 	sub.w	r9, r2, r1
 8004fce:	4599      	cmp	r9, r3
 8004fd0:	bfa8      	it	ge
 8004fd2:	4699      	movge	r9, r3
 8004fd4:	f1b9 0f00 	cmp.w	r9, #0
 8004fd8:	dc34      	bgt.n	8005044 <_printf_float+0x39c>
 8004fda:	f04f 0800 	mov.w	r8, #0
 8004fde:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8004fe2:	f104 0a1a 	add.w	sl, r4, #26
 8004fe6:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 8004fea:	1a9b      	subs	r3, r3, r2
 8004fec:	eba3 0309 	sub.w	r3, r3, r9
 8004ff0:	4543      	cmp	r3, r8
 8004ff2:	f77f af7a 	ble.w	8004eea <_printf_float+0x242>
 8004ff6:	2301      	movs	r3, #1
 8004ff8:	4652      	mov	r2, sl
 8004ffa:	4631      	mov	r1, r6
 8004ffc:	4628      	mov	r0, r5
 8004ffe:	47b8      	blx	r7
 8005000:	3001      	adds	r0, #1
 8005002:	f43f aeac 	beq.w	8004d5e <_printf_float+0xb6>
 8005006:	f108 0801 	add.w	r8, r8, #1
 800500a:	e7ec      	b.n	8004fe6 <_printf_float+0x33e>
 800500c:	4613      	mov	r3, r2
 800500e:	4631      	mov	r1, r6
 8005010:	4642      	mov	r2, r8
 8005012:	4628      	mov	r0, r5
 8005014:	47b8      	blx	r7
 8005016:	3001      	adds	r0, #1
 8005018:	d1c0      	bne.n	8004f9c <_printf_float+0x2f4>
 800501a:	e6a0      	b.n	8004d5e <_printf_float+0xb6>
 800501c:	2301      	movs	r3, #1
 800501e:	4631      	mov	r1, r6
 8005020:	4628      	mov	r0, r5
 8005022:	920b      	str	r2, [sp, #44]	; 0x2c
 8005024:	47b8      	blx	r7
 8005026:	3001      	adds	r0, #1
 8005028:	f43f ae99 	beq.w	8004d5e <_printf_float+0xb6>
 800502c:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800502e:	f10b 0b01 	add.w	fp, fp, #1
 8005032:	e7b9      	b.n	8004fa8 <_printf_float+0x300>
 8005034:	4631      	mov	r1, r6
 8005036:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800503a:	4628      	mov	r0, r5
 800503c:	47b8      	blx	r7
 800503e:	3001      	adds	r0, #1
 8005040:	d1bf      	bne.n	8004fc2 <_printf_float+0x31a>
 8005042:	e68c      	b.n	8004d5e <_printf_float+0xb6>
 8005044:	464b      	mov	r3, r9
 8005046:	4631      	mov	r1, r6
 8005048:	4628      	mov	r0, r5
 800504a:	eb08 020a 	add.w	r2, r8, sl
 800504e:	47b8      	blx	r7
 8005050:	3001      	adds	r0, #1
 8005052:	d1c2      	bne.n	8004fda <_printf_float+0x332>
 8005054:	e683      	b.n	8004d5e <_printf_float+0xb6>
 8005056:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8005058:	2a01      	cmp	r2, #1
 800505a:	dc01      	bgt.n	8005060 <_printf_float+0x3b8>
 800505c:	07db      	lsls	r3, r3, #31
 800505e:	d537      	bpl.n	80050d0 <_printf_float+0x428>
 8005060:	2301      	movs	r3, #1
 8005062:	4642      	mov	r2, r8
 8005064:	4631      	mov	r1, r6
 8005066:	4628      	mov	r0, r5
 8005068:	47b8      	blx	r7
 800506a:	3001      	adds	r0, #1
 800506c:	f43f ae77 	beq.w	8004d5e <_printf_float+0xb6>
 8005070:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8005074:	4631      	mov	r1, r6
 8005076:	4628      	mov	r0, r5
 8005078:	47b8      	blx	r7
 800507a:	3001      	adds	r0, #1
 800507c:	f43f ae6f 	beq.w	8004d5e <_printf_float+0xb6>
 8005080:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8005084:	2200      	movs	r2, #0
 8005086:	2300      	movs	r3, #0
 8005088:	f7fb fc8e 	bl	80009a8 <__aeabi_dcmpeq>
 800508c:	b9d8      	cbnz	r0, 80050c6 <_printf_float+0x41e>
 800508e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8005090:	f108 0201 	add.w	r2, r8, #1
 8005094:	3b01      	subs	r3, #1
 8005096:	4631      	mov	r1, r6
 8005098:	4628      	mov	r0, r5
 800509a:	47b8      	blx	r7
 800509c:	3001      	adds	r0, #1
 800509e:	d10e      	bne.n	80050be <_printf_float+0x416>
 80050a0:	e65d      	b.n	8004d5e <_printf_float+0xb6>
 80050a2:	2301      	movs	r3, #1
 80050a4:	464a      	mov	r2, r9
 80050a6:	4631      	mov	r1, r6
 80050a8:	4628      	mov	r0, r5
 80050aa:	47b8      	blx	r7
 80050ac:	3001      	adds	r0, #1
 80050ae:	f43f ae56 	beq.w	8004d5e <_printf_float+0xb6>
 80050b2:	f108 0801 	add.w	r8, r8, #1
 80050b6:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80050b8:	3b01      	subs	r3, #1
 80050ba:	4543      	cmp	r3, r8
 80050bc:	dcf1      	bgt.n	80050a2 <_printf_float+0x3fa>
 80050be:	4653      	mov	r3, sl
 80050c0:	f104 0250 	add.w	r2, r4, #80	; 0x50
 80050c4:	e6e0      	b.n	8004e88 <_printf_float+0x1e0>
 80050c6:	f04f 0800 	mov.w	r8, #0
 80050ca:	f104 091a 	add.w	r9, r4, #26
 80050ce:	e7f2      	b.n	80050b6 <_printf_float+0x40e>
 80050d0:	2301      	movs	r3, #1
 80050d2:	4642      	mov	r2, r8
 80050d4:	e7df      	b.n	8005096 <_printf_float+0x3ee>
 80050d6:	2301      	movs	r3, #1
 80050d8:	464a      	mov	r2, r9
 80050da:	4631      	mov	r1, r6
 80050dc:	4628      	mov	r0, r5
 80050de:	47b8      	blx	r7
 80050e0:	3001      	adds	r0, #1
 80050e2:	f43f ae3c 	beq.w	8004d5e <_printf_float+0xb6>
 80050e6:	f108 0801 	add.w	r8, r8, #1
 80050ea:	68e3      	ldr	r3, [r4, #12]
 80050ec:	990f      	ldr	r1, [sp, #60]	; 0x3c
 80050ee:	1a5b      	subs	r3, r3, r1
 80050f0:	4543      	cmp	r3, r8
 80050f2:	dcf0      	bgt.n	80050d6 <_printf_float+0x42e>
 80050f4:	e6fd      	b.n	8004ef2 <_printf_float+0x24a>
 80050f6:	f04f 0800 	mov.w	r8, #0
 80050fa:	f104 0919 	add.w	r9, r4, #25
 80050fe:	e7f4      	b.n	80050ea <_printf_float+0x442>

08005100 <_printf_common>:
 8005100:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005104:	4616      	mov	r6, r2
 8005106:	4699      	mov	r9, r3
 8005108:	688a      	ldr	r2, [r1, #8]
 800510a:	690b      	ldr	r3, [r1, #16]
 800510c:	4607      	mov	r7, r0
 800510e:	4293      	cmp	r3, r2
 8005110:	bfb8      	it	lt
 8005112:	4613      	movlt	r3, r2
 8005114:	6033      	str	r3, [r6, #0]
 8005116:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800511a:	460c      	mov	r4, r1
 800511c:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8005120:	b10a      	cbz	r2, 8005126 <_printf_common+0x26>
 8005122:	3301      	adds	r3, #1
 8005124:	6033      	str	r3, [r6, #0]
 8005126:	6823      	ldr	r3, [r4, #0]
 8005128:	0699      	lsls	r1, r3, #26
 800512a:	bf42      	ittt	mi
 800512c:	6833      	ldrmi	r3, [r6, #0]
 800512e:	3302      	addmi	r3, #2
 8005130:	6033      	strmi	r3, [r6, #0]
 8005132:	6825      	ldr	r5, [r4, #0]
 8005134:	f015 0506 	ands.w	r5, r5, #6
 8005138:	d106      	bne.n	8005148 <_printf_common+0x48>
 800513a:	f104 0a19 	add.w	sl, r4, #25
 800513e:	68e3      	ldr	r3, [r4, #12]
 8005140:	6832      	ldr	r2, [r6, #0]
 8005142:	1a9b      	subs	r3, r3, r2
 8005144:	42ab      	cmp	r3, r5
 8005146:	dc28      	bgt.n	800519a <_printf_common+0x9a>
 8005148:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800514c:	1e13      	subs	r3, r2, #0
 800514e:	6822      	ldr	r2, [r4, #0]
 8005150:	bf18      	it	ne
 8005152:	2301      	movne	r3, #1
 8005154:	0692      	lsls	r2, r2, #26
 8005156:	d42d      	bmi.n	80051b4 <_printf_common+0xb4>
 8005158:	4649      	mov	r1, r9
 800515a:	4638      	mov	r0, r7
 800515c:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8005160:	47c0      	blx	r8
 8005162:	3001      	adds	r0, #1
 8005164:	d020      	beq.n	80051a8 <_printf_common+0xa8>
 8005166:	6823      	ldr	r3, [r4, #0]
 8005168:	68e5      	ldr	r5, [r4, #12]
 800516a:	f003 0306 	and.w	r3, r3, #6
 800516e:	2b04      	cmp	r3, #4
 8005170:	bf18      	it	ne
 8005172:	2500      	movne	r5, #0
 8005174:	6832      	ldr	r2, [r6, #0]
 8005176:	f04f 0600 	mov.w	r6, #0
 800517a:	68a3      	ldr	r3, [r4, #8]
 800517c:	bf08      	it	eq
 800517e:	1aad      	subeq	r5, r5, r2
 8005180:	6922      	ldr	r2, [r4, #16]
 8005182:	bf08      	it	eq
 8005184:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8005188:	4293      	cmp	r3, r2
 800518a:	bfc4      	itt	gt
 800518c:	1a9b      	subgt	r3, r3, r2
 800518e:	18ed      	addgt	r5, r5, r3
 8005190:	341a      	adds	r4, #26
 8005192:	42b5      	cmp	r5, r6
 8005194:	d11a      	bne.n	80051cc <_printf_common+0xcc>
 8005196:	2000      	movs	r0, #0
 8005198:	e008      	b.n	80051ac <_printf_common+0xac>
 800519a:	2301      	movs	r3, #1
 800519c:	4652      	mov	r2, sl
 800519e:	4649      	mov	r1, r9
 80051a0:	4638      	mov	r0, r7
 80051a2:	47c0      	blx	r8
 80051a4:	3001      	adds	r0, #1
 80051a6:	d103      	bne.n	80051b0 <_printf_common+0xb0>
 80051a8:	f04f 30ff 	mov.w	r0, #4294967295
 80051ac:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80051b0:	3501      	adds	r5, #1
 80051b2:	e7c4      	b.n	800513e <_printf_common+0x3e>
 80051b4:	2030      	movs	r0, #48	; 0x30
 80051b6:	18e1      	adds	r1, r4, r3
 80051b8:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80051bc:	1c5a      	adds	r2, r3, #1
 80051be:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80051c2:	4422      	add	r2, r4
 80051c4:	3302      	adds	r3, #2
 80051c6:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80051ca:	e7c5      	b.n	8005158 <_printf_common+0x58>
 80051cc:	2301      	movs	r3, #1
 80051ce:	4622      	mov	r2, r4
 80051d0:	4649      	mov	r1, r9
 80051d2:	4638      	mov	r0, r7
 80051d4:	47c0      	blx	r8
 80051d6:	3001      	adds	r0, #1
 80051d8:	d0e6      	beq.n	80051a8 <_printf_common+0xa8>
 80051da:	3601      	adds	r6, #1
 80051dc:	e7d9      	b.n	8005192 <_printf_common+0x92>
	...

080051e0 <_printf_i>:
 80051e0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80051e4:	460c      	mov	r4, r1
 80051e6:	7e27      	ldrb	r7, [r4, #24]
 80051e8:	4691      	mov	r9, r2
 80051ea:	2f78      	cmp	r7, #120	; 0x78
 80051ec:	4680      	mov	r8, r0
 80051ee:	469a      	mov	sl, r3
 80051f0:	990c      	ldr	r1, [sp, #48]	; 0x30
 80051f2:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80051f6:	d807      	bhi.n	8005208 <_printf_i+0x28>
 80051f8:	2f62      	cmp	r7, #98	; 0x62
 80051fa:	d80a      	bhi.n	8005212 <_printf_i+0x32>
 80051fc:	2f00      	cmp	r7, #0
 80051fe:	f000 80d9 	beq.w	80053b4 <_printf_i+0x1d4>
 8005202:	2f58      	cmp	r7, #88	; 0x58
 8005204:	f000 80a4 	beq.w	8005350 <_printf_i+0x170>
 8005208:	f104 0642 	add.w	r6, r4, #66	; 0x42
 800520c:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8005210:	e03a      	b.n	8005288 <_printf_i+0xa8>
 8005212:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8005216:	2b15      	cmp	r3, #21
 8005218:	d8f6      	bhi.n	8005208 <_printf_i+0x28>
 800521a:	a001      	add	r0, pc, #4	; (adr r0, 8005220 <_printf_i+0x40>)
 800521c:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 8005220:	08005279 	.word	0x08005279
 8005224:	0800528d 	.word	0x0800528d
 8005228:	08005209 	.word	0x08005209
 800522c:	08005209 	.word	0x08005209
 8005230:	08005209 	.word	0x08005209
 8005234:	08005209 	.word	0x08005209
 8005238:	0800528d 	.word	0x0800528d
 800523c:	08005209 	.word	0x08005209
 8005240:	08005209 	.word	0x08005209
 8005244:	08005209 	.word	0x08005209
 8005248:	08005209 	.word	0x08005209
 800524c:	0800539b 	.word	0x0800539b
 8005250:	080052bd 	.word	0x080052bd
 8005254:	0800537d 	.word	0x0800537d
 8005258:	08005209 	.word	0x08005209
 800525c:	08005209 	.word	0x08005209
 8005260:	080053bd 	.word	0x080053bd
 8005264:	08005209 	.word	0x08005209
 8005268:	080052bd 	.word	0x080052bd
 800526c:	08005209 	.word	0x08005209
 8005270:	08005209 	.word	0x08005209
 8005274:	08005385 	.word	0x08005385
 8005278:	680b      	ldr	r3, [r1, #0]
 800527a:	f104 0642 	add.w	r6, r4, #66	; 0x42
 800527e:	1d1a      	adds	r2, r3, #4
 8005280:	681b      	ldr	r3, [r3, #0]
 8005282:	600a      	str	r2, [r1, #0]
 8005284:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8005288:	2301      	movs	r3, #1
 800528a:	e0a4      	b.n	80053d6 <_printf_i+0x1f6>
 800528c:	6825      	ldr	r5, [r4, #0]
 800528e:	6808      	ldr	r0, [r1, #0]
 8005290:	062e      	lsls	r6, r5, #24
 8005292:	f100 0304 	add.w	r3, r0, #4
 8005296:	d50a      	bpl.n	80052ae <_printf_i+0xce>
 8005298:	6805      	ldr	r5, [r0, #0]
 800529a:	600b      	str	r3, [r1, #0]
 800529c:	2d00      	cmp	r5, #0
 800529e:	da03      	bge.n	80052a8 <_printf_i+0xc8>
 80052a0:	232d      	movs	r3, #45	; 0x2d
 80052a2:	426d      	negs	r5, r5
 80052a4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80052a8:	230a      	movs	r3, #10
 80052aa:	485e      	ldr	r0, [pc, #376]	; (8005424 <_printf_i+0x244>)
 80052ac:	e019      	b.n	80052e2 <_printf_i+0x102>
 80052ae:	f015 0f40 	tst.w	r5, #64	; 0x40
 80052b2:	6805      	ldr	r5, [r0, #0]
 80052b4:	600b      	str	r3, [r1, #0]
 80052b6:	bf18      	it	ne
 80052b8:	b22d      	sxthne	r5, r5
 80052ba:	e7ef      	b.n	800529c <_printf_i+0xbc>
 80052bc:	680b      	ldr	r3, [r1, #0]
 80052be:	6825      	ldr	r5, [r4, #0]
 80052c0:	1d18      	adds	r0, r3, #4
 80052c2:	6008      	str	r0, [r1, #0]
 80052c4:	0628      	lsls	r0, r5, #24
 80052c6:	d501      	bpl.n	80052cc <_printf_i+0xec>
 80052c8:	681d      	ldr	r5, [r3, #0]
 80052ca:	e002      	b.n	80052d2 <_printf_i+0xf2>
 80052cc:	0669      	lsls	r1, r5, #25
 80052ce:	d5fb      	bpl.n	80052c8 <_printf_i+0xe8>
 80052d0:	881d      	ldrh	r5, [r3, #0]
 80052d2:	2f6f      	cmp	r7, #111	; 0x6f
 80052d4:	bf0c      	ite	eq
 80052d6:	2308      	moveq	r3, #8
 80052d8:	230a      	movne	r3, #10
 80052da:	4852      	ldr	r0, [pc, #328]	; (8005424 <_printf_i+0x244>)
 80052dc:	2100      	movs	r1, #0
 80052de:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80052e2:	6866      	ldr	r6, [r4, #4]
 80052e4:	2e00      	cmp	r6, #0
 80052e6:	bfa8      	it	ge
 80052e8:	6821      	ldrge	r1, [r4, #0]
 80052ea:	60a6      	str	r6, [r4, #8]
 80052ec:	bfa4      	itt	ge
 80052ee:	f021 0104 	bicge.w	r1, r1, #4
 80052f2:	6021      	strge	r1, [r4, #0]
 80052f4:	b90d      	cbnz	r5, 80052fa <_printf_i+0x11a>
 80052f6:	2e00      	cmp	r6, #0
 80052f8:	d04d      	beq.n	8005396 <_printf_i+0x1b6>
 80052fa:	4616      	mov	r6, r2
 80052fc:	fbb5 f1f3 	udiv	r1, r5, r3
 8005300:	fb03 5711 	mls	r7, r3, r1, r5
 8005304:	5dc7      	ldrb	r7, [r0, r7]
 8005306:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800530a:	462f      	mov	r7, r5
 800530c:	42bb      	cmp	r3, r7
 800530e:	460d      	mov	r5, r1
 8005310:	d9f4      	bls.n	80052fc <_printf_i+0x11c>
 8005312:	2b08      	cmp	r3, #8
 8005314:	d10b      	bne.n	800532e <_printf_i+0x14e>
 8005316:	6823      	ldr	r3, [r4, #0]
 8005318:	07df      	lsls	r7, r3, #31
 800531a:	d508      	bpl.n	800532e <_printf_i+0x14e>
 800531c:	6923      	ldr	r3, [r4, #16]
 800531e:	6861      	ldr	r1, [r4, #4]
 8005320:	4299      	cmp	r1, r3
 8005322:	bfde      	ittt	le
 8005324:	2330      	movle	r3, #48	; 0x30
 8005326:	f806 3c01 	strble.w	r3, [r6, #-1]
 800532a:	f106 36ff 	addle.w	r6, r6, #4294967295
 800532e:	1b92      	subs	r2, r2, r6
 8005330:	6122      	str	r2, [r4, #16]
 8005332:	464b      	mov	r3, r9
 8005334:	4621      	mov	r1, r4
 8005336:	4640      	mov	r0, r8
 8005338:	f8cd a000 	str.w	sl, [sp]
 800533c:	aa03      	add	r2, sp, #12
 800533e:	f7ff fedf 	bl	8005100 <_printf_common>
 8005342:	3001      	adds	r0, #1
 8005344:	d14c      	bne.n	80053e0 <_printf_i+0x200>
 8005346:	f04f 30ff 	mov.w	r0, #4294967295
 800534a:	b004      	add	sp, #16
 800534c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005350:	4834      	ldr	r0, [pc, #208]	; (8005424 <_printf_i+0x244>)
 8005352:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8005356:	680e      	ldr	r6, [r1, #0]
 8005358:	6823      	ldr	r3, [r4, #0]
 800535a:	f856 5b04 	ldr.w	r5, [r6], #4
 800535e:	061f      	lsls	r7, r3, #24
 8005360:	600e      	str	r6, [r1, #0]
 8005362:	d514      	bpl.n	800538e <_printf_i+0x1ae>
 8005364:	07d9      	lsls	r1, r3, #31
 8005366:	bf44      	itt	mi
 8005368:	f043 0320 	orrmi.w	r3, r3, #32
 800536c:	6023      	strmi	r3, [r4, #0]
 800536e:	b91d      	cbnz	r5, 8005378 <_printf_i+0x198>
 8005370:	6823      	ldr	r3, [r4, #0]
 8005372:	f023 0320 	bic.w	r3, r3, #32
 8005376:	6023      	str	r3, [r4, #0]
 8005378:	2310      	movs	r3, #16
 800537a:	e7af      	b.n	80052dc <_printf_i+0xfc>
 800537c:	6823      	ldr	r3, [r4, #0]
 800537e:	f043 0320 	orr.w	r3, r3, #32
 8005382:	6023      	str	r3, [r4, #0]
 8005384:	2378      	movs	r3, #120	; 0x78
 8005386:	4828      	ldr	r0, [pc, #160]	; (8005428 <_printf_i+0x248>)
 8005388:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800538c:	e7e3      	b.n	8005356 <_printf_i+0x176>
 800538e:	065e      	lsls	r6, r3, #25
 8005390:	bf48      	it	mi
 8005392:	b2ad      	uxthmi	r5, r5
 8005394:	e7e6      	b.n	8005364 <_printf_i+0x184>
 8005396:	4616      	mov	r6, r2
 8005398:	e7bb      	b.n	8005312 <_printf_i+0x132>
 800539a:	680b      	ldr	r3, [r1, #0]
 800539c:	6826      	ldr	r6, [r4, #0]
 800539e:	1d1d      	adds	r5, r3, #4
 80053a0:	6960      	ldr	r0, [r4, #20]
 80053a2:	600d      	str	r5, [r1, #0]
 80053a4:	0635      	lsls	r5, r6, #24
 80053a6:	681b      	ldr	r3, [r3, #0]
 80053a8:	d501      	bpl.n	80053ae <_printf_i+0x1ce>
 80053aa:	6018      	str	r0, [r3, #0]
 80053ac:	e002      	b.n	80053b4 <_printf_i+0x1d4>
 80053ae:	0671      	lsls	r1, r6, #25
 80053b0:	d5fb      	bpl.n	80053aa <_printf_i+0x1ca>
 80053b2:	8018      	strh	r0, [r3, #0]
 80053b4:	2300      	movs	r3, #0
 80053b6:	4616      	mov	r6, r2
 80053b8:	6123      	str	r3, [r4, #16]
 80053ba:	e7ba      	b.n	8005332 <_printf_i+0x152>
 80053bc:	680b      	ldr	r3, [r1, #0]
 80053be:	1d1a      	adds	r2, r3, #4
 80053c0:	600a      	str	r2, [r1, #0]
 80053c2:	681e      	ldr	r6, [r3, #0]
 80053c4:	2100      	movs	r1, #0
 80053c6:	4630      	mov	r0, r6
 80053c8:	6862      	ldr	r2, [r4, #4]
 80053ca:	f002 fb0b 	bl	80079e4 <memchr>
 80053ce:	b108      	cbz	r0, 80053d4 <_printf_i+0x1f4>
 80053d0:	1b80      	subs	r0, r0, r6
 80053d2:	6060      	str	r0, [r4, #4]
 80053d4:	6863      	ldr	r3, [r4, #4]
 80053d6:	6123      	str	r3, [r4, #16]
 80053d8:	2300      	movs	r3, #0
 80053da:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80053de:	e7a8      	b.n	8005332 <_printf_i+0x152>
 80053e0:	4632      	mov	r2, r6
 80053e2:	4649      	mov	r1, r9
 80053e4:	4640      	mov	r0, r8
 80053e6:	6923      	ldr	r3, [r4, #16]
 80053e8:	47d0      	blx	sl
 80053ea:	3001      	adds	r0, #1
 80053ec:	d0ab      	beq.n	8005346 <_printf_i+0x166>
 80053ee:	6823      	ldr	r3, [r4, #0]
 80053f0:	079b      	lsls	r3, r3, #30
 80053f2:	d413      	bmi.n	800541c <_printf_i+0x23c>
 80053f4:	68e0      	ldr	r0, [r4, #12]
 80053f6:	9b03      	ldr	r3, [sp, #12]
 80053f8:	4298      	cmp	r0, r3
 80053fa:	bfb8      	it	lt
 80053fc:	4618      	movlt	r0, r3
 80053fe:	e7a4      	b.n	800534a <_printf_i+0x16a>
 8005400:	2301      	movs	r3, #1
 8005402:	4632      	mov	r2, r6
 8005404:	4649      	mov	r1, r9
 8005406:	4640      	mov	r0, r8
 8005408:	47d0      	blx	sl
 800540a:	3001      	adds	r0, #1
 800540c:	d09b      	beq.n	8005346 <_printf_i+0x166>
 800540e:	3501      	adds	r5, #1
 8005410:	68e3      	ldr	r3, [r4, #12]
 8005412:	9903      	ldr	r1, [sp, #12]
 8005414:	1a5b      	subs	r3, r3, r1
 8005416:	42ab      	cmp	r3, r5
 8005418:	dcf2      	bgt.n	8005400 <_printf_i+0x220>
 800541a:	e7eb      	b.n	80053f4 <_printf_i+0x214>
 800541c:	2500      	movs	r5, #0
 800541e:	f104 0619 	add.w	r6, r4, #25
 8005422:	e7f5      	b.n	8005410 <_printf_i+0x230>
 8005424:	08009412 	.word	0x08009412
 8005428:	08009423 	.word	0x08009423

0800542c <_scanf_float>:
 800542c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005430:	b087      	sub	sp, #28
 8005432:	9303      	str	r3, [sp, #12]
 8005434:	688b      	ldr	r3, [r1, #8]
 8005436:	4617      	mov	r7, r2
 8005438:	1e5a      	subs	r2, r3, #1
 800543a:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 800543e:	bf85      	ittet	hi
 8005440:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 8005444:	195b      	addhi	r3, r3, r5
 8005446:	2300      	movls	r3, #0
 8005448:	9302      	strhi	r3, [sp, #8]
 800544a:	bf88      	it	hi
 800544c:	f240 135d 	movwhi	r3, #349	; 0x15d
 8005450:	468b      	mov	fp, r1
 8005452:	f04f 0500 	mov.w	r5, #0
 8005456:	bf8c      	ite	hi
 8005458:	608b      	strhi	r3, [r1, #8]
 800545a:	9302      	strls	r3, [sp, #8]
 800545c:	680b      	ldr	r3, [r1, #0]
 800545e:	4680      	mov	r8, r0
 8005460:	f443 63f0 	orr.w	r3, r3, #1920	; 0x780
 8005464:	f84b 3b1c 	str.w	r3, [fp], #28
 8005468:	460c      	mov	r4, r1
 800546a:	465e      	mov	r6, fp
 800546c:	46aa      	mov	sl, r5
 800546e:	46a9      	mov	r9, r5
 8005470:	e9cd 5504 	strd	r5, r5, [sp, #16]
 8005474:	9501      	str	r5, [sp, #4]
 8005476:	68a2      	ldr	r2, [r4, #8]
 8005478:	b152      	cbz	r2, 8005490 <_scanf_float+0x64>
 800547a:	683b      	ldr	r3, [r7, #0]
 800547c:	781b      	ldrb	r3, [r3, #0]
 800547e:	2b4e      	cmp	r3, #78	; 0x4e
 8005480:	d864      	bhi.n	800554c <_scanf_float+0x120>
 8005482:	2b40      	cmp	r3, #64	; 0x40
 8005484:	d83c      	bhi.n	8005500 <_scanf_float+0xd4>
 8005486:	f1a3 012b 	sub.w	r1, r3, #43	; 0x2b
 800548a:	b2c8      	uxtb	r0, r1
 800548c:	280e      	cmp	r0, #14
 800548e:	d93a      	bls.n	8005506 <_scanf_float+0xda>
 8005490:	f1b9 0f00 	cmp.w	r9, #0
 8005494:	d003      	beq.n	800549e <_scanf_float+0x72>
 8005496:	6823      	ldr	r3, [r4, #0]
 8005498:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800549c:	6023      	str	r3, [r4, #0]
 800549e:	f10a 3aff 	add.w	sl, sl, #4294967295
 80054a2:	f1ba 0f01 	cmp.w	sl, #1
 80054a6:	f200 8113 	bhi.w	80056d0 <_scanf_float+0x2a4>
 80054aa:	455e      	cmp	r6, fp
 80054ac:	f200 8105 	bhi.w	80056ba <_scanf_float+0x28e>
 80054b0:	2501      	movs	r5, #1
 80054b2:	4628      	mov	r0, r5
 80054b4:	b007      	add	sp, #28
 80054b6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80054ba:	f1a3 0261 	sub.w	r2, r3, #97	; 0x61
 80054be:	2a0d      	cmp	r2, #13
 80054c0:	d8e6      	bhi.n	8005490 <_scanf_float+0x64>
 80054c2:	a101      	add	r1, pc, #4	; (adr r1, 80054c8 <_scanf_float+0x9c>)
 80054c4:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 80054c8:	08005607 	.word	0x08005607
 80054cc:	08005491 	.word	0x08005491
 80054d0:	08005491 	.word	0x08005491
 80054d4:	08005491 	.word	0x08005491
 80054d8:	08005667 	.word	0x08005667
 80054dc:	0800563f 	.word	0x0800563f
 80054e0:	08005491 	.word	0x08005491
 80054e4:	08005491 	.word	0x08005491
 80054e8:	08005615 	.word	0x08005615
 80054ec:	08005491 	.word	0x08005491
 80054f0:	08005491 	.word	0x08005491
 80054f4:	08005491 	.word	0x08005491
 80054f8:	08005491 	.word	0x08005491
 80054fc:	080055cd 	.word	0x080055cd
 8005500:	f1a3 0241 	sub.w	r2, r3, #65	; 0x41
 8005504:	e7db      	b.n	80054be <_scanf_float+0x92>
 8005506:	290e      	cmp	r1, #14
 8005508:	d8c2      	bhi.n	8005490 <_scanf_float+0x64>
 800550a:	a001      	add	r0, pc, #4	; (adr r0, 8005510 <_scanf_float+0xe4>)
 800550c:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 8005510:	080055bf 	.word	0x080055bf
 8005514:	08005491 	.word	0x08005491
 8005518:	080055bf 	.word	0x080055bf
 800551c:	08005653 	.word	0x08005653
 8005520:	08005491 	.word	0x08005491
 8005524:	0800556d 	.word	0x0800556d
 8005528:	080055a9 	.word	0x080055a9
 800552c:	080055a9 	.word	0x080055a9
 8005530:	080055a9 	.word	0x080055a9
 8005534:	080055a9 	.word	0x080055a9
 8005538:	080055a9 	.word	0x080055a9
 800553c:	080055a9 	.word	0x080055a9
 8005540:	080055a9 	.word	0x080055a9
 8005544:	080055a9 	.word	0x080055a9
 8005548:	080055a9 	.word	0x080055a9
 800554c:	2b6e      	cmp	r3, #110	; 0x6e
 800554e:	d809      	bhi.n	8005564 <_scanf_float+0x138>
 8005550:	2b60      	cmp	r3, #96	; 0x60
 8005552:	d8b2      	bhi.n	80054ba <_scanf_float+0x8e>
 8005554:	2b54      	cmp	r3, #84	; 0x54
 8005556:	d077      	beq.n	8005648 <_scanf_float+0x21c>
 8005558:	2b59      	cmp	r3, #89	; 0x59
 800555a:	d199      	bne.n	8005490 <_scanf_float+0x64>
 800555c:	2d07      	cmp	r5, #7
 800555e:	d197      	bne.n	8005490 <_scanf_float+0x64>
 8005560:	2508      	movs	r5, #8
 8005562:	e029      	b.n	80055b8 <_scanf_float+0x18c>
 8005564:	2b74      	cmp	r3, #116	; 0x74
 8005566:	d06f      	beq.n	8005648 <_scanf_float+0x21c>
 8005568:	2b79      	cmp	r3, #121	; 0x79
 800556a:	e7f6      	b.n	800555a <_scanf_float+0x12e>
 800556c:	6821      	ldr	r1, [r4, #0]
 800556e:	05c8      	lsls	r0, r1, #23
 8005570:	d51a      	bpl.n	80055a8 <_scanf_float+0x17c>
 8005572:	9b02      	ldr	r3, [sp, #8]
 8005574:	f021 0180 	bic.w	r1, r1, #128	; 0x80
 8005578:	6021      	str	r1, [r4, #0]
 800557a:	f109 0901 	add.w	r9, r9, #1
 800557e:	b11b      	cbz	r3, 8005588 <_scanf_float+0x15c>
 8005580:	3b01      	subs	r3, #1
 8005582:	3201      	adds	r2, #1
 8005584:	9302      	str	r3, [sp, #8]
 8005586:	60a2      	str	r2, [r4, #8]
 8005588:	68a3      	ldr	r3, [r4, #8]
 800558a:	3b01      	subs	r3, #1
 800558c:	60a3      	str	r3, [r4, #8]
 800558e:	6923      	ldr	r3, [r4, #16]
 8005590:	3301      	adds	r3, #1
 8005592:	6123      	str	r3, [r4, #16]
 8005594:	687b      	ldr	r3, [r7, #4]
 8005596:	3b01      	subs	r3, #1
 8005598:	2b00      	cmp	r3, #0
 800559a:	607b      	str	r3, [r7, #4]
 800559c:	f340 8084 	ble.w	80056a8 <_scanf_float+0x27c>
 80055a0:	683b      	ldr	r3, [r7, #0]
 80055a2:	3301      	adds	r3, #1
 80055a4:	603b      	str	r3, [r7, #0]
 80055a6:	e766      	b.n	8005476 <_scanf_float+0x4a>
 80055a8:	eb1a 0f05 	cmn.w	sl, r5
 80055ac:	f47f af70 	bne.w	8005490 <_scanf_float+0x64>
 80055b0:	6822      	ldr	r2, [r4, #0]
 80055b2:	f422 72c0 	bic.w	r2, r2, #384	; 0x180
 80055b6:	6022      	str	r2, [r4, #0]
 80055b8:	f806 3b01 	strb.w	r3, [r6], #1
 80055bc:	e7e4      	b.n	8005588 <_scanf_float+0x15c>
 80055be:	6822      	ldr	r2, [r4, #0]
 80055c0:	0610      	lsls	r0, r2, #24
 80055c2:	f57f af65 	bpl.w	8005490 <_scanf_float+0x64>
 80055c6:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80055ca:	e7f4      	b.n	80055b6 <_scanf_float+0x18a>
 80055cc:	f1ba 0f00 	cmp.w	sl, #0
 80055d0:	d10e      	bne.n	80055f0 <_scanf_float+0x1c4>
 80055d2:	f1b9 0f00 	cmp.w	r9, #0
 80055d6:	d10e      	bne.n	80055f6 <_scanf_float+0x1ca>
 80055d8:	6822      	ldr	r2, [r4, #0]
 80055da:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 80055de:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 80055e2:	d108      	bne.n	80055f6 <_scanf_float+0x1ca>
 80055e4:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 80055e8:	f04f 0a01 	mov.w	sl, #1
 80055ec:	6022      	str	r2, [r4, #0]
 80055ee:	e7e3      	b.n	80055b8 <_scanf_float+0x18c>
 80055f0:	f1ba 0f02 	cmp.w	sl, #2
 80055f4:	d055      	beq.n	80056a2 <_scanf_float+0x276>
 80055f6:	2d01      	cmp	r5, #1
 80055f8:	d002      	beq.n	8005600 <_scanf_float+0x1d4>
 80055fa:	2d04      	cmp	r5, #4
 80055fc:	f47f af48 	bne.w	8005490 <_scanf_float+0x64>
 8005600:	3501      	adds	r5, #1
 8005602:	b2ed      	uxtb	r5, r5
 8005604:	e7d8      	b.n	80055b8 <_scanf_float+0x18c>
 8005606:	f1ba 0f01 	cmp.w	sl, #1
 800560a:	f47f af41 	bne.w	8005490 <_scanf_float+0x64>
 800560e:	f04f 0a02 	mov.w	sl, #2
 8005612:	e7d1      	b.n	80055b8 <_scanf_float+0x18c>
 8005614:	b97d      	cbnz	r5, 8005636 <_scanf_float+0x20a>
 8005616:	f1b9 0f00 	cmp.w	r9, #0
 800561a:	f47f af3c 	bne.w	8005496 <_scanf_float+0x6a>
 800561e:	6822      	ldr	r2, [r4, #0]
 8005620:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 8005624:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 8005628:	f47f af39 	bne.w	800549e <_scanf_float+0x72>
 800562c:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 8005630:	2501      	movs	r5, #1
 8005632:	6022      	str	r2, [r4, #0]
 8005634:	e7c0      	b.n	80055b8 <_scanf_float+0x18c>
 8005636:	2d03      	cmp	r5, #3
 8005638:	d0e2      	beq.n	8005600 <_scanf_float+0x1d4>
 800563a:	2d05      	cmp	r5, #5
 800563c:	e7de      	b.n	80055fc <_scanf_float+0x1d0>
 800563e:	2d02      	cmp	r5, #2
 8005640:	f47f af26 	bne.w	8005490 <_scanf_float+0x64>
 8005644:	2503      	movs	r5, #3
 8005646:	e7b7      	b.n	80055b8 <_scanf_float+0x18c>
 8005648:	2d06      	cmp	r5, #6
 800564a:	f47f af21 	bne.w	8005490 <_scanf_float+0x64>
 800564e:	2507      	movs	r5, #7
 8005650:	e7b2      	b.n	80055b8 <_scanf_float+0x18c>
 8005652:	6822      	ldr	r2, [r4, #0]
 8005654:	0591      	lsls	r1, r2, #22
 8005656:	f57f af1b 	bpl.w	8005490 <_scanf_float+0x64>
 800565a:	f422 7220 	bic.w	r2, r2, #640	; 0x280
 800565e:	6022      	str	r2, [r4, #0]
 8005660:	f8cd 9004 	str.w	r9, [sp, #4]
 8005664:	e7a8      	b.n	80055b8 <_scanf_float+0x18c>
 8005666:	6822      	ldr	r2, [r4, #0]
 8005668:	f402 61a0 	and.w	r1, r2, #1280	; 0x500
 800566c:	f5b1 6f80 	cmp.w	r1, #1024	; 0x400
 8005670:	d006      	beq.n	8005680 <_scanf_float+0x254>
 8005672:	0550      	lsls	r0, r2, #21
 8005674:	f57f af0c 	bpl.w	8005490 <_scanf_float+0x64>
 8005678:	f1b9 0f00 	cmp.w	r9, #0
 800567c:	f43f af0f 	beq.w	800549e <_scanf_float+0x72>
 8005680:	0591      	lsls	r1, r2, #22
 8005682:	bf58      	it	pl
 8005684:	9901      	ldrpl	r1, [sp, #4]
 8005686:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 800568a:	bf58      	it	pl
 800568c:	eba9 0101 	subpl.w	r1, r9, r1
 8005690:	f442 72c0 	orr.w	r2, r2, #384	; 0x180
 8005694:	f04f 0900 	mov.w	r9, #0
 8005698:	bf58      	it	pl
 800569a:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 800569e:	6022      	str	r2, [r4, #0]
 80056a0:	e78a      	b.n	80055b8 <_scanf_float+0x18c>
 80056a2:	f04f 0a03 	mov.w	sl, #3
 80056a6:	e787      	b.n	80055b8 <_scanf_float+0x18c>
 80056a8:	4639      	mov	r1, r7
 80056aa:	4640      	mov	r0, r8
 80056ac:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 80056b0:	4798      	blx	r3
 80056b2:	2800      	cmp	r0, #0
 80056b4:	f43f aedf 	beq.w	8005476 <_scanf_float+0x4a>
 80056b8:	e6ea      	b.n	8005490 <_scanf_float+0x64>
 80056ba:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 80056be:	463a      	mov	r2, r7
 80056c0:	4640      	mov	r0, r8
 80056c2:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 80056c6:	4798      	blx	r3
 80056c8:	6923      	ldr	r3, [r4, #16]
 80056ca:	3b01      	subs	r3, #1
 80056cc:	6123      	str	r3, [r4, #16]
 80056ce:	e6ec      	b.n	80054aa <_scanf_float+0x7e>
 80056d0:	1e6b      	subs	r3, r5, #1
 80056d2:	2b06      	cmp	r3, #6
 80056d4:	d825      	bhi.n	8005722 <_scanf_float+0x2f6>
 80056d6:	2d02      	cmp	r5, #2
 80056d8:	d836      	bhi.n	8005748 <_scanf_float+0x31c>
 80056da:	455e      	cmp	r6, fp
 80056dc:	f67f aee8 	bls.w	80054b0 <_scanf_float+0x84>
 80056e0:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 80056e4:	463a      	mov	r2, r7
 80056e6:	4640      	mov	r0, r8
 80056e8:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 80056ec:	4798      	blx	r3
 80056ee:	6923      	ldr	r3, [r4, #16]
 80056f0:	3b01      	subs	r3, #1
 80056f2:	6123      	str	r3, [r4, #16]
 80056f4:	e7f1      	b.n	80056da <_scanf_float+0x2ae>
 80056f6:	9802      	ldr	r0, [sp, #8]
 80056f8:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 80056fc:	f810 1d01 	ldrb.w	r1, [r0, #-1]!
 8005700:	463a      	mov	r2, r7
 8005702:	9002      	str	r0, [sp, #8]
 8005704:	4640      	mov	r0, r8
 8005706:	4798      	blx	r3
 8005708:	6923      	ldr	r3, [r4, #16]
 800570a:	3b01      	subs	r3, #1
 800570c:	6123      	str	r3, [r4, #16]
 800570e:	f10a 3aff 	add.w	sl, sl, #4294967295
 8005712:	fa5f fa8a 	uxtb.w	sl, sl
 8005716:	f1ba 0f02 	cmp.w	sl, #2
 800571a:	d1ec      	bne.n	80056f6 <_scanf_float+0x2ca>
 800571c:	3d03      	subs	r5, #3
 800571e:	b2ed      	uxtb	r5, r5
 8005720:	1b76      	subs	r6, r6, r5
 8005722:	6823      	ldr	r3, [r4, #0]
 8005724:	05da      	lsls	r2, r3, #23
 8005726:	d52f      	bpl.n	8005788 <_scanf_float+0x35c>
 8005728:	055b      	lsls	r3, r3, #21
 800572a:	d510      	bpl.n	800574e <_scanf_float+0x322>
 800572c:	455e      	cmp	r6, fp
 800572e:	f67f aebf 	bls.w	80054b0 <_scanf_float+0x84>
 8005732:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8005736:	463a      	mov	r2, r7
 8005738:	4640      	mov	r0, r8
 800573a:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800573e:	4798      	blx	r3
 8005740:	6923      	ldr	r3, [r4, #16]
 8005742:	3b01      	subs	r3, #1
 8005744:	6123      	str	r3, [r4, #16]
 8005746:	e7f1      	b.n	800572c <_scanf_float+0x300>
 8005748:	46aa      	mov	sl, r5
 800574a:	9602      	str	r6, [sp, #8]
 800574c:	e7df      	b.n	800570e <_scanf_float+0x2e2>
 800574e:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 8005752:	6923      	ldr	r3, [r4, #16]
 8005754:	2965      	cmp	r1, #101	; 0x65
 8005756:	f103 33ff 	add.w	r3, r3, #4294967295
 800575a:	f106 35ff 	add.w	r5, r6, #4294967295
 800575e:	6123      	str	r3, [r4, #16]
 8005760:	d00c      	beq.n	800577c <_scanf_float+0x350>
 8005762:	2945      	cmp	r1, #69	; 0x45
 8005764:	d00a      	beq.n	800577c <_scanf_float+0x350>
 8005766:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800576a:	463a      	mov	r2, r7
 800576c:	4640      	mov	r0, r8
 800576e:	4798      	blx	r3
 8005770:	6923      	ldr	r3, [r4, #16]
 8005772:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 8005776:	3b01      	subs	r3, #1
 8005778:	1eb5      	subs	r5, r6, #2
 800577a:	6123      	str	r3, [r4, #16]
 800577c:	463a      	mov	r2, r7
 800577e:	4640      	mov	r0, r8
 8005780:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8005784:	4798      	blx	r3
 8005786:	462e      	mov	r6, r5
 8005788:	6825      	ldr	r5, [r4, #0]
 800578a:	f015 0510 	ands.w	r5, r5, #16
 800578e:	d159      	bne.n	8005844 <_scanf_float+0x418>
 8005790:	7035      	strb	r5, [r6, #0]
 8005792:	6823      	ldr	r3, [r4, #0]
 8005794:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8005798:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800579c:	d11c      	bne.n	80057d8 <_scanf_float+0x3ac>
 800579e:	9b01      	ldr	r3, [sp, #4]
 80057a0:	454b      	cmp	r3, r9
 80057a2:	eba3 0209 	sub.w	r2, r3, r9
 80057a6:	d124      	bne.n	80057f2 <_scanf_float+0x3c6>
 80057a8:	2200      	movs	r2, #0
 80057aa:	4659      	mov	r1, fp
 80057ac:	4640      	mov	r0, r8
 80057ae:	f000 fe8b 	bl	80064c8 <_strtod_r>
 80057b2:	f8d4 c000 	ldr.w	ip, [r4]
 80057b6:	9b03      	ldr	r3, [sp, #12]
 80057b8:	f01c 0f02 	tst.w	ip, #2
 80057bc:	4606      	mov	r6, r0
 80057be:	460f      	mov	r7, r1
 80057c0:	681b      	ldr	r3, [r3, #0]
 80057c2:	d021      	beq.n	8005808 <_scanf_float+0x3dc>
 80057c4:	9903      	ldr	r1, [sp, #12]
 80057c6:	1d1a      	adds	r2, r3, #4
 80057c8:	600a      	str	r2, [r1, #0]
 80057ca:	681b      	ldr	r3, [r3, #0]
 80057cc:	e9c3 6700 	strd	r6, r7, [r3]
 80057d0:	68e3      	ldr	r3, [r4, #12]
 80057d2:	3301      	adds	r3, #1
 80057d4:	60e3      	str	r3, [r4, #12]
 80057d6:	e66c      	b.n	80054b2 <_scanf_float+0x86>
 80057d8:	9b04      	ldr	r3, [sp, #16]
 80057da:	2b00      	cmp	r3, #0
 80057dc:	d0e4      	beq.n	80057a8 <_scanf_float+0x37c>
 80057de:	9905      	ldr	r1, [sp, #20]
 80057e0:	230a      	movs	r3, #10
 80057e2:	462a      	mov	r2, r5
 80057e4:	4640      	mov	r0, r8
 80057e6:	3101      	adds	r1, #1
 80057e8:	f000 fefa 	bl	80065e0 <_strtol_r>
 80057ec:	9b04      	ldr	r3, [sp, #16]
 80057ee:	9e05      	ldr	r6, [sp, #20]
 80057f0:	1ac2      	subs	r2, r0, r3
 80057f2:	f204 136f 	addw	r3, r4, #367	; 0x16f
 80057f6:	429e      	cmp	r6, r3
 80057f8:	bf28      	it	cs
 80057fa:	f504 76b7 	addcs.w	r6, r4, #366	; 0x16e
 80057fe:	4630      	mov	r0, r6
 8005800:	4911      	ldr	r1, [pc, #68]	; (8005848 <_scanf_float+0x41c>)
 8005802:	f000 f829 	bl	8005858 <siprintf>
 8005806:	e7cf      	b.n	80057a8 <_scanf_float+0x37c>
 8005808:	f01c 0f04 	tst.w	ip, #4
 800580c:	f103 0e04 	add.w	lr, r3, #4
 8005810:	d003      	beq.n	800581a <_scanf_float+0x3ee>
 8005812:	9903      	ldr	r1, [sp, #12]
 8005814:	f8c1 e000 	str.w	lr, [r1]
 8005818:	e7d7      	b.n	80057ca <_scanf_float+0x39e>
 800581a:	9a03      	ldr	r2, [sp, #12]
 800581c:	f8c2 e000 	str.w	lr, [r2]
 8005820:	f8d3 8000 	ldr.w	r8, [r3]
 8005824:	4602      	mov	r2, r0
 8005826:	460b      	mov	r3, r1
 8005828:	f7fb f8f0 	bl	8000a0c <__aeabi_dcmpun>
 800582c:	b128      	cbz	r0, 800583a <_scanf_float+0x40e>
 800582e:	4807      	ldr	r0, [pc, #28]	; (800584c <_scanf_float+0x420>)
 8005830:	f000 f80e 	bl	8005850 <nanf>
 8005834:	f8c8 0000 	str.w	r0, [r8]
 8005838:	e7ca      	b.n	80057d0 <_scanf_float+0x3a4>
 800583a:	4630      	mov	r0, r6
 800583c:	4639      	mov	r1, r7
 800583e:	f7fb f943 	bl	8000ac8 <__aeabi_d2f>
 8005842:	e7f7      	b.n	8005834 <_scanf_float+0x408>
 8005844:	2500      	movs	r5, #0
 8005846:	e634      	b.n	80054b2 <_scanf_float+0x86>
 8005848:	08009434 	.word	0x08009434
 800584c:	08009850 	.word	0x08009850

08005850 <nanf>:
 8005850:	4800      	ldr	r0, [pc, #0]	; (8005854 <nanf+0x4>)
 8005852:	4770      	bx	lr
 8005854:	7fc00000 	.word	0x7fc00000

08005858 <siprintf>:
 8005858:	b40e      	push	{r1, r2, r3}
 800585a:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800585e:	b500      	push	{lr}
 8005860:	b09c      	sub	sp, #112	; 0x70
 8005862:	ab1d      	add	r3, sp, #116	; 0x74
 8005864:	9002      	str	r0, [sp, #8]
 8005866:	9006      	str	r0, [sp, #24]
 8005868:	9107      	str	r1, [sp, #28]
 800586a:	9104      	str	r1, [sp, #16]
 800586c:	4808      	ldr	r0, [pc, #32]	; (8005890 <siprintf+0x38>)
 800586e:	4909      	ldr	r1, [pc, #36]	; (8005894 <siprintf+0x3c>)
 8005870:	f853 2b04 	ldr.w	r2, [r3], #4
 8005874:	9105      	str	r1, [sp, #20]
 8005876:	6800      	ldr	r0, [r0, #0]
 8005878:	a902      	add	r1, sp, #8
 800587a:	9301      	str	r3, [sp, #4]
 800587c:	f002 fe96 	bl	80085ac <_svfiprintf_r>
 8005880:	2200      	movs	r2, #0
 8005882:	9b02      	ldr	r3, [sp, #8]
 8005884:	701a      	strb	r2, [r3, #0]
 8005886:	b01c      	add	sp, #112	; 0x70
 8005888:	f85d eb04 	ldr.w	lr, [sp], #4
 800588c:	b003      	add	sp, #12
 800588e:	4770      	bx	lr
 8005890:	2000000c 	.word	0x2000000c
 8005894:	ffff0208 	.word	0xffff0208

08005898 <sulp>:
 8005898:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800589c:	460f      	mov	r7, r1
 800589e:	4690      	mov	r8, r2
 80058a0:	f002 fc2c 	bl	80080fc <__ulp>
 80058a4:	4604      	mov	r4, r0
 80058a6:	460d      	mov	r5, r1
 80058a8:	f1b8 0f00 	cmp.w	r8, #0
 80058ac:	d011      	beq.n	80058d2 <sulp+0x3a>
 80058ae:	f3c7 530a 	ubfx	r3, r7, #20, #11
 80058b2:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 80058b6:	2b00      	cmp	r3, #0
 80058b8:	dd0b      	ble.n	80058d2 <sulp+0x3a>
 80058ba:	2400      	movs	r4, #0
 80058bc:	051b      	lsls	r3, r3, #20
 80058be:	f103 557f 	add.w	r5, r3, #1069547520	; 0x3fc00000
 80058c2:	f505 1540 	add.w	r5, r5, #3145728	; 0x300000
 80058c6:	4622      	mov	r2, r4
 80058c8:	462b      	mov	r3, r5
 80058ca:	f7fa fe05 	bl	80004d8 <__aeabi_dmul>
 80058ce:	4604      	mov	r4, r0
 80058d0:	460d      	mov	r5, r1
 80058d2:	4620      	mov	r0, r4
 80058d4:	4629      	mov	r1, r5
 80058d6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80058da:	0000      	movs	r0, r0
 80058dc:	0000      	movs	r0, r0
	...

080058e0 <_strtod_l>:
 80058e0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80058e4:	469b      	mov	fp, r3
 80058e6:	2300      	movs	r3, #0
 80058e8:	b0a1      	sub	sp, #132	; 0x84
 80058ea:	931c      	str	r3, [sp, #112]	; 0x70
 80058ec:	4ba1      	ldr	r3, [pc, #644]	; (8005b74 <_strtod_l+0x294>)
 80058ee:	4682      	mov	sl, r0
 80058f0:	681f      	ldr	r7, [r3, #0]
 80058f2:	460e      	mov	r6, r1
 80058f4:	4638      	mov	r0, r7
 80058f6:	9217      	str	r2, [sp, #92]	; 0x5c
 80058f8:	f7fa fc2a 	bl	8000150 <strlen>
 80058fc:	f04f 0800 	mov.w	r8, #0
 8005900:	4604      	mov	r4, r0
 8005902:	f04f 0900 	mov.w	r9, #0
 8005906:	961b      	str	r6, [sp, #108]	; 0x6c
 8005908:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800590a:	781a      	ldrb	r2, [r3, #0]
 800590c:	2a2b      	cmp	r2, #43	; 0x2b
 800590e:	d04c      	beq.n	80059aa <_strtod_l+0xca>
 8005910:	d83a      	bhi.n	8005988 <_strtod_l+0xa8>
 8005912:	2a0d      	cmp	r2, #13
 8005914:	d833      	bhi.n	800597e <_strtod_l+0x9e>
 8005916:	2a08      	cmp	r2, #8
 8005918:	d833      	bhi.n	8005982 <_strtod_l+0xa2>
 800591a:	2a00      	cmp	r2, #0
 800591c:	d03d      	beq.n	800599a <_strtod_l+0xba>
 800591e:	2300      	movs	r3, #0
 8005920:	930c      	str	r3, [sp, #48]	; 0x30
 8005922:	9d1b      	ldr	r5, [sp, #108]	; 0x6c
 8005924:	782b      	ldrb	r3, [r5, #0]
 8005926:	2b30      	cmp	r3, #48	; 0x30
 8005928:	f040 80af 	bne.w	8005a8a <_strtod_l+0x1aa>
 800592c:	786b      	ldrb	r3, [r5, #1]
 800592e:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 8005932:	2b58      	cmp	r3, #88	; 0x58
 8005934:	d16c      	bne.n	8005a10 <_strtod_l+0x130>
 8005936:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8005938:	4650      	mov	r0, sl
 800593a:	9301      	str	r3, [sp, #4]
 800593c:	ab1c      	add	r3, sp, #112	; 0x70
 800593e:	9300      	str	r3, [sp, #0]
 8005940:	4a8d      	ldr	r2, [pc, #564]	; (8005b78 <_strtod_l+0x298>)
 8005942:	f8cd b008 	str.w	fp, [sp, #8]
 8005946:	ab1d      	add	r3, sp, #116	; 0x74
 8005948:	a91b      	add	r1, sp, #108	; 0x6c
 800594a:	f001 fd2f 	bl	80073ac <__gethex>
 800594e:	f010 0607 	ands.w	r6, r0, #7
 8005952:	4604      	mov	r4, r0
 8005954:	d005      	beq.n	8005962 <_strtod_l+0x82>
 8005956:	2e06      	cmp	r6, #6
 8005958:	d129      	bne.n	80059ae <_strtod_l+0xce>
 800595a:	2300      	movs	r3, #0
 800595c:	3501      	adds	r5, #1
 800595e:	951b      	str	r5, [sp, #108]	; 0x6c
 8005960:	930c      	str	r3, [sp, #48]	; 0x30
 8005962:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8005964:	2b00      	cmp	r3, #0
 8005966:	f040 8596 	bne.w	8006496 <_strtod_l+0xbb6>
 800596a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800596c:	b1d3      	cbz	r3, 80059a4 <_strtod_l+0xc4>
 800596e:	4642      	mov	r2, r8
 8005970:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 8005974:	4610      	mov	r0, r2
 8005976:	4619      	mov	r1, r3
 8005978:	b021      	add	sp, #132	; 0x84
 800597a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800597e:	2a20      	cmp	r2, #32
 8005980:	d1cd      	bne.n	800591e <_strtod_l+0x3e>
 8005982:	3301      	adds	r3, #1
 8005984:	931b      	str	r3, [sp, #108]	; 0x6c
 8005986:	e7bf      	b.n	8005908 <_strtod_l+0x28>
 8005988:	2a2d      	cmp	r2, #45	; 0x2d
 800598a:	d1c8      	bne.n	800591e <_strtod_l+0x3e>
 800598c:	2201      	movs	r2, #1
 800598e:	920c      	str	r2, [sp, #48]	; 0x30
 8005990:	1c5a      	adds	r2, r3, #1
 8005992:	921b      	str	r2, [sp, #108]	; 0x6c
 8005994:	785b      	ldrb	r3, [r3, #1]
 8005996:	2b00      	cmp	r3, #0
 8005998:	d1c3      	bne.n	8005922 <_strtod_l+0x42>
 800599a:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800599c:	961b      	str	r6, [sp, #108]	; 0x6c
 800599e:	2b00      	cmp	r3, #0
 80059a0:	f040 8577 	bne.w	8006492 <_strtod_l+0xbb2>
 80059a4:	4642      	mov	r2, r8
 80059a6:	464b      	mov	r3, r9
 80059a8:	e7e4      	b.n	8005974 <_strtod_l+0x94>
 80059aa:	2200      	movs	r2, #0
 80059ac:	e7ef      	b.n	800598e <_strtod_l+0xae>
 80059ae:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 80059b0:	b13a      	cbz	r2, 80059c2 <_strtod_l+0xe2>
 80059b2:	2135      	movs	r1, #53	; 0x35
 80059b4:	a81e      	add	r0, sp, #120	; 0x78
 80059b6:	f002 fca5 	bl	8008304 <__copybits>
 80059ba:	4650      	mov	r0, sl
 80059bc:	991c      	ldr	r1, [sp, #112]	; 0x70
 80059be:	f002 f86d 	bl	8007a9c <_Bfree>
 80059c2:	3e01      	subs	r6, #1
 80059c4:	2e05      	cmp	r6, #5
 80059c6:	d807      	bhi.n	80059d8 <_strtod_l+0xf8>
 80059c8:	e8df f006 	tbb	[pc, r6]
 80059cc:	1d180b0e 	.word	0x1d180b0e
 80059d0:	030e      	.short	0x030e
 80059d2:	f04f 0900 	mov.w	r9, #0
 80059d6:	46c8      	mov	r8, r9
 80059d8:	0721      	lsls	r1, r4, #28
 80059da:	d5c2      	bpl.n	8005962 <_strtod_l+0x82>
 80059dc:	f049 4900 	orr.w	r9, r9, #2147483648	; 0x80000000
 80059e0:	e7bf      	b.n	8005962 <_strtod_l+0x82>
 80059e2:	e9dd 891e 	ldrd	r8, r9, [sp, #120]	; 0x78
 80059e6:	e7f7      	b.n	80059d8 <_strtod_l+0xf8>
 80059e8:	9a1d      	ldr	r2, [sp, #116]	; 0x74
 80059ea:	e9dd 831e 	ldrd	r8, r3, [sp, #120]	; 0x78
 80059ee:	f202 4233 	addw	r2, r2, #1075	; 0x433
 80059f2:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 80059f6:	ea43 5902 	orr.w	r9, r3, r2, lsl #20
 80059fa:	e7ed      	b.n	80059d8 <_strtod_l+0xf8>
 80059fc:	f04f 0800 	mov.w	r8, #0
 8005a00:	f8df 9178 	ldr.w	r9, [pc, #376]	; 8005b7c <_strtod_l+0x29c>
 8005a04:	e7e8      	b.n	80059d8 <_strtod_l+0xf8>
 8005a06:	f06f 4900 	mvn.w	r9, #2147483648	; 0x80000000
 8005a0a:	f04f 38ff 	mov.w	r8, #4294967295
 8005a0e:	e7e3      	b.n	80059d8 <_strtod_l+0xf8>
 8005a10:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8005a12:	1c5a      	adds	r2, r3, #1
 8005a14:	921b      	str	r2, [sp, #108]	; 0x6c
 8005a16:	785b      	ldrb	r3, [r3, #1]
 8005a18:	2b30      	cmp	r3, #48	; 0x30
 8005a1a:	d0f9      	beq.n	8005a10 <_strtod_l+0x130>
 8005a1c:	2b00      	cmp	r3, #0
 8005a1e:	d0a0      	beq.n	8005962 <_strtod_l+0x82>
 8005a20:	2301      	movs	r3, #1
 8005a22:	9307      	str	r3, [sp, #28]
 8005a24:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8005a26:	220a      	movs	r2, #10
 8005a28:	9308      	str	r3, [sp, #32]
 8005a2a:	2300      	movs	r3, #0
 8005a2c:	469b      	mov	fp, r3
 8005a2e:	e9cd 3305 	strd	r3, r3, [sp, #20]
 8005a32:	981b      	ldr	r0, [sp, #108]	; 0x6c
 8005a34:	7805      	ldrb	r5, [r0, #0]
 8005a36:	f1a5 0330 	sub.w	r3, r5, #48	; 0x30
 8005a3a:	b2d9      	uxtb	r1, r3
 8005a3c:	2909      	cmp	r1, #9
 8005a3e:	d926      	bls.n	8005a8e <_strtod_l+0x1ae>
 8005a40:	4622      	mov	r2, r4
 8005a42:	4639      	mov	r1, r7
 8005a44:	f002 fec8 	bl	80087d8 <strncmp>
 8005a48:	2800      	cmp	r0, #0
 8005a4a:	d032      	beq.n	8005ab2 <_strtod_l+0x1d2>
 8005a4c:	2000      	movs	r0, #0
 8005a4e:	462b      	mov	r3, r5
 8005a50:	465c      	mov	r4, fp
 8005a52:	4602      	mov	r2, r0
 8005a54:	9004      	str	r0, [sp, #16]
 8005a56:	2b65      	cmp	r3, #101	; 0x65
 8005a58:	d001      	beq.n	8005a5e <_strtod_l+0x17e>
 8005a5a:	2b45      	cmp	r3, #69	; 0x45
 8005a5c:	d113      	bne.n	8005a86 <_strtod_l+0x1a6>
 8005a5e:	b91c      	cbnz	r4, 8005a68 <_strtod_l+0x188>
 8005a60:	9b07      	ldr	r3, [sp, #28]
 8005a62:	4303      	orrs	r3, r0
 8005a64:	d099      	beq.n	800599a <_strtod_l+0xba>
 8005a66:	2400      	movs	r4, #0
 8005a68:	9e1b      	ldr	r6, [sp, #108]	; 0x6c
 8005a6a:	1c73      	adds	r3, r6, #1
 8005a6c:	931b      	str	r3, [sp, #108]	; 0x6c
 8005a6e:	7873      	ldrb	r3, [r6, #1]
 8005a70:	2b2b      	cmp	r3, #43	; 0x2b
 8005a72:	d078      	beq.n	8005b66 <_strtod_l+0x286>
 8005a74:	2b2d      	cmp	r3, #45	; 0x2d
 8005a76:	d07b      	beq.n	8005b70 <_strtod_l+0x290>
 8005a78:	2700      	movs	r7, #0
 8005a7a:	f1a3 0130 	sub.w	r1, r3, #48	; 0x30
 8005a7e:	2909      	cmp	r1, #9
 8005a80:	f240 8082 	bls.w	8005b88 <_strtod_l+0x2a8>
 8005a84:	961b      	str	r6, [sp, #108]	; 0x6c
 8005a86:	2500      	movs	r5, #0
 8005a88:	e09e      	b.n	8005bc8 <_strtod_l+0x2e8>
 8005a8a:	2300      	movs	r3, #0
 8005a8c:	e7c9      	b.n	8005a22 <_strtod_l+0x142>
 8005a8e:	f1bb 0f08 	cmp.w	fp, #8
 8005a92:	bfd5      	itete	le
 8005a94:	9906      	ldrle	r1, [sp, #24]
 8005a96:	9905      	ldrgt	r1, [sp, #20]
 8005a98:	fb02 3301 	mlale	r3, r2, r1, r3
 8005a9c:	fb02 3301 	mlagt	r3, r2, r1, r3
 8005aa0:	f100 0001 	add.w	r0, r0, #1
 8005aa4:	bfd4      	ite	le
 8005aa6:	9306      	strle	r3, [sp, #24]
 8005aa8:	9305      	strgt	r3, [sp, #20]
 8005aaa:	f10b 0b01 	add.w	fp, fp, #1
 8005aae:	901b      	str	r0, [sp, #108]	; 0x6c
 8005ab0:	e7bf      	b.n	8005a32 <_strtod_l+0x152>
 8005ab2:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8005ab4:	191a      	adds	r2, r3, r4
 8005ab6:	921b      	str	r2, [sp, #108]	; 0x6c
 8005ab8:	5d1b      	ldrb	r3, [r3, r4]
 8005aba:	f1bb 0f00 	cmp.w	fp, #0
 8005abe:	d036      	beq.n	8005b2e <_strtod_l+0x24e>
 8005ac0:	465c      	mov	r4, fp
 8005ac2:	9004      	str	r0, [sp, #16]
 8005ac4:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
 8005ac8:	2a09      	cmp	r2, #9
 8005aca:	d912      	bls.n	8005af2 <_strtod_l+0x212>
 8005acc:	2201      	movs	r2, #1
 8005ace:	e7c2      	b.n	8005a56 <_strtod_l+0x176>
 8005ad0:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8005ad2:	3001      	adds	r0, #1
 8005ad4:	1c5a      	adds	r2, r3, #1
 8005ad6:	921b      	str	r2, [sp, #108]	; 0x6c
 8005ad8:	785b      	ldrb	r3, [r3, #1]
 8005ada:	2b30      	cmp	r3, #48	; 0x30
 8005adc:	d0f8      	beq.n	8005ad0 <_strtod_l+0x1f0>
 8005ade:	f1a3 0231 	sub.w	r2, r3, #49	; 0x31
 8005ae2:	2a08      	cmp	r2, #8
 8005ae4:	f200 84dc 	bhi.w	80064a0 <_strtod_l+0xbc0>
 8005ae8:	9004      	str	r0, [sp, #16]
 8005aea:	2000      	movs	r0, #0
 8005aec:	4604      	mov	r4, r0
 8005aee:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
 8005af0:	9208      	str	r2, [sp, #32]
 8005af2:	3b30      	subs	r3, #48	; 0x30
 8005af4:	f100 0201 	add.w	r2, r0, #1
 8005af8:	d013      	beq.n	8005b22 <_strtod_l+0x242>
 8005afa:	9904      	ldr	r1, [sp, #16]
 8005afc:	1905      	adds	r5, r0, r4
 8005afe:	4411      	add	r1, r2
 8005b00:	9104      	str	r1, [sp, #16]
 8005b02:	4622      	mov	r2, r4
 8005b04:	210a      	movs	r1, #10
 8005b06:	42aa      	cmp	r2, r5
 8005b08:	d113      	bne.n	8005b32 <_strtod_l+0x252>
 8005b0a:	1822      	adds	r2, r4, r0
 8005b0c:	2a08      	cmp	r2, #8
 8005b0e:	f104 0401 	add.w	r4, r4, #1
 8005b12:	4404      	add	r4, r0
 8005b14:	dc1b      	bgt.n	8005b4e <_strtod_l+0x26e>
 8005b16:	220a      	movs	r2, #10
 8005b18:	9906      	ldr	r1, [sp, #24]
 8005b1a:	fb02 3301 	mla	r3, r2, r1, r3
 8005b1e:	9306      	str	r3, [sp, #24]
 8005b20:	2200      	movs	r2, #0
 8005b22:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8005b24:	4610      	mov	r0, r2
 8005b26:	1c59      	adds	r1, r3, #1
 8005b28:	911b      	str	r1, [sp, #108]	; 0x6c
 8005b2a:	785b      	ldrb	r3, [r3, #1]
 8005b2c:	e7ca      	b.n	8005ac4 <_strtod_l+0x1e4>
 8005b2e:	4658      	mov	r0, fp
 8005b30:	e7d3      	b.n	8005ada <_strtod_l+0x1fa>
 8005b32:	2a08      	cmp	r2, #8
 8005b34:	dc04      	bgt.n	8005b40 <_strtod_l+0x260>
 8005b36:	9f06      	ldr	r7, [sp, #24]
 8005b38:	434f      	muls	r7, r1
 8005b3a:	9706      	str	r7, [sp, #24]
 8005b3c:	3201      	adds	r2, #1
 8005b3e:	e7e2      	b.n	8005b06 <_strtod_l+0x226>
 8005b40:	1c57      	adds	r7, r2, #1
 8005b42:	2f10      	cmp	r7, #16
 8005b44:	bfde      	ittt	le
 8005b46:	9f05      	ldrle	r7, [sp, #20]
 8005b48:	434f      	mulle	r7, r1
 8005b4a:	9705      	strle	r7, [sp, #20]
 8005b4c:	e7f6      	b.n	8005b3c <_strtod_l+0x25c>
 8005b4e:	2c10      	cmp	r4, #16
 8005b50:	bfdf      	itttt	le
 8005b52:	220a      	movle	r2, #10
 8005b54:	9905      	ldrle	r1, [sp, #20]
 8005b56:	fb02 3301 	mlale	r3, r2, r1, r3
 8005b5a:	9305      	strle	r3, [sp, #20]
 8005b5c:	e7e0      	b.n	8005b20 <_strtod_l+0x240>
 8005b5e:	2300      	movs	r3, #0
 8005b60:	2201      	movs	r2, #1
 8005b62:	9304      	str	r3, [sp, #16]
 8005b64:	e77c      	b.n	8005a60 <_strtod_l+0x180>
 8005b66:	2700      	movs	r7, #0
 8005b68:	1cb3      	adds	r3, r6, #2
 8005b6a:	931b      	str	r3, [sp, #108]	; 0x6c
 8005b6c:	78b3      	ldrb	r3, [r6, #2]
 8005b6e:	e784      	b.n	8005a7a <_strtod_l+0x19a>
 8005b70:	2701      	movs	r7, #1
 8005b72:	e7f9      	b.n	8005b68 <_strtod_l+0x288>
 8005b74:	08009690 	.word	0x08009690
 8005b78:	0800943c 	.word	0x0800943c
 8005b7c:	7ff00000 	.word	0x7ff00000
 8005b80:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8005b82:	1c59      	adds	r1, r3, #1
 8005b84:	911b      	str	r1, [sp, #108]	; 0x6c
 8005b86:	785b      	ldrb	r3, [r3, #1]
 8005b88:	2b30      	cmp	r3, #48	; 0x30
 8005b8a:	d0f9      	beq.n	8005b80 <_strtod_l+0x2a0>
 8005b8c:	f1a3 0131 	sub.w	r1, r3, #49	; 0x31
 8005b90:	2908      	cmp	r1, #8
 8005b92:	f63f af78 	bhi.w	8005a86 <_strtod_l+0x1a6>
 8005b96:	f04f 0e0a 	mov.w	lr, #10
 8005b9a:	f1a3 0c30 	sub.w	ip, r3, #48	; 0x30
 8005b9e:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8005ba0:	9309      	str	r3, [sp, #36]	; 0x24
 8005ba2:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8005ba4:	1c59      	adds	r1, r3, #1
 8005ba6:	911b      	str	r1, [sp, #108]	; 0x6c
 8005ba8:	785b      	ldrb	r3, [r3, #1]
 8005baa:	f1a3 0530 	sub.w	r5, r3, #48	; 0x30
 8005bae:	2d09      	cmp	r5, #9
 8005bb0:	d935      	bls.n	8005c1e <_strtod_l+0x33e>
 8005bb2:	9d09      	ldr	r5, [sp, #36]	; 0x24
 8005bb4:	1b49      	subs	r1, r1, r5
 8005bb6:	2908      	cmp	r1, #8
 8005bb8:	f644 651f 	movw	r5, #19999	; 0x4e1f
 8005bbc:	dc02      	bgt.n	8005bc4 <_strtod_l+0x2e4>
 8005bbe:	4565      	cmp	r5, ip
 8005bc0:	bfa8      	it	ge
 8005bc2:	4665      	movge	r5, ip
 8005bc4:	b107      	cbz	r7, 8005bc8 <_strtod_l+0x2e8>
 8005bc6:	426d      	negs	r5, r5
 8005bc8:	2c00      	cmp	r4, #0
 8005bca:	d14c      	bne.n	8005c66 <_strtod_l+0x386>
 8005bcc:	9907      	ldr	r1, [sp, #28]
 8005bce:	4301      	orrs	r1, r0
 8005bd0:	f47f aec7 	bne.w	8005962 <_strtod_l+0x82>
 8005bd4:	2a00      	cmp	r2, #0
 8005bd6:	f47f aee0 	bne.w	800599a <_strtod_l+0xba>
 8005bda:	2b69      	cmp	r3, #105	; 0x69
 8005bdc:	d026      	beq.n	8005c2c <_strtod_l+0x34c>
 8005bde:	dc23      	bgt.n	8005c28 <_strtod_l+0x348>
 8005be0:	2b49      	cmp	r3, #73	; 0x49
 8005be2:	d023      	beq.n	8005c2c <_strtod_l+0x34c>
 8005be4:	2b4e      	cmp	r3, #78	; 0x4e
 8005be6:	f47f aed8 	bne.w	800599a <_strtod_l+0xba>
 8005bea:	499c      	ldr	r1, [pc, #624]	; (8005e5c <_strtod_l+0x57c>)
 8005bec:	a81b      	add	r0, sp, #108	; 0x6c
 8005bee:	f001 fe2b 	bl	8007848 <__match>
 8005bf2:	2800      	cmp	r0, #0
 8005bf4:	f43f aed1 	beq.w	800599a <_strtod_l+0xba>
 8005bf8:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8005bfa:	781b      	ldrb	r3, [r3, #0]
 8005bfc:	2b28      	cmp	r3, #40	; 0x28
 8005bfe:	d12c      	bne.n	8005c5a <_strtod_l+0x37a>
 8005c00:	4997      	ldr	r1, [pc, #604]	; (8005e60 <_strtod_l+0x580>)
 8005c02:	aa1e      	add	r2, sp, #120	; 0x78
 8005c04:	a81b      	add	r0, sp, #108	; 0x6c
 8005c06:	f001 fe33 	bl	8007870 <__hexnan>
 8005c0a:	2805      	cmp	r0, #5
 8005c0c:	d125      	bne.n	8005c5a <_strtod_l+0x37a>
 8005c0e:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 8005c10:	f8dd 8078 	ldr.w	r8, [sp, #120]	; 0x78
 8005c14:	f043 49ff 	orr.w	r9, r3, #2139095040	; 0x7f800000
 8005c18:	f449 09e0 	orr.w	r9, r9, #7340032	; 0x700000
 8005c1c:	e6a1      	b.n	8005962 <_strtod_l+0x82>
 8005c1e:	fb0e 3c0c 	mla	ip, lr, ip, r3
 8005c22:	f1ac 0c30 	sub.w	ip, ip, #48	; 0x30
 8005c26:	e7bc      	b.n	8005ba2 <_strtod_l+0x2c2>
 8005c28:	2b6e      	cmp	r3, #110	; 0x6e
 8005c2a:	e7dc      	b.n	8005be6 <_strtod_l+0x306>
 8005c2c:	498d      	ldr	r1, [pc, #564]	; (8005e64 <_strtod_l+0x584>)
 8005c2e:	a81b      	add	r0, sp, #108	; 0x6c
 8005c30:	f001 fe0a 	bl	8007848 <__match>
 8005c34:	2800      	cmp	r0, #0
 8005c36:	f43f aeb0 	beq.w	800599a <_strtod_l+0xba>
 8005c3a:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8005c3c:	498a      	ldr	r1, [pc, #552]	; (8005e68 <_strtod_l+0x588>)
 8005c3e:	3b01      	subs	r3, #1
 8005c40:	a81b      	add	r0, sp, #108	; 0x6c
 8005c42:	931b      	str	r3, [sp, #108]	; 0x6c
 8005c44:	f001 fe00 	bl	8007848 <__match>
 8005c48:	b910      	cbnz	r0, 8005c50 <_strtod_l+0x370>
 8005c4a:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8005c4c:	3301      	adds	r3, #1
 8005c4e:	931b      	str	r3, [sp, #108]	; 0x6c
 8005c50:	f04f 0800 	mov.w	r8, #0
 8005c54:	f8df 9220 	ldr.w	r9, [pc, #544]	; 8005e78 <_strtod_l+0x598>
 8005c58:	e683      	b.n	8005962 <_strtod_l+0x82>
 8005c5a:	4884      	ldr	r0, [pc, #528]	; (8005e6c <_strtod_l+0x58c>)
 8005c5c:	f002 fda6 	bl	80087ac <nan>
 8005c60:	4680      	mov	r8, r0
 8005c62:	4689      	mov	r9, r1
 8005c64:	e67d      	b.n	8005962 <_strtod_l+0x82>
 8005c66:	9b04      	ldr	r3, [sp, #16]
 8005c68:	f1bb 0f00 	cmp.w	fp, #0
 8005c6c:	bf08      	it	eq
 8005c6e:	46a3      	moveq	fp, r4
 8005c70:	1aeb      	subs	r3, r5, r3
 8005c72:	2c10      	cmp	r4, #16
 8005c74:	9806      	ldr	r0, [sp, #24]
 8005c76:	4626      	mov	r6, r4
 8005c78:	9307      	str	r3, [sp, #28]
 8005c7a:	bfa8      	it	ge
 8005c7c:	2610      	movge	r6, #16
 8005c7e:	f7fa fbb1 	bl	80003e4 <__aeabi_ui2d>
 8005c82:	2c09      	cmp	r4, #9
 8005c84:	4680      	mov	r8, r0
 8005c86:	4689      	mov	r9, r1
 8005c88:	dd13      	ble.n	8005cb2 <_strtod_l+0x3d2>
 8005c8a:	4b79      	ldr	r3, [pc, #484]	; (8005e70 <_strtod_l+0x590>)
 8005c8c:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 8005c90:	e953 2312 	ldrd	r2, r3, [r3, #-72]	; 0x48
 8005c94:	f7fa fc20 	bl	80004d8 <__aeabi_dmul>
 8005c98:	4680      	mov	r8, r0
 8005c9a:	9805      	ldr	r0, [sp, #20]
 8005c9c:	4689      	mov	r9, r1
 8005c9e:	f7fa fba1 	bl	80003e4 <__aeabi_ui2d>
 8005ca2:	4602      	mov	r2, r0
 8005ca4:	460b      	mov	r3, r1
 8005ca6:	4640      	mov	r0, r8
 8005ca8:	4649      	mov	r1, r9
 8005caa:	f7fa fa5f 	bl	800016c <__adddf3>
 8005cae:	4680      	mov	r8, r0
 8005cb0:	4689      	mov	r9, r1
 8005cb2:	2c0f      	cmp	r4, #15
 8005cb4:	dc36      	bgt.n	8005d24 <_strtod_l+0x444>
 8005cb6:	9b07      	ldr	r3, [sp, #28]
 8005cb8:	2b00      	cmp	r3, #0
 8005cba:	f43f ae52 	beq.w	8005962 <_strtod_l+0x82>
 8005cbe:	dd22      	ble.n	8005d06 <_strtod_l+0x426>
 8005cc0:	2b16      	cmp	r3, #22
 8005cc2:	dc09      	bgt.n	8005cd8 <_strtod_l+0x3f8>
 8005cc4:	4c6a      	ldr	r4, [pc, #424]	; (8005e70 <_strtod_l+0x590>)
 8005cc6:	4642      	mov	r2, r8
 8005cc8:	eb04 04c3 	add.w	r4, r4, r3, lsl #3
 8005ccc:	464b      	mov	r3, r9
 8005cce:	e9d4 0100 	ldrd	r0, r1, [r4]
 8005cd2:	f7fa fc01 	bl	80004d8 <__aeabi_dmul>
 8005cd6:	e7c3      	b.n	8005c60 <_strtod_l+0x380>
 8005cd8:	9a07      	ldr	r2, [sp, #28]
 8005cda:	f1c4 0325 	rsb	r3, r4, #37	; 0x25
 8005cde:	4293      	cmp	r3, r2
 8005ce0:	db20      	blt.n	8005d24 <_strtod_l+0x444>
 8005ce2:	4d63      	ldr	r5, [pc, #396]	; (8005e70 <_strtod_l+0x590>)
 8005ce4:	f1c4 040f 	rsb	r4, r4, #15
 8005ce8:	eb05 01c4 	add.w	r1, r5, r4, lsl #3
 8005cec:	4642      	mov	r2, r8
 8005cee:	e9d1 0100 	ldrd	r0, r1, [r1]
 8005cf2:	464b      	mov	r3, r9
 8005cf4:	f7fa fbf0 	bl	80004d8 <__aeabi_dmul>
 8005cf8:	9b07      	ldr	r3, [sp, #28]
 8005cfa:	1b1c      	subs	r4, r3, r4
 8005cfc:	eb05 05c4 	add.w	r5, r5, r4, lsl #3
 8005d00:	e9d5 2300 	ldrd	r2, r3, [r5]
 8005d04:	e7e5      	b.n	8005cd2 <_strtod_l+0x3f2>
 8005d06:	9b07      	ldr	r3, [sp, #28]
 8005d08:	3316      	adds	r3, #22
 8005d0a:	db0b      	blt.n	8005d24 <_strtod_l+0x444>
 8005d0c:	9b04      	ldr	r3, [sp, #16]
 8005d0e:	4a58      	ldr	r2, [pc, #352]	; (8005e70 <_strtod_l+0x590>)
 8005d10:	1b5d      	subs	r5, r3, r5
 8005d12:	eb02 05c5 	add.w	r5, r2, r5, lsl #3
 8005d16:	4640      	mov	r0, r8
 8005d18:	e9d5 2300 	ldrd	r2, r3, [r5]
 8005d1c:	4649      	mov	r1, r9
 8005d1e:	f7fa fd05 	bl	800072c <__aeabi_ddiv>
 8005d22:	e79d      	b.n	8005c60 <_strtod_l+0x380>
 8005d24:	9b07      	ldr	r3, [sp, #28]
 8005d26:	1ba6      	subs	r6, r4, r6
 8005d28:	441e      	add	r6, r3
 8005d2a:	2e00      	cmp	r6, #0
 8005d2c:	dd71      	ble.n	8005e12 <_strtod_l+0x532>
 8005d2e:	f016 030f 	ands.w	r3, r6, #15
 8005d32:	d00a      	beq.n	8005d4a <_strtod_l+0x46a>
 8005d34:	494e      	ldr	r1, [pc, #312]	; (8005e70 <_strtod_l+0x590>)
 8005d36:	4642      	mov	r2, r8
 8005d38:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 8005d3c:	e9d1 0100 	ldrd	r0, r1, [r1]
 8005d40:	464b      	mov	r3, r9
 8005d42:	f7fa fbc9 	bl	80004d8 <__aeabi_dmul>
 8005d46:	4680      	mov	r8, r0
 8005d48:	4689      	mov	r9, r1
 8005d4a:	f036 060f 	bics.w	r6, r6, #15
 8005d4e:	d050      	beq.n	8005df2 <_strtod_l+0x512>
 8005d50:	f5b6 7f9a 	cmp.w	r6, #308	; 0x134
 8005d54:	dd27      	ble.n	8005da6 <_strtod_l+0x4c6>
 8005d56:	f04f 0b00 	mov.w	fp, #0
 8005d5a:	f8cd b010 	str.w	fp, [sp, #16]
 8005d5e:	f8cd b020 	str.w	fp, [sp, #32]
 8005d62:	f8cd b018 	str.w	fp, [sp, #24]
 8005d66:	2322      	movs	r3, #34	; 0x22
 8005d68:	f04f 0800 	mov.w	r8, #0
 8005d6c:	f8df 9108 	ldr.w	r9, [pc, #264]	; 8005e78 <_strtod_l+0x598>
 8005d70:	f8ca 3000 	str.w	r3, [sl]
 8005d74:	9b08      	ldr	r3, [sp, #32]
 8005d76:	2b00      	cmp	r3, #0
 8005d78:	f43f adf3 	beq.w	8005962 <_strtod_l+0x82>
 8005d7c:	4650      	mov	r0, sl
 8005d7e:	991c      	ldr	r1, [sp, #112]	; 0x70
 8005d80:	f001 fe8c 	bl	8007a9c <_Bfree>
 8005d84:	4650      	mov	r0, sl
 8005d86:	9906      	ldr	r1, [sp, #24]
 8005d88:	f001 fe88 	bl	8007a9c <_Bfree>
 8005d8c:	4650      	mov	r0, sl
 8005d8e:	9904      	ldr	r1, [sp, #16]
 8005d90:	f001 fe84 	bl	8007a9c <_Bfree>
 8005d94:	4650      	mov	r0, sl
 8005d96:	9908      	ldr	r1, [sp, #32]
 8005d98:	f001 fe80 	bl	8007a9c <_Bfree>
 8005d9c:	4659      	mov	r1, fp
 8005d9e:	4650      	mov	r0, sl
 8005da0:	f001 fe7c 	bl	8007a9c <_Bfree>
 8005da4:	e5dd      	b.n	8005962 <_strtod_l+0x82>
 8005da6:	2300      	movs	r3, #0
 8005da8:	4640      	mov	r0, r8
 8005daa:	4649      	mov	r1, r9
 8005dac:	461f      	mov	r7, r3
 8005dae:	1136      	asrs	r6, r6, #4
 8005db0:	2e01      	cmp	r6, #1
 8005db2:	dc21      	bgt.n	8005df8 <_strtod_l+0x518>
 8005db4:	b10b      	cbz	r3, 8005dba <_strtod_l+0x4da>
 8005db6:	4680      	mov	r8, r0
 8005db8:	4689      	mov	r9, r1
 8005dba:	4b2e      	ldr	r3, [pc, #184]	; (8005e74 <_strtod_l+0x594>)
 8005dbc:	f1a9 7954 	sub.w	r9, r9, #55574528	; 0x3500000
 8005dc0:	eb03 07c7 	add.w	r7, r3, r7, lsl #3
 8005dc4:	4642      	mov	r2, r8
 8005dc6:	e9d7 0100 	ldrd	r0, r1, [r7]
 8005dca:	464b      	mov	r3, r9
 8005dcc:	f7fa fb84 	bl	80004d8 <__aeabi_dmul>
 8005dd0:	4b29      	ldr	r3, [pc, #164]	; (8005e78 <_strtod_l+0x598>)
 8005dd2:	460a      	mov	r2, r1
 8005dd4:	400b      	ands	r3, r1
 8005dd6:	4929      	ldr	r1, [pc, #164]	; (8005e7c <_strtod_l+0x59c>)
 8005dd8:	4680      	mov	r8, r0
 8005dda:	428b      	cmp	r3, r1
 8005ddc:	d8bb      	bhi.n	8005d56 <_strtod_l+0x476>
 8005dde:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
 8005de2:	428b      	cmp	r3, r1
 8005de4:	bf86      	itte	hi
 8005de6:	f04f 38ff 	movhi.w	r8, #4294967295
 8005dea:	f8df 9094 	ldrhi.w	r9, [pc, #148]	; 8005e80 <_strtod_l+0x5a0>
 8005dee:	f102 7954 	addls.w	r9, r2, #55574528	; 0x3500000
 8005df2:	2300      	movs	r3, #0
 8005df4:	9305      	str	r3, [sp, #20]
 8005df6:	e07e      	b.n	8005ef6 <_strtod_l+0x616>
 8005df8:	07f2      	lsls	r2, r6, #31
 8005dfa:	d507      	bpl.n	8005e0c <_strtod_l+0x52c>
 8005dfc:	4b1d      	ldr	r3, [pc, #116]	; (8005e74 <_strtod_l+0x594>)
 8005dfe:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 8005e02:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005e06:	f7fa fb67 	bl	80004d8 <__aeabi_dmul>
 8005e0a:	2301      	movs	r3, #1
 8005e0c:	3701      	adds	r7, #1
 8005e0e:	1076      	asrs	r6, r6, #1
 8005e10:	e7ce      	b.n	8005db0 <_strtod_l+0x4d0>
 8005e12:	d0ee      	beq.n	8005df2 <_strtod_l+0x512>
 8005e14:	4276      	negs	r6, r6
 8005e16:	f016 020f 	ands.w	r2, r6, #15
 8005e1a:	d00a      	beq.n	8005e32 <_strtod_l+0x552>
 8005e1c:	4b14      	ldr	r3, [pc, #80]	; (8005e70 <_strtod_l+0x590>)
 8005e1e:	4640      	mov	r0, r8
 8005e20:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8005e24:	4649      	mov	r1, r9
 8005e26:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005e2a:	f7fa fc7f 	bl	800072c <__aeabi_ddiv>
 8005e2e:	4680      	mov	r8, r0
 8005e30:	4689      	mov	r9, r1
 8005e32:	1136      	asrs	r6, r6, #4
 8005e34:	d0dd      	beq.n	8005df2 <_strtod_l+0x512>
 8005e36:	2e1f      	cmp	r6, #31
 8005e38:	dd24      	ble.n	8005e84 <_strtod_l+0x5a4>
 8005e3a:	f04f 0b00 	mov.w	fp, #0
 8005e3e:	f8cd b010 	str.w	fp, [sp, #16]
 8005e42:	f8cd b020 	str.w	fp, [sp, #32]
 8005e46:	f8cd b018 	str.w	fp, [sp, #24]
 8005e4a:	2322      	movs	r3, #34	; 0x22
 8005e4c:	f04f 0800 	mov.w	r8, #0
 8005e50:	f04f 0900 	mov.w	r9, #0
 8005e54:	f8ca 3000 	str.w	r3, [sl]
 8005e58:	e78c      	b.n	8005d74 <_strtod_l+0x494>
 8005e5a:	bf00      	nop
 8005e5c:	0800940d 	.word	0x0800940d
 8005e60:	08009450 	.word	0x08009450
 8005e64:	08009405 	.word	0x08009405
 8005e68:	08009594 	.word	0x08009594
 8005e6c:	08009850 	.word	0x08009850
 8005e70:	08009730 	.word	0x08009730
 8005e74:	08009708 	.word	0x08009708
 8005e78:	7ff00000 	.word	0x7ff00000
 8005e7c:	7ca00000 	.word	0x7ca00000
 8005e80:	7fefffff 	.word	0x7fefffff
 8005e84:	f016 0310 	ands.w	r3, r6, #16
 8005e88:	bf18      	it	ne
 8005e8a:	236a      	movne	r3, #106	; 0x6a
 8005e8c:	4640      	mov	r0, r8
 8005e8e:	9305      	str	r3, [sp, #20]
 8005e90:	4649      	mov	r1, r9
 8005e92:	2300      	movs	r3, #0
 8005e94:	4fb2      	ldr	r7, [pc, #712]	; (8006160 <_strtod_l+0x880>)
 8005e96:	07f2      	lsls	r2, r6, #31
 8005e98:	d504      	bpl.n	8005ea4 <_strtod_l+0x5c4>
 8005e9a:	e9d7 2300 	ldrd	r2, r3, [r7]
 8005e9e:	f7fa fb1b 	bl	80004d8 <__aeabi_dmul>
 8005ea2:	2301      	movs	r3, #1
 8005ea4:	1076      	asrs	r6, r6, #1
 8005ea6:	f107 0708 	add.w	r7, r7, #8
 8005eaa:	d1f4      	bne.n	8005e96 <_strtod_l+0x5b6>
 8005eac:	b10b      	cbz	r3, 8005eb2 <_strtod_l+0x5d2>
 8005eae:	4680      	mov	r8, r0
 8005eb0:	4689      	mov	r9, r1
 8005eb2:	9b05      	ldr	r3, [sp, #20]
 8005eb4:	b1bb      	cbz	r3, 8005ee6 <_strtod_l+0x606>
 8005eb6:	f3c9 530a 	ubfx	r3, r9, #20, #11
 8005eba:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 8005ebe:	2b00      	cmp	r3, #0
 8005ec0:	4649      	mov	r1, r9
 8005ec2:	dd10      	ble.n	8005ee6 <_strtod_l+0x606>
 8005ec4:	2b1f      	cmp	r3, #31
 8005ec6:	f340 812b 	ble.w	8006120 <_strtod_l+0x840>
 8005eca:	2b34      	cmp	r3, #52	; 0x34
 8005ecc:	bfd8      	it	le
 8005ece:	f04f 32ff 	movle.w	r2, #4294967295
 8005ed2:	f04f 0800 	mov.w	r8, #0
 8005ed6:	bfcf      	iteee	gt
 8005ed8:	f04f 795c 	movgt.w	r9, #57671680	; 0x3700000
 8005edc:	3b20      	suble	r3, #32
 8005ede:	fa02 f303 	lslle.w	r3, r2, r3
 8005ee2:	ea03 0901 	andle.w	r9, r3, r1
 8005ee6:	2200      	movs	r2, #0
 8005ee8:	2300      	movs	r3, #0
 8005eea:	4640      	mov	r0, r8
 8005eec:	4649      	mov	r1, r9
 8005eee:	f7fa fd5b 	bl	80009a8 <__aeabi_dcmpeq>
 8005ef2:	2800      	cmp	r0, #0
 8005ef4:	d1a1      	bne.n	8005e3a <_strtod_l+0x55a>
 8005ef6:	9b06      	ldr	r3, [sp, #24]
 8005ef8:	465a      	mov	r2, fp
 8005efa:	9300      	str	r3, [sp, #0]
 8005efc:	4650      	mov	r0, sl
 8005efe:	4623      	mov	r3, r4
 8005f00:	9908      	ldr	r1, [sp, #32]
 8005f02:	f001 fe37 	bl	8007b74 <__s2b>
 8005f06:	9008      	str	r0, [sp, #32]
 8005f08:	2800      	cmp	r0, #0
 8005f0a:	f43f af24 	beq.w	8005d56 <_strtod_l+0x476>
 8005f0e:	9b04      	ldr	r3, [sp, #16]
 8005f10:	f04f 0b00 	mov.w	fp, #0
 8005f14:	1b5d      	subs	r5, r3, r5
 8005f16:	9b07      	ldr	r3, [sp, #28]
 8005f18:	f8cd b010 	str.w	fp, [sp, #16]
 8005f1c:	2b00      	cmp	r3, #0
 8005f1e:	bfb4      	ite	lt
 8005f20:	462b      	movlt	r3, r5
 8005f22:	2300      	movge	r3, #0
 8005f24:	930e      	str	r3, [sp, #56]	; 0x38
 8005f26:	9b07      	ldr	r3, [sp, #28]
 8005f28:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8005f2c:	9316      	str	r3, [sp, #88]	; 0x58
 8005f2e:	9b08      	ldr	r3, [sp, #32]
 8005f30:	4650      	mov	r0, sl
 8005f32:	6859      	ldr	r1, [r3, #4]
 8005f34:	f001 fd72 	bl	8007a1c <_Balloc>
 8005f38:	9006      	str	r0, [sp, #24]
 8005f3a:	2800      	cmp	r0, #0
 8005f3c:	f43f af13 	beq.w	8005d66 <_strtod_l+0x486>
 8005f40:	9b08      	ldr	r3, [sp, #32]
 8005f42:	300c      	adds	r0, #12
 8005f44:	691a      	ldr	r2, [r3, #16]
 8005f46:	f103 010c 	add.w	r1, r3, #12
 8005f4a:	3202      	adds	r2, #2
 8005f4c:	0092      	lsls	r2, r2, #2
 8005f4e:	f001 fd57 	bl	8007a00 <memcpy>
 8005f52:	ab1e      	add	r3, sp, #120	; 0x78
 8005f54:	9301      	str	r3, [sp, #4]
 8005f56:	ab1d      	add	r3, sp, #116	; 0x74
 8005f58:	9300      	str	r3, [sp, #0]
 8005f5a:	4642      	mov	r2, r8
 8005f5c:	464b      	mov	r3, r9
 8005f5e:	4650      	mov	r0, sl
 8005f60:	e9cd 890a 	strd	r8, r9, [sp, #40]	; 0x28
 8005f64:	f002 f944 	bl	80081f0 <__d2b>
 8005f68:	901c      	str	r0, [sp, #112]	; 0x70
 8005f6a:	2800      	cmp	r0, #0
 8005f6c:	f43f aefb 	beq.w	8005d66 <_strtod_l+0x486>
 8005f70:	2101      	movs	r1, #1
 8005f72:	4650      	mov	r0, sl
 8005f74:	f001 fe96 	bl	8007ca4 <__i2b>
 8005f78:	4603      	mov	r3, r0
 8005f7a:	9004      	str	r0, [sp, #16]
 8005f7c:	2800      	cmp	r0, #0
 8005f7e:	f43f aef2 	beq.w	8005d66 <_strtod_l+0x486>
 8005f82:	9d1d      	ldr	r5, [sp, #116]	; 0x74
 8005f84:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 8005f86:	2d00      	cmp	r5, #0
 8005f88:	bfab      	itete	ge
 8005f8a:	9b0e      	ldrge	r3, [sp, #56]	; 0x38
 8005f8c:	9b16      	ldrlt	r3, [sp, #88]	; 0x58
 8005f8e:	18ee      	addge	r6, r5, r3
 8005f90:	1b5c      	sublt	r4, r3, r5
 8005f92:	9b05      	ldr	r3, [sp, #20]
 8005f94:	bfa8      	it	ge
 8005f96:	9c16      	ldrge	r4, [sp, #88]	; 0x58
 8005f98:	eba5 0503 	sub.w	r5, r5, r3
 8005f9c:	4415      	add	r5, r2
 8005f9e:	4b71      	ldr	r3, [pc, #452]	; (8006164 <_strtod_l+0x884>)
 8005fa0:	f105 35ff 	add.w	r5, r5, #4294967295
 8005fa4:	bfb8      	it	lt
 8005fa6:	9e0e      	ldrlt	r6, [sp, #56]	; 0x38
 8005fa8:	429d      	cmp	r5, r3
 8005faa:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 8005fae:	f280 80c9 	bge.w	8006144 <_strtod_l+0x864>
 8005fb2:	1b5b      	subs	r3, r3, r5
 8005fb4:	2b1f      	cmp	r3, #31
 8005fb6:	f04f 0701 	mov.w	r7, #1
 8005fba:	eba2 0203 	sub.w	r2, r2, r3
 8005fbe:	f300 80b6 	bgt.w	800612e <_strtod_l+0x84e>
 8005fc2:	2500      	movs	r5, #0
 8005fc4:	fa07 f303 	lsl.w	r3, r7, r3
 8005fc8:	930f      	str	r3, [sp, #60]	; 0x3c
 8005fca:	18b7      	adds	r7, r6, r2
 8005fcc:	9b05      	ldr	r3, [sp, #20]
 8005fce:	42be      	cmp	r6, r7
 8005fd0:	4414      	add	r4, r2
 8005fd2:	441c      	add	r4, r3
 8005fd4:	4633      	mov	r3, r6
 8005fd6:	bfa8      	it	ge
 8005fd8:	463b      	movge	r3, r7
 8005fda:	42a3      	cmp	r3, r4
 8005fdc:	bfa8      	it	ge
 8005fde:	4623      	movge	r3, r4
 8005fe0:	2b00      	cmp	r3, #0
 8005fe2:	bfc2      	ittt	gt
 8005fe4:	1aff      	subgt	r7, r7, r3
 8005fe6:	1ae4      	subgt	r4, r4, r3
 8005fe8:	1af6      	subgt	r6, r6, r3
 8005fea:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8005fec:	2b00      	cmp	r3, #0
 8005fee:	dd17      	ble.n	8006020 <_strtod_l+0x740>
 8005ff0:	461a      	mov	r2, r3
 8005ff2:	4650      	mov	r0, sl
 8005ff4:	9904      	ldr	r1, [sp, #16]
 8005ff6:	f001 ff0f 	bl	8007e18 <__pow5mult>
 8005ffa:	9004      	str	r0, [sp, #16]
 8005ffc:	2800      	cmp	r0, #0
 8005ffe:	f43f aeb2 	beq.w	8005d66 <_strtod_l+0x486>
 8006002:	4601      	mov	r1, r0
 8006004:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 8006006:	4650      	mov	r0, sl
 8006008:	f001 fe62 	bl	8007cd0 <__multiply>
 800600c:	9009      	str	r0, [sp, #36]	; 0x24
 800600e:	2800      	cmp	r0, #0
 8006010:	f43f aea9 	beq.w	8005d66 <_strtod_l+0x486>
 8006014:	4650      	mov	r0, sl
 8006016:	991c      	ldr	r1, [sp, #112]	; 0x70
 8006018:	f001 fd40 	bl	8007a9c <_Bfree>
 800601c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800601e:	931c      	str	r3, [sp, #112]	; 0x70
 8006020:	2f00      	cmp	r7, #0
 8006022:	f300 8093 	bgt.w	800614c <_strtod_l+0x86c>
 8006026:	9b07      	ldr	r3, [sp, #28]
 8006028:	2b00      	cmp	r3, #0
 800602a:	dd08      	ble.n	800603e <_strtod_l+0x75e>
 800602c:	4650      	mov	r0, sl
 800602e:	9a16      	ldr	r2, [sp, #88]	; 0x58
 8006030:	9906      	ldr	r1, [sp, #24]
 8006032:	f001 fef1 	bl	8007e18 <__pow5mult>
 8006036:	9006      	str	r0, [sp, #24]
 8006038:	2800      	cmp	r0, #0
 800603a:	f43f ae94 	beq.w	8005d66 <_strtod_l+0x486>
 800603e:	2c00      	cmp	r4, #0
 8006040:	dd08      	ble.n	8006054 <_strtod_l+0x774>
 8006042:	4622      	mov	r2, r4
 8006044:	4650      	mov	r0, sl
 8006046:	9906      	ldr	r1, [sp, #24]
 8006048:	f001 ff40 	bl	8007ecc <__lshift>
 800604c:	9006      	str	r0, [sp, #24]
 800604e:	2800      	cmp	r0, #0
 8006050:	f43f ae89 	beq.w	8005d66 <_strtod_l+0x486>
 8006054:	2e00      	cmp	r6, #0
 8006056:	dd08      	ble.n	800606a <_strtod_l+0x78a>
 8006058:	4632      	mov	r2, r6
 800605a:	4650      	mov	r0, sl
 800605c:	9904      	ldr	r1, [sp, #16]
 800605e:	f001 ff35 	bl	8007ecc <__lshift>
 8006062:	9004      	str	r0, [sp, #16]
 8006064:	2800      	cmp	r0, #0
 8006066:	f43f ae7e 	beq.w	8005d66 <_strtod_l+0x486>
 800606a:	4650      	mov	r0, sl
 800606c:	9a06      	ldr	r2, [sp, #24]
 800606e:	991c      	ldr	r1, [sp, #112]	; 0x70
 8006070:	f001 ffb4 	bl	8007fdc <__mdiff>
 8006074:	4683      	mov	fp, r0
 8006076:	2800      	cmp	r0, #0
 8006078:	f43f ae75 	beq.w	8005d66 <_strtod_l+0x486>
 800607c:	2400      	movs	r4, #0
 800607e:	68c3      	ldr	r3, [r0, #12]
 8006080:	9904      	ldr	r1, [sp, #16]
 8006082:	60c4      	str	r4, [r0, #12]
 8006084:	930d      	str	r3, [sp, #52]	; 0x34
 8006086:	f001 ff8d 	bl	8007fa4 <__mcmp>
 800608a:	42a0      	cmp	r0, r4
 800608c:	da70      	bge.n	8006170 <_strtod_l+0x890>
 800608e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8006090:	ea53 0308 	orrs.w	r3, r3, r8
 8006094:	f040 8096 	bne.w	80061c4 <_strtod_l+0x8e4>
 8006098:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800609c:	2b00      	cmp	r3, #0
 800609e:	f040 8091 	bne.w	80061c4 <_strtod_l+0x8e4>
 80060a2:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 80060a6:	0d1b      	lsrs	r3, r3, #20
 80060a8:	051b      	lsls	r3, r3, #20
 80060aa:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 80060ae:	f240 8089 	bls.w	80061c4 <_strtod_l+0x8e4>
 80060b2:	f8db 3014 	ldr.w	r3, [fp, #20]
 80060b6:	b923      	cbnz	r3, 80060c2 <_strtod_l+0x7e2>
 80060b8:	f8db 3010 	ldr.w	r3, [fp, #16]
 80060bc:	2b01      	cmp	r3, #1
 80060be:	f340 8081 	ble.w	80061c4 <_strtod_l+0x8e4>
 80060c2:	4659      	mov	r1, fp
 80060c4:	2201      	movs	r2, #1
 80060c6:	4650      	mov	r0, sl
 80060c8:	f001 ff00 	bl	8007ecc <__lshift>
 80060cc:	9904      	ldr	r1, [sp, #16]
 80060ce:	4683      	mov	fp, r0
 80060d0:	f001 ff68 	bl	8007fa4 <__mcmp>
 80060d4:	2800      	cmp	r0, #0
 80060d6:	dd75      	ble.n	80061c4 <_strtod_l+0x8e4>
 80060d8:	9905      	ldr	r1, [sp, #20]
 80060da:	464b      	mov	r3, r9
 80060dc:	4a22      	ldr	r2, [pc, #136]	; (8006168 <_strtod_l+0x888>)
 80060de:	2900      	cmp	r1, #0
 80060e0:	f000 8091 	beq.w	8006206 <_strtod_l+0x926>
 80060e4:	ea02 0109 	and.w	r1, r2, r9
 80060e8:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
 80060ec:	f300 808b 	bgt.w	8006206 <_strtod_l+0x926>
 80060f0:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
 80060f4:	f77f aea9 	ble.w	8005e4a <_strtod_l+0x56a>
 80060f8:	2300      	movs	r3, #0
 80060fa:	4a1c      	ldr	r2, [pc, #112]	; (800616c <_strtod_l+0x88c>)
 80060fc:	4640      	mov	r0, r8
 80060fe:	e9cd 3214 	strd	r3, r2, [sp, #80]	; 0x50
 8006102:	4649      	mov	r1, r9
 8006104:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	; 0x50
 8006108:	f7fa f9e6 	bl	80004d8 <__aeabi_dmul>
 800610c:	460b      	mov	r3, r1
 800610e:	4303      	orrs	r3, r0
 8006110:	bf08      	it	eq
 8006112:	2322      	moveq	r3, #34	; 0x22
 8006114:	4680      	mov	r8, r0
 8006116:	4689      	mov	r9, r1
 8006118:	bf08      	it	eq
 800611a:	f8ca 3000 	streq.w	r3, [sl]
 800611e:	e62d      	b.n	8005d7c <_strtod_l+0x49c>
 8006120:	f04f 32ff 	mov.w	r2, #4294967295
 8006124:	fa02 f303 	lsl.w	r3, r2, r3
 8006128:	ea03 0808 	and.w	r8, r3, r8
 800612c:	e6db      	b.n	8005ee6 <_strtod_l+0x606>
 800612e:	f1c5 457f 	rsb	r5, r5, #4278190080	; 0xff000000
 8006132:	f505 057f 	add.w	r5, r5, #16711680	; 0xff0000
 8006136:	f505 457b 	add.w	r5, r5, #64256	; 0xfb00
 800613a:	35e2      	adds	r5, #226	; 0xe2
 800613c:	fa07 f505 	lsl.w	r5, r7, r5
 8006140:	970f      	str	r7, [sp, #60]	; 0x3c
 8006142:	e742      	b.n	8005fca <_strtod_l+0x6ea>
 8006144:	2301      	movs	r3, #1
 8006146:	2500      	movs	r5, #0
 8006148:	930f      	str	r3, [sp, #60]	; 0x3c
 800614a:	e73e      	b.n	8005fca <_strtod_l+0x6ea>
 800614c:	463a      	mov	r2, r7
 800614e:	4650      	mov	r0, sl
 8006150:	991c      	ldr	r1, [sp, #112]	; 0x70
 8006152:	f001 febb 	bl	8007ecc <__lshift>
 8006156:	901c      	str	r0, [sp, #112]	; 0x70
 8006158:	2800      	cmp	r0, #0
 800615a:	f47f af64 	bne.w	8006026 <_strtod_l+0x746>
 800615e:	e602      	b.n	8005d66 <_strtod_l+0x486>
 8006160:	08009468 	.word	0x08009468
 8006164:	fffffc02 	.word	0xfffffc02
 8006168:	7ff00000 	.word	0x7ff00000
 800616c:	39500000 	.word	0x39500000
 8006170:	f8cd 9024 	str.w	r9, [sp, #36]	; 0x24
 8006174:	d166      	bne.n	8006244 <_strtod_l+0x964>
 8006176:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8006178:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800617c:	b35a      	cbz	r2, 80061d6 <_strtod_l+0x8f6>
 800617e:	4a9c      	ldr	r2, [pc, #624]	; (80063f0 <_strtod_l+0xb10>)
 8006180:	4293      	cmp	r3, r2
 8006182:	d12c      	bne.n	80061de <_strtod_l+0x8fe>
 8006184:	9b05      	ldr	r3, [sp, #20]
 8006186:	4640      	mov	r0, r8
 8006188:	b303      	cbz	r3, 80061cc <_strtod_l+0x8ec>
 800618a:	464b      	mov	r3, r9
 800618c:	4a99      	ldr	r2, [pc, #612]	; (80063f4 <_strtod_l+0xb14>)
 800618e:	f04f 31ff 	mov.w	r1, #4294967295
 8006192:	401a      	ands	r2, r3
 8006194:	f1b2 6fd4 	cmp.w	r2, #111149056	; 0x6a00000
 8006198:	d81b      	bhi.n	80061d2 <_strtod_l+0x8f2>
 800619a:	0d12      	lsrs	r2, r2, #20
 800619c:	f1c2 036b 	rsb	r3, r2, #107	; 0x6b
 80061a0:	fa01 f303 	lsl.w	r3, r1, r3
 80061a4:	4298      	cmp	r0, r3
 80061a6:	d11a      	bne.n	80061de <_strtod_l+0x8fe>
 80061a8:	4b93      	ldr	r3, [pc, #588]	; (80063f8 <_strtod_l+0xb18>)
 80061aa:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80061ac:	429a      	cmp	r2, r3
 80061ae:	d102      	bne.n	80061b6 <_strtod_l+0x8d6>
 80061b0:	3001      	adds	r0, #1
 80061b2:	f43f add8 	beq.w	8005d66 <_strtod_l+0x486>
 80061b6:	f04f 0800 	mov.w	r8, #0
 80061ba:	4b8e      	ldr	r3, [pc, #568]	; (80063f4 <_strtod_l+0xb14>)
 80061bc:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80061be:	401a      	ands	r2, r3
 80061c0:	f502 1980 	add.w	r9, r2, #1048576	; 0x100000
 80061c4:	9b05      	ldr	r3, [sp, #20]
 80061c6:	2b00      	cmp	r3, #0
 80061c8:	d196      	bne.n	80060f8 <_strtod_l+0x818>
 80061ca:	e5d7      	b.n	8005d7c <_strtod_l+0x49c>
 80061cc:	f04f 33ff 	mov.w	r3, #4294967295
 80061d0:	e7e8      	b.n	80061a4 <_strtod_l+0x8c4>
 80061d2:	460b      	mov	r3, r1
 80061d4:	e7e6      	b.n	80061a4 <_strtod_l+0x8c4>
 80061d6:	ea53 0308 	orrs.w	r3, r3, r8
 80061da:	f43f af7d 	beq.w	80060d8 <_strtod_l+0x7f8>
 80061de:	b1e5      	cbz	r5, 800621a <_strtod_l+0x93a>
 80061e0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80061e2:	421d      	tst	r5, r3
 80061e4:	d0ee      	beq.n	80061c4 <_strtod_l+0x8e4>
 80061e6:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80061e8:	4640      	mov	r0, r8
 80061ea:	4649      	mov	r1, r9
 80061ec:	9a05      	ldr	r2, [sp, #20]
 80061ee:	b1c3      	cbz	r3, 8006222 <_strtod_l+0x942>
 80061f0:	f7ff fb52 	bl	8005898 <sulp>
 80061f4:	4602      	mov	r2, r0
 80061f6:	460b      	mov	r3, r1
 80061f8:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 80061fc:	f7f9 ffb6 	bl	800016c <__adddf3>
 8006200:	4680      	mov	r8, r0
 8006202:	4689      	mov	r9, r1
 8006204:	e7de      	b.n	80061c4 <_strtod_l+0x8e4>
 8006206:	4013      	ands	r3, r2
 8006208:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 800620c:	ea6f 5913 	mvn.w	r9, r3, lsr #20
 8006210:	f04f 38ff 	mov.w	r8, #4294967295
 8006214:	ea6f 5909 	mvn.w	r9, r9, lsl #20
 8006218:	e7d4      	b.n	80061c4 <_strtod_l+0x8e4>
 800621a:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800621c:	ea13 0f08 	tst.w	r3, r8
 8006220:	e7e0      	b.n	80061e4 <_strtod_l+0x904>
 8006222:	f7ff fb39 	bl	8005898 <sulp>
 8006226:	4602      	mov	r2, r0
 8006228:	460b      	mov	r3, r1
 800622a:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 800622e:	f7f9 ff9b 	bl	8000168 <__aeabi_dsub>
 8006232:	2200      	movs	r2, #0
 8006234:	2300      	movs	r3, #0
 8006236:	4680      	mov	r8, r0
 8006238:	4689      	mov	r9, r1
 800623a:	f7fa fbb5 	bl	80009a8 <__aeabi_dcmpeq>
 800623e:	2800      	cmp	r0, #0
 8006240:	d0c0      	beq.n	80061c4 <_strtod_l+0x8e4>
 8006242:	e602      	b.n	8005e4a <_strtod_l+0x56a>
 8006244:	4658      	mov	r0, fp
 8006246:	9904      	ldr	r1, [sp, #16]
 8006248:	f002 f82e 	bl	80082a8 <__ratio>
 800624c:	2200      	movs	r2, #0
 800624e:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8006252:	4606      	mov	r6, r0
 8006254:	460f      	mov	r7, r1
 8006256:	f7fa fbbb 	bl	80009d0 <__aeabi_dcmple>
 800625a:	2800      	cmp	r0, #0
 800625c:	d075      	beq.n	800634a <_strtod_l+0xa6a>
 800625e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8006260:	2b00      	cmp	r3, #0
 8006262:	d047      	beq.n	80062f4 <_strtod_l+0xa14>
 8006264:	2600      	movs	r6, #0
 8006266:	4f65      	ldr	r7, [pc, #404]	; (80063fc <_strtod_l+0xb1c>)
 8006268:	4d64      	ldr	r5, [pc, #400]	; (80063fc <_strtod_l+0xb1c>)
 800626a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800626c:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8006270:	0d1b      	lsrs	r3, r3, #20
 8006272:	051b      	lsls	r3, r3, #20
 8006274:	930f      	str	r3, [sp, #60]	; 0x3c
 8006276:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8006278:	4b61      	ldr	r3, [pc, #388]	; (8006400 <_strtod_l+0xb20>)
 800627a:	429a      	cmp	r2, r3
 800627c:	f040 80c8 	bne.w	8006410 <_strtod_l+0xb30>
 8006280:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8006284:	e9cd 2314 	strd	r2, r3, [sp, #80]	; 0x50
 8006288:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800628a:	4640      	mov	r0, r8
 800628c:	f1a3 7954 	sub.w	r9, r3, #55574528	; 0x3500000
 8006290:	4649      	mov	r1, r9
 8006292:	f001 ff33 	bl	80080fc <__ulp>
 8006296:	4602      	mov	r2, r0
 8006298:	460b      	mov	r3, r1
 800629a:	4630      	mov	r0, r6
 800629c:	4639      	mov	r1, r7
 800629e:	f7fa f91b 	bl	80004d8 <__aeabi_dmul>
 80062a2:	4642      	mov	r2, r8
 80062a4:	464b      	mov	r3, r9
 80062a6:	f7f9 ff61 	bl	800016c <__adddf3>
 80062aa:	460b      	mov	r3, r1
 80062ac:	4951      	ldr	r1, [pc, #324]	; (80063f4 <_strtod_l+0xb14>)
 80062ae:	4a55      	ldr	r2, [pc, #340]	; (8006404 <_strtod_l+0xb24>)
 80062b0:	4019      	ands	r1, r3
 80062b2:	4291      	cmp	r1, r2
 80062b4:	4680      	mov	r8, r0
 80062b6:	d95e      	bls.n	8006376 <_strtod_l+0xa96>
 80062b8:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80062ba:	f102 7254 	add.w	r2, r2, #55574528	; 0x3500000
 80062be:	4293      	cmp	r3, r2
 80062c0:	d103      	bne.n	80062ca <_strtod_l+0x9ea>
 80062c2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80062c4:	3301      	adds	r3, #1
 80062c6:	f43f ad4e 	beq.w	8005d66 <_strtod_l+0x486>
 80062ca:	f04f 38ff 	mov.w	r8, #4294967295
 80062ce:	f8df 9128 	ldr.w	r9, [pc, #296]	; 80063f8 <_strtod_l+0xb18>
 80062d2:	4650      	mov	r0, sl
 80062d4:	991c      	ldr	r1, [sp, #112]	; 0x70
 80062d6:	f001 fbe1 	bl	8007a9c <_Bfree>
 80062da:	4650      	mov	r0, sl
 80062dc:	9906      	ldr	r1, [sp, #24]
 80062de:	f001 fbdd 	bl	8007a9c <_Bfree>
 80062e2:	4650      	mov	r0, sl
 80062e4:	9904      	ldr	r1, [sp, #16]
 80062e6:	f001 fbd9 	bl	8007a9c <_Bfree>
 80062ea:	4659      	mov	r1, fp
 80062ec:	4650      	mov	r0, sl
 80062ee:	f001 fbd5 	bl	8007a9c <_Bfree>
 80062f2:	e61c      	b.n	8005f2e <_strtod_l+0x64e>
 80062f4:	f1b8 0f00 	cmp.w	r8, #0
 80062f8:	d119      	bne.n	800632e <_strtod_l+0xa4e>
 80062fa:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80062fc:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8006300:	b9e3      	cbnz	r3, 800633c <_strtod_l+0xa5c>
 8006302:	2200      	movs	r2, #0
 8006304:	4630      	mov	r0, r6
 8006306:	4639      	mov	r1, r7
 8006308:	4b3c      	ldr	r3, [pc, #240]	; (80063fc <_strtod_l+0xb1c>)
 800630a:	f7fa fb57 	bl	80009bc <__aeabi_dcmplt>
 800630e:	b9c8      	cbnz	r0, 8006344 <_strtod_l+0xa64>
 8006310:	2200      	movs	r2, #0
 8006312:	4630      	mov	r0, r6
 8006314:	4639      	mov	r1, r7
 8006316:	4b3c      	ldr	r3, [pc, #240]	; (8006408 <_strtod_l+0xb28>)
 8006318:	f7fa f8de 	bl	80004d8 <__aeabi_dmul>
 800631c:	4604      	mov	r4, r0
 800631e:	460d      	mov	r5, r1
 8006320:	f105 4300 	add.w	r3, r5, #2147483648	; 0x80000000
 8006324:	9418      	str	r4, [sp, #96]	; 0x60
 8006326:	9319      	str	r3, [sp, #100]	; 0x64
 8006328:	e9dd 6718 	ldrd	r6, r7, [sp, #96]	; 0x60
 800632c:	e79d      	b.n	800626a <_strtod_l+0x98a>
 800632e:	f1b8 0f01 	cmp.w	r8, #1
 8006332:	d103      	bne.n	800633c <_strtod_l+0xa5c>
 8006334:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006336:	2b00      	cmp	r3, #0
 8006338:	f43f ad87 	beq.w	8005e4a <_strtod_l+0x56a>
 800633c:	2600      	movs	r6, #0
 800633e:	2400      	movs	r4, #0
 8006340:	4f32      	ldr	r7, [pc, #200]	; (800640c <_strtod_l+0xb2c>)
 8006342:	e791      	b.n	8006268 <_strtod_l+0x988>
 8006344:	9c0d      	ldr	r4, [sp, #52]	; 0x34
 8006346:	4d30      	ldr	r5, [pc, #192]	; (8006408 <_strtod_l+0xb28>)
 8006348:	e7ea      	b.n	8006320 <_strtod_l+0xa40>
 800634a:	4b2f      	ldr	r3, [pc, #188]	; (8006408 <_strtod_l+0xb28>)
 800634c:	2200      	movs	r2, #0
 800634e:	4630      	mov	r0, r6
 8006350:	4639      	mov	r1, r7
 8006352:	f7fa f8c1 	bl	80004d8 <__aeabi_dmul>
 8006356:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8006358:	4604      	mov	r4, r0
 800635a:	460d      	mov	r5, r1
 800635c:	b933      	cbnz	r3, 800636c <_strtod_l+0xa8c>
 800635e:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8006362:	9010      	str	r0, [sp, #64]	; 0x40
 8006364:	9311      	str	r3, [sp, #68]	; 0x44
 8006366:	e9dd 6710 	ldrd	r6, r7, [sp, #64]	; 0x40
 800636a:	e77e      	b.n	800626a <_strtod_l+0x98a>
 800636c:	4602      	mov	r2, r0
 800636e:	460b      	mov	r3, r1
 8006370:	e9cd 2310 	strd	r2, r3, [sp, #64]	; 0x40
 8006374:	e7f7      	b.n	8006366 <_strtod_l+0xa86>
 8006376:	f103 7954 	add.w	r9, r3, #55574528	; 0x3500000
 800637a:	9b05      	ldr	r3, [sp, #20]
 800637c:	2b00      	cmp	r3, #0
 800637e:	d1a8      	bne.n	80062d2 <_strtod_l+0x9f2>
 8006380:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8006384:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8006386:	0d1b      	lsrs	r3, r3, #20
 8006388:	051b      	lsls	r3, r3, #20
 800638a:	429a      	cmp	r2, r3
 800638c:	d1a1      	bne.n	80062d2 <_strtod_l+0x9f2>
 800638e:	4620      	mov	r0, r4
 8006390:	4629      	mov	r1, r5
 8006392:	f7fa fe47 	bl	8001024 <__aeabi_d2lz>
 8006396:	f7fa f871 	bl	800047c <__aeabi_l2d>
 800639a:	4602      	mov	r2, r0
 800639c:	460b      	mov	r3, r1
 800639e:	4620      	mov	r0, r4
 80063a0:	4629      	mov	r1, r5
 80063a2:	f7f9 fee1 	bl	8000168 <__aeabi_dsub>
 80063a6:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 80063a8:	f3c9 0313 	ubfx	r3, r9, #0, #20
 80063ac:	ea43 0308 	orr.w	r3, r3, r8
 80063b0:	4313      	orrs	r3, r2
 80063b2:	4604      	mov	r4, r0
 80063b4:	460d      	mov	r5, r1
 80063b6:	d066      	beq.n	8006486 <_strtod_l+0xba6>
 80063b8:	a309      	add	r3, pc, #36	; (adr r3, 80063e0 <_strtod_l+0xb00>)
 80063ba:	e9d3 2300 	ldrd	r2, r3, [r3]
 80063be:	f7fa fafd 	bl	80009bc <__aeabi_dcmplt>
 80063c2:	2800      	cmp	r0, #0
 80063c4:	f47f acda 	bne.w	8005d7c <_strtod_l+0x49c>
 80063c8:	a307      	add	r3, pc, #28	; (adr r3, 80063e8 <_strtod_l+0xb08>)
 80063ca:	e9d3 2300 	ldrd	r2, r3, [r3]
 80063ce:	4620      	mov	r0, r4
 80063d0:	4629      	mov	r1, r5
 80063d2:	f7fa fb11 	bl	80009f8 <__aeabi_dcmpgt>
 80063d6:	2800      	cmp	r0, #0
 80063d8:	f43f af7b 	beq.w	80062d2 <_strtod_l+0x9f2>
 80063dc:	e4ce      	b.n	8005d7c <_strtod_l+0x49c>
 80063de:	bf00      	nop
 80063e0:	94a03595 	.word	0x94a03595
 80063e4:	3fdfffff 	.word	0x3fdfffff
 80063e8:	35afe535 	.word	0x35afe535
 80063ec:	3fe00000 	.word	0x3fe00000
 80063f0:	000fffff 	.word	0x000fffff
 80063f4:	7ff00000 	.word	0x7ff00000
 80063f8:	7fefffff 	.word	0x7fefffff
 80063fc:	3ff00000 	.word	0x3ff00000
 8006400:	7fe00000 	.word	0x7fe00000
 8006404:	7c9fffff 	.word	0x7c9fffff
 8006408:	3fe00000 	.word	0x3fe00000
 800640c:	bff00000 	.word	0xbff00000
 8006410:	9b05      	ldr	r3, [sp, #20]
 8006412:	b313      	cbz	r3, 800645a <_strtod_l+0xb7a>
 8006414:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8006416:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 800641a:	d81e      	bhi.n	800645a <_strtod_l+0xb7a>
 800641c:	a326      	add	r3, pc, #152	; (adr r3, 80064b8 <_strtod_l+0xbd8>)
 800641e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006422:	4620      	mov	r0, r4
 8006424:	4629      	mov	r1, r5
 8006426:	f7fa fad3 	bl	80009d0 <__aeabi_dcmple>
 800642a:	b190      	cbz	r0, 8006452 <_strtod_l+0xb72>
 800642c:	4629      	mov	r1, r5
 800642e:	4620      	mov	r0, r4
 8006430:	f7fa fb2a 	bl	8000a88 <__aeabi_d2uiz>
 8006434:	2801      	cmp	r0, #1
 8006436:	bf38      	it	cc
 8006438:	2001      	movcc	r0, #1
 800643a:	f7f9 ffd3 	bl	80003e4 <__aeabi_ui2d>
 800643e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8006440:	4604      	mov	r4, r0
 8006442:	460d      	mov	r5, r1
 8006444:	b9d3      	cbnz	r3, 800647c <_strtod_l+0xb9c>
 8006446:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800644a:	9012      	str	r0, [sp, #72]	; 0x48
 800644c:	9313      	str	r3, [sp, #76]	; 0x4c
 800644e:	e9dd 6712 	ldrd	r6, r7, [sp, #72]	; 0x48
 8006452:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8006454:	f107 63d6 	add.w	r3, r7, #112197632	; 0x6b00000
 8006458:	1a9f      	subs	r7, r3, r2
 800645a:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 800645e:	f001 fe4d 	bl	80080fc <__ulp>
 8006462:	4602      	mov	r2, r0
 8006464:	460b      	mov	r3, r1
 8006466:	4630      	mov	r0, r6
 8006468:	4639      	mov	r1, r7
 800646a:	f7fa f835 	bl	80004d8 <__aeabi_dmul>
 800646e:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8006472:	f7f9 fe7b 	bl	800016c <__adddf3>
 8006476:	4680      	mov	r8, r0
 8006478:	4689      	mov	r9, r1
 800647a:	e77e      	b.n	800637a <_strtod_l+0xa9a>
 800647c:	4602      	mov	r2, r0
 800647e:	460b      	mov	r3, r1
 8006480:	e9cd 2312 	strd	r2, r3, [sp, #72]	; 0x48
 8006484:	e7e3      	b.n	800644e <_strtod_l+0xb6e>
 8006486:	a30e      	add	r3, pc, #56	; (adr r3, 80064c0 <_strtod_l+0xbe0>)
 8006488:	e9d3 2300 	ldrd	r2, r3, [r3]
 800648c:	f7fa fa96 	bl	80009bc <__aeabi_dcmplt>
 8006490:	e7a1      	b.n	80063d6 <_strtod_l+0xaf6>
 8006492:	2300      	movs	r3, #0
 8006494:	930c      	str	r3, [sp, #48]	; 0x30
 8006496:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8006498:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 800649a:	6013      	str	r3, [r2, #0]
 800649c:	f7ff ba65 	b.w	800596a <_strtod_l+0x8a>
 80064a0:	2b65      	cmp	r3, #101	; 0x65
 80064a2:	f43f ab5c 	beq.w	8005b5e <_strtod_l+0x27e>
 80064a6:	2b45      	cmp	r3, #69	; 0x45
 80064a8:	f43f ab59 	beq.w	8005b5e <_strtod_l+0x27e>
 80064ac:	2201      	movs	r2, #1
 80064ae:	f7ff bb8d 	b.w	8005bcc <_strtod_l+0x2ec>
 80064b2:	bf00      	nop
 80064b4:	f3af 8000 	nop.w
 80064b8:	ffc00000 	.word	0xffc00000
 80064bc:	41dfffff 	.word	0x41dfffff
 80064c0:	94a03595 	.word	0x94a03595
 80064c4:	3fcfffff 	.word	0x3fcfffff

080064c8 <_strtod_r>:
 80064c8:	4b01      	ldr	r3, [pc, #4]	; (80064d0 <_strtod_r+0x8>)
 80064ca:	f7ff ba09 	b.w	80058e0 <_strtod_l>
 80064ce:	bf00      	nop
 80064d0:	20000074 	.word	0x20000074

080064d4 <_strtol_l.isra.0>:
 80064d4:	2b01      	cmp	r3, #1
 80064d6:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80064da:	4686      	mov	lr, r0
 80064dc:	d001      	beq.n	80064e2 <_strtol_l.isra.0+0xe>
 80064de:	2b24      	cmp	r3, #36	; 0x24
 80064e0:	d906      	bls.n	80064f0 <_strtol_l.isra.0+0x1c>
 80064e2:	f7fe fb11 	bl	8004b08 <__errno>
 80064e6:	2316      	movs	r3, #22
 80064e8:	6003      	str	r3, [r0, #0]
 80064ea:	2000      	movs	r0, #0
 80064ec:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80064f0:	468c      	mov	ip, r1
 80064f2:	4e3a      	ldr	r6, [pc, #232]	; (80065dc <_strtol_l.isra.0+0x108>)
 80064f4:	4660      	mov	r0, ip
 80064f6:	f81c 4b01 	ldrb.w	r4, [ip], #1
 80064fa:	5da5      	ldrb	r5, [r4, r6]
 80064fc:	f015 0508 	ands.w	r5, r5, #8
 8006500:	d1f8      	bne.n	80064f4 <_strtol_l.isra.0+0x20>
 8006502:	2c2d      	cmp	r4, #45	; 0x2d
 8006504:	d133      	bne.n	800656e <_strtol_l.isra.0+0x9a>
 8006506:	f04f 0801 	mov.w	r8, #1
 800650a:	f89c 4000 	ldrb.w	r4, [ip]
 800650e:	f100 0c02 	add.w	ip, r0, #2
 8006512:	2b00      	cmp	r3, #0
 8006514:	d05d      	beq.n	80065d2 <_strtol_l.isra.0+0xfe>
 8006516:	2b10      	cmp	r3, #16
 8006518:	d10c      	bne.n	8006534 <_strtol_l.isra.0+0x60>
 800651a:	2c30      	cmp	r4, #48	; 0x30
 800651c:	d10a      	bne.n	8006534 <_strtol_l.isra.0+0x60>
 800651e:	f89c 0000 	ldrb.w	r0, [ip]
 8006522:	f000 00df 	and.w	r0, r0, #223	; 0xdf
 8006526:	2858      	cmp	r0, #88	; 0x58
 8006528:	d14e      	bne.n	80065c8 <_strtol_l.isra.0+0xf4>
 800652a:	2310      	movs	r3, #16
 800652c:	f89c 4001 	ldrb.w	r4, [ip, #1]
 8006530:	f10c 0c02 	add.w	ip, ip, #2
 8006534:	2500      	movs	r5, #0
 8006536:	f108 4700 	add.w	r7, r8, #2147483648	; 0x80000000
 800653a:	3f01      	subs	r7, #1
 800653c:	fbb7 f9f3 	udiv	r9, r7, r3
 8006540:	4628      	mov	r0, r5
 8006542:	fb03 7a19 	mls	sl, r3, r9, r7
 8006546:	f1a4 0630 	sub.w	r6, r4, #48	; 0x30
 800654a:	2e09      	cmp	r6, #9
 800654c:	d818      	bhi.n	8006580 <_strtol_l.isra.0+0xac>
 800654e:	4634      	mov	r4, r6
 8006550:	42a3      	cmp	r3, r4
 8006552:	dd24      	ble.n	800659e <_strtol_l.isra.0+0xca>
 8006554:	2d00      	cmp	r5, #0
 8006556:	db1f      	blt.n	8006598 <_strtol_l.isra.0+0xc4>
 8006558:	4581      	cmp	r9, r0
 800655a:	d31d      	bcc.n	8006598 <_strtol_l.isra.0+0xc4>
 800655c:	d101      	bne.n	8006562 <_strtol_l.isra.0+0x8e>
 800655e:	45a2      	cmp	sl, r4
 8006560:	db1a      	blt.n	8006598 <_strtol_l.isra.0+0xc4>
 8006562:	2501      	movs	r5, #1
 8006564:	fb00 4003 	mla	r0, r0, r3, r4
 8006568:	f81c 4b01 	ldrb.w	r4, [ip], #1
 800656c:	e7eb      	b.n	8006546 <_strtol_l.isra.0+0x72>
 800656e:	2c2b      	cmp	r4, #43	; 0x2b
 8006570:	bf08      	it	eq
 8006572:	f89c 4000 	ldrbeq.w	r4, [ip]
 8006576:	46a8      	mov	r8, r5
 8006578:	bf08      	it	eq
 800657a:	f100 0c02 	addeq.w	ip, r0, #2
 800657e:	e7c8      	b.n	8006512 <_strtol_l.isra.0+0x3e>
 8006580:	f1a4 0641 	sub.w	r6, r4, #65	; 0x41
 8006584:	2e19      	cmp	r6, #25
 8006586:	d801      	bhi.n	800658c <_strtol_l.isra.0+0xb8>
 8006588:	3c37      	subs	r4, #55	; 0x37
 800658a:	e7e1      	b.n	8006550 <_strtol_l.isra.0+0x7c>
 800658c:	f1a4 0661 	sub.w	r6, r4, #97	; 0x61
 8006590:	2e19      	cmp	r6, #25
 8006592:	d804      	bhi.n	800659e <_strtol_l.isra.0+0xca>
 8006594:	3c57      	subs	r4, #87	; 0x57
 8006596:	e7db      	b.n	8006550 <_strtol_l.isra.0+0x7c>
 8006598:	f04f 35ff 	mov.w	r5, #4294967295
 800659c:	e7e4      	b.n	8006568 <_strtol_l.isra.0+0x94>
 800659e:	2d00      	cmp	r5, #0
 80065a0:	da08      	bge.n	80065b4 <_strtol_l.isra.0+0xe0>
 80065a2:	2322      	movs	r3, #34	; 0x22
 80065a4:	4638      	mov	r0, r7
 80065a6:	f8ce 3000 	str.w	r3, [lr]
 80065aa:	2a00      	cmp	r2, #0
 80065ac:	d09e      	beq.n	80064ec <_strtol_l.isra.0+0x18>
 80065ae:	f10c 31ff 	add.w	r1, ip, #4294967295
 80065b2:	e007      	b.n	80065c4 <_strtol_l.isra.0+0xf0>
 80065b4:	f1b8 0f00 	cmp.w	r8, #0
 80065b8:	d000      	beq.n	80065bc <_strtol_l.isra.0+0xe8>
 80065ba:	4240      	negs	r0, r0
 80065bc:	2a00      	cmp	r2, #0
 80065be:	d095      	beq.n	80064ec <_strtol_l.isra.0+0x18>
 80065c0:	2d00      	cmp	r5, #0
 80065c2:	d1f4      	bne.n	80065ae <_strtol_l.isra.0+0xda>
 80065c4:	6011      	str	r1, [r2, #0]
 80065c6:	e791      	b.n	80064ec <_strtol_l.isra.0+0x18>
 80065c8:	2430      	movs	r4, #48	; 0x30
 80065ca:	2b00      	cmp	r3, #0
 80065cc:	d1b2      	bne.n	8006534 <_strtol_l.isra.0+0x60>
 80065ce:	2308      	movs	r3, #8
 80065d0:	e7b0      	b.n	8006534 <_strtol_l.isra.0+0x60>
 80065d2:	2c30      	cmp	r4, #48	; 0x30
 80065d4:	d0a3      	beq.n	800651e <_strtol_l.isra.0+0x4a>
 80065d6:	230a      	movs	r3, #10
 80065d8:	e7ac      	b.n	8006534 <_strtol_l.isra.0+0x60>
 80065da:	bf00      	nop
 80065dc:	08009491 	.word	0x08009491

080065e0 <_strtol_r>:
 80065e0:	f7ff bf78 	b.w	80064d4 <_strtol_l.isra.0>

080065e4 <quorem>:
 80065e4:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80065e8:	6903      	ldr	r3, [r0, #16]
 80065ea:	690c      	ldr	r4, [r1, #16]
 80065ec:	4607      	mov	r7, r0
 80065ee:	42a3      	cmp	r3, r4
 80065f0:	f2c0 8083 	blt.w	80066fa <quorem+0x116>
 80065f4:	3c01      	subs	r4, #1
 80065f6:	f100 0514 	add.w	r5, r0, #20
 80065fa:	f101 0814 	add.w	r8, r1, #20
 80065fe:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8006602:	9301      	str	r3, [sp, #4]
 8006604:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8006608:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800660c:	3301      	adds	r3, #1
 800660e:	429a      	cmp	r2, r3
 8006610:	fbb2 f6f3 	udiv	r6, r2, r3
 8006614:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 8006618:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800661c:	d332      	bcc.n	8006684 <quorem+0xa0>
 800661e:	f04f 0e00 	mov.w	lr, #0
 8006622:	4640      	mov	r0, r8
 8006624:	46ac      	mov	ip, r5
 8006626:	46f2      	mov	sl, lr
 8006628:	f850 2b04 	ldr.w	r2, [r0], #4
 800662c:	b293      	uxth	r3, r2
 800662e:	fb06 e303 	mla	r3, r6, r3, lr
 8006632:	0c12      	lsrs	r2, r2, #16
 8006634:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 8006638:	fb06 e202 	mla	r2, r6, r2, lr
 800663c:	b29b      	uxth	r3, r3
 800663e:	ebaa 0303 	sub.w	r3, sl, r3
 8006642:	f8dc a000 	ldr.w	sl, [ip]
 8006646:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 800664a:	fa1f fa8a 	uxth.w	sl, sl
 800664e:	4453      	add	r3, sl
 8006650:	fa1f fa82 	uxth.w	sl, r2
 8006654:	f8dc 2000 	ldr.w	r2, [ip]
 8006658:	4581      	cmp	r9, r0
 800665a:	ebca 4212 	rsb	r2, sl, r2, lsr #16
 800665e:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8006662:	b29b      	uxth	r3, r3
 8006664:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8006668:	ea4f 4a22 	mov.w	sl, r2, asr #16
 800666c:	f84c 3b04 	str.w	r3, [ip], #4
 8006670:	d2da      	bcs.n	8006628 <quorem+0x44>
 8006672:	f855 300b 	ldr.w	r3, [r5, fp]
 8006676:	b92b      	cbnz	r3, 8006684 <quorem+0xa0>
 8006678:	9b01      	ldr	r3, [sp, #4]
 800667a:	3b04      	subs	r3, #4
 800667c:	429d      	cmp	r5, r3
 800667e:	461a      	mov	r2, r3
 8006680:	d32f      	bcc.n	80066e2 <quorem+0xfe>
 8006682:	613c      	str	r4, [r7, #16]
 8006684:	4638      	mov	r0, r7
 8006686:	f001 fc8d 	bl	8007fa4 <__mcmp>
 800668a:	2800      	cmp	r0, #0
 800668c:	db25      	blt.n	80066da <quorem+0xf6>
 800668e:	4628      	mov	r0, r5
 8006690:	f04f 0c00 	mov.w	ip, #0
 8006694:	3601      	adds	r6, #1
 8006696:	f858 1b04 	ldr.w	r1, [r8], #4
 800669a:	f8d0 e000 	ldr.w	lr, [r0]
 800669e:	b28b      	uxth	r3, r1
 80066a0:	ebac 0303 	sub.w	r3, ip, r3
 80066a4:	fa1f f28e 	uxth.w	r2, lr
 80066a8:	4413      	add	r3, r2
 80066aa:	0c0a      	lsrs	r2, r1, #16
 80066ac:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 80066b0:	eb02 4223 	add.w	r2, r2, r3, asr #16
 80066b4:	b29b      	uxth	r3, r3
 80066b6:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80066ba:	45c1      	cmp	r9, r8
 80066bc:	ea4f 4c22 	mov.w	ip, r2, asr #16
 80066c0:	f840 3b04 	str.w	r3, [r0], #4
 80066c4:	d2e7      	bcs.n	8006696 <quorem+0xb2>
 80066c6:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 80066ca:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 80066ce:	b922      	cbnz	r2, 80066da <quorem+0xf6>
 80066d0:	3b04      	subs	r3, #4
 80066d2:	429d      	cmp	r5, r3
 80066d4:	461a      	mov	r2, r3
 80066d6:	d30a      	bcc.n	80066ee <quorem+0x10a>
 80066d8:	613c      	str	r4, [r7, #16]
 80066da:	4630      	mov	r0, r6
 80066dc:	b003      	add	sp, #12
 80066de:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80066e2:	6812      	ldr	r2, [r2, #0]
 80066e4:	3b04      	subs	r3, #4
 80066e6:	2a00      	cmp	r2, #0
 80066e8:	d1cb      	bne.n	8006682 <quorem+0x9e>
 80066ea:	3c01      	subs	r4, #1
 80066ec:	e7c6      	b.n	800667c <quorem+0x98>
 80066ee:	6812      	ldr	r2, [r2, #0]
 80066f0:	3b04      	subs	r3, #4
 80066f2:	2a00      	cmp	r2, #0
 80066f4:	d1f0      	bne.n	80066d8 <quorem+0xf4>
 80066f6:	3c01      	subs	r4, #1
 80066f8:	e7eb      	b.n	80066d2 <quorem+0xee>
 80066fa:	2000      	movs	r0, #0
 80066fc:	e7ee      	b.n	80066dc <quorem+0xf8>
	...

08006700 <_dtoa_r>:
 8006700:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006704:	4616      	mov	r6, r2
 8006706:	461f      	mov	r7, r3
 8006708:	6a44      	ldr	r4, [r0, #36]	; 0x24
 800670a:	b099      	sub	sp, #100	; 0x64
 800670c:	4605      	mov	r5, r0
 800670e:	e9cd 6704 	strd	r6, r7, [sp, #16]
 8006712:	f8dd 8094 	ldr.w	r8, [sp, #148]	; 0x94
 8006716:	b974      	cbnz	r4, 8006736 <_dtoa_r+0x36>
 8006718:	2010      	movs	r0, #16
 800671a:	f001 f949 	bl	80079b0 <malloc>
 800671e:	4602      	mov	r2, r0
 8006720:	6268      	str	r0, [r5, #36]	; 0x24
 8006722:	b920      	cbnz	r0, 800672e <_dtoa_r+0x2e>
 8006724:	21ea      	movs	r1, #234	; 0xea
 8006726:	4bae      	ldr	r3, [pc, #696]	; (80069e0 <_dtoa_r+0x2e0>)
 8006728:	48ae      	ldr	r0, [pc, #696]	; (80069e4 <_dtoa_r+0x2e4>)
 800672a:	f002 f875 	bl	8008818 <__assert_func>
 800672e:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8006732:	6004      	str	r4, [r0, #0]
 8006734:	60c4      	str	r4, [r0, #12]
 8006736:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8006738:	6819      	ldr	r1, [r3, #0]
 800673a:	b151      	cbz	r1, 8006752 <_dtoa_r+0x52>
 800673c:	685a      	ldr	r2, [r3, #4]
 800673e:	2301      	movs	r3, #1
 8006740:	4093      	lsls	r3, r2
 8006742:	604a      	str	r2, [r1, #4]
 8006744:	608b      	str	r3, [r1, #8]
 8006746:	4628      	mov	r0, r5
 8006748:	f001 f9a8 	bl	8007a9c <_Bfree>
 800674c:	2200      	movs	r2, #0
 800674e:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8006750:	601a      	str	r2, [r3, #0]
 8006752:	1e3b      	subs	r3, r7, #0
 8006754:	bfaf      	iteee	ge
 8006756:	2300      	movge	r3, #0
 8006758:	2201      	movlt	r2, #1
 800675a:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 800675e:	9305      	strlt	r3, [sp, #20]
 8006760:	bfa8      	it	ge
 8006762:	f8c8 3000 	strge.w	r3, [r8]
 8006766:	f8dd 9014 	ldr.w	r9, [sp, #20]
 800676a:	4b9f      	ldr	r3, [pc, #636]	; (80069e8 <_dtoa_r+0x2e8>)
 800676c:	bfb8      	it	lt
 800676e:	f8c8 2000 	strlt.w	r2, [r8]
 8006772:	ea33 0309 	bics.w	r3, r3, r9
 8006776:	d119      	bne.n	80067ac <_dtoa_r+0xac>
 8006778:	f242 730f 	movw	r3, #9999	; 0x270f
 800677c:	9a24      	ldr	r2, [sp, #144]	; 0x90
 800677e:	6013      	str	r3, [r2, #0]
 8006780:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8006784:	4333      	orrs	r3, r6
 8006786:	f000 8580 	beq.w	800728a <_dtoa_r+0xb8a>
 800678a:	9b26      	ldr	r3, [sp, #152]	; 0x98
 800678c:	b953      	cbnz	r3, 80067a4 <_dtoa_r+0xa4>
 800678e:	4b97      	ldr	r3, [pc, #604]	; (80069ec <_dtoa_r+0x2ec>)
 8006790:	e022      	b.n	80067d8 <_dtoa_r+0xd8>
 8006792:	4b97      	ldr	r3, [pc, #604]	; (80069f0 <_dtoa_r+0x2f0>)
 8006794:	9308      	str	r3, [sp, #32]
 8006796:	3308      	adds	r3, #8
 8006798:	9a26      	ldr	r2, [sp, #152]	; 0x98
 800679a:	6013      	str	r3, [r2, #0]
 800679c:	9808      	ldr	r0, [sp, #32]
 800679e:	b019      	add	sp, #100	; 0x64
 80067a0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80067a4:	4b91      	ldr	r3, [pc, #580]	; (80069ec <_dtoa_r+0x2ec>)
 80067a6:	9308      	str	r3, [sp, #32]
 80067a8:	3303      	adds	r3, #3
 80067aa:	e7f5      	b.n	8006798 <_dtoa_r+0x98>
 80067ac:	e9dd 3404 	ldrd	r3, r4, [sp, #16]
 80067b0:	e9cd 340c 	strd	r3, r4, [sp, #48]	; 0x30
 80067b4:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 80067b8:	2200      	movs	r2, #0
 80067ba:	2300      	movs	r3, #0
 80067bc:	f7fa f8f4 	bl	80009a8 <__aeabi_dcmpeq>
 80067c0:	4680      	mov	r8, r0
 80067c2:	b158      	cbz	r0, 80067dc <_dtoa_r+0xdc>
 80067c4:	2301      	movs	r3, #1
 80067c6:	9a24      	ldr	r2, [sp, #144]	; 0x90
 80067c8:	6013      	str	r3, [r2, #0]
 80067ca:	9b26      	ldr	r3, [sp, #152]	; 0x98
 80067cc:	2b00      	cmp	r3, #0
 80067ce:	f000 8559 	beq.w	8007284 <_dtoa_r+0xb84>
 80067d2:	4888      	ldr	r0, [pc, #544]	; (80069f4 <_dtoa_r+0x2f4>)
 80067d4:	6018      	str	r0, [r3, #0]
 80067d6:	1e43      	subs	r3, r0, #1
 80067d8:	9308      	str	r3, [sp, #32]
 80067da:	e7df      	b.n	800679c <_dtoa_r+0x9c>
 80067dc:	ab16      	add	r3, sp, #88	; 0x58
 80067de:	9301      	str	r3, [sp, #4]
 80067e0:	ab17      	add	r3, sp, #92	; 0x5c
 80067e2:	9300      	str	r3, [sp, #0]
 80067e4:	4628      	mov	r0, r5
 80067e6:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 80067ea:	f001 fd01 	bl	80081f0 <__d2b>
 80067ee:	f3c9 540a 	ubfx	r4, r9, #20, #11
 80067f2:	4682      	mov	sl, r0
 80067f4:	2c00      	cmp	r4, #0
 80067f6:	d07e      	beq.n	80068f6 <_dtoa_r+0x1f6>
 80067f8:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 80067fc:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80067fe:	f2a4 34ff 	subw	r4, r4, #1023	; 0x3ff
 8006802:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8006806:	f043 517f 	orr.w	r1, r3, #1069547520	; 0x3fc00000
 800680a:	f441 1140 	orr.w	r1, r1, #3145728	; 0x300000
 800680e:	f8cd 804c 	str.w	r8, [sp, #76]	; 0x4c
 8006812:	2200      	movs	r2, #0
 8006814:	4b78      	ldr	r3, [pc, #480]	; (80069f8 <_dtoa_r+0x2f8>)
 8006816:	f7f9 fca7 	bl	8000168 <__aeabi_dsub>
 800681a:	a36b      	add	r3, pc, #428	; (adr r3, 80069c8 <_dtoa_r+0x2c8>)
 800681c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006820:	f7f9 fe5a 	bl	80004d8 <__aeabi_dmul>
 8006824:	a36a      	add	r3, pc, #424	; (adr r3, 80069d0 <_dtoa_r+0x2d0>)
 8006826:	e9d3 2300 	ldrd	r2, r3, [r3]
 800682a:	f7f9 fc9f 	bl	800016c <__adddf3>
 800682e:	4606      	mov	r6, r0
 8006830:	4620      	mov	r0, r4
 8006832:	460f      	mov	r7, r1
 8006834:	f7f9 fde6 	bl	8000404 <__aeabi_i2d>
 8006838:	a367      	add	r3, pc, #412	; (adr r3, 80069d8 <_dtoa_r+0x2d8>)
 800683a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800683e:	f7f9 fe4b 	bl	80004d8 <__aeabi_dmul>
 8006842:	4602      	mov	r2, r0
 8006844:	460b      	mov	r3, r1
 8006846:	4630      	mov	r0, r6
 8006848:	4639      	mov	r1, r7
 800684a:	f7f9 fc8f 	bl	800016c <__adddf3>
 800684e:	4606      	mov	r6, r0
 8006850:	460f      	mov	r7, r1
 8006852:	f7fa f8f1 	bl	8000a38 <__aeabi_d2iz>
 8006856:	2200      	movs	r2, #0
 8006858:	4681      	mov	r9, r0
 800685a:	2300      	movs	r3, #0
 800685c:	4630      	mov	r0, r6
 800685e:	4639      	mov	r1, r7
 8006860:	f7fa f8ac 	bl	80009bc <__aeabi_dcmplt>
 8006864:	b148      	cbz	r0, 800687a <_dtoa_r+0x17a>
 8006866:	4648      	mov	r0, r9
 8006868:	f7f9 fdcc 	bl	8000404 <__aeabi_i2d>
 800686c:	4632      	mov	r2, r6
 800686e:	463b      	mov	r3, r7
 8006870:	f7fa f89a 	bl	80009a8 <__aeabi_dcmpeq>
 8006874:	b908      	cbnz	r0, 800687a <_dtoa_r+0x17a>
 8006876:	f109 39ff 	add.w	r9, r9, #4294967295
 800687a:	f1b9 0f16 	cmp.w	r9, #22
 800687e:	d857      	bhi.n	8006930 <_dtoa_r+0x230>
 8006880:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8006884:	4b5d      	ldr	r3, [pc, #372]	; (80069fc <_dtoa_r+0x2fc>)
 8006886:	eb03 03c9 	add.w	r3, r3, r9, lsl #3
 800688a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800688e:	f7fa f895 	bl	80009bc <__aeabi_dcmplt>
 8006892:	2800      	cmp	r0, #0
 8006894:	d04e      	beq.n	8006934 <_dtoa_r+0x234>
 8006896:	2300      	movs	r3, #0
 8006898:	f109 39ff 	add.w	r9, r9, #4294967295
 800689c:	930f      	str	r3, [sp, #60]	; 0x3c
 800689e:	9b16      	ldr	r3, [sp, #88]	; 0x58
 80068a0:	1b1c      	subs	r4, r3, r4
 80068a2:	1e63      	subs	r3, r4, #1
 80068a4:	9309      	str	r3, [sp, #36]	; 0x24
 80068a6:	bf49      	itett	mi
 80068a8:	f1c4 0301 	rsbmi	r3, r4, #1
 80068ac:	2300      	movpl	r3, #0
 80068ae:	9306      	strmi	r3, [sp, #24]
 80068b0:	2300      	movmi	r3, #0
 80068b2:	bf54      	ite	pl
 80068b4:	9306      	strpl	r3, [sp, #24]
 80068b6:	9309      	strmi	r3, [sp, #36]	; 0x24
 80068b8:	f1b9 0f00 	cmp.w	r9, #0
 80068bc:	db3c      	blt.n	8006938 <_dtoa_r+0x238>
 80068be:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80068c0:	f8cd 9038 	str.w	r9, [sp, #56]	; 0x38
 80068c4:	444b      	add	r3, r9
 80068c6:	9309      	str	r3, [sp, #36]	; 0x24
 80068c8:	2300      	movs	r3, #0
 80068ca:	930a      	str	r3, [sp, #40]	; 0x28
 80068cc:	9b22      	ldr	r3, [sp, #136]	; 0x88
 80068ce:	2b09      	cmp	r3, #9
 80068d0:	d86c      	bhi.n	80069ac <_dtoa_r+0x2ac>
 80068d2:	2b05      	cmp	r3, #5
 80068d4:	bfc4      	itt	gt
 80068d6:	3b04      	subgt	r3, #4
 80068d8:	9322      	strgt	r3, [sp, #136]	; 0x88
 80068da:	9b22      	ldr	r3, [sp, #136]	; 0x88
 80068dc:	bfc8      	it	gt
 80068de:	2400      	movgt	r4, #0
 80068e0:	f1a3 0302 	sub.w	r3, r3, #2
 80068e4:	bfd8      	it	le
 80068e6:	2401      	movle	r4, #1
 80068e8:	2b03      	cmp	r3, #3
 80068ea:	f200 808b 	bhi.w	8006a04 <_dtoa_r+0x304>
 80068ee:	e8df f003 	tbb	[pc, r3]
 80068f2:	4f2d      	.short	0x4f2d
 80068f4:	5b4d      	.short	0x5b4d
 80068f6:	e9dd 4316 	ldrd	r4, r3, [sp, #88]	; 0x58
 80068fa:	441c      	add	r4, r3
 80068fc:	f204 4332 	addw	r3, r4, #1074	; 0x432
 8006900:	2b20      	cmp	r3, #32
 8006902:	bfc3      	ittte	gt
 8006904:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 8006908:	f204 4012 	addwgt	r0, r4, #1042	; 0x412
 800690c:	fa09 f303 	lslgt.w	r3, r9, r3
 8006910:	f1c3 0320 	rsble	r3, r3, #32
 8006914:	bfc6      	itte	gt
 8006916:	fa26 f000 	lsrgt.w	r0, r6, r0
 800691a:	4318      	orrgt	r0, r3
 800691c:	fa06 f003 	lslle.w	r0, r6, r3
 8006920:	f7f9 fd60 	bl	80003e4 <__aeabi_ui2d>
 8006924:	2301      	movs	r3, #1
 8006926:	f1a1 71f8 	sub.w	r1, r1, #32505856	; 0x1f00000
 800692a:	3c01      	subs	r4, #1
 800692c:	9313      	str	r3, [sp, #76]	; 0x4c
 800692e:	e770      	b.n	8006812 <_dtoa_r+0x112>
 8006930:	2301      	movs	r3, #1
 8006932:	e7b3      	b.n	800689c <_dtoa_r+0x19c>
 8006934:	900f      	str	r0, [sp, #60]	; 0x3c
 8006936:	e7b2      	b.n	800689e <_dtoa_r+0x19e>
 8006938:	9b06      	ldr	r3, [sp, #24]
 800693a:	eba3 0309 	sub.w	r3, r3, r9
 800693e:	9306      	str	r3, [sp, #24]
 8006940:	f1c9 0300 	rsb	r3, r9, #0
 8006944:	930a      	str	r3, [sp, #40]	; 0x28
 8006946:	2300      	movs	r3, #0
 8006948:	930e      	str	r3, [sp, #56]	; 0x38
 800694a:	e7bf      	b.n	80068cc <_dtoa_r+0x1cc>
 800694c:	2300      	movs	r3, #0
 800694e:	930b      	str	r3, [sp, #44]	; 0x2c
 8006950:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8006952:	2b00      	cmp	r3, #0
 8006954:	dc59      	bgt.n	8006a0a <_dtoa_r+0x30a>
 8006956:	f04f 0b01 	mov.w	fp, #1
 800695a:	465b      	mov	r3, fp
 800695c:	f8cd b008 	str.w	fp, [sp, #8]
 8006960:	f8cd b08c 	str.w	fp, [sp, #140]	; 0x8c
 8006964:	2200      	movs	r2, #0
 8006966:	6a68      	ldr	r0, [r5, #36]	; 0x24
 8006968:	6042      	str	r2, [r0, #4]
 800696a:	2204      	movs	r2, #4
 800696c:	f102 0614 	add.w	r6, r2, #20
 8006970:	429e      	cmp	r6, r3
 8006972:	6841      	ldr	r1, [r0, #4]
 8006974:	d94f      	bls.n	8006a16 <_dtoa_r+0x316>
 8006976:	4628      	mov	r0, r5
 8006978:	f001 f850 	bl	8007a1c <_Balloc>
 800697c:	9008      	str	r0, [sp, #32]
 800697e:	2800      	cmp	r0, #0
 8006980:	d14d      	bne.n	8006a1e <_dtoa_r+0x31e>
 8006982:	4602      	mov	r2, r0
 8006984:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 8006988:	4b1d      	ldr	r3, [pc, #116]	; (8006a00 <_dtoa_r+0x300>)
 800698a:	e6cd      	b.n	8006728 <_dtoa_r+0x28>
 800698c:	2301      	movs	r3, #1
 800698e:	e7de      	b.n	800694e <_dtoa_r+0x24e>
 8006990:	2300      	movs	r3, #0
 8006992:	930b      	str	r3, [sp, #44]	; 0x2c
 8006994:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8006996:	eb09 0b03 	add.w	fp, r9, r3
 800699a:	f10b 0301 	add.w	r3, fp, #1
 800699e:	2b01      	cmp	r3, #1
 80069a0:	9302      	str	r3, [sp, #8]
 80069a2:	bfb8      	it	lt
 80069a4:	2301      	movlt	r3, #1
 80069a6:	e7dd      	b.n	8006964 <_dtoa_r+0x264>
 80069a8:	2301      	movs	r3, #1
 80069aa:	e7f2      	b.n	8006992 <_dtoa_r+0x292>
 80069ac:	2401      	movs	r4, #1
 80069ae:	2300      	movs	r3, #0
 80069b0:	940b      	str	r4, [sp, #44]	; 0x2c
 80069b2:	9322      	str	r3, [sp, #136]	; 0x88
 80069b4:	f04f 3bff 	mov.w	fp, #4294967295
 80069b8:	2200      	movs	r2, #0
 80069ba:	2312      	movs	r3, #18
 80069bc:	f8cd b008 	str.w	fp, [sp, #8]
 80069c0:	9223      	str	r2, [sp, #140]	; 0x8c
 80069c2:	e7cf      	b.n	8006964 <_dtoa_r+0x264>
 80069c4:	f3af 8000 	nop.w
 80069c8:	636f4361 	.word	0x636f4361
 80069cc:	3fd287a7 	.word	0x3fd287a7
 80069d0:	8b60c8b3 	.word	0x8b60c8b3
 80069d4:	3fc68a28 	.word	0x3fc68a28
 80069d8:	509f79fb 	.word	0x509f79fb
 80069dc:	3fd34413 	.word	0x3fd34413
 80069e0:	0800959e 	.word	0x0800959e
 80069e4:	080095b5 	.word	0x080095b5
 80069e8:	7ff00000 	.word	0x7ff00000
 80069ec:	0800959a 	.word	0x0800959a
 80069f0:	08009591 	.word	0x08009591
 80069f4:	08009411 	.word	0x08009411
 80069f8:	3ff80000 	.word	0x3ff80000
 80069fc:	08009730 	.word	0x08009730
 8006a00:	08009614 	.word	0x08009614
 8006a04:	2301      	movs	r3, #1
 8006a06:	930b      	str	r3, [sp, #44]	; 0x2c
 8006a08:	e7d4      	b.n	80069b4 <_dtoa_r+0x2b4>
 8006a0a:	f8dd b08c 	ldr.w	fp, [sp, #140]	; 0x8c
 8006a0e:	465b      	mov	r3, fp
 8006a10:	f8cd b008 	str.w	fp, [sp, #8]
 8006a14:	e7a6      	b.n	8006964 <_dtoa_r+0x264>
 8006a16:	3101      	adds	r1, #1
 8006a18:	6041      	str	r1, [r0, #4]
 8006a1a:	0052      	lsls	r2, r2, #1
 8006a1c:	e7a6      	b.n	800696c <_dtoa_r+0x26c>
 8006a1e:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8006a20:	9a08      	ldr	r2, [sp, #32]
 8006a22:	601a      	str	r2, [r3, #0]
 8006a24:	9b02      	ldr	r3, [sp, #8]
 8006a26:	2b0e      	cmp	r3, #14
 8006a28:	f200 80a8 	bhi.w	8006b7c <_dtoa_r+0x47c>
 8006a2c:	2c00      	cmp	r4, #0
 8006a2e:	f000 80a5 	beq.w	8006b7c <_dtoa_r+0x47c>
 8006a32:	f1b9 0f00 	cmp.w	r9, #0
 8006a36:	dd34      	ble.n	8006aa2 <_dtoa_r+0x3a2>
 8006a38:	4a9a      	ldr	r2, [pc, #616]	; (8006ca4 <_dtoa_r+0x5a4>)
 8006a3a:	f009 030f 	and.w	r3, r9, #15
 8006a3e:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 8006a42:	f419 7f80 	tst.w	r9, #256	; 0x100
 8006a46:	e9d3 3400 	ldrd	r3, r4, [r3]
 8006a4a:	e9cd 3410 	strd	r3, r4, [sp, #64]	; 0x40
 8006a4e:	ea4f 1429 	mov.w	r4, r9, asr #4
 8006a52:	d016      	beq.n	8006a82 <_dtoa_r+0x382>
 8006a54:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8006a58:	4b93      	ldr	r3, [pc, #588]	; (8006ca8 <_dtoa_r+0x5a8>)
 8006a5a:	2703      	movs	r7, #3
 8006a5c:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8006a60:	f7f9 fe64 	bl	800072c <__aeabi_ddiv>
 8006a64:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8006a68:	f004 040f 	and.w	r4, r4, #15
 8006a6c:	4e8e      	ldr	r6, [pc, #568]	; (8006ca8 <_dtoa_r+0x5a8>)
 8006a6e:	b954      	cbnz	r4, 8006a86 <_dtoa_r+0x386>
 8006a70:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8006a74:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8006a78:	f7f9 fe58 	bl	800072c <__aeabi_ddiv>
 8006a7c:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8006a80:	e029      	b.n	8006ad6 <_dtoa_r+0x3d6>
 8006a82:	2702      	movs	r7, #2
 8006a84:	e7f2      	b.n	8006a6c <_dtoa_r+0x36c>
 8006a86:	07e1      	lsls	r1, r4, #31
 8006a88:	d508      	bpl.n	8006a9c <_dtoa_r+0x39c>
 8006a8a:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8006a8e:	e9d6 2300 	ldrd	r2, r3, [r6]
 8006a92:	f7f9 fd21 	bl	80004d8 <__aeabi_dmul>
 8006a96:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 8006a9a:	3701      	adds	r7, #1
 8006a9c:	1064      	asrs	r4, r4, #1
 8006a9e:	3608      	adds	r6, #8
 8006aa0:	e7e5      	b.n	8006a6e <_dtoa_r+0x36e>
 8006aa2:	f000 80a5 	beq.w	8006bf0 <_dtoa_r+0x4f0>
 8006aa6:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8006aaa:	f1c9 0400 	rsb	r4, r9, #0
 8006aae:	4b7d      	ldr	r3, [pc, #500]	; (8006ca4 <_dtoa_r+0x5a4>)
 8006ab0:	f004 020f 	and.w	r2, r4, #15
 8006ab4:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8006ab8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006abc:	f7f9 fd0c 	bl	80004d8 <__aeabi_dmul>
 8006ac0:	2702      	movs	r7, #2
 8006ac2:	2300      	movs	r3, #0
 8006ac4:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8006ac8:	4e77      	ldr	r6, [pc, #476]	; (8006ca8 <_dtoa_r+0x5a8>)
 8006aca:	1124      	asrs	r4, r4, #4
 8006acc:	2c00      	cmp	r4, #0
 8006ace:	f040 8084 	bne.w	8006bda <_dtoa_r+0x4da>
 8006ad2:	2b00      	cmp	r3, #0
 8006ad4:	d1d2      	bne.n	8006a7c <_dtoa_r+0x37c>
 8006ad6:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8006ad8:	2b00      	cmp	r3, #0
 8006ada:	f000 808b 	beq.w	8006bf4 <_dtoa_r+0x4f4>
 8006ade:	e9dd 3404 	ldrd	r3, r4, [sp, #16]
 8006ae2:	e9cd 3410 	strd	r3, r4, [sp, #64]	; 0x40
 8006ae6:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8006aea:	2200      	movs	r2, #0
 8006aec:	4b6f      	ldr	r3, [pc, #444]	; (8006cac <_dtoa_r+0x5ac>)
 8006aee:	f7f9 ff65 	bl	80009bc <__aeabi_dcmplt>
 8006af2:	2800      	cmp	r0, #0
 8006af4:	d07e      	beq.n	8006bf4 <_dtoa_r+0x4f4>
 8006af6:	9b02      	ldr	r3, [sp, #8]
 8006af8:	2b00      	cmp	r3, #0
 8006afa:	d07b      	beq.n	8006bf4 <_dtoa_r+0x4f4>
 8006afc:	f1bb 0f00 	cmp.w	fp, #0
 8006b00:	dd38      	ble.n	8006b74 <_dtoa_r+0x474>
 8006b02:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8006b06:	2200      	movs	r2, #0
 8006b08:	4b69      	ldr	r3, [pc, #420]	; (8006cb0 <_dtoa_r+0x5b0>)
 8006b0a:	f7f9 fce5 	bl	80004d8 <__aeabi_dmul>
 8006b0e:	465c      	mov	r4, fp
 8006b10:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8006b14:	f109 38ff 	add.w	r8, r9, #4294967295
 8006b18:	3701      	adds	r7, #1
 8006b1a:	4638      	mov	r0, r7
 8006b1c:	f7f9 fc72 	bl	8000404 <__aeabi_i2d>
 8006b20:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8006b24:	f7f9 fcd8 	bl	80004d8 <__aeabi_dmul>
 8006b28:	2200      	movs	r2, #0
 8006b2a:	4b62      	ldr	r3, [pc, #392]	; (8006cb4 <_dtoa_r+0x5b4>)
 8006b2c:	f7f9 fb1e 	bl	800016c <__adddf3>
 8006b30:	f1a1 7650 	sub.w	r6, r1, #54525952	; 0x3400000
 8006b34:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 8006b38:	9611      	str	r6, [sp, #68]	; 0x44
 8006b3a:	2c00      	cmp	r4, #0
 8006b3c:	d15d      	bne.n	8006bfa <_dtoa_r+0x4fa>
 8006b3e:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8006b42:	2200      	movs	r2, #0
 8006b44:	4b5c      	ldr	r3, [pc, #368]	; (8006cb8 <_dtoa_r+0x5b8>)
 8006b46:	f7f9 fb0f 	bl	8000168 <__aeabi_dsub>
 8006b4a:	4602      	mov	r2, r0
 8006b4c:	460b      	mov	r3, r1
 8006b4e:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8006b52:	4633      	mov	r3, r6
 8006b54:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8006b56:	f7f9 ff4f 	bl	80009f8 <__aeabi_dcmpgt>
 8006b5a:	2800      	cmp	r0, #0
 8006b5c:	f040 829e 	bne.w	800709c <_dtoa_r+0x99c>
 8006b60:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8006b64:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8006b66:	f106 4300 	add.w	r3, r6, #2147483648	; 0x80000000
 8006b6a:	f7f9 ff27 	bl	80009bc <__aeabi_dcmplt>
 8006b6e:	2800      	cmp	r0, #0
 8006b70:	f040 8292 	bne.w	8007098 <_dtoa_r+0x998>
 8006b74:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	; 0x30
 8006b78:	e9cd 3404 	strd	r3, r4, [sp, #16]
 8006b7c:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8006b7e:	2b00      	cmp	r3, #0
 8006b80:	f2c0 8153 	blt.w	8006e2a <_dtoa_r+0x72a>
 8006b84:	f1b9 0f0e 	cmp.w	r9, #14
 8006b88:	f300 814f 	bgt.w	8006e2a <_dtoa_r+0x72a>
 8006b8c:	4b45      	ldr	r3, [pc, #276]	; (8006ca4 <_dtoa_r+0x5a4>)
 8006b8e:	eb03 03c9 	add.w	r3, r3, r9, lsl #3
 8006b92:	e9d3 3400 	ldrd	r3, r4, [r3]
 8006b96:	e9cd 3406 	strd	r3, r4, [sp, #24]
 8006b9a:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8006b9c:	2b00      	cmp	r3, #0
 8006b9e:	f280 80db 	bge.w	8006d58 <_dtoa_r+0x658>
 8006ba2:	9b02      	ldr	r3, [sp, #8]
 8006ba4:	2b00      	cmp	r3, #0
 8006ba6:	f300 80d7 	bgt.w	8006d58 <_dtoa_r+0x658>
 8006baa:	f040 8274 	bne.w	8007096 <_dtoa_r+0x996>
 8006bae:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8006bb2:	2200      	movs	r2, #0
 8006bb4:	4b40      	ldr	r3, [pc, #256]	; (8006cb8 <_dtoa_r+0x5b8>)
 8006bb6:	f7f9 fc8f 	bl	80004d8 <__aeabi_dmul>
 8006bba:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8006bbe:	f7f9 ff11 	bl	80009e4 <__aeabi_dcmpge>
 8006bc2:	9c02      	ldr	r4, [sp, #8]
 8006bc4:	4626      	mov	r6, r4
 8006bc6:	2800      	cmp	r0, #0
 8006bc8:	f040 824a 	bne.w	8007060 <_dtoa_r+0x960>
 8006bcc:	2331      	movs	r3, #49	; 0x31
 8006bce:	9f08      	ldr	r7, [sp, #32]
 8006bd0:	f109 0901 	add.w	r9, r9, #1
 8006bd4:	f807 3b01 	strb.w	r3, [r7], #1
 8006bd8:	e246      	b.n	8007068 <_dtoa_r+0x968>
 8006bda:	07e2      	lsls	r2, r4, #31
 8006bdc:	d505      	bpl.n	8006bea <_dtoa_r+0x4ea>
 8006bde:	e9d6 2300 	ldrd	r2, r3, [r6]
 8006be2:	f7f9 fc79 	bl	80004d8 <__aeabi_dmul>
 8006be6:	2301      	movs	r3, #1
 8006be8:	3701      	adds	r7, #1
 8006bea:	1064      	asrs	r4, r4, #1
 8006bec:	3608      	adds	r6, #8
 8006bee:	e76d      	b.n	8006acc <_dtoa_r+0x3cc>
 8006bf0:	2702      	movs	r7, #2
 8006bf2:	e770      	b.n	8006ad6 <_dtoa_r+0x3d6>
 8006bf4:	46c8      	mov	r8, r9
 8006bf6:	9c02      	ldr	r4, [sp, #8]
 8006bf8:	e78f      	b.n	8006b1a <_dtoa_r+0x41a>
 8006bfa:	9908      	ldr	r1, [sp, #32]
 8006bfc:	4b29      	ldr	r3, [pc, #164]	; (8006ca4 <_dtoa_r+0x5a4>)
 8006bfe:	4421      	add	r1, r4
 8006c00:	9112      	str	r1, [sp, #72]	; 0x48
 8006c02:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8006c04:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8006c08:	e9dd 6710 	ldrd	r6, r7, [sp, #64]	; 0x40
 8006c0c:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8006c10:	2900      	cmp	r1, #0
 8006c12:	d055      	beq.n	8006cc0 <_dtoa_r+0x5c0>
 8006c14:	2000      	movs	r0, #0
 8006c16:	4929      	ldr	r1, [pc, #164]	; (8006cbc <_dtoa_r+0x5bc>)
 8006c18:	f7f9 fd88 	bl	800072c <__aeabi_ddiv>
 8006c1c:	463b      	mov	r3, r7
 8006c1e:	4632      	mov	r2, r6
 8006c20:	f7f9 faa2 	bl	8000168 <__aeabi_dsub>
 8006c24:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 8006c28:	9f08      	ldr	r7, [sp, #32]
 8006c2a:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8006c2e:	f7f9 ff03 	bl	8000a38 <__aeabi_d2iz>
 8006c32:	4604      	mov	r4, r0
 8006c34:	f7f9 fbe6 	bl	8000404 <__aeabi_i2d>
 8006c38:	4602      	mov	r2, r0
 8006c3a:	460b      	mov	r3, r1
 8006c3c:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8006c40:	f7f9 fa92 	bl	8000168 <__aeabi_dsub>
 8006c44:	4602      	mov	r2, r0
 8006c46:	460b      	mov	r3, r1
 8006c48:	3430      	adds	r4, #48	; 0x30
 8006c4a:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8006c4e:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8006c52:	f807 4b01 	strb.w	r4, [r7], #1
 8006c56:	f7f9 feb1 	bl	80009bc <__aeabi_dcmplt>
 8006c5a:	2800      	cmp	r0, #0
 8006c5c:	d174      	bne.n	8006d48 <_dtoa_r+0x648>
 8006c5e:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8006c62:	2000      	movs	r0, #0
 8006c64:	4911      	ldr	r1, [pc, #68]	; (8006cac <_dtoa_r+0x5ac>)
 8006c66:	f7f9 fa7f 	bl	8000168 <__aeabi_dsub>
 8006c6a:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8006c6e:	f7f9 fea5 	bl	80009bc <__aeabi_dcmplt>
 8006c72:	2800      	cmp	r0, #0
 8006c74:	f040 80b6 	bne.w	8006de4 <_dtoa_r+0x6e4>
 8006c78:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8006c7a:	429f      	cmp	r7, r3
 8006c7c:	f43f af7a 	beq.w	8006b74 <_dtoa_r+0x474>
 8006c80:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8006c84:	2200      	movs	r2, #0
 8006c86:	4b0a      	ldr	r3, [pc, #40]	; (8006cb0 <_dtoa_r+0x5b0>)
 8006c88:	f7f9 fc26 	bl	80004d8 <__aeabi_dmul>
 8006c8c:	2200      	movs	r2, #0
 8006c8e:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 8006c92:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8006c96:	4b06      	ldr	r3, [pc, #24]	; (8006cb0 <_dtoa_r+0x5b0>)
 8006c98:	f7f9 fc1e 	bl	80004d8 <__aeabi_dmul>
 8006c9c:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8006ca0:	e7c3      	b.n	8006c2a <_dtoa_r+0x52a>
 8006ca2:	bf00      	nop
 8006ca4:	08009730 	.word	0x08009730
 8006ca8:	08009708 	.word	0x08009708
 8006cac:	3ff00000 	.word	0x3ff00000
 8006cb0:	40240000 	.word	0x40240000
 8006cb4:	401c0000 	.word	0x401c0000
 8006cb8:	40140000 	.word	0x40140000
 8006cbc:	3fe00000 	.word	0x3fe00000
 8006cc0:	4630      	mov	r0, r6
 8006cc2:	4639      	mov	r1, r7
 8006cc4:	f7f9 fc08 	bl	80004d8 <__aeabi_dmul>
 8006cc8:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8006cca:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 8006cce:	9c08      	ldr	r4, [sp, #32]
 8006cd0:	9314      	str	r3, [sp, #80]	; 0x50
 8006cd2:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8006cd6:	f7f9 feaf 	bl	8000a38 <__aeabi_d2iz>
 8006cda:	9015      	str	r0, [sp, #84]	; 0x54
 8006cdc:	f7f9 fb92 	bl	8000404 <__aeabi_i2d>
 8006ce0:	4602      	mov	r2, r0
 8006ce2:	460b      	mov	r3, r1
 8006ce4:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8006ce8:	f7f9 fa3e 	bl	8000168 <__aeabi_dsub>
 8006cec:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8006cee:	4606      	mov	r6, r0
 8006cf0:	3330      	adds	r3, #48	; 0x30
 8006cf2:	f804 3b01 	strb.w	r3, [r4], #1
 8006cf6:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8006cf8:	460f      	mov	r7, r1
 8006cfa:	429c      	cmp	r4, r3
 8006cfc:	f04f 0200 	mov.w	r2, #0
 8006d00:	d124      	bne.n	8006d4c <_dtoa_r+0x64c>
 8006d02:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8006d06:	4bb3      	ldr	r3, [pc, #716]	; (8006fd4 <_dtoa_r+0x8d4>)
 8006d08:	f7f9 fa30 	bl	800016c <__adddf3>
 8006d0c:	4602      	mov	r2, r0
 8006d0e:	460b      	mov	r3, r1
 8006d10:	4630      	mov	r0, r6
 8006d12:	4639      	mov	r1, r7
 8006d14:	f7f9 fe70 	bl	80009f8 <__aeabi_dcmpgt>
 8006d18:	2800      	cmp	r0, #0
 8006d1a:	d162      	bne.n	8006de2 <_dtoa_r+0x6e2>
 8006d1c:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8006d20:	2000      	movs	r0, #0
 8006d22:	49ac      	ldr	r1, [pc, #688]	; (8006fd4 <_dtoa_r+0x8d4>)
 8006d24:	f7f9 fa20 	bl	8000168 <__aeabi_dsub>
 8006d28:	4602      	mov	r2, r0
 8006d2a:	460b      	mov	r3, r1
 8006d2c:	4630      	mov	r0, r6
 8006d2e:	4639      	mov	r1, r7
 8006d30:	f7f9 fe44 	bl	80009bc <__aeabi_dcmplt>
 8006d34:	2800      	cmp	r0, #0
 8006d36:	f43f af1d 	beq.w	8006b74 <_dtoa_r+0x474>
 8006d3a:	9f14      	ldr	r7, [sp, #80]	; 0x50
 8006d3c:	1e7b      	subs	r3, r7, #1
 8006d3e:	9314      	str	r3, [sp, #80]	; 0x50
 8006d40:	f817 3c01 	ldrb.w	r3, [r7, #-1]
 8006d44:	2b30      	cmp	r3, #48	; 0x30
 8006d46:	d0f8      	beq.n	8006d3a <_dtoa_r+0x63a>
 8006d48:	46c1      	mov	r9, r8
 8006d4a:	e03a      	b.n	8006dc2 <_dtoa_r+0x6c2>
 8006d4c:	4ba2      	ldr	r3, [pc, #648]	; (8006fd8 <_dtoa_r+0x8d8>)
 8006d4e:	f7f9 fbc3 	bl	80004d8 <__aeabi_dmul>
 8006d52:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8006d56:	e7bc      	b.n	8006cd2 <_dtoa_r+0x5d2>
 8006d58:	9f08      	ldr	r7, [sp, #32]
 8006d5a:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8006d5e:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8006d62:	f7f9 fce3 	bl	800072c <__aeabi_ddiv>
 8006d66:	f7f9 fe67 	bl	8000a38 <__aeabi_d2iz>
 8006d6a:	4604      	mov	r4, r0
 8006d6c:	f7f9 fb4a 	bl	8000404 <__aeabi_i2d>
 8006d70:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8006d74:	f7f9 fbb0 	bl	80004d8 <__aeabi_dmul>
 8006d78:	f104 0630 	add.w	r6, r4, #48	; 0x30
 8006d7c:	460b      	mov	r3, r1
 8006d7e:	4602      	mov	r2, r0
 8006d80:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8006d84:	f7f9 f9f0 	bl	8000168 <__aeabi_dsub>
 8006d88:	f807 6b01 	strb.w	r6, [r7], #1
 8006d8c:	9e08      	ldr	r6, [sp, #32]
 8006d8e:	9b02      	ldr	r3, [sp, #8]
 8006d90:	1bbe      	subs	r6, r7, r6
 8006d92:	42b3      	cmp	r3, r6
 8006d94:	d13a      	bne.n	8006e0c <_dtoa_r+0x70c>
 8006d96:	4602      	mov	r2, r0
 8006d98:	460b      	mov	r3, r1
 8006d9a:	f7f9 f9e7 	bl	800016c <__adddf3>
 8006d9e:	4602      	mov	r2, r0
 8006da0:	460b      	mov	r3, r1
 8006da2:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8006da6:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8006daa:	f7f9 fe25 	bl	80009f8 <__aeabi_dcmpgt>
 8006dae:	bb58      	cbnz	r0, 8006e08 <_dtoa_r+0x708>
 8006db0:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8006db4:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8006db8:	f7f9 fdf6 	bl	80009a8 <__aeabi_dcmpeq>
 8006dbc:	b108      	cbz	r0, 8006dc2 <_dtoa_r+0x6c2>
 8006dbe:	07e1      	lsls	r1, r4, #31
 8006dc0:	d422      	bmi.n	8006e08 <_dtoa_r+0x708>
 8006dc2:	4628      	mov	r0, r5
 8006dc4:	4651      	mov	r1, sl
 8006dc6:	f000 fe69 	bl	8007a9c <_Bfree>
 8006dca:	2300      	movs	r3, #0
 8006dcc:	703b      	strb	r3, [r7, #0]
 8006dce:	9b24      	ldr	r3, [sp, #144]	; 0x90
 8006dd0:	f109 0001 	add.w	r0, r9, #1
 8006dd4:	6018      	str	r0, [r3, #0]
 8006dd6:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8006dd8:	2b00      	cmp	r3, #0
 8006dda:	f43f acdf 	beq.w	800679c <_dtoa_r+0x9c>
 8006dde:	601f      	str	r7, [r3, #0]
 8006de0:	e4dc      	b.n	800679c <_dtoa_r+0x9c>
 8006de2:	4627      	mov	r7, r4
 8006de4:	463b      	mov	r3, r7
 8006de6:	461f      	mov	r7, r3
 8006de8:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8006dec:	2a39      	cmp	r2, #57	; 0x39
 8006dee:	d107      	bne.n	8006e00 <_dtoa_r+0x700>
 8006df0:	9a08      	ldr	r2, [sp, #32]
 8006df2:	429a      	cmp	r2, r3
 8006df4:	d1f7      	bne.n	8006de6 <_dtoa_r+0x6e6>
 8006df6:	2230      	movs	r2, #48	; 0x30
 8006df8:	9908      	ldr	r1, [sp, #32]
 8006dfa:	f108 0801 	add.w	r8, r8, #1
 8006dfe:	700a      	strb	r2, [r1, #0]
 8006e00:	781a      	ldrb	r2, [r3, #0]
 8006e02:	3201      	adds	r2, #1
 8006e04:	701a      	strb	r2, [r3, #0]
 8006e06:	e79f      	b.n	8006d48 <_dtoa_r+0x648>
 8006e08:	46c8      	mov	r8, r9
 8006e0a:	e7eb      	b.n	8006de4 <_dtoa_r+0x6e4>
 8006e0c:	2200      	movs	r2, #0
 8006e0e:	4b72      	ldr	r3, [pc, #456]	; (8006fd8 <_dtoa_r+0x8d8>)
 8006e10:	f7f9 fb62 	bl	80004d8 <__aeabi_dmul>
 8006e14:	4602      	mov	r2, r0
 8006e16:	460b      	mov	r3, r1
 8006e18:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8006e1c:	2200      	movs	r2, #0
 8006e1e:	2300      	movs	r3, #0
 8006e20:	f7f9 fdc2 	bl	80009a8 <__aeabi_dcmpeq>
 8006e24:	2800      	cmp	r0, #0
 8006e26:	d098      	beq.n	8006d5a <_dtoa_r+0x65a>
 8006e28:	e7cb      	b.n	8006dc2 <_dtoa_r+0x6c2>
 8006e2a:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8006e2c:	2a00      	cmp	r2, #0
 8006e2e:	f000 80cd 	beq.w	8006fcc <_dtoa_r+0x8cc>
 8006e32:	9a22      	ldr	r2, [sp, #136]	; 0x88
 8006e34:	2a01      	cmp	r2, #1
 8006e36:	f300 80af 	bgt.w	8006f98 <_dtoa_r+0x898>
 8006e3a:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8006e3c:	2a00      	cmp	r2, #0
 8006e3e:	f000 80a7 	beq.w	8006f90 <_dtoa_r+0x890>
 8006e42:	f203 4333 	addw	r3, r3, #1075	; 0x433
 8006e46:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 8006e48:	9f06      	ldr	r7, [sp, #24]
 8006e4a:	9a06      	ldr	r2, [sp, #24]
 8006e4c:	2101      	movs	r1, #1
 8006e4e:	441a      	add	r2, r3
 8006e50:	9206      	str	r2, [sp, #24]
 8006e52:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8006e54:	4628      	mov	r0, r5
 8006e56:	441a      	add	r2, r3
 8006e58:	9209      	str	r2, [sp, #36]	; 0x24
 8006e5a:	f000 ff23 	bl	8007ca4 <__i2b>
 8006e5e:	4606      	mov	r6, r0
 8006e60:	2f00      	cmp	r7, #0
 8006e62:	dd0c      	ble.n	8006e7e <_dtoa_r+0x77e>
 8006e64:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006e66:	2b00      	cmp	r3, #0
 8006e68:	dd09      	ble.n	8006e7e <_dtoa_r+0x77e>
 8006e6a:	42bb      	cmp	r3, r7
 8006e6c:	bfa8      	it	ge
 8006e6e:	463b      	movge	r3, r7
 8006e70:	9a06      	ldr	r2, [sp, #24]
 8006e72:	1aff      	subs	r7, r7, r3
 8006e74:	1ad2      	subs	r2, r2, r3
 8006e76:	9206      	str	r2, [sp, #24]
 8006e78:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8006e7a:	1ad3      	subs	r3, r2, r3
 8006e7c:	9309      	str	r3, [sp, #36]	; 0x24
 8006e7e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006e80:	b1f3      	cbz	r3, 8006ec0 <_dtoa_r+0x7c0>
 8006e82:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8006e84:	2b00      	cmp	r3, #0
 8006e86:	f000 80a9 	beq.w	8006fdc <_dtoa_r+0x8dc>
 8006e8a:	2c00      	cmp	r4, #0
 8006e8c:	dd10      	ble.n	8006eb0 <_dtoa_r+0x7b0>
 8006e8e:	4631      	mov	r1, r6
 8006e90:	4622      	mov	r2, r4
 8006e92:	4628      	mov	r0, r5
 8006e94:	f000 ffc0 	bl	8007e18 <__pow5mult>
 8006e98:	4652      	mov	r2, sl
 8006e9a:	4601      	mov	r1, r0
 8006e9c:	4606      	mov	r6, r0
 8006e9e:	4628      	mov	r0, r5
 8006ea0:	f000 ff16 	bl	8007cd0 <__multiply>
 8006ea4:	4680      	mov	r8, r0
 8006ea6:	4651      	mov	r1, sl
 8006ea8:	4628      	mov	r0, r5
 8006eaa:	f000 fdf7 	bl	8007a9c <_Bfree>
 8006eae:	46c2      	mov	sl, r8
 8006eb0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006eb2:	1b1a      	subs	r2, r3, r4
 8006eb4:	d004      	beq.n	8006ec0 <_dtoa_r+0x7c0>
 8006eb6:	4651      	mov	r1, sl
 8006eb8:	4628      	mov	r0, r5
 8006eba:	f000 ffad 	bl	8007e18 <__pow5mult>
 8006ebe:	4682      	mov	sl, r0
 8006ec0:	2101      	movs	r1, #1
 8006ec2:	4628      	mov	r0, r5
 8006ec4:	f000 feee 	bl	8007ca4 <__i2b>
 8006ec8:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8006eca:	4604      	mov	r4, r0
 8006ecc:	2b00      	cmp	r3, #0
 8006ece:	f340 8087 	ble.w	8006fe0 <_dtoa_r+0x8e0>
 8006ed2:	461a      	mov	r2, r3
 8006ed4:	4601      	mov	r1, r0
 8006ed6:	4628      	mov	r0, r5
 8006ed8:	f000 ff9e 	bl	8007e18 <__pow5mult>
 8006edc:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8006ede:	4604      	mov	r4, r0
 8006ee0:	2b01      	cmp	r3, #1
 8006ee2:	f340 8080 	ble.w	8006fe6 <_dtoa_r+0x8e6>
 8006ee6:	f04f 0800 	mov.w	r8, #0
 8006eea:	6923      	ldr	r3, [r4, #16]
 8006eec:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8006ef0:	6918      	ldr	r0, [r3, #16]
 8006ef2:	f000 fe89 	bl	8007c08 <__hi0bits>
 8006ef6:	f1c0 0020 	rsb	r0, r0, #32
 8006efa:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006efc:	4418      	add	r0, r3
 8006efe:	f010 001f 	ands.w	r0, r0, #31
 8006f02:	f000 8092 	beq.w	800702a <_dtoa_r+0x92a>
 8006f06:	f1c0 0320 	rsb	r3, r0, #32
 8006f0a:	2b04      	cmp	r3, #4
 8006f0c:	f340 808a 	ble.w	8007024 <_dtoa_r+0x924>
 8006f10:	f1c0 001c 	rsb	r0, r0, #28
 8006f14:	9b06      	ldr	r3, [sp, #24]
 8006f16:	4407      	add	r7, r0
 8006f18:	4403      	add	r3, r0
 8006f1a:	9306      	str	r3, [sp, #24]
 8006f1c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006f1e:	4403      	add	r3, r0
 8006f20:	9309      	str	r3, [sp, #36]	; 0x24
 8006f22:	9b06      	ldr	r3, [sp, #24]
 8006f24:	2b00      	cmp	r3, #0
 8006f26:	dd05      	ble.n	8006f34 <_dtoa_r+0x834>
 8006f28:	4651      	mov	r1, sl
 8006f2a:	461a      	mov	r2, r3
 8006f2c:	4628      	mov	r0, r5
 8006f2e:	f000 ffcd 	bl	8007ecc <__lshift>
 8006f32:	4682      	mov	sl, r0
 8006f34:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006f36:	2b00      	cmp	r3, #0
 8006f38:	dd05      	ble.n	8006f46 <_dtoa_r+0x846>
 8006f3a:	4621      	mov	r1, r4
 8006f3c:	461a      	mov	r2, r3
 8006f3e:	4628      	mov	r0, r5
 8006f40:	f000 ffc4 	bl	8007ecc <__lshift>
 8006f44:	4604      	mov	r4, r0
 8006f46:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8006f48:	2b00      	cmp	r3, #0
 8006f4a:	d070      	beq.n	800702e <_dtoa_r+0x92e>
 8006f4c:	4621      	mov	r1, r4
 8006f4e:	4650      	mov	r0, sl
 8006f50:	f001 f828 	bl	8007fa4 <__mcmp>
 8006f54:	2800      	cmp	r0, #0
 8006f56:	da6a      	bge.n	800702e <_dtoa_r+0x92e>
 8006f58:	2300      	movs	r3, #0
 8006f5a:	4651      	mov	r1, sl
 8006f5c:	220a      	movs	r2, #10
 8006f5e:	4628      	mov	r0, r5
 8006f60:	f000 fdbe 	bl	8007ae0 <__multadd>
 8006f64:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8006f66:	4682      	mov	sl, r0
 8006f68:	f109 39ff 	add.w	r9, r9, #4294967295
 8006f6c:	2b00      	cmp	r3, #0
 8006f6e:	f000 8193 	beq.w	8007298 <_dtoa_r+0xb98>
 8006f72:	4631      	mov	r1, r6
 8006f74:	2300      	movs	r3, #0
 8006f76:	220a      	movs	r2, #10
 8006f78:	4628      	mov	r0, r5
 8006f7a:	f000 fdb1 	bl	8007ae0 <__multadd>
 8006f7e:	f1bb 0f00 	cmp.w	fp, #0
 8006f82:	4606      	mov	r6, r0
 8006f84:	f300 8093 	bgt.w	80070ae <_dtoa_r+0x9ae>
 8006f88:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8006f8a:	2b02      	cmp	r3, #2
 8006f8c:	dc57      	bgt.n	800703e <_dtoa_r+0x93e>
 8006f8e:	e08e      	b.n	80070ae <_dtoa_r+0x9ae>
 8006f90:	9b16      	ldr	r3, [sp, #88]	; 0x58
 8006f92:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 8006f96:	e756      	b.n	8006e46 <_dtoa_r+0x746>
 8006f98:	9b02      	ldr	r3, [sp, #8]
 8006f9a:	1e5c      	subs	r4, r3, #1
 8006f9c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006f9e:	42a3      	cmp	r3, r4
 8006fa0:	bfb7      	itett	lt
 8006fa2:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 8006fa4:	1b1c      	subge	r4, r3, r4
 8006fa6:	1ae2      	sublt	r2, r4, r3
 8006fa8:	9b0e      	ldrlt	r3, [sp, #56]	; 0x38
 8006faa:	bfbe      	ittt	lt
 8006fac:	940a      	strlt	r4, [sp, #40]	; 0x28
 8006fae:	189b      	addlt	r3, r3, r2
 8006fb0:	930e      	strlt	r3, [sp, #56]	; 0x38
 8006fb2:	9b02      	ldr	r3, [sp, #8]
 8006fb4:	bfb8      	it	lt
 8006fb6:	2400      	movlt	r4, #0
 8006fb8:	2b00      	cmp	r3, #0
 8006fba:	bfbb      	ittet	lt
 8006fbc:	9b06      	ldrlt	r3, [sp, #24]
 8006fbe:	9a02      	ldrlt	r2, [sp, #8]
 8006fc0:	9f06      	ldrge	r7, [sp, #24]
 8006fc2:	1a9f      	sublt	r7, r3, r2
 8006fc4:	bfac      	ite	ge
 8006fc6:	9b02      	ldrge	r3, [sp, #8]
 8006fc8:	2300      	movlt	r3, #0
 8006fca:	e73e      	b.n	8006e4a <_dtoa_r+0x74a>
 8006fcc:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 8006fce:	9f06      	ldr	r7, [sp, #24]
 8006fd0:	9e0b      	ldr	r6, [sp, #44]	; 0x2c
 8006fd2:	e745      	b.n	8006e60 <_dtoa_r+0x760>
 8006fd4:	3fe00000 	.word	0x3fe00000
 8006fd8:	40240000 	.word	0x40240000
 8006fdc:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8006fde:	e76a      	b.n	8006eb6 <_dtoa_r+0x7b6>
 8006fe0:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8006fe2:	2b01      	cmp	r3, #1
 8006fe4:	dc19      	bgt.n	800701a <_dtoa_r+0x91a>
 8006fe6:	9b04      	ldr	r3, [sp, #16]
 8006fe8:	b9bb      	cbnz	r3, 800701a <_dtoa_r+0x91a>
 8006fea:	9b05      	ldr	r3, [sp, #20]
 8006fec:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8006ff0:	b99b      	cbnz	r3, 800701a <_dtoa_r+0x91a>
 8006ff2:	9b05      	ldr	r3, [sp, #20]
 8006ff4:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8006ff8:	0d1b      	lsrs	r3, r3, #20
 8006ffa:	051b      	lsls	r3, r3, #20
 8006ffc:	b183      	cbz	r3, 8007020 <_dtoa_r+0x920>
 8006ffe:	f04f 0801 	mov.w	r8, #1
 8007002:	9b06      	ldr	r3, [sp, #24]
 8007004:	3301      	adds	r3, #1
 8007006:	9306      	str	r3, [sp, #24]
 8007008:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800700a:	3301      	adds	r3, #1
 800700c:	9309      	str	r3, [sp, #36]	; 0x24
 800700e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8007010:	2b00      	cmp	r3, #0
 8007012:	f47f af6a 	bne.w	8006eea <_dtoa_r+0x7ea>
 8007016:	2001      	movs	r0, #1
 8007018:	e76f      	b.n	8006efa <_dtoa_r+0x7fa>
 800701a:	f04f 0800 	mov.w	r8, #0
 800701e:	e7f6      	b.n	800700e <_dtoa_r+0x90e>
 8007020:	4698      	mov	r8, r3
 8007022:	e7f4      	b.n	800700e <_dtoa_r+0x90e>
 8007024:	f43f af7d 	beq.w	8006f22 <_dtoa_r+0x822>
 8007028:	4618      	mov	r0, r3
 800702a:	301c      	adds	r0, #28
 800702c:	e772      	b.n	8006f14 <_dtoa_r+0x814>
 800702e:	9b02      	ldr	r3, [sp, #8]
 8007030:	2b00      	cmp	r3, #0
 8007032:	dc36      	bgt.n	80070a2 <_dtoa_r+0x9a2>
 8007034:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8007036:	2b02      	cmp	r3, #2
 8007038:	dd33      	ble.n	80070a2 <_dtoa_r+0x9a2>
 800703a:	f8dd b008 	ldr.w	fp, [sp, #8]
 800703e:	f1bb 0f00 	cmp.w	fp, #0
 8007042:	d10d      	bne.n	8007060 <_dtoa_r+0x960>
 8007044:	4621      	mov	r1, r4
 8007046:	465b      	mov	r3, fp
 8007048:	2205      	movs	r2, #5
 800704a:	4628      	mov	r0, r5
 800704c:	f000 fd48 	bl	8007ae0 <__multadd>
 8007050:	4601      	mov	r1, r0
 8007052:	4604      	mov	r4, r0
 8007054:	4650      	mov	r0, sl
 8007056:	f000 ffa5 	bl	8007fa4 <__mcmp>
 800705a:	2800      	cmp	r0, #0
 800705c:	f73f adb6 	bgt.w	8006bcc <_dtoa_r+0x4cc>
 8007060:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8007062:	9f08      	ldr	r7, [sp, #32]
 8007064:	ea6f 0903 	mvn.w	r9, r3
 8007068:	f04f 0800 	mov.w	r8, #0
 800706c:	4621      	mov	r1, r4
 800706e:	4628      	mov	r0, r5
 8007070:	f000 fd14 	bl	8007a9c <_Bfree>
 8007074:	2e00      	cmp	r6, #0
 8007076:	f43f aea4 	beq.w	8006dc2 <_dtoa_r+0x6c2>
 800707a:	f1b8 0f00 	cmp.w	r8, #0
 800707e:	d005      	beq.n	800708c <_dtoa_r+0x98c>
 8007080:	45b0      	cmp	r8, r6
 8007082:	d003      	beq.n	800708c <_dtoa_r+0x98c>
 8007084:	4641      	mov	r1, r8
 8007086:	4628      	mov	r0, r5
 8007088:	f000 fd08 	bl	8007a9c <_Bfree>
 800708c:	4631      	mov	r1, r6
 800708e:	4628      	mov	r0, r5
 8007090:	f000 fd04 	bl	8007a9c <_Bfree>
 8007094:	e695      	b.n	8006dc2 <_dtoa_r+0x6c2>
 8007096:	2400      	movs	r4, #0
 8007098:	4626      	mov	r6, r4
 800709a:	e7e1      	b.n	8007060 <_dtoa_r+0x960>
 800709c:	46c1      	mov	r9, r8
 800709e:	4626      	mov	r6, r4
 80070a0:	e594      	b.n	8006bcc <_dtoa_r+0x4cc>
 80070a2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80070a4:	f8dd b008 	ldr.w	fp, [sp, #8]
 80070a8:	2b00      	cmp	r3, #0
 80070aa:	f000 80fc 	beq.w	80072a6 <_dtoa_r+0xba6>
 80070ae:	2f00      	cmp	r7, #0
 80070b0:	dd05      	ble.n	80070be <_dtoa_r+0x9be>
 80070b2:	4631      	mov	r1, r6
 80070b4:	463a      	mov	r2, r7
 80070b6:	4628      	mov	r0, r5
 80070b8:	f000 ff08 	bl	8007ecc <__lshift>
 80070bc:	4606      	mov	r6, r0
 80070be:	f1b8 0f00 	cmp.w	r8, #0
 80070c2:	d05c      	beq.n	800717e <_dtoa_r+0xa7e>
 80070c4:	4628      	mov	r0, r5
 80070c6:	6871      	ldr	r1, [r6, #4]
 80070c8:	f000 fca8 	bl	8007a1c <_Balloc>
 80070cc:	4607      	mov	r7, r0
 80070ce:	b928      	cbnz	r0, 80070dc <_dtoa_r+0x9dc>
 80070d0:	4602      	mov	r2, r0
 80070d2:	f240 21ea 	movw	r1, #746	; 0x2ea
 80070d6:	4b7e      	ldr	r3, [pc, #504]	; (80072d0 <_dtoa_r+0xbd0>)
 80070d8:	f7ff bb26 	b.w	8006728 <_dtoa_r+0x28>
 80070dc:	6932      	ldr	r2, [r6, #16]
 80070de:	f106 010c 	add.w	r1, r6, #12
 80070e2:	3202      	adds	r2, #2
 80070e4:	0092      	lsls	r2, r2, #2
 80070e6:	300c      	adds	r0, #12
 80070e8:	f000 fc8a 	bl	8007a00 <memcpy>
 80070ec:	2201      	movs	r2, #1
 80070ee:	4639      	mov	r1, r7
 80070f0:	4628      	mov	r0, r5
 80070f2:	f000 feeb 	bl	8007ecc <__lshift>
 80070f6:	46b0      	mov	r8, r6
 80070f8:	4606      	mov	r6, r0
 80070fa:	9b08      	ldr	r3, [sp, #32]
 80070fc:	3301      	adds	r3, #1
 80070fe:	9302      	str	r3, [sp, #8]
 8007100:	9b08      	ldr	r3, [sp, #32]
 8007102:	445b      	add	r3, fp
 8007104:	930a      	str	r3, [sp, #40]	; 0x28
 8007106:	9b04      	ldr	r3, [sp, #16]
 8007108:	f003 0301 	and.w	r3, r3, #1
 800710c:	9309      	str	r3, [sp, #36]	; 0x24
 800710e:	9b02      	ldr	r3, [sp, #8]
 8007110:	4621      	mov	r1, r4
 8007112:	4650      	mov	r0, sl
 8007114:	f103 3bff 	add.w	fp, r3, #4294967295
 8007118:	f7ff fa64 	bl	80065e4 <quorem>
 800711c:	4603      	mov	r3, r0
 800711e:	4641      	mov	r1, r8
 8007120:	3330      	adds	r3, #48	; 0x30
 8007122:	9004      	str	r0, [sp, #16]
 8007124:	4650      	mov	r0, sl
 8007126:	930b      	str	r3, [sp, #44]	; 0x2c
 8007128:	f000 ff3c 	bl	8007fa4 <__mcmp>
 800712c:	4632      	mov	r2, r6
 800712e:	9006      	str	r0, [sp, #24]
 8007130:	4621      	mov	r1, r4
 8007132:	4628      	mov	r0, r5
 8007134:	f000 ff52 	bl	8007fdc <__mdiff>
 8007138:	68c2      	ldr	r2, [r0, #12]
 800713a:	4607      	mov	r7, r0
 800713c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800713e:	bb02      	cbnz	r2, 8007182 <_dtoa_r+0xa82>
 8007140:	4601      	mov	r1, r0
 8007142:	4650      	mov	r0, sl
 8007144:	f000 ff2e 	bl	8007fa4 <__mcmp>
 8007148:	4602      	mov	r2, r0
 800714a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800714c:	4639      	mov	r1, r7
 800714e:	4628      	mov	r0, r5
 8007150:	e9cd 320b 	strd	r3, r2, [sp, #44]	; 0x2c
 8007154:	f000 fca2 	bl	8007a9c <_Bfree>
 8007158:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800715a:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800715c:	9f02      	ldr	r7, [sp, #8]
 800715e:	ea43 0102 	orr.w	r1, r3, r2
 8007162:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007164:	430b      	orrs	r3, r1
 8007166:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8007168:	d10d      	bne.n	8007186 <_dtoa_r+0xa86>
 800716a:	2b39      	cmp	r3, #57	; 0x39
 800716c:	d027      	beq.n	80071be <_dtoa_r+0xabe>
 800716e:	9a06      	ldr	r2, [sp, #24]
 8007170:	2a00      	cmp	r2, #0
 8007172:	dd01      	ble.n	8007178 <_dtoa_r+0xa78>
 8007174:	9b04      	ldr	r3, [sp, #16]
 8007176:	3331      	adds	r3, #49	; 0x31
 8007178:	f88b 3000 	strb.w	r3, [fp]
 800717c:	e776      	b.n	800706c <_dtoa_r+0x96c>
 800717e:	4630      	mov	r0, r6
 8007180:	e7b9      	b.n	80070f6 <_dtoa_r+0x9f6>
 8007182:	2201      	movs	r2, #1
 8007184:	e7e2      	b.n	800714c <_dtoa_r+0xa4c>
 8007186:	9906      	ldr	r1, [sp, #24]
 8007188:	2900      	cmp	r1, #0
 800718a:	db04      	blt.n	8007196 <_dtoa_r+0xa96>
 800718c:	9822      	ldr	r0, [sp, #136]	; 0x88
 800718e:	4301      	orrs	r1, r0
 8007190:	9809      	ldr	r0, [sp, #36]	; 0x24
 8007192:	4301      	orrs	r1, r0
 8007194:	d120      	bne.n	80071d8 <_dtoa_r+0xad8>
 8007196:	2a00      	cmp	r2, #0
 8007198:	ddee      	ble.n	8007178 <_dtoa_r+0xa78>
 800719a:	4651      	mov	r1, sl
 800719c:	2201      	movs	r2, #1
 800719e:	4628      	mov	r0, r5
 80071a0:	9302      	str	r3, [sp, #8]
 80071a2:	f000 fe93 	bl	8007ecc <__lshift>
 80071a6:	4621      	mov	r1, r4
 80071a8:	4682      	mov	sl, r0
 80071aa:	f000 fefb 	bl	8007fa4 <__mcmp>
 80071ae:	2800      	cmp	r0, #0
 80071b0:	9b02      	ldr	r3, [sp, #8]
 80071b2:	dc02      	bgt.n	80071ba <_dtoa_r+0xaba>
 80071b4:	d1e0      	bne.n	8007178 <_dtoa_r+0xa78>
 80071b6:	07da      	lsls	r2, r3, #31
 80071b8:	d5de      	bpl.n	8007178 <_dtoa_r+0xa78>
 80071ba:	2b39      	cmp	r3, #57	; 0x39
 80071bc:	d1da      	bne.n	8007174 <_dtoa_r+0xa74>
 80071be:	2339      	movs	r3, #57	; 0x39
 80071c0:	f88b 3000 	strb.w	r3, [fp]
 80071c4:	463b      	mov	r3, r7
 80071c6:	461f      	mov	r7, r3
 80071c8:	f817 2c01 	ldrb.w	r2, [r7, #-1]
 80071cc:	3b01      	subs	r3, #1
 80071ce:	2a39      	cmp	r2, #57	; 0x39
 80071d0:	d050      	beq.n	8007274 <_dtoa_r+0xb74>
 80071d2:	3201      	adds	r2, #1
 80071d4:	701a      	strb	r2, [r3, #0]
 80071d6:	e749      	b.n	800706c <_dtoa_r+0x96c>
 80071d8:	2a00      	cmp	r2, #0
 80071da:	dd03      	ble.n	80071e4 <_dtoa_r+0xae4>
 80071dc:	2b39      	cmp	r3, #57	; 0x39
 80071de:	d0ee      	beq.n	80071be <_dtoa_r+0xabe>
 80071e0:	3301      	adds	r3, #1
 80071e2:	e7c9      	b.n	8007178 <_dtoa_r+0xa78>
 80071e4:	9a02      	ldr	r2, [sp, #8]
 80071e6:	990a      	ldr	r1, [sp, #40]	; 0x28
 80071e8:	f802 3c01 	strb.w	r3, [r2, #-1]
 80071ec:	428a      	cmp	r2, r1
 80071ee:	d02a      	beq.n	8007246 <_dtoa_r+0xb46>
 80071f0:	4651      	mov	r1, sl
 80071f2:	2300      	movs	r3, #0
 80071f4:	220a      	movs	r2, #10
 80071f6:	4628      	mov	r0, r5
 80071f8:	f000 fc72 	bl	8007ae0 <__multadd>
 80071fc:	45b0      	cmp	r8, r6
 80071fe:	4682      	mov	sl, r0
 8007200:	f04f 0300 	mov.w	r3, #0
 8007204:	f04f 020a 	mov.w	r2, #10
 8007208:	4641      	mov	r1, r8
 800720a:	4628      	mov	r0, r5
 800720c:	d107      	bne.n	800721e <_dtoa_r+0xb1e>
 800720e:	f000 fc67 	bl	8007ae0 <__multadd>
 8007212:	4680      	mov	r8, r0
 8007214:	4606      	mov	r6, r0
 8007216:	9b02      	ldr	r3, [sp, #8]
 8007218:	3301      	adds	r3, #1
 800721a:	9302      	str	r3, [sp, #8]
 800721c:	e777      	b.n	800710e <_dtoa_r+0xa0e>
 800721e:	f000 fc5f 	bl	8007ae0 <__multadd>
 8007222:	4631      	mov	r1, r6
 8007224:	4680      	mov	r8, r0
 8007226:	2300      	movs	r3, #0
 8007228:	220a      	movs	r2, #10
 800722a:	4628      	mov	r0, r5
 800722c:	f000 fc58 	bl	8007ae0 <__multadd>
 8007230:	4606      	mov	r6, r0
 8007232:	e7f0      	b.n	8007216 <_dtoa_r+0xb16>
 8007234:	f1bb 0f00 	cmp.w	fp, #0
 8007238:	bfcc      	ite	gt
 800723a:	465f      	movgt	r7, fp
 800723c:	2701      	movle	r7, #1
 800723e:	f04f 0800 	mov.w	r8, #0
 8007242:	9a08      	ldr	r2, [sp, #32]
 8007244:	4417      	add	r7, r2
 8007246:	4651      	mov	r1, sl
 8007248:	2201      	movs	r2, #1
 800724a:	4628      	mov	r0, r5
 800724c:	9302      	str	r3, [sp, #8]
 800724e:	f000 fe3d 	bl	8007ecc <__lshift>
 8007252:	4621      	mov	r1, r4
 8007254:	4682      	mov	sl, r0
 8007256:	f000 fea5 	bl	8007fa4 <__mcmp>
 800725a:	2800      	cmp	r0, #0
 800725c:	dcb2      	bgt.n	80071c4 <_dtoa_r+0xac4>
 800725e:	d102      	bne.n	8007266 <_dtoa_r+0xb66>
 8007260:	9b02      	ldr	r3, [sp, #8]
 8007262:	07db      	lsls	r3, r3, #31
 8007264:	d4ae      	bmi.n	80071c4 <_dtoa_r+0xac4>
 8007266:	463b      	mov	r3, r7
 8007268:	461f      	mov	r7, r3
 800726a:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800726e:	2a30      	cmp	r2, #48	; 0x30
 8007270:	d0fa      	beq.n	8007268 <_dtoa_r+0xb68>
 8007272:	e6fb      	b.n	800706c <_dtoa_r+0x96c>
 8007274:	9a08      	ldr	r2, [sp, #32]
 8007276:	429a      	cmp	r2, r3
 8007278:	d1a5      	bne.n	80071c6 <_dtoa_r+0xac6>
 800727a:	2331      	movs	r3, #49	; 0x31
 800727c:	f109 0901 	add.w	r9, r9, #1
 8007280:	7013      	strb	r3, [r2, #0]
 8007282:	e6f3      	b.n	800706c <_dtoa_r+0x96c>
 8007284:	4b13      	ldr	r3, [pc, #76]	; (80072d4 <_dtoa_r+0xbd4>)
 8007286:	f7ff baa7 	b.w	80067d8 <_dtoa_r+0xd8>
 800728a:	9b26      	ldr	r3, [sp, #152]	; 0x98
 800728c:	2b00      	cmp	r3, #0
 800728e:	f47f aa80 	bne.w	8006792 <_dtoa_r+0x92>
 8007292:	4b11      	ldr	r3, [pc, #68]	; (80072d8 <_dtoa_r+0xbd8>)
 8007294:	f7ff baa0 	b.w	80067d8 <_dtoa_r+0xd8>
 8007298:	f1bb 0f00 	cmp.w	fp, #0
 800729c:	dc03      	bgt.n	80072a6 <_dtoa_r+0xba6>
 800729e:	9b22      	ldr	r3, [sp, #136]	; 0x88
 80072a0:	2b02      	cmp	r3, #2
 80072a2:	f73f aecc 	bgt.w	800703e <_dtoa_r+0x93e>
 80072a6:	9f08      	ldr	r7, [sp, #32]
 80072a8:	4621      	mov	r1, r4
 80072aa:	4650      	mov	r0, sl
 80072ac:	f7ff f99a 	bl	80065e4 <quorem>
 80072b0:	9a08      	ldr	r2, [sp, #32]
 80072b2:	f100 0330 	add.w	r3, r0, #48	; 0x30
 80072b6:	f807 3b01 	strb.w	r3, [r7], #1
 80072ba:	1aba      	subs	r2, r7, r2
 80072bc:	4593      	cmp	fp, r2
 80072be:	ddb9      	ble.n	8007234 <_dtoa_r+0xb34>
 80072c0:	4651      	mov	r1, sl
 80072c2:	2300      	movs	r3, #0
 80072c4:	220a      	movs	r2, #10
 80072c6:	4628      	mov	r0, r5
 80072c8:	f000 fc0a 	bl	8007ae0 <__multadd>
 80072cc:	4682      	mov	sl, r0
 80072ce:	e7eb      	b.n	80072a8 <_dtoa_r+0xba8>
 80072d0:	08009614 	.word	0x08009614
 80072d4:	08009410 	.word	0x08009410
 80072d8:	08009591 	.word	0x08009591

080072dc <rshift>:
 80072dc:	6903      	ldr	r3, [r0, #16]
 80072de:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80072e2:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 80072e6:	f100 0414 	add.w	r4, r0, #20
 80072ea:	ea4f 1261 	mov.w	r2, r1, asr #5
 80072ee:	dd46      	ble.n	800737e <rshift+0xa2>
 80072f0:	f011 011f 	ands.w	r1, r1, #31
 80072f4:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 80072f8:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 80072fc:	d10c      	bne.n	8007318 <rshift+0x3c>
 80072fe:	4629      	mov	r1, r5
 8007300:	f100 0710 	add.w	r7, r0, #16
 8007304:	42b1      	cmp	r1, r6
 8007306:	d335      	bcc.n	8007374 <rshift+0x98>
 8007308:	1a9b      	subs	r3, r3, r2
 800730a:	009b      	lsls	r3, r3, #2
 800730c:	1eea      	subs	r2, r5, #3
 800730e:	4296      	cmp	r6, r2
 8007310:	bf38      	it	cc
 8007312:	2300      	movcc	r3, #0
 8007314:	4423      	add	r3, r4
 8007316:	e015      	b.n	8007344 <rshift+0x68>
 8007318:	46a1      	mov	r9, r4
 800731a:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 800731e:	f1c1 0820 	rsb	r8, r1, #32
 8007322:	40cf      	lsrs	r7, r1
 8007324:	f105 0e04 	add.w	lr, r5, #4
 8007328:	4576      	cmp	r6, lr
 800732a:	46f4      	mov	ip, lr
 800732c:	d816      	bhi.n	800735c <rshift+0x80>
 800732e:	1a9b      	subs	r3, r3, r2
 8007330:	009a      	lsls	r2, r3, #2
 8007332:	3a04      	subs	r2, #4
 8007334:	3501      	adds	r5, #1
 8007336:	42ae      	cmp	r6, r5
 8007338:	bf38      	it	cc
 800733a:	2200      	movcc	r2, #0
 800733c:	18a3      	adds	r3, r4, r2
 800733e:	50a7      	str	r7, [r4, r2]
 8007340:	b107      	cbz	r7, 8007344 <rshift+0x68>
 8007342:	3304      	adds	r3, #4
 8007344:	42a3      	cmp	r3, r4
 8007346:	eba3 0204 	sub.w	r2, r3, r4
 800734a:	bf08      	it	eq
 800734c:	2300      	moveq	r3, #0
 800734e:	ea4f 02a2 	mov.w	r2, r2, asr #2
 8007352:	6102      	str	r2, [r0, #16]
 8007354:	bf08      	it	eq
 8007356:	6143      	streq	r3, [r0, #20]
 8007358:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800735c:	f8dc c000 	ldr.w	ip, [ip]
 8007360:	fa0c fc08 	lsl.w	ip, ip, r8
 8007364:	ea4c 0707 	orr.w	r7, ip, r7
 8007368:	f849 7b04 	str.w	r7, [r9], #4
 800736c:	f85e 7b04 	ldr.w	r7, [lr], #4
 8007370:	40cf      	lsrs	r7, r1
 8007372:	e7d9      	b.n	8007328 <rshift+0x4c>
 8007374:	f851 cb04 	ldr.w	ip, [r1], #4
 8007378:	f847 cf04 	str.w	ip, [r7, #4]!
 800737c:	e7c2      	b.n	8007304 <rshift+0x28>
 800737e:	4623      	mov	r3, r4
 8007380:	e7e0      	b.n	8007344 <rshift+0x68>

08007382 <__hexdig_fun>:
 8007382:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 8007386:	2b09      	cmp	r3, #9
 8007388:	d802      	bhi.n	8007390 <__hexdig_fun+0xe>
 800738a:	3820      	subs	r0, #32
 800738c:	b2c0      	uxtb	r0, r0
 800738e:	4770      	bx	lr
 8007390:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 8007394:	2b05      	cmp	r3, #5
 8007396:	d801      	bhi.n	800739c <__hexdig_fun+0x1a>
 8007398:	3847      	subs	r0, #71	; 0x47
 800739a:	e7f7      	b.n	800738c <__hexdig_fun+0xa>
 800739c:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 80073a0:	2b05      	cmp	r3, #5
 80073a2:	d801      	bhi.n	80073a8 <__hexdig_fun+0x26>
 80073a4:	3827      	subs	r0, #39	; 0x27
 80073a6:	e7f1      	b.n	800738c <__hexdig_fun+0xa>
 80073a8:	2000      	movs	r0, #0
 80073aa:	4770      	bx	lr

080073ac <__gethex>:
 80073ac:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80073b0:	b08b      	sub	sp, #44	; 0x2c
 80073b2:	9306      	str	r3, [sp, #24]
 80073b4:	4bb9      	ldr	r3, [pc, #740]	; (800769c <__gethex+0x2f0>)
 80073b6:	9002      	str	r0, [sp, #8]
 80073b8:	681b      	ldr	r3, [r3, #0]
 80073ba:	468b      	mov	fp, r1
 80073bc:	4618      	mov	r0, r3
 80073be:	4690      	mov	r8, r2
 80073c0:	9303      	str	r3, [sp, #12]
 80073c2:	f7f8 fec5 	bl	8000150 <strlen>
 80073c6:	4682      	mov	sl, r0
 80073c8:	9b03      	ldr	r3, [sp, #12]
 80073ca:	f8db 2000 	ldr.w	r2, [fp]
 80073ce:	4403      	add	r3, r0
 80073d0:	f813 3c01 	ldrb.w	r3, [r3, #-1]
 80073d4:	9307      	str	r3, [sp, #28]
 80073d6:	1c93      	adds	r3, r2, #2
 80073d8:	f1c2 22ff 	rsb	r2, r2, #4278255360	; 0xff00ff00
 80073dc:	f502 027f 	add.w	r2, r2, #16711680	; 0xff0000
 80073e0:	32fe      	adds	r2, #254	; 0xfe
 80073e2:	18d1      	adds	r1, r2, r3
 80073e4:	461f      	mov	r7, r3
 80073e6:	f813 0b01 	ldrb.w	r0, [r3], #1
 80073ea:	9101      	str	r1, [sp, #4]
 80073ec:	2830      	cmp	r0, #48	; 0x30
 80073ee:	d0f8      	beq.n	80073e2 <__gethex+0x36>
 80073f0:	f7ff ffc7 	bl	8007382 <__hexdig_fun>
 80073f4:	4604      	mov	r4, r0
 80073f6:	2800      	cmp	r0, #0
 80073f8:	d13a      	bne.n	8007470 <__gethex+0xc4>
 80073fa:	4652      	mov	r2, sl
 80073fc:	4638      	mov	r0, r7
 80073fe:	9903      	ldr	r1, [sp, #12]
 8007400:	f001 f9ea 	bl	80087d8 <strncmp>
 8007404:	4605      	mov	r5, r0
 8007406:	2800      	cmp	r0, #0
 8007408:	d166      	bne.n	80074d8 <__gethex+0x12c>
 800740a:	f817 000a 	ldrb.w	r0, [r7, sl]
 800740e:	eb07 060a 	add.w	r6, r7, sl
 8007412:	f7ff ffb6 	bl	8007382 <__hexdig_fun>
 8007416:	2800      	cmp	r0, #0
 8007418:	d060      	beq.n	80074dc <__gethex+0x130>
 800741a:	4633      	mov	r3, r6
 800741c:	7818      	ldrb	r0, [r3, #0]
 800741e:	461f      	mov	r7, r3
 8007420:	2830      	cmp	r0, #48	; 0x30
 8007422:	f103 0301 	add.w	r3, r3, #1
 8007426:	d0f9      	beq.n	800741c <__gethex+0x70>
 8007428:	f7ff ffab 	bl	8007382 <__hexdig_fun>
 800742c:	2301      	movs	r3, #1
 800742e:	fab0 f480 	clz	r4, r0
 8007432:	4635      	mov	r5, r6
 8007434:	0964      	lsrs	r4, r4, #5
 8007436:	9301      	str	r3, [sp, #4]
 8007438:	463a      	mov	r2, r7
 800743a:	4616      	mov	r6, r2
 800743c:	7830      	ldrb	r0, [r6, #0]
 800743e:	3201      	adds	r2, #1
 8007440:	f7ff ff9f 	bl	8007382 <__hexdig_fun>
 8007444:	2800      	cmp	r0, #0
 8007446:	d1f8      	bne.n	800743a <__gethex+0x8e>
 8007448:	4652      	mov	r2, sl
 800744a:	4630      	mov	r0, r6
 800744c:	9903      	ldr	r1, [sp, #12]
 800744e:	f001 f9c3 	bl	80087d8 <strncmp>
 8007452:	b980      	cbnz	r0, 8007476 <__gethex+0xca>
 8007454:	b94d      	cbnz	r5, 800746a <__gethex+0xbe>
 8007456:	eb06 050a 	add.w	r5, r6, sl
 800745a:	462a      	mov	r2, r5
 800745c:	4616      	mov	r6, r2
 800745e:	7830      	ldrb	r0, [r6, #0]
 8007460:	3201      	adds	r2, #1
 8007462:	f7ff ff8e 	bl	8007382 <__hexdig_fun>
 8007466:	2800      	cmp	r0, #0
 8007468:	d1f8      	bne.n	800745c <__gethex+0xb0>
 800746a:	1bad      	subs	r5, r5, r6
 800746c:	00ad      	lsls	r5, r5, #2
 800746e:	e004      	b.n	800747a <__gethex+0xce>
 8007470:	2400      	movs	r4, #0
 8007472:	4625      	mov	r5, r4
 8007474:	e7e0      	b.n	8007438 <__gethex+0x8c>
 8007476:	2d00      	cmp	r5, #0
 8007478:	d1f7      	bne.n	800746a <__gethex+0xbe>
 800747a:	7833      	ldrb	r3, [r6, #0]
 800747c:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 8007480:	2b50      	cmp	r3, #80	; 0x50
 8007482:	d139      	bne.n	80074f8 <__gethex+0x14c>
 8007484:	7873      	ldrb	r3, [r6, #1]
 8007486:	2b2b      	cmp	r3, #43	; 0x2b
 8007488:	d02a      	beq.n	80074e0 <__gethex+0x134>
 800748a:	2b2d      	cmp	r3, #45	; 0x2d
 800748c:	d02c      	beq.n	80074e8 <__gethex+0x13c>
 800748e:	f04f 0900 	mov.w	r9, #0
 8007492:	1c71      	adds	r1, r6, #1
 8007494:	7808      	ldrb	r0, [r1, #0]
 8007496:	f7ff ff74 	bl	8007382 <__hexdig_fun>
 800749a:	1e43      	subs	r3, r0, #1
 800749c:	b2db      	uxtb	r3, r3
 800749e:	2b18      	cmp	r3, #24
 80074a0:	d82a      	bhi.n	80074f8 <__gethex+0x14c>
 80074a2:	f1a0 0210 	sub.w	r2, r0, #16
 80074a6:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 80074aa:	f7ff ff6a 	bl	8007382 <__hexdig_fun>
 80074ae:	1e43      	subs	r3, r0, #1
 80074b0:	b2db      	uxtb	r3, r3
 80074b2:	2b18      	cmp	r3, #24
 80074b4:	d91b      	bls.n	80074ee <__gethex+0x142>
 80074b6:	f1b9 0f00 	cmp.w	r9, #0
 80074ba:	d000      	beq.n	80074be <__gethex+0x112>
 80074bc:	4252      	negs	r2, r2
 80074be:	4415      	add	r5, r2
 80074c0:	f8cb 1000 	str.w	r1, [fp]
 80074c4:	b1d4      	cbz	r4, 80074fc <__gethex+0x150>
 80074c6:	9b01      	ldr	r3, [sp, #4]
 80074c8:	2b00      	cmp	r3, #0
 80074ca:	bf14      	ite	ne
 80074cc:	2700      	movne	r7, #0
 80074ce:	2706      	moveq	r7, #6
 80074d0:	4638      	mov	r0, r7
 80074d2:	b00b      	add	sp, #44	; 0x2c
 80074d4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80074d8:	463e      	mov	r6, r7
 80074da:	4625      	mov	r5, r4
 80074dc:	2401      	movs	r4, #1
 80074de:	e7cc      	b.n	800747a <__gethex+0xce>
 80074e0:	f04f 0900 	mov.w	r9, #0
 80074e4:	1cb1      	adds	r1, r6, #2
 80074e6:	e7d5      	b.n	8007494 <__gethex+0xe8>
 80074e8:	f04f 0901 	mov.w	r9, #1
 80074ec:	e7fa      	b.n	80074e4 <__gethex+0x138>
 80074ee:	230a      	movs	r3, #10
 80074f0:	fb03 0202 	mla	r2, r3, r2, r0
 80074f4:	3a10      	subs	r2, #16
 80074f6:	e7d6      	b.n	80074a6 <__gethex+0xfa>
 80074f8:	4631      	mov	r1, r6
 80074fa:	e7e1      	b.n	80074c0 <__gethex+0x114>
 80074fc:	4621      	mov	r1, r4
 80074fe:	1bf3      	subs	r3, r6, r7
 8007500:	3b01      	subs	r3, #1
 8007502:	2b07      	cmp	r3, #7
 8007504:	dc0a      	bgt.n	800751c <__gethex+0x170>
 8007506:	9802      	ldr	r0, [sp, #8]
 8007508:	f000 fa88 	bl	8007a1c <_Balloc>
 800750c:	4604      	mov	r4, r0
 800750e:	b940      	cbnz	r0, 8007522 <__gethex+0x176>
 8007510:	4602      	mov	r2, r0
 8007512:	21de      	movs	r1, #222	; 0xde
 8007514:	4b62      	ldr	r3, [pc, #392]	; (80076a0 <__gethex+0x2f4>)
 8007516:	4863      	ldr	r0, [pc, #396]	; (80076a4 <__gethex+0x2f8>)
 8007518:	f001 f97e 	bl	8008818 <__assert_func>
 800751c:	3101      	adds	r1, #1
 800751e:	105b      	asrs	r3, r3, #1
 8007520:	e7ef      	b.n	8007502 <__gethex+0x156>
 8007522:	f04f 0b00 	mov.w	fp, #0
 8007526:	f100 0914 	add.w	r9, r0, #20
 800752a:	f1ca 0301 	rsb	r3, sl, #1
 800752e:	f8cd 9010 	str.w	r9, [sp, #16]
 8007532:	f8cd b004 	str.w	fp, [sp, #4]
 8007536:	9308      	str	r3, [sp, #32]
 8007538:	42b7      	cmp	r7, r6
 800753a:	d33f      	bcc.n	80075bc <__gethex+0x210>
 800753c:	9f04      	ldr	r7, [sp, #16]
 800753e:	9b01      	ldr	r3, [sp, #4]
 8007540:	f847 3b04 	str.w	r3, [r7], #4
 8007544:	eba7 0709 	sub.w	r7, r7, r9
 8007548:	10bf      	asrs	r7, r7, #2
 800754a:	6127      	str	r7, [r4, #16]
 800754c:	4618      	mov	r0, r3
 800754e:	f000 fb5b 	bl	8007c08 <__hi0bits>
 8007552:	017f      	lsls	r7, r7, #5
 8007554:	f8d8 6000 	ldr.w	r6, [r8]
 8007558:	1a3f      	subs	r7, r7, r0
 800755a:	42b7      	cmp	r7, r6
 800755c:	dd62      	ble.n	8007624 <__gethex+0x278>
 800755e:	1bbf      	subs	r7, r7, r6
 8007560:	4639      	mov	r1, r7
 8007562:	4620      	mov	r0, r4
 8007564:	f000 fef1 	bl	800834a <__any_on>
 8007568:	4682      	mov	sl, r0
 800756a:	b1a8      	cbz	r0, 8007598 <__gethex+0x1ec>
 800756c:	f04f 0a01 	mov.w	sl, #1
 8007570:	1e7b      	subs	r3, r7, #1
 8007572:	1159      	asrs	r1, r3, #5
 8007574:	f859 1021 	ldr.w	r1, [r9, r1, lsl #2]
 8007578:	f003 021f 	and.w	r2, r3, #31
 800757c:	fa0a f202 	lsl.w	r2, sl, r2
 8007580:	420a      	tst	r2, r1
 8007582:	d009      	beq.n	8007598 <__gethex+0x1ec>
 8007584:	4553      	cmp	r3, sl
 8007586:	dd05      	ble.n	8007594 <__gethex+0x1e8>
 8007588:	4620      	mov	r0, r4
 800758a:	1eb9      	subs	r1, r7, #2
 800758c:	f000 fedd 	bl	800834a <__any_on>
 8007590:	2800      	cmp	r0, #0
 8007592:	d144      	bne.n	800761e <__gethex+0x272>
 8007594:	f04f 0a02 	mov.w	sl, #2
 8007598:	4639      	mov	r1, r7
 800759a:	4620      	mov	r0, r4
 800759c:	f7ff fe9e 	bl	80072dc <rshift>
 80075a0:	443d      	add	r5, r7
 80075a2:	f8d8 3008 	ldr.w	r3, [r8, #8]
 80075a6:	42ab      	cmp	r3, r5
 80075a8:	da4a      	bge.n	8007640 <__gethex+0x294>
 80075aa:	4621      	mov	r1, r4
 80075ac:	9802      	ldr	r0, [sp, #8]
 80075ae:	f000 fa75 	bl	8007a9c <_Bfree>
 80075b2:	2300      	movs	r3, #0
 80075b4:	9a14      	ldr	r2, [sp, #80]	; 0x50
 80075b6:	27a3      	movs	r7, #163	; 0xa3
 80075b8:	6013      	str	r3, [r2, #0]
 80075ba:	e789      	b.n	80074d0 <__gethex+0x124>
 80075bc:	1e73      	subs	r3, r6, #1
 80075be:	9a07      	ldr	r2, [sp, #28]
 80075c0:	9305      	str	r3, [sp, #20]
 80075c2:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 80075c6:	4293      	cmp	r3, r2
 80075c8:	d019      	beq.n	80075fe <__gethex+0x252>
 80075ca:	f1bb 0f20 	cmp.w	fp, #32
 80075ce:	d107      	bne.n	80075e0 <__gethex+0x234>
 80075d0:	9b04      	ldr	r3, [sp, #16]
 80075d2:	9a01      	ldr	r2, [sp, #4]
 80075d4:	f843 2b04 	str.w	r2, [r3], #4
 80075d8:	9304      	str	r3, [sp, #16]
 80075da:	2300      	movs	r3, #0
 80075dc:	469b      	mov	fp, r3
 80075de:	9301      	str	r3, [sp, #4]
 80075e0:	f816 0c01 	ldrb.w	r0, [r6, #-1]
 80075e4:	f7ff fecd 	bl	8007382 <__hexdig_fun>
 80075e8:	9b01      	ldr	r3, [sp, #4]
 80075ea:	f000 000f 	and.w	r0, r0, #15
 80075ee:	fa00 f00b 	lsl.w	r0, r0, fp
 80075f2:	4303      	orrs	r3, r0
 80075f4:	9301      	str	r3, [sp, #4]
 80075f6:	f10b 0b04 	add.w	fp, fp, #4
 80075fa:	9b05      	ldr	r3, [sp, #20]
 80075fc:	e00d      	b.n	800761a <__gethex+0x26e>
 80075fe:	9b05      	ldr	r3, [sp, #20]
 8007600:	9a08      	ldr	r2, [sp, #32]
 8007602:	4413      	add	r3, r2
 8007604:	42bb      	cmp	r3, r7
 8007606:	d3e0      	bcc.n	80075ca <__gethex+0x21e>
 8007608:	4618      	mov	r0, r3
 800760a:	4652      	mov	r2, sl
 800760c:	9903      	ldr	r1, [sp, #12]
 800760e:	9309      	str	r3, [sp, #36]	; 0x24
 8007610:	f001 f8e2 	bl	80087d8 <strncmp>
 8007614:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007616:	2800      	cmp	r0, #0
 8007618:	d1d7      	bne.n	80075ca <__gethex+0x21e>
 800761a:	461e      	mov	r6, r3
 800761c:	e78c      	b.n	8007538 <__gethex+0x18c>
 800761e:	f04f 0a03 	mov.w	sl, #3
 8007622:	e7b9      	b.n	8007598 <__gethex+0x1ec>
 8007624:	da09      	bge.n	800763a <__gethex+0x28e>
 8007626:	1bf7      	subs	r7, r6, r7
 8007628:	4621      	mov	r1, r4
 800762a:	463a      	mov	r2, r7
 800762c:	9802      	ldr	r0, [sp, #8]
 800762e:	f000 fc4d 	bl	8007ecc <__lshift>
 8007632:	4604      	mov	r4, r0
 8007634:	1bed      	subs	r5, r5, r7
 8007636:	f100 0914 	add.w	r9, r0, #20
 800763a:	f04f 0a00 	mov.w	sl, #0
 800763e:	e7b0      	b.n	80075a2 <__gethex+0x1f6>
 8007640:	f8d8 0004 	ldr.w	r0, [r8, #4]
 8007644:	42a8      	cmp	r0, r5
 8007646:	dd71      	ble.n	800772c <__gethex+0x380>
 8007648:	1b45      	subs	r5, r0, r5
 800764a:	42ae      	cmp	r6, r5
 800764c:	dc34      	bgt.n	80076b8 <__gethex+0x30c>
 800764e:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8007652:	2b02      	cmp	r3, #2
 8007654:	d028      	beq.n	80076a8 <__gethex+0x2fc>
 8007656:	2b03      	cmp	r3, #3
 8007658:	d02a      	beq.n	80076b0 <__gethex+0x304>
 800765a:	2b01      	cmp	r3, #1
 800765c:	d115      	bne.n	800768a <__gethex+0x2de>
 800765e:	42ae      	cmp	r6, r5
 8007660:	d113      	bne.n	800768a <__gethex+0x2de>
 8007662:	2e01      	cmp	r6, #1
 8007664:	d10b      	bne.n	800767e <__gethex+0x2d2>
 8007666:	f8d8 3004 	ldr.w	r3, [r8, #4]
 800766a:	9a06      	ldr	r2, [sp, #24]
 800766c:	2762      	movs	r7, #98	; 0x62
 800766e:	6013      	str	r3, [r2, #0]
 8007670:	2301      	movs	r3, #1
 8007672:	6123      	str	r3, [r4, #16]
 8007674:	f8c9 3000 	str.w	r3, [r9]
 8007678:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800767a:	601c      	str	r4, [r3, #0]
 800767c:	e728      	b.n	80074d0 <__gethex+0x124>
 800767e:	4620      	mov	r0, r4
 8007680:	1e71      	subs	r1, r6, #1
 8007682:	f000 fe62 	bl	800834a <__any_on>
 8007686:	2800      	cmp	r0, #0
 8007688:	d1ed      	bne.n	8007666 <__gethex+0x2ba>
 800768a:	4621      	mov	r1, r4
 800768c:	9802      	ldr	r0, [sp, #8]
 800768e:	f000 fa05 	bl	8007a9c <_Bfree>
 8007692:	2300      	movs	r3, #0
 8007694:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8007696:	2750      	movs	r7, #80	; 0x50
 8007698:	6013      	str	r3, [r2, #0]
 800769a:	e719      	b.n	80074d0 <__gethex+0x124>
 800769c:	08009690 	.word	0x08009690
 80076a0:	08009614 	.word	0x08009614
 80076a4:	08009625 	.word	0x08009625
 80076a8:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80076aa:	2b00      	cmp	r3, #0
 80076ac:	d1ed      	bne.n	800768a <__gethex+0x2de>
 80076ae:	e7da      	b.n	8007666 <__gethex+0x2ba>
 80076b0:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80076b2:	2b00      	cmp	r3, #0
 80076b4:	d1d7      	bne.n	8007666 <__gethex+0x2ba>
 80076b6:	e7e8      	b.n	800768a <__gethex+0x2de>
 80076b8:	1e6f      	subs	r7, r5, #1
 80076ba:	f1ba 0f00 	cmp.w	sl, #0
 80076be:	d132      	bne.n	8007726 <__gethex+0x37a>
 80076c0:	b127      	cbz	r7, 80076cc <__gethex+0x320>
 80076c2:	4639      	mov	r1, r7
 80076c4:	4620      	mov	r0, r4
 80076c6:	f000 fe40 	bl	800834a <__any_on>
 80076ca:	4682      	mov	sl, r0
 80076cc:	2101      	movs	r1, #1
 80076ce:	117b      	asrs	r3, r7, #5
 80076d0:	f859 3023 	ldr.w	r3, [r9, r3, lsl #2]
 80076d4:	f007 071f 	and.w	r7, r7, #31
 80076d8:	fa01 f707 	lsl.w	r7, r1, r7
 80076dc:	421f      	tst	r7, r3
 80076de:	f04f 0702 	mov.w	r7, #2
 80076e2:	4629      	mov	r1, r5
 80076e4:	4620      	mov	r0, r4
 80076e6:	bf18      	it	ne
 80076e8:	f04a 0a02 	orrne.w	sl, sl, #2
 80076ec:	1b76      	subs	r6, r6, r5
 80076ee:	f7ff fdf5 	bl	80072dc <rshift>
 80076f2:	f8d8 5004 	ldr.w	r5, [r8, #4]
 80076f6:	f1ba 0f00 	cmp.w	sl, #0
 80076fa:	d048      	beq.n	800778e <__gethex+0x3e2>
 80076fc:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8007700:	2b02      	cmp	r3, #2
 8007702:	d015      	beq.n	8007730 <__gethex+0x384>
 8007704:	2b03      	cmp	r3, #3
 8007706:	d017      	beq.n	8007738 <__gethex+0x38c>
 8007708:	2b01      	cmp	r3, #1
 800770a:	d109      	bne.n	8007720 <__gethex+0x374>
 800770c:	f01a 0f02 	tst.w	sl, #2
 8007710:	d006      	beq.n	8007720 <__gethex+0x374>
 8007712:	f8d9 0000 	ldr.w	r0, [r9]
 8007716:	ea4a 0a00 	orr.w	sl, sl, r0
 800771a:	f01a 0f01 	tst.w	sl, #1
 800771e:	d10e      	bne.n	800773e <__gethex+0x392>
 8007720:	f047 0710 	orr.w	r7, r7, #16
 8007724:	e033      	b.n	800778e <__gethex+0x3e2>
 8007726:	f04f 0a01 	mov.w	sl, #1
 800772a:	e7cf      	b.n	80076cc <__gethex+0x320>
 800772c:	2701      	movs	r7, #1
 800772e:	e7e2      	b.n	80076f6 <__gethex+0x34a>
 8007730:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8007732:	f1c3 0301 	rsb	r3, r3, #1
 8007736:	9315      	str	r3, [sp, #84]	; 0x54
 8007738:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800773a:	2b00      	cmp	r3, #0
 800773c:	d0f0      	beq.n	8007720 <__gethex+0x374>
 800773e:	f04f 0c00 	mov.w	ip, #0
 8007742:	f8d4 b010 	ldr.w	fp, [r4, #16]
 8007746:	f104 0314 	add.w	r3, r4, #20
 800774a:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 800774e:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 8007752:	4618      	mov	r0, r3
 8007754:	f853 2b04 	ldr.w	r2, [r3], #4
 8007758:	f1b2 3fff 	cmp.w	r2, #4294967295
 800775c:	d01c      	beq.n	8007798 <__gethex+0x3ec>
 800775e:	3201      	adds	r2, #1
 8007760:	6002      	str	r2, [r0, #0]
 8007762:	2f02      	cmp	r7, #2
 8007764:	f104 0314 	add.w	r3, r4, #20
 8007768:	d13d      	bne.n	80077e6 <__gethex+0x43a>
 800776a:	f8d8 2000 	ldr.w	r2, [r8]
 800776e:	3a01      	subs	r2, #1
 8007770:	42b2      	cmp	r2, r6
 8007772:	d10a      	bne.n	800778a <__gethex+0x3de>
 8007774:	2201      	movs	r2, #1
 8007776:	1171      	asrs	r1, r6, #5
 8007778:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800777c:	f006 061f 	and.w	r6, r6, #31
 8007780:	fa02 f606 	lsl.w	r6, r2, r6
 8007784:	421e      	tst	r6, r3
 8007786:	bf18      	it	ne
 8007788:	4617      	movne	r7, r2
 800778a:	f047 0720 	orr.w	r7, r7, #32
 800778e:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8007790:	601c      	str	r4, [r3, #0]
 8007792:	9b06      	ldr	r3, [sp, #24]
 8007794:	601d      	str	r5, [r3, #0]
 8007796:	e69b      	b.n	80074d0 <__gethex+0x124>
 8007798:	4299      	cmp	r1, r3
 800779a:	f843 cc04 	str.w	ip, [r3, #-4]
 800779e:	d8d8      	bhi.n	8007752 <__gethex+0x3a6>
 80077a0:	68a3      	ldr	r3, [r4, #8]
 80077a2:	459b      	cmp	fp, r3
 80077a4:	db17      	blt.n	80077d6 <__gethex+0x42a>
 80077a6:	6861      	ldr	r1, [r4, #4]
 80077a8:	9802      	ldr	r0, [sp, #8]
 80077aa:	3101      	adds	r1, #1
 80077ac:	f000 f936 	bl	8007a1c <_Balloc>
 80077b0:	4681      	mov	r9, r0
 80077b2:	b918      	cbnz	r0, 80077bc <__gethex+0x410>
 80077b4:	4602      	mov	r2, r0
 80077b6:	2184      	movs	r1, #132	; 0x84
 80077b8:	4b19      	ldr	r3, [pc, #100]	; (8007820 <__gethex+0x474>)
 80077ba:	e6ac      	b.n	8007516 <__gethex+0x16a>
 80077bc:	6922      	ldr	r2, [r4, #16]
 80077be:	f104 010c 	add.w	r1, r4, #12
 80077c2:	3202      	adds	r2, #2
 80077c4:	0092      	lsls	r2, r2, #2
 80077c6:	300c      	adds	r0, #12
 80077c8:	f000 f91a 	bl	8007a00 <memcpy>
 80077cc:	4621      	mov	r1, r4
 80077ce:	9802      	ldr	r0, [sp, #8]
 80077d0:	f000 f964 	bl	8007a9c <_Bfree>
 80077d4:	464c      	mov	r4, r9
 80077d6:	6923      	ldr	r3, [r4, #16]
 80077d8:	1c5a      	adds	r2, r3, #1
 80077da:	6122      	str	r2, [r4, #16]
 80077dc:	2201      	movs	r2, #1
 80077de:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 80077e2:	615a      	str	r2, [r3, #20]
 80077e4:	e7bd      	b.n	8007762 <__gethex+0x3b6>
 80077e6:	6922      	ldr	r2, [r4, #16]
 80077e8:	455a      	cmp	r2, fp
 80077ea:	dd0b      	ble.n	8007804 <__gethex+0x458>
 80077ec:	2101      	movs	r1, #1
 80077ee:	4620      	mov	r0, r4
 80077f0:	f7ff fd74 	bl	80072dc <rshift>
 80077f4:	f8d8 3008 	ldr.w	r3, [r8, #8]
 80077f8:	3501      	adds	r5, #1
 80077fa:	42ab      	cmp	r3, r5
 80077fc:	f6ff aed5 	blt.w	80075aa <__gethex+0x1fe>
 8007800:	2701      	movs	r7, #1
 8007802:	e7c2      	b.n	800778a <__gethex+0x3de>
 8007804:	f016 061f 	ands.w	r6, r6, #31
 8007808:	d0fa      	beq.n	8007800 <__gethex+0x454>
 800780a:	449a      	add	sl, r3
 800780c:	f85a 0c04 	ldr.w	r0, [sl, #-4]
 8007810:	f000 f9fa 	bl	8007c08 <__hi0bits>
 8007814:	f1c6 0620 	rsb	r6, r6, #32
 8007818:	42b0      	cmp	r0, r6
 800781a:	dbe7      	blt.n	80077ec <__gethex+0x440>
 800781c:	e7f0      	b.n	8007800 <__gethex+0x454>
 800781e:	bf00      	nop
 8007820:	08009614 	.word	0x08009614

08007824 <L_shift>:
 8007824:	f1c2 0208 	rsb	r2, r2, #8
 8007828:	0092      	lsls	r2, r2, #2
 800782a:	b570      	push	{r4, r5, r6, lr}
 800782c:	f1c2 0620 	rsb	r6, r2, #32
 8007830:	6843      	ldr	r3, [r0, #4]
 8007832:	6804      	ldr	r4, [r0, #0]
 8007834:	fa03 f506 	lsl.w	r5, r3, r6
 8007838:	432c      	orrs	r4, r5
 800783a:	40d3      	lsrs	r3, r2
 800783c:	6004      	str	r4, [r0, #0]
 800783e:	f840 3f04 	str.w	r3, [r0, #4]!
 8007842:	4288      	cmp	r0, r1
 8007844:	d3f4      	bcc.n	8007830 <L_shift+0xc>
 8007846:	bd70      	pop	{r4, r5, r6, pc}

08007848 <__match>:
 8007848:	b530      	push	{r4, r5, lr}
 800784a:	6803      	ldr	r3, [r0, #0]
 800784c:	3301      	adds	r3, #1
 800784e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8007852:	b914      	cbnz	r4, 800785a <__match+0x12>
 8007854:	6003      	str	r3, [r0, #0]
 8007856:	2001      	movs	r0, #1
 8007858:	bd30      	pop	{r4, r5, pc}
 800785a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800785e:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 8007862:	2d19      	cmp	r5, #25
 8007864:	bf98      	it	ls
 8007866:	3220      	addls	r2, #32
 8007868:	42a2      	cmp	r2, r4
 800786a:	d0f0      	beq.n	800784e <__match+0x6>
 800786c:	2000      	movs	r0, #0
 800786e:	e7f3      	b.n	8007858 <__match+0x10>

08007870 <__hexnan>:
 8007870:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007874:	2500      	movs	r5, #0
 8007876:	680b      	ldr	r3, [r1, #0]
 8007878:	4682      	mov	sl, r0
 800787a:	115e      	asrs	r6, r3, #5
 800787c:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 8007880:	f013 031f 	ands.w	r3, r3, #31
 8007884:	bf18      	it	ne
 8007886:	3604      	addne	r6, #4
 8007888:	1f37      	subs	r7, r6, #4
 800788a:	4690      	mov	r8, r2
 800788c:	46b9      	mov	r9, r7
 800788e:	463c      	mov	r4, r7
 8007890:	46ab      	mov	fp, r5
 8007892:	b087      	sub	sp, #28
 8007894:	6801      	ldr	r1, [r0, #0]
 8007896:	9301      	str	r3, [sp, #4]
 8007898:	f846 5c04 	str.w	r5, [r6, #-4]
 800789c:	9502      	str	r5, [sp, #8]
 800789e:	784a      	ldrb	r2, [r1, #1]
 80078a0:	1c4b      	adds	r3, r1, #1
 80078a2:	9303      	str	r3, [sp, #12]
 80078a4:	b342      	cbz	r2, 80078f8 <__hexnan+0x88>
 80078a6:	4610      	mov	r0, r2
 80078a8:	9105      	str	r1, [sp, #20]
 80078aa:	9204      	str	r2, [sp, #16]
 80078ac:	f7ff fd69 	bl	8007382 <__hexdig_fun>
 80078b0:	2800      	cmp	r0, #0
 80078b2:	d14f      	bne.n	8007954 <__hexnan+0xe4>
 80078b4:	9a04      	ldr	r2, [sp, #16]
 80078b6:	9905      	ldr	r1, [sp, #20]
 80078b8:	2a20      	cmp	r2, #32
 80078ba:	d818      	bhi.n	80078ee <__hexnan+0x7e>
 80078bc:	9b02      	ldr	r3, [sp, #8]
 80078be:	459b      	cmp	fp, r3
 80078c0:	dd13      	ble.n	80078ea <__hexnan+0x7a>
 80078c2:	454c      	cmp	r4, r9
 80078c4:	d206      	bcs.n	80078d4 <__hexnan+0x64>
 80078c6:	2d07      	cmp	r5, #7
 80078c8:	dc04      	bgt.n	80078d4 <__hexnan+0x64>
 80078ca:	462a      	mov	r2, r5
 80078cc:	4649      	mov	r1, r9
 80078ce:	4620      	mov	r0, r4
 80078d0:	f7ff ffa8 	bl	8007824 <L_shift>
 80078d4:	4544      	cmp	r4, r8
 80078d6:	d950      	bls.n	800797a <__hexnan+0x10a>
 80078d8:	2300      	movs	r3, #0
 80078da:	f1a4 0904 	sub.w	r9, r4, #4
 80078de:	f844 3c04 	str.w	r3, [r4, #-4]
 80078e2:	461d      	mov	r5, r3
 80078e4:	464c      	mov	r4, r9
 80078e6:	f8cd b008 	str.w	fp, [sp, #8]
 80078ea:	9903      	ldr	r1, [sp, #12]
 80078ec:	e7d7      	b.n	800789e <__hexnan+0x2e>
 80078ee:	2a29      	cmp	r2, #41	; 0x29
 80078f0:	d156      	bne.n	80079a0 <__hexnan+0x130>
 80078f2:	3102      	adds	r1, #2
 80078f4:	f8ca 1000 	str.w	r1, [sl]
 80078f8:	f1bb 0f00 	cmp.w	fp, #0
 80078fc:	d050      	beq.n	80079a0 <__hexnan+0x130>
 80078fe:	454c      	cmp	r4, r9
 8007900:	d206      	bcs.n	8007910 <__hexnan+0xa0>
 8007902:	2d07      	cmp	r5, #7
 8007904:	dc04      	bgt.n	8007910 <__hexnan+0xa0>
 8007906:	462a      	mov	r2, r5
 8007908:	4649      	mov	r1, r9
 800790a:	4620      	mov	r0, r4
 800790c:	f7ff ff8a 	bl	8007824 <L_shift>
 8007910:	4544      	cmp	r4, r8
 8007912:	d934      	bls.n	800797e <__hexnan+0x10e>
 8007914:	4623      	mov	r3, r4
 8007916:	f1a8 0204 	sub.w	r2, r8, #4
 800791a:	f853 1b04 	ldr.w	r1, [r3], #4
 800791e:	429f      	cmp	r7, r3
 8007920:	f842 1f04 	str.w	r1, [r2, #4]!
 8007924:	d2f9      	bcs.n	800791a <__hexnan+0xaa>
 8007926:	1b3b      	subs	r3, r7, r4
 8007928:	f023 0303 	bic.w	r3, r3, #3
 800792c:	3304      	adds	r3, #4
 800792e:	3401      	adds	r4, #1
 8007930:	3e03      	subs	r6, #3
 8007932:	42b4      	cmp	r4, r6
 8007934:	bf88      	it	hi
 8007936:	2304      	movhi	r3, #4
 8007938:	2200      	movs	r2, #0
 800793a:	4443      	add	r3, r8
 800793c:	f843 2b04 	str.w	r2, [r3], #4
 8007940:	429f      	cmp	r7, r3
 8007942:	d2fb      	bcs.n	800793c <__hexnan+0xcc>
 8007944:	683b      	ldr	r3, [r7, #0]
 8007946:	b91b      	cbnz	r3, 8007950 <__hexnan+0xe0>
 8007948:	4547      	cmp	r7, r8
 800794a:	d127      	bne.n	800799c <__hexnan+0x12c>
 800794c:	2301      	movs	r3, #1
 800794e:	603b      	str	r3, [r7, #0]
 8007950:	2005      	movs	r0, #5
 8007952:	e026      	b.n	80079a2 <__hexnan+0x132>
 8007954:	3501      	adds	r5, #1
 8007956:	2d08      	cmp	r5, #8
 8007958:	f10b 0b01 	add.w	fp, fp, #1
 800795c:	dd06      	ble.n	800796c <__hexnan+0xfc>
 800795e:	4544      	cmp	r4, r8
 8007960:	d9c3      	bls.n	80078ea <__hexnan+0x7a>
 8007962:	2300      	movs	r3, #0
 8007964:	2501      	movs	r5, #1
 8007966:	f844 3c04 	str.w	r3, [r4, #-4]
 800796a:	3c04      	subs	r4, #4
 800796c:	6822      	ldr	r2, [r4, #0]
 800796e:	f000 000f 	and.w	r0, r0, #15
 8007972:	ea40 1202 	orr.w	r2, r0, r2, lsl #4
 8007976:	6022      	str	r2, [r4, #0]
 8007978:	e7b7      	b.n	80078ea <__hexnan+0x7a>
 800797a:	2508      	movs	r5, #8
 800797c:	e7b5      	b.n	80078ea <__hexnan+0x7a>
 800797e:	9b01      	ldr	r3, [sp, #4]
 8007980:	2b00      	cmp	r3, #0
 8007982:	d0df      	beq.n	8007944 <__hexnan+0xd4>
 8007984:	f04f 32ff 	mov.w	r2, #4294967295
 8007988:	f1c3 0320 	rsb	r3, r3, #32
 800798c:	fa22 f303 	lsr.w	r3, r2, r3
 8007990:	f856 2c04 	ldr.w	r2, [r6, #-4]
 8007994:	401a      	ands	r2, r3
 8007996:	f846 2c04 	str.w	r2, [r6, #-4]
 800799a:	e7d3      	b.n	8007944 <__hexnan+0xd4>
 800799c:	3f04      	subs	r7, #4
 800799e:	e7d1      	b.n	8007944 <__hexnan+0xd4>
 80079a0:	2004      	movs	r0, #4
 80079a2:	b007      	add	sp, #28
 80079a4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

080079a8 <_localeconv_r>:
 80079a8:	4800      	ldr	r0, [pc, #0]	; (80079ac <_localeconv_r+0x4>)
 80079aa:	4770      	bx	lr
 80079ac:	20000164 	.word	0x20000164

080079b0 <malloc>:
 80079b0:	4b02      	ldr	r3, [pc, #8]	; (80079bc <malloc+0xc>)
 80079b2:	4601      	mov	r1, r0
 80079b4:	6818      	ldr	r0, [r3, #0]
 80079b6:	f000 bd43 	b.w	8008440 <_malloc_r>
 80079ba:	bf00      	nop
 80079bc:	2000000c 	.word	0x2000000c

080079c0 <__ascii_mbtowc>:
 80079c0:	b082      	sub	sp, #8
 80079c2:	b901      	cbnz	r1, 80079c6 <__ascii_mbtowc+0x6>
 80079c4:	a901      	add	r1, sp, #4
 80079c6:	b142      	cbz	r2, 80079da <__ascii_mbtowc+0x1a>
 80079c8:	b14b      	cbz	r3, 80079de <__ascii_mbtowc+0x1e>
 80079ca:	7813      	ldrb	r3, [r2, #0]
 80079cc:	600b      	str	r3, [r1, #0]
 80079ce:	7812      	ldrb	r2, [r2, #0]
 80079d0:	1e10      	subs	r0, r2, #0
 80079d2:	bf18      	it	ne
 80079d4:	2001      	movne	r0, #1
 80079d6:	b002      	add	sp, #8
 80079d8:	4770      	bx	lr
 80079da:	4610      	mov	r0, r2
 80079dc:	e7fb      	b.n	80079d6 <__ascii_mbtowc+0x16>
 80079de:	f06f 0001 	mvn.w	r0, #1
 80079e2:	e7f8      	b.n	80079d6 <__ascii_mbtowc+0x16>

080079e4 <memchr>:
 80079e4:	4603      	mov	r3, r0
 80079e6:	b510      	push	{r4, lr}
 80079e8:	b2c9      	uxtb	r1, r1
 80079ea:	4402      	add	r2, r0
 80079ec:	4293      	cmp	r3, r2
 80079ee:	4618      	mov	r0, r3
 80079f0:	d101      	bne.n	80079f6 <memchr+0x12>
 80079f2:	2000      	movs	r0, #0
 80079f4:	e003      	b.n	80079fe <memchr+0x1a>
 80079f6:	7804      	ldrb	r4, [r0, #0]
 80079f8:	3301      	adds	r3, #1
 80079fa:	428c      	cmp	r4, r1
 80079fc:	d1f6      	bne.n	80079ec <memchr+0x8>
 80079fe:	bd10      	pop	{r4, pc}

08007a00 <memcpy>:
 8007a00:	440a      	add	r2, r1
 8007a02:	4291      	cmp	r1, r2
 8007a04:	f100 33ff 	add.w	r3, r0, #4294967295
 8007a08:	d100      	bne.n	8007a0c <memcpy+0xc>
 8007a0a:	4770      	bx	lr
 8007a0c:	b510      	push	{r4, lr}
 8007a0e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8007a12:	4291      	cmp	r1, r2
 8007a14:	f803 4f01 	strb.w	r4, [r3, #1]!
 8007a18:	d1f9      	bne.n	8007a0e <memcpy+0xe>
 8007a1a:	bd10      	pop	{r4, pc}

08007a1c <_Balloc>:
 8007a1c:	b570      	push	{r4, r5, r6, lr}
 8007a1e:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8007a20:	4604      	mov	r4, r0
 8007a22:	460d      	mov	r5, r1
 8007a24:	b976      	cbnz	r6, 8007a44 <_Balloc+0x28>
 8007a26:	2010      	movs	r0, #16
 8007a28:	f7ff ffc2 	bl	80079b0 <malloc>
 8007a2c:	4602      	mov	r2, r0
 8007a2e:	6260      	str	r0, [r4, #36]	; 0x24
 8007a30:	b920      	cbnz	r0, 8007a3c <_Balloc+0x20>
 8007a32:	2166      	movs	r1, #102	; 0x66
 8007a34:	4b17      	ldr	r3, [pc, #92]	; (8007a94 <_Balloc+0x78>)
 8007a36:	4818      	ldr	r0, [pc, #96]	; (8007a98 <_Balloc+0x7c>)
 8007a38:	f000 feee 	bl	8008818 <__assert_func>
 8007a3c:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8007a40:	6006      	str	r6, [r0, #0]
 8007a42:	60c6      	str	r6, [r0, #12]
 8007a44:	6a66      	ldr	r6, [r4, #36]	; 0x24
 8007a46:	68f3      	ldr	r3, [r6, #12]
 8007a48:	b183      	cbz	r3, 8007a6c <_Balloc+0x50>
 8007a4a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8007a4c:	68db      	ldr	r3, [r3, #12]
 8007a4e:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8007a52:	b9b8      	cbnz	r0, 8007a84 <_Balloc+0x68>
 8007a54:	2101      	movs	r1, #1
 8007a56:	fa01 f605 	lsl.w	r6, r1, r5
 8007a5a:	1d72      	adds	r2, r6, #5
 8007a5c:	4620      	mov	r0, r4
 8007a5e:	0092      	lsls	r2, r2, #2
 8007a60:	f000 fc94 	bl	800838c <_calloc_r>
 8007a64:	b160      	cbz	r0, 8007a80 <_Balloc+0x64>
 8007a66:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8007a6a:	e00e      	b.n	8007a8a <_Balloc+0x6e>
 8007a6c:	2221      	movs	r2, #33	; 0x21
 8007a6e:	2104      	movs	r1, #4
 8007a70:	4620      	mov	r0, r4
 8007a72:	f000 fc8b 	bl	800838c <_calloc_r>
 8007a76:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8007a78:	60f0      	str	r0, [r6, #12]
 8007a7a:	68db      	ldr	r3, [r3, #12]
 8007a7c:	2b00      	cmp	r3, #0
 8007a7e:	d1e4      	bne.n	8007a4a <_Balloc+0x2e>
 8007a80:	2000      	movs	r0, #0
 8007a82:	bd70      	pop	{r4, r5, r6, pc}
 8007a84:	6802      	ldr	r2, [r0, #0]
 8007a86:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8007a8a:	2300      	movs	r3, #0
 8007a8c:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8007a90:	e7f7      	b.n	8007a82 <_Balloc+0x66>
 8007a92:	bf00      	nop
 8007a94:	0800959e 	.word	0x0800959e
 8007a98:	080096a4 	.word	0x080096a4

08007a9c <_Bfree>:
 8007a9c:	b570      	push	{r4, r5, r6, lr}
 8007a9e:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8007aa0:	4605      	mov	r5, r0
 8007aa2:	460c      	mov	r4, r1
 8007aa4:	b976      	cbnz	r6, 8007ac4 <_Bfree+0x28>
 8007aa6:	2010      	movs	r0, #16
 8007aa8:	f7ff ff82 	bl	80079b0 <malloc>
 8007aac:	4602      	mov	r2, r0
 8007aae:	6268      	str	r0, [r5, #36]	; 0x24
 8007ab0:	b920      	cbnz	r0, 8007abc <_Bfree+0x20>
 8007ab2:	218a      	movs	r1, #138	; 0x8a
 8007ab4:	4b08      	ldr	r3, [pc, #32]	; (8007ad8 <_Bfree+0x3c>)
 8007ab6:	4809      	ldr	r0, [pc, #36]	; (8007adc <_Bfree+0x40>)
 8007ab8:	f000 feae 	bl	8008818 <__assert_func>
 8007abc:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8007ac0:	6006      	str	r6, [r0, #0]
 8007ac2:	60c6      	str	r6, [r0, #12]
 8007ac4:	b13c      	cbz	r4, 8007ad6 <_Bfree+0x3a>
 8007ac6:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8007ac8:	6862      	ldr	r2, [r4, #4]
 8007aca:	68db      	ldr	r3, [r3, #12]
 8007acc:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8007ad0:	6021      	str	r1, [r4, #0]
 8007ad2:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8007ad6:	bd70      	pop	{r4, r5, r6, pc}
 8007ad8:	0800959e 	.word	0x0800959e
 8007adc:	080096a4 	.word	0x080096a4

08007ae0 <__multadd>:
 8007ae0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007ae4:	4698      	mov	r8, r3
 8007ae6:	460c      	mov	r4, r1
 8007ae8:	2300      	movs	r3, #0
 8007aea:	690e      	ldr	r6, [r1, #16]
 8007aec:	4607      	mov	r7, r0
 8007aee:	f101 0014 	add.w	r0, r1, #20
 8007af2:	6805      	ldr	r5, [r0, #0]
 8007af4:	3301      	adds	r3, #1
 8007af6:	b2a9      	uxth	r1, r5
 8007af8:	fb02 8101 	mla	r1, r2, r1, r8
 8007afc:	0c2d      	lsrs	r5, r5, #16
 8007afe:	ea4f 4c11 	mov.w	ip, r1, lsr #16
 8007b02:	fb02 c505 	mla	r5, r2, r5, ip
 8007b06:	b289      	uxth	r1, r1
 8007b08:	eb01 4105 	add.w	r1, r1, r5, lsl #16
 8007b0c:	429e      	cmp	r6, r3
 8007b0e:	ea4f 4815 	mov.w	r8, r5, lsr #16
 8007b12:	f840 1b04 	str.w	r1, [r0], #4
 8007b16:	dcec      	bgt.n	8007af2 <__multadd+0x12>
 8007b18:	f1b8 0f00 	cmp.w	r8, #0
 8007b1c:	d022      	beq.n	8007b64 <__multadd+0x84>
 8007b1e:	68a3      	ldr	r3, [r4, #8]
 8007b20:	42b3      	cmp	r3, r6
 8007b22:	dc19      	bgt.n	8007b58 <__multadd+0x78>
 8007b24:	6861      	ldr	r1, [r4, #4]
 8007b26:	4638      	mov	r0, r7
 8007b28:	3101      	adds	r1, #1
 8007b2a:	f7ff ff77 	bl	8007a1c <_Balloc>
 8007b2e:	4605      	mov	r5, r0
 8007b30:	b928      	cbnz	r0, 8007b3e <__multadd+0x5e>
 8007b32:	4602      	mov	r2, r0
 8007b34:	21b5      	movs	r1, #181	; 0xb5
 8007b36:	4b0d      	ldr	r3, [pc, #52]	; (8007b6c <__multadd+0x8c>)
 8007b38:	480d      	ldr	r0, [pc, #52]	; (8007b70 <__multadd+0x90>)
 8007b3a:	f000 fe6d 	bl	8008818 <__assert_func>
 8007b3e:	6922      	ldr	r2, [r4, #16]
 8007b40:	f104 010c 	add.w	r1, r4, #12
 8007b44:	3202      	adds	r2, #2
 8007b46:	0092      	lsls	r2, r2, #2
 8007b48:	300c      	adds	r0, #12
 8007b4a:	f7ff ff59 	bl	8007a00 <memcpy>
 8007b4e:	4621      	mov	r1, r4
 8007b50:	4638      	mov	r0, r7
 8007b52:	f7ff ffa3 	bl	8007a9c <_Bfree>
 8007b56:	462c      	mov	r4, r5
 8007b58:	eb04 0386 	add.w	r3, r4, r6, lsl #2
 8007b5c:	3601      	adds	r6, #1
 8007b5e:	f8c3 8014 	str.w	r8, [r3, #20]
 8007b62:	6126      	str	r6, [r4, #16]
 8007b64:	4620      	mov	r0, r4
 8007b66:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007b6a:	bf00      	nop
 8007b6c:	08009614 	.word	0x08009614
 8007b70:	080096a4 	.word	0x080096a4

08007b74 <__s2b>:
 8007b74:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007b78:	4615      	mov	r5, r2
 8007b7a:	2209      	movs	r2, #9
 8007b7c:	461f      	mov	r7, r3
 8007b7e:	3308      	adds	r3, #8
 8007b80:	460c      	mov	r4, r1
 8007b82:	fb93 f3f2 	sdiv	r3, r3, r2
 8007b86:	4606      	mov	r6, r0
 8007b88:	2201      	movs	r2, #1
 8007b8a:	2100      	movs	r1, #0
 8007b8c:	429a      	cmp	r2, r3
 8007b8e:	db09      	blt.n	8007ba4 <__s2b+0x30>
 8007b90:	4630      	mov	r0, r6
 8007b92:	f7ff ff43 	bl	8007a1c <_Balloc>
 8007b96:	b940      	cbnz	r0, 8007baa <__s2b+0x36>
 8007b98:	4602      	mov	r2, r0
 8007b9a:	21ce      	movs	r1, #206	; 0xce
 8007b9c:	4b18      	ldr	r3, [pc, #96]	; (8007c00 <__s2b+0x8c>)
 8007b9e:	4819      	ldr	r0, [pc, #100]	; (8007c04 <__s2b+0x90>)
 8007ba0:	f000 fe3a 	bl	8008818 <__assert_func>
 8007ba4:	0052      	lsls	r2, r2, #1
 8007ba6:	3101      	adds	r1, #1
 8007ba8:	e7f0      	b.n	8007b8c <__s2b+0x18>
 8007baa:	9b08      	ldr	r3, [sp, #32]
 8007bac:	2d09      	cmp	r5, #9
 8007bae:	6143      	str	r3, [r0, #20]
 8007bb0:	f04f 0301 	mov.w	r3, #1
 8007bb4:	6103      	str	r3, [r0, #16]
 8007bb6:	dd16      	ble.n	8007be6 <__s2b+0x72>
 8007bb8:	f104 0909 	add.w	r9, r4, #9
 8007bbc:	46c8      	mov	r8, r9
 8007bbe:	442c      	add	r4, r5
 8007bc0:	f818 3b01 	ldrb.w	r3, [r8], #1
 8007bc4:	4601      	mov	r1, r0
 8007bc6:	220a      	movs	r2, #10
 8007bc8:	4630      	mov	r0, r6
 8007bca:	3b30      	subs	r3, #48	; 0x30
 8007bcc:	f7ff ff88 	bl	8007ae0 <__multadd>
 8007bd0:	45a0      	cmp	r8, r4
 8007bd2:	d1f5      	bne.n	8007bc0 <__s2b+0x4c>
 8007bd4:	f1a5 0408 	sub.w	r4, r5, #8
 8007bd8:	444c      	add	r4, r9
 8007bda:	1b2d      	subs	r5, r5, r4
 8007bdc:	1963      	adds	r3, r4, r5
 8007bde:	42bb      	cmp	r3, r7
 8007be0:	db04      	blt.n	8007bec <__s2b+0x78>
 8007be2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007be6:	2509      	movs	r5, #9
 8007be8:	340a      	adds	r4, #10
 8007bea:	e7f6      	b.n	8007bda <__s2b+0x66>
 8007bec:	f814 3b01 	ldrb.w	r3, [r4], #1
 8007bf0:	4601      	mov	r1, r0
 8007bf2:	220a      	movs	r2, #10
 8007bf4:	4630      	mov	r0, r6
 8007bf6:	3b30      	subs	r3, #48	; 0x30
 8007bf8:	f7ff ff72 	bl	8007ae0 <__multadd>
 8007bfc:	e7ee      	b.n	8007bdc <__s2b+0x68>
 8007bfe:	bf00      	nop
 8007c00:	08009614 	.word	0x08009614
 8007c04:	080096a4 	.word	0x080096a4

08007c08 <__hi0bits>:
 8007c08:	0c02      	lsrs	r2, r0, #16
 8007c0a:	0412      	lsls	r2, r2, #16
 8007c0c:	4603      	mov	r3, r0
 8007c0e:	b9ca      	cbnz	r2, 8007c44 <__hi0bits+0x3c>
 8007c10:	0403      	lsls	r3, r0, #16
 8007c12:	2010      	movs	r0, #16
 8007c14:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
 8007c18:	bf04      	itt	eq
 8007c1a:	021b      	lsleq	r3, r3, #8
 8007c1c:	3008      	addeq	r0, #8
 8007c1e:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
 8007c22:	bf04      	itt	eq
 8007c24:	011b      	lsleq	r3, r3, #4
 8007c26:	3004      	addeq	r0, #4
 8007c28:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
 8007c2c:	bf04      	itt	eq
 8007c2e:	009b      	lsleq	r3, r3, #2
 8007c30:	3002      	addeq	r0, #2
 8007c32:	2b00      	cmp	r3, #0
 8007c34:	db05      	blt.n	8007c42 <__hi0bits+0x3a>
 8007c36:	f013 4f80 	tst.w	r3, #1073741824	; 0x40000000
 8007c3a:	f100 0001 	add.w	r0, r0, #1
 8007c3e:	bf08      	it	eq
 8007c40:	2020      	moveq	r0, #32
 8007c42:	4770      	bx	lr
 8007c44:	2000      	movs	r0, #0
 8007c46:	e7e5      	b.n	8007c14 <__hi0bits+0xc>

08007c48 <__lo0bits>:
 8007c48:	6803      	ldr	r3, [r0, #0]
 8007c4a:	4602      	mov	r2, r0
 8007c4c:	f013 0007 	ands.w	r0, r3, #7
 8007c50:	d00b      	beq.n	8007c6a <__lo0bits+0x22>
 8007c52:	07d9      	lsls	r1, r3, #31
 8007c54:	d422      	bmi.n	8007c9c <__lo0bits+0x54>
 8007c56:	0798      	lsls	r0, r3, #30
 8007c58:	bf49      	itett	mi
 8007c5a:	085b      	lsrmi	r3, r3, #1
 8007c5c:	089b      	lsrpl	r3, r3, #2
 8007c5e:	2001      	movmi	r0, #1
 8007c60:	6013      	strmi	r3, [r2, #0]
 8007c62:	bf5c      	itt	pl
 8007c64:	2002      	movpl	r0, #2
 8007c66:	6013      	strpl	r3, [r2, #0]
 8007c68:	4770      	bx	lr
 8007c6a:	b299      	uxth	r1, r3
 8007c6c:	b909      	cbnz	r1, 8007c72 <__lo0bits+0x2a>
 8007c6e:	2010      	movs	r0, #16
 8007c70:	0c1b      	lsrs	r3, r3, #16
 8007c72:	f013 0fff 	tst.w	r3, #255	; 0xff
 8007c76:	bf04      	itt	eq
 8007c78:	0a1b      	lsreq	r3, r3, #8
 8007c7a:	3008      	addeq	r0, #8
 8007c7c:	0719      	lsls	r1, r3, #28
 8007c7e:	bf04      	itt	eq
 8007c80:	091b      	lsreq	r3, r3, #4
 8007c82:	3004      	addeq	r0, #4
 8007c84:	0799      	lsls	r1, r3, #30
 8007c86:	bf04      	itt	eq
 8007c88:	089b      	lsreq	r3, r3, #2
 8007c8a:	3002      	addeq	r0, #2
 8007c8c:	07d9      	lsls	r1, r3, #31
 8007c8e:	d403      	bmi.n	8007c98 <__lo0bits+0x50>
 8007c90:	085b      	lsrs	r3, r3, #1
 8007c92:	f100 0001 	add.w	r0, r0, #1
 8007c96:	d003      	beq.n	8007ca0 <__lo0bits+0x58>
 8007c98:	6013      	str	r3, [r2, #0]
 8007c9a:	4770      	bx	lr
 8007c9c:	2000      	movs	r0, #0
 8007c9e:	4770      	bx	lr
 8007ca0:	2020      	movs	r0, #32
 8007ca2:	4770      	bx	lr

08007ca4 <__i2b>:
 8007ca4:	b510      	push	{r4, lr}
 8007ca6:	460c      	mov	r4, r1
 8007ca8:	2101      	movs	r1, #1
 8007caa:	f7ff feb7 	bl	8007a1c <_Balloc>
 8007cae:	4602      	mov	r2, r0
 8007cb0:	b928      	cbnz	r0, 8007cbe <__i2b+0x1a>
 8007cb2:	f44f 71a0 	mov.w	r1, #320	; 0x140
 8007cb6:	4b04      	ldr	r3, [pc, #16]	; (8007cc8 <__i2b+0x24>)
 8007cb8:	4804      	ldr	r0, [pc, #16]	; (8007ccc <__i2b+0x28>)
 8007cba:	f000 fdad 	bl	8008818 <__assert_func>
 8007cbe:	2301      	movs	r3, #1
 8007cc0:	6144      	str	r4, [r0, #20]
 8007cc2:	6103      	str	r3, [r0, #16]
 8007cc4:	bd10      	pop	{r4, pc}
 8007cc6:	bf00      	nop
 8007cc8:	08009614 	.word	0x08009614
 8007ccc:	080096a4 	.word	0x080096a4

08007cd0 <__multiply>:
 8007cd0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007cd4:	4614      	mov	r4, r2
 8007cd6:	690a      	ldr	r2, [r1, #16]
 8007cd8:	6923      	ldr	r3, [r4, #16]
 8007cda:	460d      	mov	r5, r1
 8007cdc:	429a      	cmp	r2, r3
 8007cde:	bfbe      	ittt	lt
 8007ce0:	460b      	movlt	r3, r1
 8007ce2:	4625      	movlt	r5, r4
 8007ce4:	461c      	movlt	r4, r3
 8007ce6:	f8d5 a010 	ldr.w	sl, [r5, #16]
 8007cea:	f8d4 9010 	ldr.w	r9, [r4, #16]
 8007cee:	68ab      	ldr	r3, [r5, #8]
 8007cf0:	6869      	ldr	r1, [r5, #4]
 8007cf2:	eb0a 0709 	add.w	r7, sl, r9
 8007cf6:	42bb      	cmp	r3, r7
 8007cf8:	b085      	sub	sp, #20
 8007cfa:	bfb8      	it	lt
 8007cfc:	3101      	addlt	r1, #1
 8007cfe:	f7ff fe8d 	bl	8007a1c <_Balloc>
 8007d02:	b930      	cbnz	r0, 8007d12 <__multiply+0x42>
 8007d04:	4602      	mov	r2, r0
 8007d06:	f240 115d 	movw	r1, #349	; 0x15d
 8007d0a:	4b41      	ldr	r3, [pc, #260]	; (8007e10 <__multiply+0x140>)
 8007d0c:	4841      	ldr	r0, [pc, #260]	; (8007e14 <__multiply+0x144>)
 8007d0e:	f000 fd83 	bl	8008818 <__assert_func>
 8007d12:	f100 0614 	add.w	r6, r0, #20
 8007d16:	4633      	mov	r3, r6
 8007d18:	2200      	movs	r2, #0
 8007d1a:	eb06 0887 	add.w	r8, r6, r7, lsl #2
 8007d1e:	4543      	cmp	r3, r8
 8007d20:	d31e      	bcc.n	8007d60 <__multiply+0x90>
 8007d22:	f105 0c14 	add.w	ip, r5, #20
 8007d26:	f104 0314 	add.w	r3, r4, #20
 8007d2a:	eb0c 0c8a 	add.w	ip, ip, sl, lsl #2
 8007d2e:	eb03 0289 	add.w	r2, r3, r9, lsl #2
 8007d32:	9202      	str	r2, [sp, #8]
 8007d34:	ebac 0205 	sub.w	r2, ip, r5
 8007d38:	3a15      	subs	r2, #21
 8007d3a:	f022 0203 	bic.w	r2, r2, #3
 8007d3e:	3204      	adds	r2, #4
 8007d40:	f105 0115 	add.w	r1, r5, #21
 8007d44:	458c      	cmp	ip, r1
 8007d46:	bf38      	it	cc
 8007d48:	2204      	movcc	r2, #4
 8007d4a:	9201      	str	r2, [sp, #4]
 8007d4c:	9a02      	ldr	r2, [sp, #8]
 8007d4e:	9303      	str	r3, [sp, #12]
 8007d50:	429a      	cmp	r2, r3
 8007d52:	d808      	bhi.n	8007d66 <__multiply+0x96>
 8007d54:	2f00      	cmp	r7, #0
 8007d56:	dc55      	bgt.n	8007e04 <__multiply+0x134>
 8007d58:	6107      	str	r7, [r0, #16]
 8007d5a:	b005      	add	sp, #20
 8007d5c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007d60:	f843 2b04 	str.w	r2, [r3], #4
 8007d64:	e7db      	b.n	8007d1e <__multiply+0x4e>
 8007d66:	f8b3 a000 	ldrh.w	sl, [r3]
 8007d6a:	f1ba 0f00 	cmp.w	sl, #0
 8007d6e:	d020      	beq.n	8007db2 <__multiply+0xe2>
 8007d70:	46b1      	mov	r9, r6
 8007d72:	2200      	movs	r2, #0
 8007d74:	f105 0e14 	add.w	lr, r5, #20
 8007d78:	f85e 4b04 	ldr.w	r4, [lr], #4
 8007d7c:	f8d9 b000 	ldr.w	fp, [r9]
 8007d80:	b2a1      	uxth	r1, r4
 8007d82:	fa1f fb8b 	uxth.w	fp, fp
 8007d86:	fb0a b101 	mla	r1, sl, r1, fp
 8007d8a:	4411      	add	r1, r2
 8007d8c:	f8d9 2000 	ldr.w	r2, [r9]
 8007d90:	0c24      	lsrs	r4, r4, #16
 8007d92:	0c12      	lsrs	r2, r2, #16
 8007d94:	fb0a 2404 	mla	r4, sl, r4, r2
 8007d98:	eb04 4411 	add.w	r4, r4, r1, lsr #16
 8007d9c:	b289      	uxth	r1, r1
 8007d9e:	ea41 4104 	orr.w	r1, r1, r4, lsl #16
 8007da2:	45f4      	cmp	ip, lr
 8007da4:	ea4f 4214 	mov.w	r2, r4, lsr #16
 8007da8:	f849 1b04 	str.w	r1, [r9], #4
 8007dac:	d8e4      	bhi.n	8007d78 <__multiply+0xa8>
 8007dae:	9901      	ldr	r1, [sp, #4]
 8007db0:	5072      	str	r2, [r6, r1]
 8007db2:	9a03      	ldr	r2, [sp, #12]
 8007db4:	3304      	adds	r3, #4
 8007db6:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 8007dba:	f1b9 0f00 	cmp.w	r9, #0
 8007dbe:	d01f      	beq.n	8007e00 <__multiply+0x130>
 8007dc0:	46b6      	mov	lr, r6
 8007dc2:	f04f 0a00 	mov.w	sl, #0
 8007dc6:	6834      	ldr	r4, [r6, #0]
 8007dc8:	f105 0114 	add.w	r1, r5, #20
 8007dcc:	880a      	ldrh	r2, [r1, #0]
 8007dce:	f8be b002 	ldrh.w	fp, [lr, #2]
 8007dd2:	b2a4      	uxth	r4, r4
 8007dd4:	fb09 b202 	mla	r2, r9, r2, fp
 8007dd8:	4492      	add	sl, r2
 8007dda:	ea44 440a 	orr.w	r4, r4, sl, lsl #16
 8007dde:	f84e 4b04 	str.w	r4, [lr], #4
 8007de2:	f851 4b04 	ldr.w	r4, [r1], #4
 8007de6:	f8be 2000 	ldrh.w	r2, [lr]
 8007dea:	0c24      	lsrs	r4, r4, #16
 8007dec:	fb09 2404 	mla	r4, r9, r4, r2
 8007df0:	458c      	cmp	ip, r1
 8007df2:	eb04 441a 	add.w	r4, r4, sl, lsr #16
 8007df6:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 8007dfa:	d8e7      	bhi.n	8007dcc <__multiply+0xfc>
 8007dfc:	9a01      	ldr	r2, [sp, #4]
 8007dfe:	50b4      	str	r4, [r6, r2]
 8007e00:	3604      	adds	r6, #4
 8007e02:	e7a3      	b.n	8007d4c <__multiply+0x7c>
 8007e04:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8007e08:	2b00      	cmp	r3, #0
 8007e0a:	d1a5      	bne.n	8007d58 <__multiply+0x88>
 8007e0c:	3f01      	subs	r7, #1
 8007e0e:	e7a1      	b.n	8007d54 <__multiply+0x84>
 8007e10:	08009614 	.word	0x08009614
 8007e14:	080096a4 	.word	0x080096a4

08007e18 <__pow5mult>:
 8007e18:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007e1c:	4615      	mov	r5, r2
 8007e1e:	f012 0203 	ands.w	r2, r2, #3
 8007e22:	4606      	mov	r6, r0
 8007e24:	460f      	mov	r7, r1
 8007e26:	d007      	beq.n	8007e38 <__pow5mult+0x20>
 8007e28:	4c25      	ldr	r4, [pc, #148]	; (8007ec0 <__pow5mult+0xa8>)
 8007e2a:	3a01      	subs	r2, #1
 8007e2c:	2300      	movs	r3, #0
 8007e2e:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8007e32:	f7ff fe55 	bl	8007ae0 <__multadd>
 8007e36:	4607      	mov	r7, r0
 8007e38:	10ad      	asrs	r5, r5, #2
 8007e3a:	d03d      	beq.n	8007eb8 <__pow5mult+0xa0>
 8007e3c:	6a74      	ldr	r4, [r6, #36]	; 0x24
 8007e3e:	b97c      	cbnz	r4, 8007e60 <__pow5mult+0x48>
 8007e40:	2010      	movs	r0, #16
 8007e42:	f7ff fdb5 	bl	80079b0 <malloc>
 8007e46:	4602      	mov	r2, r0
 8007e48:	6270      	str	r0, [r6, #36]	; 0x24
 8007e4a:	b928      	cbnz	r0, 8007e58 <__pow5mult+0x40>
 8007e4c:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 8007e50:	4b1c      	ldr	r3, [pc, #112]	; (8007ec4 <__pow5mult+0xac>)
 8007e52:	481d      	ldr	r0, [pc, #116]	; (8007ec8 <__pow5mult+0xb0>)
 8007e54:	f000 fce0 	bl	8008818 <__assert_func>
 8007e58:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8007e5c:	6004      	str	r4, [r0, #0]
 8007e5e:	60c4      	str	r4, [r0, #12]
 8007e60:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 8007e64:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8007e68:	b94c      	cbnz	r4, 8007e7e <__pow5mult+0x66>
 8007e6a:	f240 2171 	movw	r1, #625	; 0x271
 8007e6e:	4630      	mov	r0, r6
 8007e70:	f7ff ff18 	bl	8007ca4 <__i2b>
 8007e74:	2300      	movs	r3, #0
 8007e76:	4604      	mov	r4, r0
 8007e78:	f8c8 0008 	str.w	r0, [r8, #8]
 8007e7c:	6003      	str	r3, [r0, #0]
 8007e7e:	f04f 0900 	mov.w	r9, #0
 8007e82:	07eb      	lsls	r3, r5, #31
 8007e84:	d50a      	bpl.n	8007e9c <__pow5mult+0x84>
 8007e86:	4639      	mov	r1, r7
 8007e88:	4622      	mov	r2, r4
 8007e8a:	4630      	mov	r0, r6
 8007e8c:	f7ff ff20 	bl	8007cd0 <__multiply>
 8007e90:	4680      	mov	r8, r0
 8007e92:	4639      	mov	r1, r7
 8007e94:	4630      	mov	r0, r6
 8007e96:	f7ff fe01 	bl	8007a9c <_Bfree>
 8007e9a:	4647      	mov	r7, r8
 8007e9c:	106d      	asrs	r5, r5, #1
 8007e9e:	d00b      	beq.n	8007eb8 <__pow5mult+0xa0>
 8007ea0:	6820      	ldr	r0, [r4, #0]
 8007ea2:	b938      	cbnz	r0, 8007eb4 <__pow5mult+0x9c>
 8007ea4:	4622      	mov	r2, r4
 8007ea6:	4621      	mov	r1, r4
 8007ea8:	4630      	mov	r0, r6
 8007eaa:	f7ff ff11 	bl	8007cd0 <__multiply>
 8007eae:	6020      	str	r0, [r4, #0]
 8007eb0:	f8c0 9000 	str.w	r9, [r0]
 8007eb4:	4604      	mov	r4, r0
 8007eb6:	e7e4      	b.n	8007e82 <__pow5mult+0x6a>
 8007eb8:	4638      	mov	r0, r7
 8007eba:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007ebe:	bf00      	nop
 8007ec0:	080097f8 	.word	0x080097f8
 8007ec4:	0800959e 	.word	0x0800959e
 8007ec8:	080096a4 	.word	0x080096a4

08007ecc <__lshift>:
 8007ecc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007ed0:	460c      	mov	r4, r1
 8007ed2:	4607      	mov	r7, r0
 8007ed4:	4691      	mov	r9, r2
 8007ed6:	6923      	ldr	r3, [r4, #16]
 8007ed8:	6849      	ldr	r1, [r1, #4]
 8007eda:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8007ede:	68a3      	ldr	r3, [r4, #8]
 8007ee0:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8007ee4:	f108 0601 	add.w	r6, r8, #1
 8007ee8:	42b3      	cmp	r3, r6
 8007eea:	db0b      	blt.n	8007f04 <__lshift+0x38>
 8007eec:	4638      	mov	r0, r7
 8007eee:	f7ff fd95 	bl	8007a1c <_Balloc>
 8007ef2:	4605      	mov	r5, r0
 8007ef4:	b948      	cbnz	r0, 8007f0a <__lshift+0x3e>
 8007ef6:	4602      	mov	r2, r0
 8007ef8:	f240 11d9 	movw	r1, #473	; 0x1d9
 8007efc:	4b27      	ldr	r3, [pc, #156]	; (8007f9c <__lshift+0xd0>)
 8007efe:	4828      	ldr	r0, [pc, #160]	; (8007fa0 <__lshift+0xd4>)
 8007f00:	f000 fc8a 	bl	8008818 <__assert_func>
 8007f04:	3101      	adds	r1, #1
 8007f06:	005b      	lsls	r3, r3, #1
 8007f08:	e7ee      	b.n	8007ee8 <__lshift+0x1c>
 8007f0a:	2300      	movs	r3, #0
 8007f0c:	f100 0114 	add.w	r1, r0, #20
 8007f10:	f100 0210 	add.w	r2, r0, #16
 8007f14:	4618      	mov	r0, r3
 8007f16:	4553      	cmp	r3, sl
 8007f18:	db33      	blt.n	8007f82 <__lshift+0xb6>
 8007f1a:	6920      	ldr	r0, [r4, #16]
 8007f1c:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8007f20:	f104 0314 	add.w	r3, r4, #20
 8007f24:	f019 091f 	ands.w	r9, r9, #31
 8007f28:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8007f2c:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8007f30:	d02b      	beq.n	8007f8a <__lshift+0xbe>
 8007f32:	468a      	mov	sl, r1
 8007f34:	2200      	movs	r2, #0
 8007f36:	f1c9 0e20 	rsb	lr, r9, #32
 8007f3a:	6818      	ldr	r0, [r3, #0]
 8007f3c:	fa00 f009 	lsl.w	r0, r0, r9
 8007f40:	4302      	orrs	r2, r0
 8007f42:	f84a 2b04 	str.w	r2, [sl], #4
 8007f46:	f853 2b04 	ldr.w	r2, [r3], #4
 8007f4a:	459c      	cmp	ip, r3
 8007f4c:	fa22 f20e 	lsr.w	r2, r2, lr
 8007f50:	d8f3      	bhi.n	8007f3a <__lshift+0x6e>
 8007f52:	ebac 0304 	sub.w	r3, ip, r4
 8007f56:	3b15      	subs	r3, #21
 8007f58:	f023 0303 	bic.w	r3, r3, #3
 8007f5c:	3304      	adds	r3, #4
 8007f5e:	f104 0015 	add.w	r0, r4, #21
 8007f62:	4584      	cmp	ip, r0
 8007f64:	bf38      	it	cc
 8007f66:	2304      	movcc	r3, #4
 8007f68:	50ca      	str	r2, [r1, r3]
 8007f6a:	b10a      	cbz	r2, 8007f70 <__lshift+0xa4>
 8007f6c:	f108 0602 	add.w	r6, r8, #2
 8007f70:	3e01      	subs	r6, #1
 8007f72:	4638      	mov	r0, r7
 8007f74:	4621      	mov	r1, r4
 8007f76:	612e      	str	r6, [r5, #16]
 8007f78:	f7ff fd90 	bl	8007a9c <_Bfree>
 8007f7c:	4628      	mov	r0, r5
 8007f7e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007f82:	f842 0f04 	str.w	r0, [r2, #4]!
 8007f86:	3301      	adds	r3, #1
 8007f88:	e7c5      	b.n	8007f16 <__lshift+0x4a>
 8007f8a:	3904      	subs	r1, #4
 8007f8c:	f853 2b04 	ldr.w	r2, [r3], #4
 8007f90:	459c      	cmp	ip, r3
 8007f92:	f841 2f04 	str.w	r2, [r1, #4]!
 8007f96:	d8f9      	bhi.n	8007f8c <__lshift+0xc0>
 8007f98:	e7ea      	b.n	8007f70 <__lshift+0xa4>
 8007f9a:	bf00      	nop
 8007f9c:	08009614 	.word	0x08009614
 8007fa0:	080096a4 	.word	0x080096a4

08007fa4 <__mcmp>:
 8007fa4:	4603      	mov	r3, r0
 8007fa6:	690a      	ldr	r2, [r1, #16]
 8007fa8:	6900      	ldr	r0, [r0, #16]
 8007faa:	b530      	push	{r4, r5, lr}
 8007fac:	1a80      	subs	r0, r0, r2
 8007fae:	d10d      	bne.n	8007fcc <__mcmp+0x28>
 8007fb0:	3314      	adds	r3, #20
 8007fb2:	3114      	adds	r1, #20
 8007fb4:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 8007fb8:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 8007fbc:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 8007fc0:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 8007fc4:	4295      	cmp	r5, r2
 8007fc6:	d002      	beq.n	8007fce <__mcmp+0x2a>
 8007fc8:	d304      	bcc.n	8007fd4 <__mcmp+0x30>
 8007fca:	2001      	movs	r0, #1
 8007fcc:	bd30      	pop	{r4, r5, pc}
 8007fce:	42a3      	cmp	r3, r4
 8007fd0:	d3f4      	bcc.n	8007fbc <__mcmp+0x18>
 8007fd2:	e7fb      	b.n	8007fcc <__mcmp+0x28>
 8007fd4:	f04f 30ff 	mov.w	r0, #4294967295
 8007fd8:	e7f8      	b.n	8007fcc <__mcmp+0x28>
	...

08007fdc <__mdiff>:
 8007fdc:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007fe0:	460c      	mov	r4, r1
 8007fe2:	4606      	mov	r6, r0
 8007fe4:	4611      	mov	r1, r2
 8007fe6:	4620      	mov	r0, r4
 8007fe8:	4692      	mov	sl, r2
 8007fea:	f7ff ffdb 	bl	8007fa4 <__mcmp>
 8007fee:	1e05      	subs	r5, r0, #0
 8007ff0:	d111      	bne.n	8008016 <__mdiff+0x3a>
 8007ff2:	4629      	mov	r1, r5
 8007ff4:	4630      	mov	r0, r6
 8007ff6:	f7ff fd11 	bl	8007a1c <_Balloc>
 8007ffa:	4602      	mov	r2, r0
 8007ffc:	b928      	cbnz	r0, 800800a <__mdiff+0x2e>
 8007ffe:	f240 2132 	movw	r1, #562	; 0x232
 8008002:	4b3c      	ldr	r3, [pc, #240]	; (80080f4 <__mdiff+0x118>)
 8008004:	483c      	ldr	r0, [pc, #240]	; (80080f8 <__mdiff+0x11c>)
 8008006:	f000 fc07 	bl	8008818 <__assert_func>
 800800a:	2301      	movs	r3, #1
 800800c:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8008010:	4610      	mov	r0, r2
 8008012:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008016:	bfa4      	itt	ge
 8008018:	4653      	movge	r3, sl
 800801a:	46a2      	movge	sl, r4
 800801c:	4630      	mov	r0, r6
 800801e:	f8da 1004 	ldr.w	r1, [sl, #4]
 8008022:	bfa6      	itte	ge
 8008024:	461c      	movge	r4, r3
 8008026:	2500      	movge	r5, #0
 8008028:	2501      	movlt	r5, #1
 800802a:	f7ff fcf7 	bl	8007a1c <_Balloc>
 800802e:	4602      	mov	r2, r0
 8008030:	b918      	cbnz	r0, 800803a <__mdiff+0x5e>
 8008032:	f44f 7110 	mov.w	r1, #576	; 0x240
 8008036:	4b2f      	ldr	r3, [pc, #188]	; (80080f4 <__mdiff+0x118>)
 8008038:	e7e4      	b.n	8008004 <__mdiff+0x28>
 800803a:	f100 0814 	add.w	r8, r0, #20
 800803e:	f8da 7010 	ldr.w	r7, [sl, #16]
 8008042:	60c5      	str	r5, [r0, #12]
 8008044:	f04f 0c00 	mov.w	ip, #0
 8008048:	f10a 0514 	add.w	r5, sl, #20
 800804c:	f10a 0010 	add.w	r0, sl, #16
 8008050:	46c2      	mov	sl, r8
 8008052:	6926      	ldr	r6, [r4, #16]
 8008054:	f104 0914 	add.w	r9, r4, #20
 8008058:	eb05 0e87 	add.w	lr, r5, r7, lsl #2
 800805c:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 8008060:	f850 bf04 	ldr.w	fp, [r0, #4]!
 8008064:	f859 3b04 	ldr.w	r3, [r9], #4
 8008068:	fa1f f18b 	uxth.w	r1, fp
 800806c:	4461      	add	r1, ip
 800806e:	fa1f fc83 	uxth.w	ip, r3
 8008072:	0c1b      	lsrs	r3, r3, #16
 8008074:	eba1 010c 	sub.w	r1, r1, ip
 8008078:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 800807c:	eb03 4321 	add.w	r3, r3, r1, asr #16
 8008080:	b289      	uxth	r1, r1
 8008082:	ea4f 4c23 	mov.w	ip, r3, asr #16
 8008086:	454e      	cmp	r6, r9
 8008088:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 800808c:	f84a 3b04 	str.w	r3, [sl], #4
 8008090:	d8e6      	bhi.n	8008060 <__mdiff+0x84>
 8008092:	1b33      	subs	r3, r6, r4
 8008094:	3b15      	subs	r3, #21
 8008096:	f023 0303 	bic.w	r3, r3, #3
 800809a:	3415      	adds	r4, #21
 800809c:	3304      	adds	r3, #4
 800809e:	42a6      	cmp	r6, r4
 80080a0:	bf38      	it	cc
 80080a2:	2304      	movcc	r3, #4
 80080a4:	441d      	add	r5, r3
 80080a6:	4443      	add	r3, r8
 80080a8:	461e      	mov	r6, r3
 80080aa:	462c      	mov	r4, r5
 80080ac:	4574      	cmp	r4, lr
 80080ae:	d30e      	bcc.n	80080ce <__mdiff+0xf2>
 80080b0:	f10e 0103 	add.w	r1, lr, #3
 80080b4:	1b49      	subs	r1, r1, r5
 80080b6:	f021 0103 	bic.w	r1, r1, #3
 80080ba:	3d03      	subs	r5, #3
 80080bc:	45ae      	cmp	lr, r5
 80080be:	bf38      	it	cc
 80080c0:	2100      	movcc	r1, #0
 80080c2:	4419      	add	r1, r3
 80080c4:	f851 3d04 	ldr.w	r3, [r1, #-4]!
 80080c8:	b18b      	cbz	r3, 80080ee <__mdiff+0x112>
 80080ca:	6117      	str	r7, [r2, #16]
 80080cc:	e7a0      	b.n	8008010 <__mdiff+0x34>
 80080ce:	f854 8b04 	ldr.w	r8, [r4], #4
 80080d2:	fa1f f188 	uxth.w	r1, r8
 80080d6:	4461      	add	r1, ip
 80080d8:	1408      	asrs	r0, r1, #16
 80080da:	eb00 4018 	add.w	r0, r0, r8, lsr #16
 80080de:	b289      	uxth	r1, r1
 80080e0:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 80080e4:	ea4f 4c20 	mov.w	ip, r0, asr #16
 80080e8:	f846 1b04 	str.w	r1, [r6], #4
 80080ec:	e7de      	b.n	80080ac <__mdiff+0xd0>
 80080ee:	3f01      	subs	r7, #1
 80080f0:	e7e8      	b.n	80080c4 <__mdiff+0xe8>
 80080f2:	bf00      	nop
 80080f4:	08009614 	.word	0x08009614
 80080f8:	080096a4 	.word	0x080096a4

080080fc <__ulp>:
 80080fc:	4b11      	ldr	r3, [pc, #68]	; (8008144 <__ulp+0x48>)
 80080fe:	400b      	ands	r3, r1
 8008100:	f1a3 7350 	sub.w	r3, r3, #54525952	; 0x3400000
 8008104:	2b00      	cmp	r3, #0
 8008106:	dd02      	ble.n	800810e <__ulp+0x12>
 8008108:	2000      	movs	r0, #0
 800810a:	4619      	mov	r1, r3
 800810c:	4770      	bx	lr
 800810e:	425b      	negs	r3, r3
 8008110:	f1b3 7fa0 	cmp.w	r3, #20971520	; 0x1400000
 8008114:	f04f 0000 	mov.w	r0, #0
 8008118:	f04f 0100 	mov.w	r1, #0
 800811c:	ea4f 5223 	mov.w	r2, r3, asr #20
 8008120:	da04      	bge.n	800812c <__ulp+0x30>
 8008122:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 8008126:	fa43 f102 	asr.w	r1, r3, r2
 800812a:	4770      	bx	lr
 800812c:	f1a2 0314 	sub.w	r3, r2, #20
 8008130:	2b1e      	cmp	r3, #30
 8008132:	bfd6      	itet	le
 8008134:	f04f 4200 	movle.w	r2, #2147483648	; 0x80000000
 8008138:	2301      	movgt	r3, #1
 800813a:	fa22 f303 	lsrle.w	r3, r2, r3
 800813e:	4618      	mov	r0, r3
 8008140:	4770      	bx	lr
 8008142:	bf00      	nop
 8008144:	7ff00000 	.word	0x7ff00000

08008148 <__b2d>:
 8008148:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800814c:	6907      	ldr	r7, [r0, #16]
 800814e:	f100 0914 	add.w	r9, r0, #20
 8008152:	eb09 0787 	add.w	r7, r9, r7, lsl #2
 8008156:	f857 6c04 	ldr.w	r6, [r7, #-4]
 800815a:	f1a7 0804 	sub.w	r8, r7, #4
 800815e:	4630      	mov	r0, r6
 8008160:	f7ff fd52 	bl	8007c08 <__hi0bits>
 8008164:	f1c0 0320 	rsb	r3, r0, #32
 8008168:	280a      	cmp	r0, #10
 800816a:	600b      	str	r3, [r1, #0]
 800816c:	491f      	ldr	r1, [pc, #124]	; (80081ec <__b2d+0xa4>)
 800816e:	dc17      	bgt.n	80081a0 <__b2d+0x58>
 8008170:	45c1      	cmp	r9, r8
 8008172:	bf28      	it	cs
 8008174:	2200      	movcs	r2, #0
 8008176:	f1c0 0c0b 	rsb	ip, r0, #11
 800817a:	fa26 f30c 	lsr.w	r3, r6, ip
 800817e:	bf38      	it	cc
 8008180:	f857 2c08 	ldrcc.w	r2, [r7, #-8]
 8008184:	ea43 0501 	orr.w	r5, r3, r1
 8008188:	f100 0315 	add.w	r3, r0, #21
 800818c:	fa06 f303 	lsl.w	r3, r6, r3
 8008190:	fa22 f20c 	lsr.w	r2, r2, ip
 8008194:	ea43 0402 	orr.w	r4, r3, r2
 8008198:	4620      	mov	r0, r4
 800819a:	4629      	mov	r1, r5
 800819c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80081a0:	45c1      	cmp	r9, r8
 80081a2:	bf2e      	itee	cs
 80081a4:	2200      	movcs	r2, #0
 80081a6:	f857 2c08 	ldrcc.w	r2, [r7, #-8]
 80081aa:	f1a7 0808 	subcc.w	r8, r7, #8
 80081ae:	f1b0 030b 	subs.w	r3, r0, #11
 80081b2:	d016      	beq.n	80081e2 <__b2d+0x9a>
 80081b4:	f1c3 0720 	rsb	r7, r3, #32
 80081b8:	fa22 f107 	lsr.w	r1, r2, r7
 80081bc:	45c8      	cmp	r8, r9
 80081be:	fa06 f603 	lsl.w	r6, r6, r3
 80081c2:	ea46 0601 	orr.w	r6, r6, r1
 80081c6:	bf94      	ite	ls
 80081c8:	2100      	movls	r1, #0
 80081ca:	f858 1c04 	ldrhi.w	r1, [r8, #-4]
 80081ce:	f046 557f 	orr.w	r5, r6, #1069547520	; 0x3fc00000
 80081d2:	fa02 f003 	lsl.w	r0, r2, r3
 80081d6:	40f9      	lsrs	r1, r7
 80081d8:	f445 1540 	orr.w	r5, r5, #3145728	; 0x300000
 80081dc:	ea40 0401 	orr.w	r4, r0, r1
 80081e0:	e7da      	b.n	8008198 <__b2d+0x50>
 80081e2:	4614      	mov	r4, r2
 80081e4:	ea46 0501 	orr.w	r5, r6, r1
 80081e8:	e7d6      	b.n	8008198 <__b2d+0x50>
 80081ea:	bf00      	nop
 80081ec:	3ff00000 	.word	0x3ff00000

080081f0 <__d2b>:
 80081f0:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 80081f4:	2101      	movs	r1, #1
 80081f6:	e9dd 7608 	ldrd	r7, r6, [sp, #32]
 80081fa:	4690      	mov	r8, r2
 80081fc:	461d      	mov	r5, r3
 80081fe:	f7ff fc0d 	bl	8007a1c <_Balloc>
 8008202:	4604      	mov	r4, r0
 8008204:	b930      	cbnz	r0, 8008214 <__d2b+0x24>
 8008206:	4602      	mov	r2, r0
 8008208:	f240 310a 	movw	r1, #778	; 0x30a
 800820c:	4b24      	ldr	r3, [pc, #144]	; (80082a0 <__d2b+0xb0>)
 800820e:	4825      	ldr	r0, [pc, #148]	; (80082a4 <__d2b+0xb4>)
 8008210:	f000 fb02 	bl	8008818 <__assert_func>
 8008214:	f3c5 0313 	ubfx	r3, r5, #0, #20
 8008218:	f3c5 550a 	ubfx	r5, r5, #20, #11
 800821c:	bb2d      	cbnz	r5, 800826a <__d2b+0x7a>
 800821e:	9301      	str	r3, [sp, #4]
 8008220:	f1b8 0300 	subs.w	r3, r8, #0
 8008224:	d026      	beq.n	8008274 <__d2b+0x84>
 8008226:	4668      	mov	r0, sp
 8008228:	9300      	str	r3, [sp, #0]
 800822a:	f7ff fd0d 	bl	8007c48 <__lo0bits>
 800822e:	9900      	ldr	r1, [sp, #0]
 8008230:	b1f0      	cbz	r0, 8008270 <__d2b+0x80>
 8008232:	9a01      	ldr	r2, [sp, #4]
 8008234:	f1c0 0320 	rsb	r3, r0, #32
 8008238:	fa02 f303 	lsl.w	r3, r2, r3
 800823c:	430b      	orrs	r3, r1
 800823e:	40c2      	lsrs	r2, r0
 8008240:	6163      	str	r3, [r4, #20]
 8008242:	9201      	str	r2, [sp, #4]
 8008244:	9b01      	ldr	r3, [sp, #4]
 8008246:	2b00      	cmp	r3, #0
 8008248:	bf14      	ite	ne
 800824a:	2102      	movne	r1, #2
 800824c:	2101      	moveq	r1, #1
 800824e:	61a3      	str	r3, [r4, #24]
 8008250:	6121      	str	r1, [r4, #16]
 8008252:	b1c5      	cbz	r5, 8008286 <__d2b+0x96>
 8008254:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 8008258:	4405      	add	r5, r0
 800825a:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 800825e:	603d      	str	r5, [r7, #0]
 8008260:	6030      	str	r0, [r6, #0]
 8008262:	4620      	mov	r0, r4
 8008264:	b002      	add	sp, #8
 8008266:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800826a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800826e:	e7d6      	b.n	800821e <__d2b+0x2e>
 8008270:	6161      	str	r1, [r4, #20]
 8008272:	e7e7      	b.n	8008244 <__d2b+0x54>
 8008274:	a801      	add	r0, sp, #4
 8008276:	f7ff fce7 	bl	8007c48 <__lo0bits>
 800827a:	2101      	movs	r1, #1
 800827c:	9b01      	ldr	r3, [sp, #4]
 800827e:	6121      	str	r1, [r4, #16]
 8008280:	6163      	str	r3, [r4, #20]
 8008282:	3020      	adds	r0, #32
 8008284:	e7e5      	b.n	8008252 <__d2b+0x62>
 8008286:	eb04 0381 	add.w	r3, r4, r1, lsl #2
 800828a:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 800828e:	6038      	str	r0, [r7, #0]
 8008290:	6918      	ldr	r0, [r3, #16]
 8008292:	f7ff fcb9 	bl	8007c08 <__hi0bits>
 8008296:	ebc0 1141 	rsb	r1, r0, r1, lsl #5
 800829a:	6031      	str	r1, [r6, #0]
 800829c:	e7e1      	b.n	8008262 <__d2b+0x72>
 800829e:	bf00      	nop
 80082a0:	08009614 	.word	0x08009614
 80082a4:	080096a4 	.word	0x080096a4

080082a8 <__ratio>:
 80082a8:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80082ac:	4688      	mov	r8, r1
 80082ae:	4669      	mov	r1, sp
 80082b0:	4681      	mov	r9, r0
 80082b2:	f7ff ff49 	bl	8008148 <__b2d>
 80082b6:	460f      	mov	r7, r1
 80082b8:	4604      	mov	r4, r0
 80082ba:	460d      	mov	r5, r1
 80082bc:	4640      	mov	r0, r8
 80082be:	a901      	add	r1, sp, #4
 80082c0:	f7ff ff42 	bl	8008148 <__b2d>
 80082c4:	f8d9 3010 	ldr.w	r3, [r9, #16]
 80082c8:	f8d8 2010 	ldr.w	r2, [r8, #16]
 80082cc:	468b      	mov	fp, r1
 80082ce:	eba3 0c02 	sub.w	ip, r3, r2
 80082d2:	e9dd 3200 	ldrd	r3, r2, [sp]
 80082d6:	1a9b      	subs	r3, r3, r2
 80082d8:	eb03 134c 	add.w	r3, r3, ip, lsl #5
 80082dc:	2b00      	cmp	r3, #0
 80082de:	bfd5      	itete	le
 80082e0:	460a      	movle	r2, r1
 80082e2:	462a      	movgt	r2, r5
 80082e4:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 80082e8:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 80082ec:	bfd8      	it	le
 80082ee:	eb02 5b03 	addle.w	fp, r2, r3, lsl #20
 80082f2:	465b      	mov	r3, fp
 80082f4:	4602      	mov	r2, r0
 80082f6:	4639      	mov	r1, r7
 80082f8:	4620      	mov	r0, r4
 80082fa:	f7f8 fa17 	bl	800072c <__aeabi_ddiv>
 80082fe:	b003      	add	sp, #12
 8008300:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08008304 <__copybits>:
 8008304:	3901      	subs	r1, #1
 8008306:	b570      	push	{r4, r5, r6, lr}
 8008308:	1149      	asrs	r1, r1, #5
 800830a:	6914      	ldr	r4, [r2, #16]
 800830c:	3101      	adds	r1, #1
 800830e:	f102 0314 	add.w	r3, r2, #20
 8008312:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 8008316:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 800831a:	1f05      	subs	r5, r0, #4
 800831c:	42a3      	cmp	r3, r4
 800831e:	d30c      	bcc.n	800833a <__copybits+0x36>
 8008320:	1aa3      	subs	r3, r4, r2
 8008322:	3b11      	subs	r3, #17
 8008324:	f023 0303 	bic.w	r3, r3, #3
 8008328:	3211      	adds	r2, #17
 800832a:	42a2      	cmp	r2, r4
 800832c:	bf88      	it	hi
 800832e:	2300      	movhi	r3, #0
 8008330:	4418      	add	r0, r3
 8008332:	2300      	movs	r3, #0
 8008334:	4288      	cmp	r0, r1
 8008336:	d305      	bcc.n	8008344 <__copybits+0x40>
 8008338:	bd70      	pop	{r4, r5, r6, pc}
 800833a:	f853 6b04 	ldr.w	r6, [r3], #4
 800833e:	f845 6f04 	str.w	r6, [r5, #4]!
 8008342:	e7eb      	b.n	800831c <__copybits+0x18>
 8008344:	f840 3b04 	str.w	r3, [r0], #4
 8008348:	e7f4      	b.n	8008334 <__copybits+0x30>

0800834a <__any_on>:
 800834a:	f100 0214 	add.w	r2, r0, #20
 800834e:	6900      	ldr	r0, [r0, #16]
 8008350:	114b      	asrs	r3, r1, #5
 8008352:	4298      	cmp	r0, r3
 8008354:	b510      	push	{r4, lr}
 8008356:	db11      	blt.n	800837c <__any_on+0x32>
 8008358:	dd0a      	ble.n	8008370 <__any_on+0x26>
 800835a:	f011 011f 	ands.w	r1, r1, #31
 800835e:	d007      	beq.n	8008370 <__any_on+0x26>
 8008360:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 8008364:	fa24 f001 	lsr.w	r0, r4, r1
 8008368:	fa00 f101 	lsl.w	r1, r0, r1
 800836c:	428c      	cmp	r4, r1
 800836e:	d10b      	bne.n	8008388 <__any_on+0x3e>
 8008370:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8008374:	4293      	cmp	r3, r2
 8008376:	d803      	bhi.n	8008380 <__any_on+0x36>
 8008378:	2000      	movs	r0, #0
 800837a:	bd10      	pop	{r4, pc}
 800837c:	4603      	mov	r3, r0
 800837e:	e7f7      	b.n	8008370 <__any_on+0x26>
 8008380:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8008384:	2900      	cmp	r1, #0
 8008386:	d0f5      	beq.n	8008374 <__any_on+0x2a>
 8008388:	2001      	movs	r0, #1
 800838a:	e7f6      	b.n	800837a <__any_on+0x30>

0800838c <_calloc_r>:
 800838c:	b538      	push	{r3, r4, r5, lr}
 800838e:	fb02 f501 	mul.w	r5, r2, r1
 8008392:	4629      	mov	r1, r5
 8008394:	f000 f854 	bl	8008440 <_malloc_r>
 8008398:	4604      	mov	r4, r0
 800839a:	b118      	cbz	r0, 80083a4 <_calloc_r+0x18>
 800839c:	462a      	mov	r2, r5
 800839e:	2100      	movs	r1, #0
 80083a0:	f7fc fbdc 	bl	8004b5c <memset>
 80083a4:	4620      	mov	r0, r4
 80083a6:	bd38      	pop	{r3, r4, r5, pc}

080083a8 <_free_r>:
 80083a8:	b538      	push	{r3, r4, r5, lr}
 80083aa:	4605      	mov	r5, r0
 80083ac:	2900      	cmp	r1, #0
 80083ae:	d043      	beq.n	8008438 <_free_r+0x90>
 80083b0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80083b4:	1f0c      	subs	r4, r1, #4
 80083b6:	2b00      	cmp	r3, #0
 80083b8:	bfb8      	it	lt
 80083ba:	18e4      	addlt	r4, r4, r3
 80083bc:	f000 fa76 	bl	80088ac <__malloc_lock>
 80083c0:	4a1e      	ldr	r2, [pc, #120]	; (800843c <_free_r+0x94>)
 80083c2:	6813      	ldr	r3, [r2, #0]
 80083c4:	4610      	mov	r0, r2
 80083c6:	b933      	cbnz	r3, 80083d6 <_free_r+0x2e>
 80083c8:	6063      	str	r3, [r4, #4]
 80083ca:	6014      	str	r4, [r2, #0]
 80083cc:	4628      	mov	r0, r5
 80083ce:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80083d2:	f000 ba71 	b.w	80088b8 <__malloc_unlock>
 80083d6:	42a3      	cmp	r3, r4
 80083d8:	d90a      	bls.n	80083f0 <_free_r+0x48>
 80083da:	6821      	ldr	r1, [r4, #0]
 80083dc:	1862      	adds	r2, r4, r1
 80083de:	4293      	cmp	r3, r2
 80083e0:	bf01      	itttt	eq
 80083e2:	681a      	ldreq	r2, [r3, #0]
 80083e4:	685b      	ldreq	r3, [r3, #4]
 80083e6:	1852      	addeq	r2, r2, r1
 80083e8:	6022      	streq	r2, [r4, #0]
 80083ea:	6063      	str	r3, [r4, #4]
 80083ec:	6004      	str	r4, [r0, #0]
 80083ee:	e7ed      	b.n	80083cc <_free_r+0x24>
 80083f0:	461a      	mov	r2, r3
 80083f2:	685b      	ldr	r3, [r3, #4]
 80083f4:	b10b      	cbz	r3, 80083fa <_free_r+0x52>
 80083f6:	42a3      	cmp	r3, r4
 80083f8:	d9fa      	bls.n	80083f0 <_free_r+0x48>
 80083fa:	6811      	ldr	r1, [r2, #0]
 80083fc:	1850      	adds	r0, r2, r1
 80083fe:	42a0      	cmp	r0, r4
 8008400:	d10b      	bne.n	800841a <_free_r+0x72>
 8008402:	6820      	ldr	r0, [r4, #0]
 8008404:	4401      	add	r1, r0
 8008406:	1850      	adds	r0, r2, r1
 8008408:	4283      	cmp	r3, r0
 800840a:	6011      	str	r1, [r2, #0]
 800840c:	d1de      	bne.n	80083cc <_free_r+0x24>
 800840e:	6818      	ldr	r0, [r3, #0]
 8008410:	685b      	ldr	r3, [r3, #4]
 8008412:	4401      	add	r1, r0
 8008414:	6011      	str	r1, [r2, #0]
 8008416:	6053      	str	r3, [r2, #4]
 8008418:	e7d8      	b.n	80083cc <_free_r+0x24>
 800841a:	d902      	bls.n	8008422 <_free_r+0x7a>
 800841c:	230c      	movs	r3, #12
 800841e:	602b      	str	r3, [r5, #0]
 8008420:	e7d4      	b.n	80083cc <_free_r+0x24>
 8008422:	6820      	ldr	r0, [r4, #0]
 8008424:	1821      	adds	r1, r4, r0
 8008426:	428b      	cmp	r3, r1
 8008428:	bf01      	itttt	eq
 800842a:	6819      	ldreq	r1, [r3, #0]
 800842c:	685b      	ldreq	r3, [r3, #4]
 800842e:	1809      	addeq	r1, r1, r0
 8008430:	6021      	streq	r1, [r4, #0]
 8008432:	6063      	str	r3, [r4, #4]
 8008434:	6054      	str	r4, [r2, #4]
 8008436:	e7c9      	b.n	80083cc <_free_r+0x24>
 8008438:	bd38      	pop	{r3, r4, r5, pc}
 800843a:	bf00      	nop
 800843c:	20000204 	.word	0x20000204

08008440 <_malloc_r>:
 8008440:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008442:	1ccd      	adds	r5, r1, #3
 8008444:	f025 0503 	bic.w	r5, r5, #3
 8008448:	3508      	adds	r5, #8
 800844a:	2d0c      	cmp	r5, #12
 800844c:	bf38      	it	cc
 800844e:	250c      	movcc	r5, #12
 8008450:	2d00      	cmp	r5, #0
 8008452:	4606      	mov	r6, r0
 8008454:	db01      	blt.n	800845a <_malloc_r+0x1a>
 8008456:	42a9      	cmp	r1, r5
 8008458:	d903      	bls.n	8008462 <_malloc_r+0x22>
 800845a:	230c      	movs	r3, #12
 800845c:	6033      	str	r3, [r6, #0]
 800845e:	2000      	movs	r0, #0
 8008460:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8008462:	f000 fa23 	bl	80088ac <__malloc_lock>
 8008466:	4921      	ldr	r1, [pc, #132]	; (80084ec <_malloc_r+0xac>)
 8008468:	680a      	ldr	r2, [r1, #0]
 800846a:	4614      	mov	r4, r2
 800846c:	b99c      	cbnz	r4, 8008496 <_malloc_r+0x56>
 800846e:	4f20      	ldr	r7, [pc, #128]	; (80084f0 <_malloc_r+0xb0>)
 8008470:	683b      	ldr	r3, [r7, #0]
 8008472:	b923      	cbnz	r3, 800847e <_malloc_r+0x3e>
 8008474:	4621      	mov	r1, r4
 8008476:	4630      	mov	r0, r6
 8008478:	f000 f99e 	bl	80087b8 <_sbrk_r>
 800847c:	6038      	str	r0, [r7, #0]
 800847e:	4629      	mov	r1, r5
 8008480:	4630      	mov	r0, r6
 8008482:	f000 f999 	bl	80087b8 <_sbrk_r>
 8008486:	1c43      	adds	r3, r0, #1
 8008488:	d123      	bne.n	80084d2 <_malloc_r+0x92>
 800848a:	230c      	movs	r3, #12
 800848c:	4630      	mov	r0, r6
 800848e:	6033      	str	r3, [r6, #0]
 8008490:	f000 fa12 	bl	80088b8 <__malloc_unlock>
 8008494:	e7e3      	b.n	800845e <_malloc_r+0x1e>
 8008496:	6823      	ldr	r3, [r4, #0]
 8008498:	1b5b      	subs	r3, r3, r5
 800849a:	d417      	bmi.n	80084cc <_malloc_r+0x8c>
 800849c:	2b0b      	cmp	r3, #11
 800849e:	d903      	bls.n	80084a8 <_malloc_r+0x68>
 80084a0:	6023      	str	r3, [r4, #0]
 80084a2:	441c      	add	r4, r3
 80084a4:	6025      	str	r5, [r4, #0]
 80084a6:	e004      	b.n	80084b2 <_malloc_r+0x72>
 80084a8:	6863      	ldr	r3, [r4, #4]
 80084aa:	42a2      	cmp	r2, r4
 80084ac:	bf0c      	ite	eq
 80084ae:	600b      	streq	r3, [r1, #0]
 80084b0:	6053      	strne	r3, [r2, #4]
 80084b2:	4630      	mov	r0, r6
 80084b4:	f000 fa00 	bl	80088b8 <__malloc_unlock>
 80084b8:	f104 000b 	add.w	r0, r4, #11
 80084bc:	1d23      	adds	r3, r4, #4
 80084be:	f020 0007 	bic.w	r0, r0, #7
 80084c2:	1ac2      	subs	r2, r0, r3
 80084c4:	d0cc      	beq.n	8008460 <_malloc_r+0x20>
 80084c6:	1a1b      	subs	r3, r3, r0
 80084c8:	50a3      	str	r3, [r4, r2]
 80084ca:	e7c9      	b.n	8008460 <_malloc_r+0x20>
 80084cc:	4622      	mov	r2, r4
 80084ce:	6864      	ldr	r4, [r4, #4]
 80084d0:	e7cc      	b.n	800846c <_malloc_r+0x2c>
 80084d2:	1cc4      	adds	r4, r0, #3
 80084d4:	f024 0403 	bic.w	r4, r4, #3
 80084d8:	42a0      	cmp	r0, r4
 80084da:	d0e3      	beq.n	80084a4 <_malloc_r+0x64>
 80084dc:	1a21      	subs	r1, r4, r0
 80084de:	4630      	mov	r0, r6
 80084e0:	f000 f96a 	bl	80087b8 <_sbrk_r>
 80084e4:	3001      	adds	r0, #1
 80084e6:	d1dd      	bne.n	80084a4 <_malloc_r+0x64>
 80084e8:	e7cf      	b.n	800848a <_malloc_r+0x4a>
 80084ea:	bf00      	nop
 80084ec:	20000204 	.word	0x20000204
 80084f0:	20000208 	.word	0x20000208

080084f4 <__ssputs_r>:
 80084f4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80084f8:	688e      	ldr	r6, [r1, #8]
 80084fa:	4682      	mov	sl, r0
 80084fc:	429e      	cmp	r6, r3
 80084fe:	460c      	mov	r4, r1
 8008500:	4690      	mov	r8, r2
 8008502:	461f      	mov	r7, r3
 8008504:	d838      	bhi.n	8008578 <__ssputs_r+0x84>
 8008506:	898a      	ldrh	r2, [r1, #12]
 8008508:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800850c:	d032      	beq.n	8008574 <__ssputs_r+0x80>
 800850e:	6825      	ldr	r5, [r4, #0]
 8008510:	6909      	ldr	r1, [r1, #16]
 8008512:	3301      	adds	r3, #1
 8008514:	eba5 0901 	sub.w	r9, r5, r1
 8008518:	6965      	ldr	r5, [r4, #20]
 800851a:	444b      	add	r3, r9
 800851c:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8008520:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8008524:	106d      	asrs	r5, r5, #1
 8008526:	429d      	cmp	r5, r3
 8008528:	bf38      	it	cc
 800852a:	461d      	movcc	r5, r3
 800852c:	0553      	lsls	r3, r2, #21
 800852e:	d531      	bpl.n	8008594 <__ssputs_r+0xa0>
 8008530:	4629      	mov	r1, r5
 8008532:	f7ff ff85 	bl	8008440 <_malloc_r>
 8008536:	4606      	mov	r6, r0
 8008538:	b950      	cbnz	r0, 8008550 <__ssputs_r+0x5c>
 800853a:	230c      	movs	r3, #12
 800853c:	f04f 30ff 	mov.w	r0, #4294967295
 8008540:	f8ca 3000 	str.w	r3, [sl]
 8008544:	89a3      	ldrh	r3, [r4, #12]
 8008546:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800854a:	81a3      	strh	r3, [r4, #12]
 800854c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008550:	464a      	mov	r2, r9
 8008552:	6921      	ldr	r1, [r4, #16]
 8008554:	f7ff fa54 	bl	8007a00 <memcpy>
 8008558:	89a3      	ldrh	r3, [r4, #12]
 800855a:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800855e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008562:	81a3      	strh	r3, [r4, #12]
 8008564:	6126      	str	r6, [r4, #16]
 8008566:	444e      	add	r6, r9
 8008568:	6026      	str	r6, [r4, #0]
 800856a:	463e      	mov	r6, r7
 800856c:	6165      	str	r5, [r4, #20]
 800856e:	eba5 0509 	sub.w	r5, r5, r9
 8008572:	60a5      	str	r5, [r4, #8]
 8008574:	42be      	cmp	r6, r7
 8008576:	d900      	bls.n	800857a <__ssputs_r+0x86>
 8008578:	463e      	mov	r6, r7
 800857a:	4632      	mov	r2, r6
 800857c:	4641      	mov	r1, r8
 800857e:	6820      	ldr	r0, [r4, #0]
 8008580:	f000 f97a 	bl	8008878 <memmove>
 8008584:	68a3      	ldr	r3, [r4, #8]
 8008586:	6822      	ldr	r2, [r4, #0]
 8008588:	1b9b      	subs	r3, r3, r6
 800858a:	4432      	add	r2, r6
 800858c:	2000      	movs	r0, #0
 800858e:	60a3      	str	r3, [r4, #8]
 8008590:	6022      	str	r2, [r4, #0]
 8008592:	e7db      	b.n	800854c <__ssputs_r+0x58>
 8008594:	462a      	mov	r2, r5
 8008596:	f000 f995 	bl	80088c4 <_realloc_r>
 800859a:	4606      	mov	r6, r0
 800859c:	2800      	cmp	r0, #0
 800859e:	d1e1      	bne.n	8008564 <__ssputs_r+0x70>
 80085a0:	4650      	mov	r0, sl
 80085a2:	6921      	ldr	r1, [r4, #16]
 80085a4:	f7ff ff00 	bl	80083a8 <_free_r>
 80085a8:	e7c7      	b.n	800853a <__ssputs_r+0x46>
	...

080085ac <_svfiprintf_r>:
 80085ac:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80085b0:	4698      	mov	r8, r3
 80085b2:	898b      	ldrh	r3, [r1, #12]
 80085b4:	4607      	mov	r7, r0
 80085b6:	061b      	lsls	r3, r3, #24
 80085b8:	460d      	mov	r5, r1
 80085ba:	4614      	mov	r4, r2
 80085bc:	b09d      	sub	sp, #116	; 0x74
 80085be:	d50e      	bpl.n	80085de <_svfiprintf_r+0x32>
 80085c0:	690b      	ldr	r3, [r1, #16]
 80085c2:	b963      	cbnz	r3, 80085de <_svfiprintf_r+0x32>
 80085c4:	2140      	movs	r1, #64	; 0x40
 80085c6:	f7ff ff3b 	bl	8008440 <_malloc_r>
 80085ca:	6028      	str	r0, [r5, #0]
 80085cc:	6128      	str	r0, [r5, #16]
 80085ce:	b920      	cbnz	r0, 80085da <_svfiprintf_r+0x2e>
 80085d0:	230c      	movs	r3, #12
 80085d2:	603b      	str	r3, [r7, #0]
 80085d4:	f04f 30ff 	mov.w	r0, #4294967295
 80085d8:	e0d1      	b.n	800877e <_svfiprintf_r+0x1d2>
 80085da:	2340      	movs	r3, #64	; 0x40
 80085dc:	616b      	str	r3, [r5, #20]
 80085de:	2300      	movs	r3, #0
 80085e0:	9309      	str	r3, [sp, #36]	; 0x24
 80085e2:	2320      	movs	r3, #32
 80085e4:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80085e8:	2330      	movs	r3, #48	; 0x30
 80085ea:	f04f 0901 	mov.w	r9, #1
 80085ee:	f8cd 800c 	str.w	r8, [sp, #12]
 80085f2:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 8008798 <_svfiprintf_r+0x1ec>
 80085f6:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80085fa:	4623      	mov	r3, r4
 80085fc:	469a      	mov	sl, r3
 80085fe:	f813 2b01 	ldrb.w	r2, [r3], #1
 8008602:	b10a      	cbz	r2, 8008608 <_svfiprintf_r+0x5c>
 8008604:	2a25      	cmp	r2, #37	; 0x25
 8008606:	d1f9      	bne.n	80085fc <_svfiprintf_r+0x50>
 8008608:	ebba 0b04 	subs.w	fp, sl, r4
 800860c:	d00b      	beq.n	8008626 <_svfiprintf_r+0x7a>
 800860e:	465b      	mov	r3, fp
 8008610:	4622      	mov	r2, r4
 8008612:	4629      	mov	r1, r5
 8008614:	4638      	mov	r0, r7
 8008616:	f7ff ff6d 	bl	80084f4 <__ssputs_r>
 800861a:	3001      	adds	r0, #1
 800861c:	f000 80aa 	beq.w	8008774 <_svfiprintf_r+0x1c8>
 8008620:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8008622:	445a      	add	r2, fp
 8008624:	9209      	str	r2, [sp, #36]	; 0x24
 8008626:	f89a 3000 	ldrb.w	r3, [sl]
 800862a:	2b00      	cmp	r3, #0
 800862c:	f000 80a2 	beq.w	8008774 <_svfiprintf_r+0x1c8>
 8008630:	2300      	movs	r3, #0
 8008632:	f04f 32ff 	mov.w	r2, #4294967295
 8008636:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800863a:	f10a 0a01 	add.w	sl, sl, #1
 800863e:	9304      	str	r3, [sp, #16]
 8008640:	9307      	str	r3, [sp, #28]
 8008642:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8008646:	931a      	str	r3, [sp, #104]	; 0x68
 8008648:	4654      	mov	r4, sl
 800864a:	2205      	movs	r2, #5
 800864c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008650:	4851      	ldr	r0, [pc, #324]	; (8008798 <_svfiprintf_r+0x1ec>)
 8008652:	f7ff f9c7 	bl	80079e4 <memchr>
 8008656:	9a04      	ldr	r2, [sp, #16]
 8008658:	b9d8      	cbnz	r0, 8008692 <_svfiprintf_r+0xe6>
 800865a:	06d0      	lsls	r0, r2, #27
 800865c:	bf44      	itt	mi
 800865e:	2320      	movmi	r3, #32
 8008660:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8008664:	0711      	lsls	r1, r2, #28
 8008666:	bf44      	itt	mi
 8008668:	232b      	movmi	r3, #43	; 0x2b
 800866a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800866e:	f89a 3000 	ldrb.w	r3, [sl]
 8008672:	2b2a      	cmp	r3, #42	; 0x2a
 8008674:	d015      	beq.n	80086a2 <_svfiprintf_r+0xf6>
 8008676:	4654      	mov	r4, sl
 8008678:	2000      	movs	r0, #0
 800867a:	f04f 0c0a 	mov.w	ip, #10
 800867e:	9a07      	ldr	r2, [sp, #28]
 8008680:	4621      	mov	r1, r4
 8008682:	f811 3b01 	ldrb.w	r3, [r1], #1
 8008686:	3b30      	subs	r3, #48	; 0x30
 8008688:	2b09      	cmp	r3, #9
 800868a:	d94e      	bls.n	800872a <_svfiprintf_r+0x17e>
 800868c:	b1b0      	cbz	r0, 80086bc <_svfiprintf_r+0x110>
 800868e:	9207      	str	r2, [sp, #28]
 8008690:	e014      	b.n	80086bc <_svfiprintf_r+0x110>
 8008692:	eba0 0308 	sub.w	r3, r0, r8
 8008696:	fa09 f303 	lsl.w	r3, r9, r3
 800869a:	4313      	orrs	r3, r2
 800869c:	46a2      	mov	sl, r4
 800869e:	9304      	str	r3, [sp, #16]
 80086a0:	e7d2      	b.n	8008648 <_svfiprintf_r+0x9c>
 80086a2:	9b03      	ldr	r3, [sp, #12]
 80086a4:	1d19      	adds	r1, r3, #4
 80086a6:	681b      	ldr	r3, [r3, #0]
 80086a8:	9103      	str	r1, [sp, #12]
 80086aa:	2b00      	cmp	r3, #0
 80086ac:	bfbb      	ittet	lt
 80086ae:	425b      	neglt	r3, r3
 80086b0:	f042 0202 	orrlt.w	r2, r2, #2
 80086b4:	9307      	strge	r3, [sp, #28]
 80086b6:	9307      	strlt	r3, [sp, #28]
 80086b8:	bfb8      	it	lt
 80086ba:	9204      	strlt	r2, [sp, #16]
 80086bc:	7823      	ldrb	r3, [r4, #0]
 80086be:	2b2e      	cmp	r3, #46	; 0x2e
 80086c0:	d10c      	bne.n	80086dc <_svfiprintf_r+0x130>
 80086c2:	7863      	ldrb	r3, [r4, #1]
 80086c4:	2b2a      	cmp	r3, #42	; 0x2a
 80086c6:	d135      	bne.n	8008734 <_svfiprintf_r+0x188>
 80086c8:	9b03      	ldr	r3, [sp, #12]
 80086ca:	3402      	adds	r4, #2
 80086cc:	1d1a      	adds	r2, r3, #4
 80086ce:	681b      	ldr	r3, [r3, #0]
 80086d0:	9203      	str	r2, [sp, #12]
 80086d2:	2b00      	cmp	r3, #0
 80086d4:	bfb8      	it	lt
 80086d6:	f04f 33ff 	movlt.w	r3, #4294967295
 80086da:	9305      	str	r3, [sp, #20]
 80086dc:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 80087a8 <_svfiprintf_r+0x1fc>
 80086e0:	2203      	movs	r2, #3
 80086e2:	4650      	mov	r0, sl
 80086e4:	7821      	ldrb	r1, [r4, #0]
 80086e6:	f7ff f97d 	bl	80079e4 <memchr>
 80086ea:	b140      	cbz	r0, 80086fe <_svfiprintf_r+0x152>
 80086ec:	2340      	movs	r3, #64	; 0x40
 80086ee:	eba0 000a 	sub.w	r0, r0, sl
 80086f2:	fa03 f000 	lsl.w	r0, r3, r0
 80086f6:	9b04      	ldr	r3, [sp, #16]
 80086f8:	3401      	adds	r4, #1
 80086fa:	4303      	orrs	r3, r0
 80086fc:	9304      	str	r3, [sp, #16]
 80086fe:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008702:	2206      	movs	r2, #6
 8008704:	4825      	ldr	r0, [pc, #148]	; (800879c <_svfiprintf_r+0x1f0>)
 8008706:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800870a:	f7ff f96b 	bl	80079e4 <memchr>
 800870e:	2800      	cmp	r0, #0
 8008710:	d038      	beq.n	8008784 <_svfiprintf_r+0x1d8>
 8008712:	4b23      	ldr	r3, [pc, #140]	; (80087a0 <_svfiprintf_r+0x1f4>)
 8008714:	bb1b      	cbnz	r3, 800875e <_svfiprintf_r+0x1b2>
 8008716:	9b03      	ldr	r3, [sp, #12]
 8008718:	3307      	adds	r3, #7
 800871a:	f023 0307 	bic.w	r3, r3, #7
 800871e:	3308      	adds	r3, #8
 8008720:	9303      	str	r3, [sp, #12]
 8008722:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008724:	4433      	add	r3, r6
 8008726:	9309      	str	r3, [sp, #36]	; 0x24
 8008728:	e767      	b.n	80085fa <_svfiprintf_r+0x4e>
 800872a:	460c      	mov	r4, r1
 800872c:	2001      	movs	r0, #1
 800872e:	fb0c 3202 	mla	r2, ip, r2, r3
 8008732:	e7a5      	b.n	8008680 <_svfiprintf_r+0xd4>
 8008734:	2300      	movs	r3, #0
 8008736:	f04f 0c0a 	mov.w	ip, #10
 800873a:	4619      	mov	r1, r3
 800873c:	3401      	adds	r4, #1
 800873e:	9305      	str	r3, [sp, #20]
 8008740:	4620      	mov	r0, r4
 8008742:	f810 2b01 	ldrb.w	r2, [r0], #1
 8008746:	3a30      	subs	r2, #48	; 0x30
 8008748:	2a09      	cmp	r2, #9
 800874a:	d903      	bls.n	8008754 <_svfiprintf_r+0x1a8>
 800874c:	2b00      	cmp	r3, #0
 800874e:	d0c5      	beq.n	80086dc <_svfiprintf_r+0x130>
 8008750:	9105      	str	r1, [sp, #20]
 8008752:	e7c3      	b.n	80086dc <_svfiprintf_r+0x130>
 8008754:	4604      	mov	r4, r0
 8008756:	2301      	movs	r3, #1
 8008758:	fb0c 2101 	mla	r1, ip, r1, r2
 800875c:	e7f0      	b.n	8008740 <_svfiprintf_r+0x194>
 800875e:	ab03      	add	r3, sp, #12
 8008760:	9300      	str	r3, [sp, #0]
 8008762:	462a      	mov	r2, r5
 8008764:	4638      	mov	r0, r7
 8008766:	4b0f      	ldr	r3, [pc, #60]	; (80087a4 <_svfiprintf_r+0x1f8>)
 8008768:	a904      	add	r1, sp, #16
 800876a:	f7fc fa9d 	bl	8004ca8 <_printf_float>
 800876e:	1c42      	adds	r2, r0, #1
 8008770:	4606      	mov	r6, r0
 8008772:	d1d6      	bne.n	8008722 <_svfiprintf_r+0x176>
 8008774:	89ab      	ldrh	r3, [r5, #12]
 8008776:	065b      	lsls	r3, r3, #25
 8008778:	f53f af2c 	bmi.w	80085d4 <_svfiprintf_r+0x28>
 800877c:	9809      	ldr	r0, [sp, #36]	; 0x24
 800877e:	b01d      	add	sp, #116	; 0x74
 8008780:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008784:	ab03      	add	r3, sp, #12
 8008786:	9300      	str	r3, [sp, #0]
 8008788:	462a      	mov	r2, r5
 800878a:	4638      	mov	r0, r7
 800878c:	4b05      	ldr	r3, [pc, #20]	; (80087a4 <_svfiprintf_r+0x1f8>)
 800878e:	a904      	add	r1, sp, #16
 8008790:	f7fc fd26 	bl	80051e0 <_printf_i>
 8008794:	e7eb      	b.n	800876e <_svfiprintf_r+0x1c2>
 8008796:	bf00      	nop
 8008798:	08009804 	.word	0x08009804
 800879c:	0800980e 	.word	0x0800980e
 80087a0:	08004ca9 	.word	0x08004ca9
 80087a4:	080084f5 	.word	0x080084f5
 80087a8:	0800980a 	.word	0x0800980a

080087ac <nan>:
 80087ac:	2000      	movs	r0, #0
 80087ae:	4901      	ldr	r1, [pc, #4]	; (80087b4 <nan+0x8>)
 80087b0:	4770      	bx	lr
 80087b2:	bf00      	nop
 80087b4:	7ff80000 	.word	0x7ff80000

080087b8 <_sbrk_r>:
 80087b8:	b538      	push	{r3, r4, r5, lr}
 80087ba:	2300      	movs	r3, #0
 80087bc:	4d05      	ldr	r5, [pc, #20]	; (80087d4 <_sbrk_r+0x1c>)
 80087be:	4604      	mov	r4, r0
 80087c0:	4608      	mov	r0, r1
 80087c2:	602b      	str	r3, [r5, #0]
 80087c4:	f7f9 f9e2 	bl	8001b8c <_sbrk>
 80087c8:	1c43      	adds	r3, r0, #1
 80087ca:	d102      	bne.n	80087d2 <_sbrk_r+0x1a>
 80087cc:	682b      	ldr	r3, [r5, #0]
 80087ce:	b103      	cbz	r3, 80087d2 <_sbrk_r+0x1a>
 80087d0:	6023      	str	r3, [r4, #0]
 80087d2:	bd38      	pop	{r3, r4, r5, pc}
 80087d4:	200002ec 	.word	0x200002ec

080087d8 <strncmp>:
 80087d8:	b510      	push	{r4, lr}
 80087da:	b16a      	cbz	r2, 80087f8 <strncmp+0x20>
 80087dc:	3901      	subs	r1, #1
 80087de:	1884      	adds	r4, r0, r2
 80087e0:	f810 3b01 	ldrb.w	r3, [r0], #1
 80087e4:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 80087e8:	4293      	cmp	r3, r2
 80087ea:	d103      	bne.n	80087f4 <strncmp+0x1c>
 80087ec:	42a0      	cmp	r0, r4
 80087ee:	d001      	beq.n	80087f4 <strncmp+0x1c>
 80087f0:	2b00      	cmp	r3, #0
 80087f2:	d1f5      	bne.n	80087e0 <strncmp+0x8>
 80087f4:	1a98      	subs	r0, r3, r2
 80087f6:	bd10      	pop	{r4, pc}
 80087f8:	4610      	mov	r0, r2
 80087fa:	e7fc      	b.n	80087f6 <strncmp+0x1e>

080087fc <__ascii_wctomb>:
 80087fc:	4603      	mov	r3, r0
 80087fe:	4608      	mov	r0, r1
 8008800:	b141      	cbz	r1, 8008814 <__ascii_wctomb+0x18>
 8008802:	2aff      	cmp	r2, #255	; 0xff
 8008804:	d904      	bls.n	8008810 <__ascii_wctomb+0x14>
 8008806:	228a      	movs	r2, #138	; 0x8a
 8008808:	f04f 30ff 	mov.w	r0, #4294967295
 800880c:	601a      	str	r2, [r3, #0]
 800880e:	4770      	bx	lr
 8008810:	2001      	movs	r0, #1
 8008812:	700a      	strb	r2, [r1, #0]
 8008814:	4770      	bx	lr
	...

08008818 <__assert_func>:
 8008818:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800881a:	4614      	mov	r4, r2
 800881c:	461a      	mov	r2, r3
 800881e:	4b09      	ldr	r3, [pc, #36]	; (8008844 <__assert_func+0x2c>)
 8008820:	4605      	mov	r5, r0
 8008822:	681b      	ldr	r3, [r3, #0]
 8008824:	68d8      	ldr	r0, [r3, #12]
 8008826:	b14c      	cbz	r4, 800883c <__assert_func+0x24>
 8008828:	4b07      	ldr	r3, [pc, #28]	; (8008848 <__assert_func+0x30>)
 800882a:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800882e:	9100      	str	r1, [sp, #0]
 8008830:	462b      	mov	r3, r5
 8008832:	4906      	ldr	r1, [pc, #24]	; (800884c <__assert_func+0x34>)
 8008834:	f000 f80e 	bl	8008854 <fiprintf>
 8008838:	f000 fa82 	bl	8008d40 <abort>
 800883c:	4b04      	ldr	r3, [pc, #16]	; (8008850 <__assert_func+0x38>)
 800883e:	461c      	mov	r4, r3
 8008840:	e7f3      	b.n	800882a <__assert_func+0x12>
 8008842:	bf00      	nop
 8008844:	2000000c 	.word	0x2000000c
 8008848:	08009815 	.word	0x08009815
 800884c:	08009822 	.word	0x08009822
 8008850:	08009850 	.word	0x08009850

08008854 <fiprintf>:
 8008854:	b40e      	push	{r1, r2, r3}
 8008856:	b503      	push	{r0, r1, lr}
 8008858:	4601      	mov	r1, r0
 800885a:	ab03      	add	r3, sp, #12
 800885c:	4805      	ldr	r0, [pc, #20]	; (8008874 <fiprintf+0x20>)
 800885e:	f853 2b04 	ldr.w	r2, [r3], #4
 8008862:	6800      	ldr	r0, [r0, #0]
 8008864:	9301      	str	r3, [sp, #4]
 8008866:	f000 f87b 	bl	8008960 <_vfiprintf_r>
 800886a:	b002      	add	sp, #8
 800886c:	f85d eb04 	ldr.w	lr, [sp], #4
 8008870:	b003      	add	sp, #12
 8008872:	4770      	bx	lr
 8008874:	2000000c 	.word	0x2000000c

08008878 <memmove>:
 8008878:	4288      	cmp	r0, r1
 800887a:	b510      	push	{r4, lr}
 800887c:	eb01 0402 	add.w	r4, r1, r2
 8008880:	d902      	bls.n	8008888 <memmove+0x10>
 8008882:	4284      	cmp	r4, r0
 8008884:	4623      	mov	r3, r4
 8008886:	d807      	bhi.n	8008898 <memmove+0x20>
 8008888:	1e43      	subs	r3, r0, #1
 800888a:	42a1      	cmp	r1, r4
 800888c:	d008      	beq.n	80088a0 <memmove+0x28>
 800888e:	f811 2b01 	ldrb.w	r2, [r1], #1
 8008892:	f803 2f01 	strb.w	r2, [r3, #1]!
 8008896:	e7f8      	b.n	800888a <memmove+0x12>
 8008898:	4601      	mov	r1, r0
 800889a:	4402      	add	r2, r0
 800889c:	428a      	cmp	r2, r1
 800889e:	d100      	bne.n	80088a2 <memmove+0x2a>
 80088a0:	bd10      	pop	{r4, pc}
 80088a2:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80088a6:	f802 4d01 	strb.w	r4, [r2, #-1]!
 80088aa:	e7f7      	b.n	800889c <memmove+0x24>

080088ac <__malloc_lock>:
 80088ac:	4801      	ldr	r0, [pc, #4]	; (80088b4 <__malloc_lock+0x8>)
 80088ae:	f000 bc07 	b.w	80090c0 <__retarget_lock_acquire_recursive>
 80088b2:	bf00      	nop
 80088b4:	200002f4 	.word	0x200002f4

080088b8 <__malloc_unlock>:
 80088b8:	4801      	ldr	r0, [pc, #4]	; (80088c0 <__malloc_unlock+0x8>)
 80088ba:	f000 bc02 	b.w	80090c2 <__retarget_lock_release_recursive>
 80088be:	bf00      	nop
 80088c0:	200002f4 	.word	0x200002f4

080088c4 <_realloc_r>:
 80088c4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80088c6:	4607      	mov	r7, r0
 80088c8:	4614      	mov	r4, r2
 80088ca:	460e      	mov	r6, r1
 80088cc:	b921      	cbnz	r1, 80088d8 <_realloc_r+0x14>
 80088ce:	4611      	mov	r1, r2
 80088d0:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 80088d4:	f7ff bdb4 	b.w	8008440 <_malloc_r>
 80088d8:	b922      	cbnz	r2, 80088e4 <_realloc_r+0x20>
 80088da:	f7ff fd65 	bl	80083a8 <_free_r>
 80088de:	4625      	mov	r5, r4
 80088e0:	4628      	mov	r0, r5
 80088e2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80088e4:	f000 fc52 	bl	800918c <_malloc_usable_size_r>
 80088e8:	42a0      	cmp	r0, r4
 80088ea:	d20f      	bcs.n	800890c <_realloc_r+0x48>
 80088ec:	4621      	mov	r1, r4
 80088ee:	4638      	mov	r0, r7
 80088f0:	f7ff fda6 	bl	8008440 <_malloc_r>
 80088f4:	4605      	mov	r5, r0
 80088f6:	2800      	cmp	r0, #0
 80088f8:	d0f2      	beq.n	80088e0 <_realloc_r+0x1c>
 80088fa:	4631      	mov	r1, r6
 80088fc:	4622      	mov	r2, r4
 80088fe:	f7ff f87f 	bl	8007a00 <memcpy>
 8008902:	4631      	mov	r1, r6
 8008904:	4638      	mov	r0, r7
 8008906:	f7ff fd4f 	bl	80083a8 <_free_r>
 800890a:	e7e9      	b.n	80088e0 <_realloc_r+0x1c>
 800890c:	4635      	mov	r5, r6
 800890e:	e7e7      	b.n	80088e0 <_realloc_r+0x1c>

08008910 <__sfputc_r>:
 8008910:	6893      	ldr	r3, [r2, #8]
 8008912:	b410      	push	{r4}
 8008914:	3b01      	subs	r3, #1
 8008916:	2b00      	cmp	r3, #0
 8008918:	6093      	str	r3, [r2, #8]
 800891a:	da07      	bge.n	800892c <__sfputc_r+0x1c>
 800891c:	6994      	ldr	r4, [r2, #24]
 800891e:	42a3      	cmp	r3, r4
 8008920:	db01      	blt.n	8008926 <__sfputc_r+0x16>
 8008922:	290a      	cmp	r1, #10
 8008924:	d102      	bne.n	800892c <__sfputc_r+0x1c>
 8008926:	bc10      	pop	{r4}
 8008928:	f000 b94a 	b.w	8008bc0 <__swbuf_r>
 800892c:	6813      	ldr	r3, [r2, #0]
 800892e:	1c58      	adds	r0, r3, #1
 8008930:	6010      	str	r0, [r2, #0]
 8008932:	7019      	strb	r1, [r3, #0]
 8008934:	4608      	mov	r0, r1
 8008936:	bc10      	pop	{r4}
 8008938:	4770      	bx	lr

0800893a <__sfputs_r>:
 800893a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800893c:	4606      	mov	r6, r0
 800893e:	460f      	mov	r7, r1
 8008940:	4614      	mov	r4, r2
 8008942:	18d5      	adds	r5, r2, r3
 8008944:	42ac      	cmp	r4, r5
 8008946:	d101      	bne.n	800894c <__sfputs_r+0x12>
 8008948:	2000      	movs	r0, #0
 800894a:	e007      	b.n	800895c <__sfputs_r+0x22>
 800894c:	463a      	mov	r2, r7
 800894e:	4630      	mov	r0, r6
 8008950:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008954:	f7ff ffdc 	bl	8008910 <__sfputc_r>
 8008958:	1c43      	adds	r3, r0, #1
 800895a:	d1f3      	bne.n	8008944 <__sfputs_r+0xa>
 800895c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08008960 <_vfiprintf_r>:
 8008960:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008964:	460d      	mov	r5, r1
 8008966:	4614      	mov	r4, r2
 8008968:	4698      	mov	r8, r3
 800896a:	4606      	mov	r6, r0
 800896c:	b09d      	sub	sp, #116	; 0x74
 800896e:	b118      	cbz	r0, 8008978 <_vfiprintf_r+0x18>
 8008970:	6983      	ldr	r3, [r0, #24]
 8008972:	b90b      	cbnz	r3, 8008978 <_vfiprintf_r+0x18>
 8008974:	f000 fb06 	bl	8008f84 <__sinit>
 8008978:	4b89      	ldr	r3, [pc, #548]	; (8008ba0 <_vfiprintf_r+0x240>)
 800897a:	429d      	cmp	r5, r3
 800897c:	d11b      	bne.n	80089b6 <_vfiprintf_r+0x56>
 800897e:	6875      	ldr	r5, [r6, #4]
 8008980:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8008982:	07d9      	lsls	r1, r3, #31
 8008984:	d405      	bmi.n	8008992 <_vfiprintf_r+0x32>
 8008986:	89ab      	ldrh	r3, [r5, #12]
 8008988:	059a      	lsls	r2, r3, #22
 800898a:	d402      	bmi.n	8008992 <_vfiprintf_r+0x32>
 800898c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800898e:	f000 fb97 	bl	80090c0 <__retarget_lock_acquire_recursive>
 8008992:	89ab      	ldrh	r3, [r5, #12]
 8008994:	071b      	lsls	r3, r3, #28
 8008996:	d501      	bpl.n	800899c <_vfiprintf_r+0x3c>
 8008998:	692b      	ldr	r3, [r5, #16]
 800899a:	b9eb      	cbnz	r3, 80089d8 <_vfiprintf_r+0x78>
 800899c:	4629      	mov	r1, r5
 800899e:	4630      	mov	r0, r6
 80089a0:	f000 f960 	bl	8008c64 <__swsetup_r>
 80089a4:	b1c0      	cbz	r0, 80089d8 <_vfiprintf_r+0x78>
 80089a6:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80089a8:	07dc      	lsls	r4, r3, #31
 80089aa:	d50e      	bpl.n	80089ca <_vfiprintf_r+0x6a>
 80089ac:	f04f 30ff 	mov.w	r0, #4294967295
 80089b0:	b01d      	add	sp, #116	; 0x74
 80089b2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80089b6:	4b7b      	ldr	r3, [pc, #492]	; (8008ba4 <_vfiprintf_r+0x244>)
 80089b8:	429d      	cmp	r5, r3
 80089ba:	d101      	bne.n	80089c0 <_vfiprintf_r+0x60>
 80089bc:	68b5      	ldr	r5, [r6, #8]
 80089be:	e7df      	b.n	8008980 <_vfiprintf_r+0x20>
 80089c0:	4b79      	ldr	r3, [pc, #484]	; (8008ba8 <_vfiprintf_r+0x248>)
 80089c2:	429d      	cmp	r5, r3
 80089c4:	bf08      	it	eq
 80089c6:	68f5      	ldreq	r5, [r6, #12]
 80089c8:	e7da      	b.n	8008980 <_vfiprintf_r+0x20>
 80089ca:	89ab      	ldrh	r3, [r5, #12]
 80089cc:	0598      	lsls	r0, r3, #22
 80089ce:	d4ed      	bmi.n	80089ac <_vfiprintf_r+0x4c>
 80089d0:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80089d2:	f000 fb76 	bl	80090c2 <__retarget_lock_release_recursive>
 80089d6:	e7e9      	b.n	80089ac <_vfiprintf_r+0x4c>
 80089d8:	2300      	movs	r3, #0
 80089da:	9309      	str	r3, [sp, #36]	; 0x24
 80089dc:	2320      	movs	r3, #32
 80089de:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80089e2:	2330      	movs	r3, #48	; 0x30
 80089e4:	f04f 0901 	mov.w	r9, #1
 80089e8:	f8cd 800c 	str.w	r8, [sp, #12]
 80089ec:	f8df 81bc 	ldr.w	r8, [pc, #444]	; 8008bac <_vfiprintf_r+0x24c>
 80089f0:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80089f4:	4623      	mov	r3, r4
 80089f6:	469a      	mov	sl, r3
 80089f8:	f813 2b01 	ldrb.w	r2, [r3], #1
 80089fc:	b10a      	cbz	r2, 8008a02 <_vfiprintf_r+0xa2>
 80089fe:	2a25      	cmp	r2, #37	; 0x25
 8008a00:	d1f9      	bne.n	80089f6 <_vfiprintf_r+0x96>
 8008a02:	ebba 0b04 	subs.w	fp, sl, r4
 8008a06:	d00b      	beq.n	8008a20 <_vfiprintf_r+0xc0>
 8008a08:	465b      	mov	r3, fp
 8008a0a:	4622      	mov	r2, r4
 8008a0c:	4629      	mov	r1, r5
 8008a0e:	4630      	mov	r0, r6
 8008a10:	f7ff ff93 	bl	800893a <__sfputs_r>
 8008a14:	3001      	adds	r0, #1
 8008a16:	f000 80aa 	beq.w	8008b6e <_vfiprintf_r+0x20e>
 8008a1a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8008a1c:	445a      	add	r2, fp
 8008a1e:	9209      	str	r2, [sp, #36]	; 0x24
 8008a20:	f89a 3000 	ldrb.w	r3, [sl]
 8008a24:	2b00      	cmp	r3, #0
 8008a26:	f000 80a2 	beq.w	8008b6e <_vfiprintf_r+0x20e>
 8008a2a:	2300      	movs	r3, #0
 8008a2c:	f04f 32ff 	mov.w	r2, #4294967295
 8008a30:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8008a34:	f10a 0a01 	add.w	sl, sl, #1
 8008a38:	9304      	str	r3, [sp, #16]
 8008a3a:	9307      	str	r3, [sp, #28]
 8008a3c:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8008a40:	931a      	str	r3, [sp, #104]	; 0x68
 8008a42:	4654      	mov	r4, sl
 8008a44:	2205      	movs	r2, #5
 8008a46:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008a4a:	4858      	ldr	r0, [pc, #352]	; (8008bac <_vfiprintf_r+0x24c>)
 8008a4c:	f7fe ffca 	bl	80079e4 <memchr>
 8008a50:	9a04      	ldr	r2, [sp, #16]
 8008a52:	b9d8      	cbnz	r0, 8008a8c <_vfiprintf_r+0x12c>
 8008a54:	06d1      	lsls	r1, r2, #27
 8008a56:	bf44      	itt	mi
 8008a58:	2320      	movmi	r3, #32
 8008a5a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8008a5e:	0713      	lsls	r3, r2, #28
 8008a60:	bf44      	itt	mi
 8008a62:	232b      	movmi	r3, #43	; 0x2b
 8008a64:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8008a68:	f89a 3000 	ldrb.w	r3, [sl]
 8008a6c:	2b2a      	cmp	r3, #42	; 0x2a
 8008a6e:	d015      	beq.n	8008a9c <_vfiprintf_r+0x13c>
 8008a70:	4654      	mov	r4, sl
 8008a72:	2000      	movs	r0, #0
 8008a74:	f04f 0c0a 	mov.w	ip, #10
 8008a78:	9a07      	ldr	r2, [sp, #28]
 8008a7a:	4621      	mov	r1, r4
 8008a7c:	f811 3b01 	ldrb.w	r3, [r1], #1
 8008a80:	3b30      	subs	r3, #48	; 0x30
 8008a82:	2b09      	cmp	r3, #9
 8008a84:	d94e      	bls.n	8008b24 <_vfiprintf_r+0x1c4>
 8008a86:	b1b0      	cbz	r0, 8008ab6 <_vfiprintf_r+0x156>
 8008a88:	9207      	str	r2, [sp, #28]
 8008a8a:	e014      	b.n	8008ab6 <_vfiprintf_r+0x156>
 8008a8c:	eba0 0308 	sub.w	r3, r0, r8
 8008a90:	fa09 f303 	lsl.w	r3, r9, r3
 8008a94:	4313      	orrs	r3, r2
 8008a96:	46a2      	mov	sl, r4
 8008a98:	9304      	str	r3, [sp, #16]
 8008a9a:	e7d2      	b.n	8008a42 <_vfiprintf_r+0xe2>
 8008a9c:	9b03      	ldr	r3, [sp, #12]
 8008a9e:	1d19      	adds	r1, r3, #4
 8008aa0:	681b      	ldr	r3, [r3, #0]
 8008aa2:	9103      	str	r1, [sp, #12]
 8008aa4:	2b00      	cmp	r3, #0
 8008aa6:	bfbb      	ittet	lt
 8008aa8:	425b      	neglt	r3, r3
 8008aaa:	f042 0202 	orrlt.w	r2, r2, #2
 8008aae:	9307      	strge	r3, [sp, #28]
 8008ab0:	9307      	strlt	r3, [sp, #28]
 8008ab2:	bfb8      	it	lt
 8008ab4:	9204      	strlt	r2, [sp, #16]
 8008ab6:	7823      	ldrb	r3, [r4, #0]
 8008ab8:	2b2e      	cmp	r3, #46	; 0x2e
 8008aba:	d10c      	bne.n	8008ad6 <_vfiprintf_r+0x176>
 8008abc:	7863      	ldrb	r3, [r4, #1]
 8008abe:	2b2a      	cmp	r3, #42	; 0x2a
 8008ac0:	d135      	bne.n	8008b2e <_vfiprintf_r+0x1ce>
 8008ac2:	9b03      	ldr	r3, [sp, #12]
 8008ac4:	3402      	adds	r4, #2
 8008ac6:	1d1a      	adds	r2, r3, #4
 8008ac8:	681b      	ldr	r3, [r3, #0]
 8008aca:	9203      	str	r2, [sp, #12]
 8008acc:	2b00      	cmp	r3, #0
 8008ace:	bfb8      	it	lt
 8008ad0:	f04f 33ff 	movlt.w	r3, #4294967295
 8008ad4:	9305      	str	r3, [sp, #20]
 8008ad6:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8008bbc <_vfiprintf_r+0x25c>
 8008ada:	2203      	movs	r2, #3
 8008adc:	4650      	mov	r0, sl
 8008ade:	7821      	ldrb	r1, [r4, #0]
 8008ae0:	f7fe ff80 	bl	80079e4 <memchr>
 8008ae4:	b140      	cbz	r0, 8008af8 <_vfiprintf_r+0x198>
 8008ae6:	2340      	movs	r3, #64	; 0x40
 8008ae8:	eba0 000a 	sub.w	r0, r0, sl
 8008aec:	fa03 f000 	lsl.w	r0, r3, r0
 8008af0:	9b04      	ldr	r3, [sp, #16]
 8008af2:	3401      	adds	r4, #1
 8008af4:	4303      	orrs	r3, r0
 8008af6:	9304      	str	r3, [sp, #16]
 8008af8:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008afc:	2206      	movs	r2, #6
 8008afe:	482c      	ldr	r0, [pc, #176]	; (8008bb0 <_vfiprintf_r+0x250>)
 8008b00:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8008b04:	f7fe ff6e 	bl	80079e4 <memchr>
 8008b08:	2800      	cmp	r0, #0
 8008b0a:	d03f      	beq.n	8008b8c <_vfiprintf_r+0x22c>
 8008b0c:	4b29      	ldr	r3, [pc, #164]	; (8008bb4 <_vfiprintf_r+0x254>)
 8008b0e:	bb1b      	cbnz	r3, 8008b58 <_vfiprintf_r+0x1f8>
 8008b10:	9b03      	ldr	r3, [sp, #12]
 8008b12:	3307      	adds	r3, #7
 8008b14:	f023 0307 	bic.w	r3, r3, #7
 8008b18:	3308      	adds	r3, #8
 8008b1a:	9303      	str	r3, [sp, #12]
 8008b1c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008b1e:	443b      	add	r3, r7
 8008b20:	9309      	str	r3, [sp, #36]	; 0x24
 8008b22:	e767      	b.n	80089f4 <_vfiprintf_r+0x94>
 8008b24:	460c      	mov	r4, r1
 8008b26:	2001      	movs	r0, #1
 8008b28:	fb0c 3202 	mla	r2, ip, r2, r3
 8008b2c:	e7a5      	b.n	8008a7a <_vfiprintf_r+0x11a>
 8008b2e:	2300      	movs	r3, #0
 8008b30:	f04f 0c0a 	mov.w	ip, #10
 8008b34:	4619      	mov	r1, r3
 8008b36:	3401      	adds	r4, #1
 8008b38:	9305      	str	r3, [sp, #20]
 8008b3a:	4620      	mov	r0, r4
 8008b3c:	f810 2b01 	ldrb.w	r2, [r0], #1
 8008b40:	3a30      	subs	r2, #48	; 0x30
 8008b42:	2a09      	cmp	r2, #9
 8008b44:	d903      	bls.n	8008b4e <_vfiprintf_r+0x1ee>
 8008b46:	2b00      	cmp	r3, #0
 8008b48:	d0c5      	beq.n	8008ad6 <_vfiprintf_r+0x176>
 8008b4a:	9105      	str	r1, [sp, #20]
 8008b4c:	e7c3      	b.n	8008ad6 <_vfiprintf_r+0x176>
 8008b4e:	4604      	mov	r4, r0
 8008b50:	2301      	movs	r3, #1
 8008b52:	fb0c 2101 	mla	r1, ip, r1, r2
 8008b56:	e7f0      	b.n	8008b3a <_vfiprintf_r+0x1da>
 8008b58:	ab03      	add	r3, sp, #12
 8008b5a:	9300      	str	r3, [sp, #0]
 8008b5c:	462a      	mov	r2, r5
 8008b5e:	4630      	mov	r0, r6
 8008b60:	4b15      	ldr	r3, [pc, #84]	; (8008bb8 <_vfiprintf_r+0x258>)
 8008b62:	a904      	add	r1, sp, #16
 8008b64:	f7fc f8a0 	bl	8004ca8 <_printf_float>
 8008b68:	4607      	mov	r7, r0
 8008b6a:	1c78      	adds	r0, r7, #1
 8008b6c:	d1d6      	bne.n	8008b1c <_vfiprintf_r+0x1bc>
 8008b6e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8008b70:	07d9      	lsls	r1, r3, #31
 8008b72:	d405      	bmi.n	8008b80 <_vfiprintf_r+0x220>
 8008b74:	89ab      	ldrh	r3, [r5, #12]
 8008b76:	059a      	lsls	r2, r3, #22
 8008b78:	d402      	bmi.n	8008b80 <_vfiprintf_r+0x220>
 8008b7a:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8008b7c:	f000 faa1 	bl	80090c2 <__retarget_lock_release_recursive>
 8008b80:	89ab      	ldrh	r3, [r5, #12]
 8008b82:	065b      	lsls	r3, r3, #25
 8008b84:	f53f af12 	bmi.w	80089ac <_vfiprintf_r+0x4c>
 8008b88:	9809      	ldr	r0, [sp, #36]	; 0x24
 8008b8a:	e711      	b.n	80089b0 <_vfiprintf_r+0x50>
 8008b8c:	ab03      	add	r3, sp, #12
 8008b8e:	9300      	str	r3, [sp, #0]
 8008b90:	462a      	mov	r2, r5
 8008b92:	4630      	mov	r0, r6
 8008b94:	4b08      	ldr	r3, [pc, #32]	; (8008bb8 <_vfiprintf_r+0x258>)
 8008b96:	a904      	add	r1, sp, #16
 8008b98:	f7fc fb22 	bl	80051e0 <_printf_i>
 8008b9c:	e7e4      	b.n	8008b68 <_vfiprintf_r+0x208>
 8008b9e:	bf00      	nop
 8008ba0:	08009874 	.word	0x08009874
 8008ba4:	08009894 	.word	0x08009894
 8008ba8:	08009854 	.word	0x08009854
 8008bac:	08009804 	.word	0x08009804
 8008bb0:	0800980e 	.word	0x0800980e
 8008bb4:	08004ca9 	.word	0x08004ca9
 8008bb8:	0800893b 	.word	0x0800893b
 8008bbc:	0800980a 	.word	0x0800980a

08008bc0 <__swbuf_r>:
 8008bc0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008bc2:	460e      	mov	r6, r1
 8008bc4:	4614      	mov	r4, r2
 8008bc6:	4605      	mov	r5, r0
 8008bc8:	b118      	cbz	r0, 8008bd2 <__swbuf_r+0x12>
 8008bca:	6983      	ldr	r3, [r0, #24]
 8008bcc:	b90b      	cbnz	r3, 8008bd2 <__swbuf_r+0x12>
 8008bce:	f000 f9d9 	bl	8008f84 <__sinit>
 8008bd2:	4b21      	ldr	r3, [pc, #132]	; (8008c58 <__swbuf_r+0x98>)
 8008bd4:	429c      	cmp	r4, r3
 8008bd6:	d12b      	bne.n	8008c30 <__swbuf_r+0x70>
 8008bd8:	686c      	ldr	r4, [r5, #4]
 8008bda:	69a3      	ldr	r3, [r4, #24]
 8008bdc:	60a3      	str	r3, [r4, #8]
 8008bde:	89a3      	ldrh	r3, [r4, #12]
 8008be0:	071a      	lsls	r2, r3, #28
 8008be2:	d52f      	bpl.n	8008c44 <__swbuf_r+0x84>
 8008be4:	6923      	ldr	r3, [r4, #16]
 8008be6:	b36b      	cbz	r3, 8008c44 <__swbuf_r+0x84>
 8008be8:	6923      	ldr	r3, [r4, #16]
 8008bea:	6820      	ldr	r0, [r4, #0]
 8008bec:	b2f6      	uxtb	r6, r6
 8008bee:	1ac0      	subs	r0, r0, r3
 8008bf0:	6963      	ldr	r3, [r4, #20]
 8008bf2:	4637      	mov	r7, r6
 8008bf4:	4283      	cmp	r3, r0
 8008bf6:	dc04      	bgt.n	8008c02 <__swbuf_r+0x42>
 8008bf8:	4621      	mov	r1, r4
 8008bfa:	4628      	mov	r0, r5
 8008bfc:	f000 f92e 	bl	8008e5c <_fflush_r>
 8008c00:	bb30      	cbnz	r0, 8008c50 <__swbuf_r+0x90>
 8008c02:	68a3      	ldr	r3, [r4, #8]
 8008c04:	3001      	adds	r0, #1
 8008c06:	3b01      	subs	r3, #1
 8008c08:	60a3      	str	r3, [r4, #8]
 8008c0a:	6823      	ldr	r3, [r4, #0]
 8008c0c:	1c5a      	adds	r2, r3, #1
 8008c0e:	6022      	str	r2, [r4, #0]
 8008c10:	701e      	strb	r6, [r3, #0]
 8008c12:	6963      	ldr	r3, [r4, #20]
 8008c14:	4283      	cmp	r3, r0
 8008c16:	d004      	beq.n	8008c22 <__swbuf_r+0x62>
 8008c18:	89a3      	ldrh	r3, [r4, #12]
 8008c1a:	07db      	lsls	r3, r3, #31
 8008c1c:	d506      	bpl.n	8008c2c <__swbuf_r+0x6c>
 8008c1e:	2e0a      	cmp	r6, #10
 8008c20:	d104      	bne.n	8008c2c <__swbuf_r+0x6c>
 8008c22:	4621      	mov	r1, r4
 8008c24:	4628      	mov	r0, r5
 8008c26:	f000 f919 	bl	8008e5c <_fflush_r>
 8008c2a:	b988      	cbnz	r0, 8008c50 <__swbuf_r+0x90>
 8008c2c:	4638      	mov	r0, r7
 8008c2e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8008c30:	4b0a      	ldr	r3, [pc, #40]	; (8008c5c <__swbuf_r+0x9c>)
 8008c32:	429c      	cmp	r4, r3
 8008c34:	d101      	bne.n	8008c3a <__swbuf_r+0x7a>
 8008c36:	68ac      	ldr	r4, [r5, #8]
 8008c38:	e7cf      	b.n	8008bda <__swbuf_r+0x1a>
 8008c3a:	4b09      	ldr	r3, [pc, #36]	; (8008c60 <__swbuf_r+0xa0>)
 8008c3c:	429c      	cmp	r4, r3
 8008c3e:	bf08      	it	eq
 8008c40:	68ec      	ldreq	r4, [r5, #12]
 8008c42:	e7ca      	b.n	8008bda <__swbuf_r+0x1a>
 8008c44:	4621      	mov	r1, r4
 8008c46:	4628      	mov	r0, r5
 8008c48:	f000 f80c 	bl	8008c64 <__swsetup_r>
 8008c4c:	2800      	cmp	r0, #0
 8008c4e:	d0cb      	beq.n	8008be8 <__swbuf_r+0x28>
 8008c50:	f04f 37ff 	mov.w	r7, #4294967295
 8008c54:	e7ea      	b.n	8008c2c <__swbuf_r+0x6c>
 8008c56:	bf00      	nop
 8008c58:	08009874 	.word	0x08009874
 8008c5c:	08009894 	.word	0x08009894
 8008c60:	08009854 	.word	0x08009854

08008c64 <__swsetup_r>:
 8008c64:	4b32      	ldr	r3, [pc, #200]	; (8008d30 <__swsetup_r+0xcc>)
 8008c66:	b570      	push	{r4, r5, r6, lr}
 8008c68:	681d      	ldr	r5, [r3, #0]
 8008c6a:	4606      	mov	r6, r0
 8008c6c:	460c      	mov	r4, r1
 8008c6e:	b125      	cbz	r5, 8008c7a <__swsetup_r+0x16>
 8008c70:	69ab      	ldr	r3, [r5, #24]
 8008c72:	b913      	cbnz	r3, 8008c7a <__swsetup_r+0x16>
 8008c74:	4628      	mov	r0, r5
 8008c76:	f000 f985 	bl	8008f84 <__sinit>
 8008c7a:	4b2e      	ldr	r3, [pc, #184]	; (8008d34 <__swsetup_r+0xd0>)
 8008c7c:	429c      	cmp	r4, r3
 8008c7e:	d10f      	bne.n	8008ca0 <__swsetup_r+0x3c>
 8008c80:	686c      	ldr	r4, [r5, #4]
 8008c82:	89a3      	ldrh	r3, [r4, #12]
 8008c84:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8008c88:	0719      	lsls	r1, r3, #28
 8008c8a:	d42c      	bmi.n	8008ce6 <__swsetup_r+0x82>
 8008c8c:	06dd      	lsls	r5, r3, #27
 8008c8e:	d411      	bmi.n	8008cb4 <__swsetup_r+0x50>
 8008c90:	2309      	movs	r3, #9
 8008c92:	6033      	str	r3, [r6, #0]
 8008c94:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8008c98:	f04f 30ff 	mov.w	r0, #4294967295
 8008c9c:	81a3      	strh	r3, [r4, #12]
 8008c9e:	e03e      	b.n	8008d1e <__swsetup_r+0xba>
 8008ca0:	4b25      	ldr	r3, [pc, #148]	; (8008d38 <__swsetup_r+0xd4>)
 8008ca2:	429c      	cmp	r4, r3
 8008ca4:	d101      	bne.n	8008caa <__swsetup_r+0x46>
 8008ca6:	68ac      	ldr	r4, [r5, #8]
 8008ca8:	e7eb      	b.n	8008c82 <__swsetup_r+0x1e>
 8008caa:	4b24      	ldr	r3, [pc, #144]	; (8008d3c <__swsetup_r+0xd8>)
 8008cac:	429c      	cmp	r4, r3
 8008cae:	bf08      	it	eq
 8008cb0:	68ec      	ldreq	r4, [r5, #12]
 8008cb2:	e7e6      	b.n	8008c82 <__swsetup_r+0x1e>
 8008cb4:	0758      	lsls	r0, r3, #29
 8008cb6:	d512      	bpl.n	8008cde <__swsetup_r+0x7a>
 8008cb8:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8008cba:	b141      	cbz	r1, 8008cce <__swsetup_r+0x6a>
 8008cbc:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8008cc0:	4299      	cmp	r1, r3
 8008cc2:	d002      	beq.n	8008cca <__swsetup_r+0x66>
 8008cc4:	4630      	mov	r0, r6
 8008cc6:	f7ff fb6f 	bl	80083a8 <_free_r>
 8008cca:	2300      	movs	r3, #0
 8008ccc:	6363      	str	r3, [r4, #52]	; 0x34
 8008cce:	89a3      	ldrh	r3, [r4, #12]
 8008cd0:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8008cd4:	81a3      	strh	r3, [r4, #12]
 8008cd6:	2300      	movs	r3, #0
 8008cd8:	6063      	str	r3, [r4, #4]
 8008cda:	6923      	ldr	r3, [r4, #16]
 8008cdc:	6023      	str	r3, [r4, #0]
 8008cde:	89a3      	ldrh	r3, [r4, #12]
 8008ce0:	f043 0308 	orr.w	r3, r3, #8
 8008ce4:	81a3      	strh	r3, [r4, #12]
 8008ce6:	6923      	ldr	r3, [r4, #16]
 8008ce8:	b94b      	cbnz	r3, 8008cfe <__swsetup_r+0x9a>
 8008cea:	89a3      	ldrh	r3, [r4, #12]
 8008cec:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8008cf0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8008cf4:	d003      	beq.n	8008cfe <__swsetup_r+0x9a>
 8008cf6:	4621      	mov	r1, r4
 8008cf8:	4630      	mov	r0, r6
 8008cfa:	f000 fa07 	bl	800910c <__smakebuf_r>
 8008cfe:	89a0      	ldrh	r0, [r4, #12]
 8008d00:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8008d04:	f010 0301 	ands.w	r3, r0, #1
 8008d08:	d00a      	beq.n	8008d20 <__swsetup_r+0xbc>
 8008d0a:	2300      	movs	r3, #0
 8008d0c:	60a3      	str	r3, [r4, #8]
 8008d0e:	6963      	ldr	r3, [r4, #20]
 8008d10:	425b      	negs	r3, r3
 8008d12:	61a3      	str	r3, [r4, #24]
 8008d14:	6923      	ldr	r3, [r4, #16]
 8008d16:	b943      	cbnz	r3, 8008d2a <__swsetup_r+0xc6>
 8008d18:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8008d1c:	d1ba      	bne.n	8008c94 <__swsetup_r+0x30>
 8008d1e:	bd70      	pop	{r4, r5, r6, pc}
 8008d20:	0781      	lsls	r1, r0, #30
 8008d22:	bf58      	it	pl
 8008d24:	6963      	ldrpl	r3, [r4, #20]
 8008d26:	60a3      	str	r3, [r4, #8]
 8008d28:	e7f4      	b.n	8008d14 <__swsetup_r+0xb0>
 8008d2a:	2000      	movs	r0, #0
 8008d2c:	e7f7      	b.n	8008d1e <__swsetup_r+0xba>
 8008d2e:	bf00      	nop
 8008d30:	2000000c 	.word	0x2000000c
 8008d34:	08009874 	.word	0x08009874
 8008d38:	08009894 	.word	0x08009894
 8008d3c:	08009854 	.word	0x08009854

08008d40 <abort>:
 8008d40:	2006      	movs	r0, #6
 8008d42:	b508      	push	{r3, lr}
 8008d44:	f000 fa52 	bl	80091ec <raise>
 8008d48:	2001      	movs	r0, #1
 8008d4a:	f7f8 feac 	bl	8001aa6 <_exit>
	...

08008d50 <__sflush_r>:
 8008d50:	898a      	ldrh	r2, [r1, #12]
 8008d52:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008d56:	4605      	mov	r5, r0
 8008d58:	0710      	lsls	r0, r2, #28
 8008d5a:	460c      	mov	r4, r1
 8008d5c:	d458      	bmi.n	8008e10 <__sflush_r+0xc0>
 8008d5e:	684b      	ldr	r3, [r1, #4]
 8008d60:	2b00      	cmp	r3, #0
 8008d62:	dc05      	bgt.n	8008d70 <__sflush_r+0x20>
 8008d64:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8008d66:	2b00      	cmp	r3, #0
 8008d68:	dc02      	bgt.n	8008d70 <__sflush_r+0x20>
 8008d6a:	2000      	movs	r0, #0
 8008d6c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008d70:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8008d72:	2e00      	cmp	r6, #0
 8008d74:	d0f9      	beq.n	8008d6a <__sflush_r+0x1a>
 8008d76:	2300      	movs	r3, #0
 8008d78:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8008d7c:	682f      	ldr	r7, [r5, #0]
 8008d7e:	602b      	str	r3, [r5, #0]
 8008d80:	d032      	beq.n	8008de8 <__sflush_r+0x98>
 8008d82:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8008d84:	89a3      	ldrh	r3, [r4, #12]
 8008d86:	075a      	lsls	r2, r3, #29
 8008d88:	d505      	bpl.n	8008d96 <__sflush_r+0x46>
 8008d8a:	6863      	ldr	r3, [r4, #4]
 8008d8c:	1ac0      	subs	r0, r0, r3
 8008d8e:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8008d90:	b10b      	cbz	r3, 8008d96 <__sflush_r+0x46>
 8008d92:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8008d94:	1ac0      	subs	r0, r0, r3
 8008d96:	2300      	movs	r3, #0
 8008d98:	4602      	mov	r2, r0
 8008d9a:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8008d9c:	4628      	mov	r0, r5
 8008d9e:	6a21      	ldr	r1, [r4, #32]
 8008da0:	47b0      	blx	r6
 8008da2:	1c43      	adds	r3, r0, #1
 8008da4:	89a3      	ldrh	r3, [r4, #12]
 8008da6:	d106      	bne.n	8008db6 <__sflush_r+0x66>
 8008da8:	6829      	ldr	r1, [r5, #0]
 8008daa:	291d      	cmp	r1, #29
 8008dac:	d82c      	bhi.n	8008e08 <__sflush_r+0xb8>
 8008dae:	4a2a      	ldr	r2, [pc, #168]	; (8008e58 <__sflush_r+0x108>)
 8008db0:	40ca      	lsrs	r2, r1
 8008db2:	07d6      	lsls	r6, r2, #31
 8008db4:	d528      	bpl.n	8008e08 <__sflush_r+0xb8>
 8008db6:	2200      	movs	r2, #0
 8008db8:	6062      	str	r2, [r4, #4]
 8008dba:	6922      	ldr	r2, [r4, #16]
 8008dbc:	04d9      	lsls	r1, r3, #19
 8008dbe:	6022      	str	r2, [r4, #0]
 8008dc0:	d504      	bpl.n	8008dcc <__sflush_r+0x7c>
 8008dc2:	1c42      	adds	r2, r0, #1
 8008dc4:	d101      	bne.n	8008dca <__sflush_r+0x7a>
 8008dc6:	682b      	ldr	r3, [r5, #0]
 8008dc8:	b903      	cbnz	r3, 8008dcc <__sflush_r+0x7c>
 8008dca:	6560      	str	r0, [r4, #84]	; 0x54
 8008dcc:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8008dce:	602f      	str	r7, [r5, #0]
 8008dd0:	2900      	cmp	r1, #0
 8008dd2:	d0ca      	beq.n	8008d6a <__sflush_r+0x1a>
 8008dd4:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8008dd8:	4299      	cmp	r1, r3
 8008dda:	d002      	beq.n	8008de2 <__sflush_r+0x92>
 8008ddc:	4628      	mov	r0, r5
 8008dde:	f7ff fae3 	bl	80083a8 <_free_r>
 8008de2:	2000      	movs	r0, #0
 8008de4:	6360      	str	r0, [r4, #52]	; 0x34
 8008de6:	e7c1      	b.n	8008d6c <__sflush_r+0x1c>
 8008de8:	6a21      	ldr	r1, [r4, #32]
 8008dea:	2301      	movs	r3, #1
 8008dec:	4628      	mov	r0, r5
 8008dee:	47b0      	blx	r6
 8008df0:	1c41      	adds	r1, r0, #1
 8008df2:	d1c7      	bne.n	8008d84 <__sflush_r+0x34>
 8008df4:	682b      	ldr	r3, [r5, #0]
 8008df6:	2b00      	cmp	r3, #0
 8008df8:	d0c4      	beq.n	8008d84 <__sflush_r+0x34>
 8008dfa:	2b1d      	cmp	r3, #29
 8008dfc:	d001      	beq.n	8008e02 <__sflush_r+0xb2>
 8008dfe:	2b16      	cmp	r3, #22
 8008e00:	d101      	bne.n	8008e06 <__sflush_r+0xb6>
 8008e02:	602f      	str	r7, [r5, #0]
 8008e04:	e7b1      	b.n	8008d6a <__sflush_r+0x1a>
 8008e06:	89a3      	ldrh	r3, [r4, #12]
 8008e08:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8008e0c:	81a3      	strh	r3, [r4, #12]
 8008e0e:	e7ad      	b.n	8008d6c <__sflush_r+0x1c>
 8008e10:	690f      	ldr	r7, [r1, #16]
 8008e12:	2f00      	cmp	r7, #0
 8008e14:	d0a9      	beq.n	8008d6a <__sflush_r+0x1a>
 8008e16:	0793      	lsls	r3, r2, #30
 8008e18:	bf18      	it	ne
 8008e1a:	2300      	movne	r3, #0
 8008e1c:	680e      	ldr	r6, [r1, #0]
 8008e1e:	bf08      	it	eq
 8008e20:	694b      	ldreq	r3, [r1, #20]
 8008e22:	eba6 0807 	sub.w	r8, r6, r7
 8008e26:	600f      	str	r7, [r1, #0]
 8008e28:	608b      	str	r3, [r1, #8]
 8008e2a:	f1b8 0f00 	cmp.w	r8, #0
 8008e2e:	dd9c      	ble.n	8008d6a <__sflush_r+0x1a>
 8008e30:	4643      	mov	r3, r8
 8008e32:	463a      	mov	r2, r7
 8008e34:	4628      	mov	r0, r5
 8008e36:	6a21      	ldr	r1, [r4, #32]
 8008e38:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8008e3a:	47b0      	blx	r6
 8008e3c:	2800      	cmp	r0, #0
 8008e3e:	dc06      	bgt.n	8008e4e <__sflush_r+0xfe>
 8008e40:	89a3      	ldrh	r3, [r4, #12]
 8008e42:	f04f 30ff 	mov.w	r0, #4294967295
 8008e46:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8008e4a:	81a3      	strh	r3, [r4, #12]
 8008e4c:	e78e      	b.n	8008d6c <__sflush_r+0x1c>
 8008e4e:	4407      	add	r7, r0
 8008e50:	eba8 0800 	sub.w	r8, r8, r0
 8008e54:	e7e9      	b.n	8008e2a <__sflush_r+0xda>
 8008e56:	bf00      	nop
 8008e58:	20400001 	.word	0x20400001

08008e5c <_fflush_r>:
 8008e5c:	b538      	push	{r3, r4, r5, lr}
 8008e5e:	690b      	ldr	r3, [r1, #16]
 8008e60:	4605      	mov	r5, r0
 8008e62:	460c      	mov	r4, r1
 8008e64:	b913      	cbnz	r3, 8008e6c <_fflush_r+0x10>
 8008e66:	2500      	movs	r5, #0
 8008e68:	4628      	mov	r0, r5
 8008e6a:	bd38      	pop	{r3, r4, r5, pc}
 8008e6c:	b118      	cbz	r0, 8008e76 <_fflush_r+0x1a>
 8008e6e:	6983      	ldr	r3, [r0, #24]
 8008e70:	b90b      	cbnz	r3, 8008e76 <_fflush_r+0x1a>
 8008e72:	f000 f887 	bl	8008f84 <__sinit>
 8008e76:	4b14      	ldr	r3, [pc, #80]	; (8008ec8 <_fflush_r+0x6c>)
 8008e78:	429c      	cmp	r4, r3
 8008e7a:	d11b      	bne.n	8008eb4 <_fflush_r+0x58>
 8008e7c:	686c      	ldr	r4, [r5, #4]
 8008e7e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008e82:	2b00      	cmp	r3, #0
 8008e84:	d0ef      	beq.n	8008e66 <_fflush_r+0xa>
 8008e86:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8008e88:	07d0      	lsls	r0, r2, #31
 8008e8a:	d404      	bmi.n	8008e96 <_fflush_r+0x3a>
 8008e8c:	0599      	lsls	r1, r3, #22
 8008e8e:	d402      	bmi.n	8008e96 <_fflush_r+0x3a>
 8008e90:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8008e92:	f000 f915 	bl	80090c0 <__retarget_lock_acquire_recursive>
 8008e96:	4628      	mov	r0, r5
 8008e98:	4621      	mov	r1, r4
 8008e9a:	f7ff ff59 	bl	8008d50 <__sflush_r>
 8008e9e:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8008ea0:	4605      	mov	r5, r0
 8008ea2:	07da      	lsls	r2, r3, #31
 8008ea4:	d4e0      	bmi.n	8008e68 <_fflush_r+0xc>
 8008ea6:	89a3      	ldrh	r3, [r4, #12]
 8008ea8:	059b      	lsls	r3, r3, #22
 8008eaa:	d4dd      	bmi.n	8008e68 <_fflush_r+0xc>
 8008eac:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8008eae:	f000 f908 	bl	80090c2 <__retarget_lock_release_recursive>
 8008eb2:	e7d9      	b.n	8008e68 <_fflush_r+0xc>
 8008eb4:	4b05      	ldr	r3, [pc, #20]	; (8008ecc <_fflush_r+0x70>)
 8008eb6:	429c      	cmp	r4, r3
 8008eb8:	d101      	bne.n	8008ebe <_fflush_r+0x62>
 8008eba:	68ac      	ldr	r4, [r5, #8]
 8008ebc:	e7df      	b.n	8008e7e <_fflush_r+0x22>
 8008ebe:	4b04      	ldr	r3, [pc, #16]	; (8008ed0 <_fflush_r+0x74>)
 8008ec0:	429c      	cmp	r4, r3
 8008ec2:	bf08      	it	eq
 8008ec4:	68ec      	ldreq	r4, [r5, #12]
 8008ec6:	e7da      	b.n	8008e7e <_fflush_r+0x22>
 8008ec8:	08009874 	.word	0x08009874
 8008ecc:	08009894 	.word	0x08009894
 8008ed0:	08009854 	.word	0x08009854

08008ed4 <std>:
 8008ed4:	2300      	movs	r3, #0
 8008ed6:	b510      	push	{r4, lr}
 8008ed8:	4604      	mov	r4, r0
 8008eda:	e9c0 3300 	strd	r3, r3, [r0]
 8008ede:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8008ee2:	6083      	str	r3, [r0, #8]
 8008ee4:	8181      	strh	r1, [r0, #12]
 8008ee6:	6643      	str	r3, [r0, #100]	; 0x64
 8008ee8:	81c2      	strh	r2, [r0, #14]
 8008eea:	6183      	str	r3, [r0, #24]
 8008eec:	4619      	mov	r1, r3
 8008eee:	2208      	movs	r2, #8
 8008ef0:	305c      	adds	r0, #92	; 0x5c
 8008ef2:	f7fb fe33 	bl	8004b5c <memset>
 8008ef6:	4b05      	ldr	r3, [pc, #20]	; (8008f0c <std+0x38>)
 8008ef8:	6224      	str	r4, [r4, #32]
 8008efa:	6263      	str	r3, [r4, #36]	; 0x24
 8008efc:	4b04      	ldr	r3, [pc, #16]	; (8008f10 <std+0x3c>)
 8008efe:	62a3      	str	r3, [r4, #40]	; 0x28
 8008f00:	4b04      	ldr	r3, [pc, #16]	; (8008f14 <std+0x40>)
 8008f02:	62e3      	str	r3, [r4, #44]	; 0x2c
 8008f04:	4b04      	ldr	r3, [pc, #16]	; (8008f18 <std+0x44>)
 8008f06:	6323      	str	r3, [r4, #48]	; 0x30
 8008f08:	bd10      	pop	{r4, pc}
 8008f0a:	bf00      	nop
 8008f0c:	08009225 	.word	0x08009225
 8008f10:	08009247 	.word	0x08009247
 8008f14:	0800927f 	.word	0x0800927f
 8008f18:	080092a3 	.word	0x080092a3

08008f1c <_cleanup_r>:
 8008f1c:	4901      	ldr	r1, [pc, #4]	; (8008f24 <_cleanup_r+0x8>)
 8008f1e:	f000 b8af 	b.w	8009080 <_fwalk_reent>
 8008f22:	bf00      	nop
 8008f24:	08008e5d 	.word	0x08008e5d

08008f28 <__sfmoreglue>:
 8008f28:	b570      	push	{r4, r5, r6, lr}
 8008f2a:	2568      	movs	r5, #104	; 0x68
 8008f2c:	1e4a      	subs	r2, r1, #1
 8008f2e:	4355      	muls	r5, r2
 8008f30:	460e      	mov	r6, r1
 8008f32:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8008f36:	f7ff fa83 	bl	8008440 <_malloc_r>
 8008f3a:	4604      	mov	r4, r0
 8008f3c:	b140      	cbz	r0, 8008f50 <__sfmoreglue+0x28>
 8008f3e:	2100      	movs	r1, #0
 8008f40:	e9c0 1600 	strd	r1, r6, [r0]
 8008f44:	300c      	adds	r0, #12
 8008f46:	60a0      	str	r0, [r4, #8]
 8008f48:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8008f4c:	f7fb fe06 	bl	8004b5c <memset>
 8008f50:	4620      	mov	r0, r4
 8008f52:	bd70      	pop	{r4, r5, r6, pc}

08008f54 <__sfp_lock_acquire>:
 8008f54:	4801      	ldr	r0, [pc, #4]	; (8008f5c <__sfp_lock_acquire+0x8>)
 8008f56:	f000 b8b3 	b.w	80090c0 <__retarget_lock_acquire_recursive>
 8008f5a:	bf00      	nop
 8008f5c:	200002f8 	.word	0x200002f8

08008f60 <__sfp_lock_release>:
 8008f60:	4801      	ldr	r0, [pc, #4]	; (8008f68 <__sfp_lock_release+0x8>)
 8008f62:	f000 b8ae 	b.w	80090c2 <__retarget_lock_release_recursive>
 8008f66:	bf00      	nop
 8008f68:	200002f8 	.word	0x200002f8

08008f6c <__sinit_lock_acquire>:
 8008f6c:	4801      	ldr	r0, [pc, #4]	; (8008f74 <__sinit_lock_acquire+0x8>)
 8008f6e:	f000 b8a7 	b.w	80090c0 <__retarget_lock_acquire_recursive>
 8008f72:	bf00      	nop
 8008f74:	200002f3 	.word	0x200002f3

08008f78 <__sinit_lock_release>:
 8008f78:	4801      	ldr	r0, [pc, #4]	; (8008f80 <__sinit_lock_release+0x8>)
 8008f7a:	f000 b8a2 	b.w	80090c2 <__retarget_lock_release_recursive>
 8008f7e:	bf00      	nop
 8008f80:	200002f3 	.word	0x200002f3

08008f84 <__sinit>:
 8008f84:	b510      	push	{r4, lr}
 8008f86:	4604      	mov	r4, r0
 8008f88:	f7ff fff0 	bl	8008f6c <__sinit_lock_acquire>
 8008f8c:	69a3      	ldr	r3, [r4, #24]
 8008f8e:	b11b      	cbz	r3, 8008f98 <__sinit+0x14>
 8008f90:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8008f94:	f7ff bff0 	b.w	8008f78 <__sinit_lock_release>
 8008f98:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8008f9c:	6523      	str	r3, [r4, #80]	; 0x50
 8008f9e:	4b13      	ldr	r3, [pc, #76]	; (8008fec <__sinit+0x68>)
 8008fa0:	4a13      	ldr	r2, [pc, #76]	; (8008ff0 <__sinit+0x6c>)
 8008fa2:	681b      	ldr	r3, [r3, #0]
 8008fa4:	62a2      	str	r2, [r4, #40]	; 0x28
 8008fa6:	42a3      	cmp	r3, r4
 8008fa8:	bf08      	it	eq
 8008faa:	2301      	moveq	r3, #1
 8008fac:	4620      	mov	r0, r4
 8008fae:	bf08      	it	eq
 8008fb0:	61a3      	streq	r3, [r4, #24]
 8008fb2:	f000 f81f 	bl	8008ff4 <__sfp>
 8008fb6:	6060      	str	r0, [r4, #4]
 8008fb8:	4620      	mov	r0, r4
 8008fba:	f000 f81b 	bl	8008ff4 <__sfp>
 8008fbe:	60a0      	str	r0, [r4, #8]
 8008fc0:	4620      	mov	r0, r4
 8008fc2:	f000 f817 	bl	8008ff4 <__sfp>
 8008fc6:	2200      	movs	r2, #0
 8008fc8:	2104      	movs	r1, #4
 8008fca:	60e0      	str	r0, [r4, #12]
 8008fcc:	6860      	ldr	r0, [r4, #4]
 8008fce:	f7ff ff81 	bl	8008ed4 <std>
 8008fd2:	2201      	movs	r2, #1
 8008fd4:	2109      	movs	r1, #9
 8008fd6:	68a0      	ldr	r0, [r4, #8]
 8008fd8:	f7ff ff7c 	bl	8008ed4 <std>
 8008fdc:	2202      	movs	r2, #2
 8008fde:	2112      	movs	r1, #18
 8008fe0:	68e0      	ldr	r0, [r4, #12]
 8008fe2:	f7ff ff77 	bl	8008ed4 <std>
 8008fe6:	2301      	movs	r3, #1
 8008fe8:	61a3      	str	r3, [r4, #24]
 8008fea:	e7d1      	b.n	8008f90 <__sinit+0xc>
 8008fec:	080093fc 	.word	0x080093fc
 8008ff0:	08008f1d 	.word	0x08008f1d

08008ff4 <__sfp>:
 8008ff4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008ff6:	4607      	mov	r7, r0
 8008ff8:	f7ff ffac 	bl	8008f54 <__sfp_lock_acquire>
 8008ffc:	4b1e      	ldr	r3, [pc, #120]	; (8009078 <__sfp+0x84>)
 8008ffe:	681e      	ldr	r6, [r3, #0]
 8009000:	69b3      	ldr	r3, [r6, #24]
 8009002:	b913      	cbnz	r3, 800900a <__sfp+0x16>
 8009004:	4630      	mov	r0, r6
 8009006:	f7ff ffbd 	bl	8008f84 <__sinit>
 800900a:	3648      	adds	r6, #72	; 0x48
 800900c:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8009010:	3b01      	subs	r3, #1
 8009012:	d503      	bpl.n	800901c <__sfp+0x28>
 8009014:	6833      	ldr	r3, [r6, #0]
 8009016:	b30b      	cbz	r3, 800905c <__sfp+0x68>
 8009018:	6836      	ldr	r6, [r6, #0]
 800901a:	e7f7      	b.n	800900c <__sfp+0x18>
 800901c:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8009020:	b9d5      	cbnz	r5, 8009058 <__sfp+0x64>
 8009022:	4b16      	ldr	r3, [pc, #88]	; (800907c <__sfp+0x88>)
 8009024:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8009028:	60e3      	str	r3, [r4, #12]
 800902a:	6665      	str	r5, [r4, #100]	; 0x64
 800902c:	f000 f847 	bl	80090be <__retarget_lock_init_recursive>
 8009030:	f7ff ff96 	bl	8008f60 <__sfp_lock_release>
 8009034:	2208      	movs	r2, #8
 8009036:	4629      	mov	r1, r5
 8009038:	e9c4 5501 	strd	r5, r5, [r4, #4]
 800903c:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8009040:	6025      	str	r5, [r4, #0]
 8009042:	61a5      	str	r5, [r4, #24]
 8009044:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8009048:	f7fb fd88 	bl	8004b5c <memset>
 800904c:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8009050:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8009054:	4620      	mov	r0, r4
 8009056:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8009058:	3468      	adds	r4, #104	; 0x68
 800905a:	e7d9      	b.n	8009010 <__sfp+0x1c>
 800905c:	2104      	movs	r1, #4
 800905e:	4638      	mov	r0, r7
 8009060:	f7ff ff62 	bl	8008f28 <__sfmoreglue>
 8009064:	4604      	mov	r4, r0
 8009066:	6030      	str	r0, [r6, #0]
 8009068:	2800      	cmp	r0, #0
 800906a:	d1d5      	bne.n	8009018 <__sfp+0x24>
 800906c:	f7ff ff78 	bl	8008f60 <__sfp_lock_release>
 8009070:	230c      	movs	r3, #12
 8009072:	603b      	str	r3, [r7, #0]
 8009074:	e7ee      	b.n	8009054 <__sfp+0x60>
 8009076:	bf00      	nop
 8009078:	080093fc 	.word	0x080093fc
 800907c:	ffff0001 	.word	0xffff0001

08009080 <_fwalk_reent>:
 8009080:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8009084:	4606      	mov	r6, r0
 8009086:	4688      	mov	r8, r1
 8009088:	2700      	movs	r7, #0
 800908a:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800908e:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8009092:	f1b9 0901 	subs.w	r9, r9, #1
 8009096:	d505      	bpl.n	80090a4 <_fwalk_reent+0x24>
 8009098:	6824      	ldr	r4, [r4, #0]
 800909a:	2c00      	cmp	r4, #0
 800909c:	d1f7      	bne.n	800908e <_fwalk_reent+0xe>
 800909e:	4638      	mov	r0, r7
 80090a0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80090a4:	89ab      	ldrh	r3, [r5, #12]
 80090a6:	2b01      	cmp	r3, #1
 80090a8:	d907      	bls.n	80090ba <_fwalk_reent+0x3a>
 80090aa:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80090ae:	3301      	adds	r3, #1
 80090b0:	d003      	beq.n	80090ba <_fwalk_reent+0x3a>
 80090b2:	4629      	mov	r1, r5
 80090b4:	4630      	mov	r0, r6
 80090b6:	47c0      	blx	r8
 80090b8:	4307      	orrs	r7, r0
 80090ba:	3568      	adds	r5, #104	; 0x68
 80090bc:	e7e9      	b.n	8009092 <_fwalk_reent+0x12>

080090be <__retarget_lock_init_recursive>:
 80090be:	4770      	bx	lr

080090c0 <__retarget_lock_acquire_recursive>:
 80090c0:	4770      	bx	lr

080090c2 <__retarget_lock_release_recursive>:
 80090c2:	4770      	bx	lr

080090c4 <__swhatbuf_r>:
 80090c4:	b570      	push	{r4, r5, r6, lr}
 80090c6:	460e      	mov	r6, r1
 80090c8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80090cc:	4614      	mov	r4, r2
 80090ce:	2900      	cmp	r1, #0
 80090d0:	461d      	mov	r5, r3
 80090d2:	b096      	sub	sp, #88	; 0x58
 80090d4:	da07      	bge.n	80090e6 <__swhatbuf_r+0x22>
 80090d6:	2300      	movs	r3, #0
 80090d8:	602b      	str	r3, [r5, #0]
 80090da:	89b3      	ldrh	r3, [r6, #12]
 80090dc:	061a      	lsls	r2, r3, #24
 80090de:	d410      	bmi.n	8009102 <__swhatbuf_r+0x3e>
 80090e0:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80090e4:	e00e      	b.n	8009104 <__swhatbuf_r+0x40>
 80090e6:	466a      	mov	r2, sp
 80090e8:	f000 f902 	bl	80092f0 <_fstat_r>
 80090ec:	2800      	cmp	r0, #0
 80090ee:	dbf2      	blt.n	80090d6 <__swhatbuf_r+0x12>
 80090f0:	9a01      	ldr	r2, [sp, #4]
 80090f2:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 80090f6:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 80090fa:	425a      	negs	r2, r3
 80090fc:	415a      	adcs	r2, r3
 80090fe:	602a      	str	r2, [r5, #0]
 8009100:	e7ee      	b.n	80090e0 <__swhatbuf_r+0x1c>
 8009102:	2340      	movs	r3, #64	; 0x40
 8009104:	2000      	movs	r0, #0
 8009106:	6023      	str	r3, [r4, #0]
 8009108:	b016      	add	sp, #88	; 0x58
 800910a:	bd70      	pop	{r4, r5, r6, pc}

0800910c <__smakebuf_r>:
 800910c:	898b      	ldrh	r3, [r1, #12]
 800910e:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8009110:	079d      	lsls	r5, r3, #30
 8009112:	4606      	mov	r6, r0
 8009114:	460c      	mov	r4, r1
 8009116:	d507      	bpl.n	8009128 <__smakebuf_r+0x1c>
 8009118:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800911c:	6023      	str	r3, [r4, #0]
 800911e:	6123      	str	r3, [r4, #16]
 8009120:	2301      	movs	r3, #1
 8009122:	6163      	str	r3, [r4, #20]
 8009124:	b002      	add	sp, #8
 8009126:	bd70      	pop	{r4, r5, r6, pc}
 8009128:	466a      	mov	r2, sp
 800912a:	ab01      	add	r3, sp, #4
 800912c:	f7ff ffca 	bl	80090c4 <__swhatbuf_r>
 8009130:	9900      	ldr	r1, [sp, #0]
 8009132:	4605      	mov	r5, r0
 8009134:	4630      	mov	r0, r6
 8009136:	f7ff f983 	bl	8008440 <_malloc_r>
 800913a:	b948      	cbnz	r0, 8009150 <__smakebuf_r+0x44>
 800913c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8009140:	059a      	lsls	r2, r3, #22
 8009142:	d4ef      	bmi.n	8009124 <__smakebuf_r+0x18>
 8009144:	f023 0303 	bic.w	r3, r3, #3
 8009148:	f043 0302 	orr.w	r3, r3, #2
 800914c:	81a3      	strh	r3, [r4, #12]
 800914e:	e7e3      	b.n	8009118 <__smakebuf_r+0xc>
 8009150:	4b0d      	ldr	r3, [pc, #52]	; (8009188 <__smakebuf_r+0x7c>)
 8009152:	62b3      	str	r3, [r6, #40]	; 0x28
 8009154:	89a3      	ldrh	r3, [r4, #12]
 8009156:	6020      	str	r0, [r4, #0]
 8009158:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800915c:	81a3      	strh	r3, [r4, #12]
 800915e:	9b00      	ldr	r3, [sp, #0]
 8009160:	6120      	str	r0, [r4, #16]
 8009162:	6163      	str	r3, [r4, #20]
 8009164:	9b01      	ldr	r3, [sp, #4]
 8009166:	b15b      	cbz	r3, 8009180 <__smakebuf_r+0x74>
 8009168:	4630      	mov	r0, r6
 800916a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800916e:	f000 f8d1 	bl	8009314 <_isatty_r>
 8009172:	b128      	cbz	r0, 8009180 <__smakebuf_r+0x74>
 8009174:	89a3      	ldrh	r3, [r4, #12]
 8009176:	f023 0303 	bic.w	r3, r3, #3
 800917a:	f043 0301 	orr.w	r3, r3, #1
 800917e:	81a3      	strh	r3, [r4, #12]
 8009180:	89a0      	ldrh	r0, [r4, #12]
 8009182:	4305      	orrs	r5, r0
 8009184:	81a5      	strh	r5, [r4, #12]
 8009186:	e7cd      	b.n	8009124 <__smakebuf_r+0x18>
 8009188:	08008f1d 	.word	0x08008f1d

0800918c <_malloc_usable_size_r>:
 800918c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8009190:	1f18      	subs	r0, r3, #4
 8009192:	2b00      	cmp	r3, #0
 8009194:	bfbc      	itt	lt
 8009196:	580b      	ldrlt	r3, [r1, r0]
 8009198:	18c0      	addlt	r0, r0, r3
 800919a:	4770      	bx	lr

0800919c <_raise_r>:
 800919c:	291f      	cmp	r1, #31
 800919e:	b538      	push	{r3, r4, r5, lr}
 80091a0:	4604      	mov	r4, r0
 80091a2:	460d      	mov	r5, r1
 80091a4:	d904      	bls.n	80091b0 <_raise_r+0x14>
 80091a6:	2316      	movs	r3, #22
 80091a8:	6003      	str	r3, [r0, #0]
 80091aa:	f04f 30ff 	mov.w	r0, #4294967295
 80091ae:	bd38      	pop	{r3, r4, r5, pc}
 80091b0:	6c42      	ldr	r2, [r0, #68]	; 0x44
 80091b2:	b112      	cbz	r2, 80091ba <_raise_r+0x1e>
 80091b4:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 80091b8:	b94b      	cbnz	r3, 80091ce <_raise_r+0x32>
 80091ba:	4620      	mov	r0, r4
 80091bc:	f000 f830 	bl	8009220 <_getpid_r>
 80091c0:	462a      	mov	r2, r5
 80091c2:	4601      	mov	r1, r0
 80091c4:	4620      	mov	r0, r4
 80091c6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80091ca:	f000 b817 	b.w	80091fc <_kill_r>
 80091ce:	2b01      	cmp	r3, #1
 80091d0:	d00a      	beq.n	80091e8 <_raise_r+0x4c>
 80091d2:	1c59      	adds	r1, r3, #1
 80091d4:	d103      	bne.n	80091de <_raise_r+0x42>
 80091d6:	2316      	movs	r3, #22
 80091d8:	6003      	str	r3, [r0, #0]
 80091da:	2001      	movs	r0, #1
 80091dc:	e7e7      	b.n	80091ae <_raise_r+0x12>
 80091de:	2400      	movs	r4, #0
 80091e0:	4628      	mov	r0, r5
 80091e2:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 80091e6:	4798      	blx	r3
 80091e8:	2000      	movs	r0, #0
 80091ea:	e7e0      	b.n	80091ae <_raise_r+0x12>

080091ec <raise>:
 80091ec:	4b02      	ldr	r3, [pc, #8]	; (80091f8 <raise+0xc>)
 80091ee:	4601      	mov	r1, r0
 80091f0:	6818      	ldr	r0, [r3, #0]
 80091f2:	f7ff bfd3 	b.w	800919c <_raise_r>
 80091f6:	bf00      	nop
 80091f8:	2000000c 	.word	0x2000000c

080091fc <_kill_r>:
 80091fc:	b538      	push	{r3, r4, r5, lr}
 80091fe:	2300      	movs	r3, #0
 8009200:	4d06      	ldr	r5, [pc, #24]	; (800921c <_kill_r+0x20>)
 8009202:	4604      	mov	r4, r0
 8009204:	4608      	mov	r0, r1
 8009206:	4611      	mov	r1, r2
 8009208:	602b      	str	r3, [r5, #0]
 800920a:	f7f8 fc3c 	bl	8001a86 <_kill>
 800920e:	1c43      	adds	r3, r0, #1
 8009210:	d102      	bne.n	8009218 <_kill_r+0x1c>
 8009212:	682b      	ldr	r3, [r5, #0]
 8009214:	b103      	cbz	r3, 8009218 <_kill_r+0x1c>
 8009216:	6023      	str	r3, [r4, #0]
 8009218:	bd38      	pop	{r3, r4, r5, pc}
 800921a:	bf00      	nop
 800921c:	200002ec 	.word	0x200002ec

08009220 <_getpid_r>:
 8009220:	f7f8 bc2a 	b.w	8001a78 <_getpid>

08009224 <__sread>:
 8009224:	b510      	push	{r4, lr}
 8009226:	460c      	mov	r4, r1
 8009228:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800922c:	f000 f894 	bl	8009358 <_read_r>
 8009230:	2800      	cmp	r0, #0
 8009232:	bfab      	itete	ge
 8009234:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8009236:	89a3      	ldrhlt	r3, [r4, #12]
 8009238:	181b      	addge	r3, r3, r0
 800923a:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800923e:	bfac      	ite	ge
 8009240:	6563      	strge	r3, [r4, #84]	; 0x54
 8009242:	81a3      	strhlt	r3, [r4, #12]
 8009244:	bd10      	pop	{r4, pc}

08009246 <__swrite>:
 8009246:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800924a:	461f      	mov	r7, r3
 800924c:	898b      	ldrh	r3, [r1, #12]
 800924e:	4605      	mov	r5, r0
 8009250:	05db      	lsls	r3, r3, #23
 8009252:	460c      	mov	r4, r1
 8009254:	4616      	mov	r6, r2
 8009256:	d505      	bpl.n	8009264 <__swrite+0x1e>
 8009258:	2302      	movs	r3, #2
 800925a:	2200      	movs	r2, #0
 800925c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009260:	f000 f868 	bl	8009334 <_lseek_r>
 8009264:	89a3      	ldrh	r3, [r4, #12]
 8009266:	4632      	mov	r2, r6
 8009268:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800926c:	81a3      	strh	r3, [r4, #12]
 800926e:	4628      	mov	r0, r5
 8009270:	463b      	mov	r3, r7
 8009272:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8009276:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800927a:	f000 b817 	b.w	80092ac <_write_r>

0800927e <__sseek>:
 800927e:	b510      	push	{r4, lr}
 8009280:	460c      	mov	r4, r1
 8009282:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009286:	f000 f855 	bl	8009334 <_lseek_r>
 800928a:	1c43      	adds	r3, r0, #1
 800928c:	89a3      	ldrh	r3, [r4, #12]
 800928e:	bf15      	itete	ne
 8009290:	6560      	strne	r0, [r4, #84]	; 0x54
 8009292:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8009296:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800929a:	81a3      	strheq	r3, [r4, #12]
 800929c:	bf18      	it	ne
 800929e:	81a3      	strhne	r3, [r4, #12]
 80092a0:	bd10      	pop	{r4, pc}

080092a2 <__sclose>:
 80092a2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80092a6:	f000 b813 	b.w	80092d0 <_close_r>
	...

080092ac <_write_r>:
 80092ac:	b538      	push	{r3, r4, r5, lr}
 80092ae:	4604      	mov	r4, r0
 80092b0:	4608      	mov	r0, r1
 80092b2:	4611      	mov	r1, r2
 80092b4:	2200      	movs	r2, #0
 80092b6:	4d05      	ldr	r5, [pc, #20]	; (80092cc <_write_r+0x20>)
 80092b8:	602a      	str	r2, [r5, #0]
 80092ba:	461a      	mov	r2, r3
 80092bc:	f7f8 fc1a 	bl	8001af4 <_write>
 80092c0:	1c43      	adds	r3, r0, #1
 80092c2:	d102      	bne.n	80092ca <_write_r+0x1e>
 80092c4:	682b      	ldr	r3, [r5, #0]
 80092c6:	b103      	cbz	r3, 80092ca <_write_r+0x1e>
 80092c8:	6023      	str	r3, [r4, #0]
 80092ca:	bd38      	pop	{r3, r4, r5, pc}
 80092cc:	200002ec 	.word	0x200002ec

080092d0 <_close_r>:
 80092d0:	b538      	push	{r3, r4, r5, lr}
 80092d2:	2300      	movs	r3, #0
 80092d4:	4d05      	ldr	r5, [pc, #20]	; (80092ec <_close_r+0x1c>)
 80092d6:	4604      	mov	r4, r0
 80092d8:	4608      	mov	r0, r1
 80092da:	602b      	str	r3, [r5, #0]
 80092dc:	f7f8 fc26 	bl	8001b2c <_close>
 80092e0:	1c43      	adds	r3, r0, #1
 80092e2:	d102      	bne.n	80092ea <_close_r+0x1a>
 80092e4:	682b      	ldr	r3, [r5, #0]
 80092e6:	b103      	cbz	r3, 80092ea <_close_r+0x1a>
 80092e8:	6023      	str	r3, [r4, #0]
 80092ea:	bd38      	pop	{r3, r4, r5, pc}
 80092ec:	200002ec 	.word	0x200002ec

080092f0 <_fstat_r>:
 80092f0:	b538      	push	{r3, r4, r5, lr}
 80092f2:	2300      	movs	r3, #0
 80092f4:	4d06      	ldr	r5, [pc, #24]	; (8009310 <_fstat_r+0x20>)
 80092f6:	4604      	mov	r4, r0
 80092f8:	4608      	mov	r0, r1
 80092fa:	4611      	mov	r1, r2
 80092fc:	602b      	str	r3, [r5, #0]
 80092fe:	f7f8 fc20 	bl	8001b42 <_fstat>
 8009302:	1c43      	adds	r3, r0, #1
 8009304:	d102      	bne.n	800930c <_fstat_r+0x1c>
 8009306:	682b      	ldr	r3, [r5, #0]
 8009308:	b103      	cbz	r3, 800930c <_fstat_r+0x1c>
 800930a:	6023      	str	r3, [r4, #0]
 800930c:	bd38      	pop	{r3, r4, r5, pc}
 800930e:	bf00      	nop
 8009310:	200002ec 	.word	0x200002ec

08009314 <_isatty_r>:
 8009314:	b538      	push	{r3, r4, r5, lr}
 8009316:	2300      	movs	r3, #0
 8009318:	4d05      	ldr	r5, [pc, #20]	; (8009330 <_isatty_r+0x1c>)
 800931a:	4604      	mov	r4, r0
 800931c:	4608      	mov	r0, r1
 800931e:	602b      	str	r3, [r5, #0]
 8009320:	f7f8 fc1e 	bl	8001b60 <_isatty>
 8009324:	1c43      	adds	r3, r0, #1
 8009326:	d102      	bne.n	800932e <_isatty_r+0x1a>
 8009328:	682b      	ldr	r3, [r5, #0]
 800932a:	b103      	cbz	r3, 800932e <_isatty_r+0x1a>
 800932c:	6023      	str	r3, [r4, #0]
 800932e:	bd38      	pop	{r3, r4, r5, pc}
 8009330:	200002ec 	.word	0x200002ec

08009334 <_lseek_r>:
 8009334:	b538      	push	{r3, r4, r5, lr}
 8009336:	4604      	mov	r4, r0
 8009338:	4608      	mov	r0, r1
 800933a:	4611      	mov	r1, r2
 800933c:	2200      	movs	r2, #0
 800933e:	4d05      	ldr	r5, [pc, #20]	; (8009354 <_lseek_r+0x20>)
 8009340:	602a      	str	r2, [r5, #0]
 8009342:	461a      	mov	r2, r3
 8009344:	f7f8 fc16 	bl	8001b74 <_lseek>
 8009348:	1c43      	adds	r3, r0, #1
 800934a:	d102      	bne.n	8009352 <_lseek_r+0x1e>
 800934c:	682b      	ldr	r3, [r5, #0]
 800934e:	b103      	cbz	r3, 8009352 <_lseek_r+0x1e>
 8009350:	6023      	str	r3, [r4, #0]
 8009352:	bd38      	pop	{r3, r4, r5, pc}
 8009354:	200002ec 	.word	0x200002ec

08009358 <_read_r>:
 8009358:	b538      	push	{r3, r4, r5, lr}
 800935a:	4604      	mov	r4, r0
 800935c:	4608      	mov	r0, r1
 800935e:	4611      	mov	r1, r2
 8009360:	2200      	movs	r2, #0
 8009362:	4d05      	ldr	r5, [pc, #20]	; (8009378 <_read_r+0x20>)
 8009364:	602a      	str	r2, [r5, #0]
 8009366:	461a      	mov	r2, r3
 8009368:	f7f8 fba7 	bl	8001aba <_read>
 800936c:	1c43      	adds	r3, r0, #1
 800936e:	d102      	bne.n	8009376 <_read_r+0x1e>
 8009370:	682b      	ldr	r3, [r5, #0]
 8009372:	b103      	cbz	r3, 8009376 <_read_r+0x1e>
 8009374:	6023      	str	r3, [r4, #0]
 8009376:	bd38      	pop	{r3, r4, r5, pc}
 8009378:	200002ec 	.word	0x200002ec

0800937c <_init>:
 800937c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800937e:	bf00      	nop
 8009380:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009382:	bc08      	pop	{r3}
 8009384:	469e      	mov	lr, r3
 8009386:	4770      	bx	lr

08009388 <_fini>:
 8009388:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800938a:	bf00      	nop
 800938c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800938e:	bc08      	pop	{r3}
 8009390:	469e      	mov	lr, r3
 8009392:	4770      	bx	lr
