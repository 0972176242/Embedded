
Project1.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000a3cc  08000110  08000110  00010110  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000064c  0800a4e0  0800a4e0  0001a4e0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800ab2c  0800ab2c  000201e0  2**0
                  CONTENTS
  4 .ARM          00000000  0800ab2c  0800ab2c  000201e0  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800ab2c  0800ab2c  000201e0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800ab2c  0800ab2c  0001ab2c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800ab30  0800ab30  0001ab30  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001e0  20000000  0800ab34  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000200  200001e0  0800ad14  000201e0  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200003e0  0800ad14  000203e0  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  000201e0  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001741b  00000000  00000000  00020209  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003329  00000000  00000000  00037624  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001220  00000000  00000000  0003a950  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001100  00000000  00000000  0003bb70  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001ace5  00000000  00000000  0003cc70  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00015ffe  00000000  00000000  00057955  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0009379c  00000000  00000000  0006d953  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  001010ef  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000614c  00000000  00000000  00101144  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	; (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	; (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	; (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	200001e0 	.word	0x200001e0
 800012c:	00000000 	.word	0x00000000
 8000130:	0800a4c4 	.word	0x0800a4c4

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	; (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	; (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	; (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	200001e4 	.word	0x200001e4
 800014c:	0800a4c4 	.word	0x0800a4c4

08000150 <strlen>:
 8000150:	4603      	mov	r3, r0
 8000152:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000156:	2a00      	cmp	r2, #0
 8000158:	d1fb      	bne.n	8000152 <strlen+0x2>
 800015a:	1a18      	subs	r0, r3, r0
 800015c:	3801      	subs	r0, #1
 800015e:	4770      	bx	lr

08000160 <__aeabi_drsub>:
 8000160:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000164:	e002      	b.n	800016c <__adddf3>
 8000166:	bf00      	nop

08000168 <__aeabi_dsub>:
 8000168:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800016c <__adddf3>:
 800016c:	b530      	push	{r4, r5, lr}
 800016e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000172:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000176:	ea94 0f05 	teq	r4, r5
 800017a:	bf08      	it	eq
 800017c:	ea90 0f02 	teqeq	r0, r2
 8000180:	bf1f      	itttt	ne
 8000182:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000186:	ea55 0c02 	orrsne.w	ip, r5, r2
 800018a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800018e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000192:	f000 80e2 	beq.w	800035a <__adddf3+0x1ee>
 8000196:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800019a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800019e:	bfb8      	it	lt
 80001a0:	426d      	neglt	r5, r5
 80001a2:	dd0c      	ble.n	80001be <__adddf3+0x52>
 80001a4:	442c      	add	r4, r5
 80001a6:	ea80 0202 	eor.w	r2, r0, r2
 80001aa:	ea81 0303 	eor.w	r3, r1, r3
 80001ae:	ea82 0000 	eor.w	r0, r2, r0
 80001b2:	ea83 0101 	eor.w	r1, r3, r1
 80001b6:	ea80 0202 	eor.w	r2, r0, r2
 80001ba:	ea81 0303 	eor.w	r3, r1, r3
 80001be:	2d36      	cmp	r5, #54	; 0x36
 80001c0:	bf88      	it	hi
 80001c2:	bd30      	pophi	{r4, r5, pc}
 80001c4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80001c8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80001cc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80001d0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80001d4:	d002      	beq.n	80001dc <__adddf3+0x70>
 80001d6:	4240      	negs	r0, r0
 80001d8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80001dc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80001e0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80001e4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80001e8:	d002      	beq.n	80001f0 <__adddf3+0x84>
 80001ea:	4252      	negs	r2, r2
 80001ec:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80001f0:	ea94 0f05 	teq	r4, r5
 80001f4:	f000 80a7 	beq.w	8000346 <__adddf3+0x1da>
 80001f8:	f1a4 0401 	sub.w	r4, r4, #1
 80001fc:	f1d5 0e20 	rsbs	lr, r5, #32
 8000200:	db0d      	blt.n	800021e <__adddf3+0xb2>
 8000202:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000206:	fa22 f205 	lsr.w	r2, r2, r5
 800020a:	1880      	adds	r0, r0, r2
 800020c:	f141 0100 	adc.w	r1, r1, #0
 8000210:	fa03 f20e 	lsl.w	r2, r3, lr
 8000214:	1880      	adds	r0, r0, r2
 8000216:	fa43 f305 	asr.w	r3, r3, r5
 800021a:	4159      	adcs	r1, r3
 800021c:	e00e      	b.n	800023c <__adddf3+0xd0>
 800021e:	f1a5 0520 	sub.w	r5, r5, #32
 8000222:	f10e 0e20 	add.w	lr, lr, #32
 8000226:	2a01      	cmp	r2, #1
 8000228:	fa03 fc0e 	lsl.w	ip, r3, lr
 800022c:	bf28      	it	cs
 800022e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000232:	fa43 f305 	asr.w	r3, r3, r5
 8000236:	18c0      	adds	r0, r0, r3
 8000238:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800023c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000240:	d507      	bpl.n	8000252 <__adddf3+0xe6>
 8000242:	f04f 0e00 	mov.w	lr, #0
 8000246:	f1dc 0c00 	rsbs	ip, ip, #0
 800024a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800024e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000252:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000256:	d31b      	bcc.n	8000290 <__adddf3+0x124>
 8000258:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800025c:	d30c      	bcc.n	8000278 <__adddf3+0x10c>
 800025e:	0849      	lsrs	r1, r1, #1
 8000260:	ea5f 0030 	movs.w	r0, r0, rrx
 8000264:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000268:	f104 0401 	add.w	r4, r4, #1
 800026c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000270:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000274:	f080 809a 	bcs.w	80003ac <__adddf3+0x240>
 8000278:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800027c:	bf08      	it	eq
 800027e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000282:	f150 0000 	adcs.w	r0, r0, #0
 8000286:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800028a:	ea41 0105 	orr.w	r1, r1, r5
 800028e:	bd30      	pop	{r4, r5, pc}
 8000290:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000294:	4140      	adcs	r0, r0
 8000296:	eb41 0101 	adc.w	r1, r1, r1
 800029a:	3c01      	subs	r4, #1
 800029c:	bf28      	it	cs
 800029e:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80002a2:	d2e9      	bcs.n	8000278 <__adddf3+0x10c>
 80002a4:	f091 0f00 	teq	r1, #0
 80002a8:	bf04      	itt	eq
 80002aa:	4601      	moveq	r1, r0
 80002ac:	2000      	moveq	r0, #0
 80002ae:	fab1 f381 	clz	r3, r1
 80002b2:	bf08      	it	eq
 80002b4:	3320      	addeq	r3, #32
 80002b6:	f1a3 030b 	sub.w	r3, r3, #11
 80002ba:	f1b3 0220 	subs.w	r2, r3, #32
 80002be:	da0c      	bge.n	80002da <__adddf3+0x16e>
 80002c0:	320c      	adds	r2, #12
 80002c2:	dd08      	ble.n	80002d6 <__adddf3+0x16a>
 80002c4:	f102 0c14 	add.w	ip, r2, #20
 80002c8:	f1c2 020c 	rsb	r2, r2, #12
 80002cc:	fa01 f00c 	lsl.w	r0, r1, ip
 80002d0:	fa21 f102 	lsr.w	r1, r1, r2
 80002d4:	e00c      	b.n	80002f0 <__adddf3+0x184>
 80002d6:	f102 0214 	add.w	r2, r2, #20
 80002da:	bfd8      	it	le
 80002dc:	f1c2 0c20 	rsble	ip, r2, #32
 80002e0:	fa01 f102 	lsl.w	r1, r1, r2
 80002e4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80002e8:	bfdc      	itt	le
 80002ea:	ea41 010c 	orrle.w	r1, r1, ip
 80002ee:	4090      	lslle	r0, r2
 80002f0:	1ae4      	subs	r4, r4, r3
 80002f2:	bfa2      	ittt	ge
 80002f4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80002f8:	4329      	orrge	r1, r5
 80002fa:	bd30      	popge	{r4, r5, pc}
 80002fc:	ea6f 0404 	mvn.w	r4, r4
 8000300:	3c1f      	subs	r4, #31
 8000302:	da1c      	bge.n	800033e <__adddf3+0x1d2>
 8000304:	340c      	adds	r4, #12
 8000306:	dc0e      	bgt.n	8000326 <__adddf3+0x1ba>
 8000308:	f104 0414 	add.w	r4, r4, #20
 800030c:	f1c4 0220 	rsb	r2, r4, #32
 8000310:	fa20 f004 	lsr.w	r0, r0, r4
 8000314:	fa01 f302 	lsl.w	r3, r1, r2
 8000318:	ea40 0003 	orr.w	r0, r0, r3
 800031c:	fa21 f304 	lsr.w	r3, r1, r4
 8000320:	ea45 0103 	orr.w	r1, r5, r3
 8000324:	bd30      	pop	{r4, r5, pc}
 8000326:	f1c4 040c 	rsb	r4, r4, #12
 800032a:	f1c4 0220 	rsb	r2, r4, #32
 800032e:	fa20 f002 	lsr.w	r0, r0, r2
 8000332:	fa01 f304 	lsl.w	r3, r1, r4
 8000336:	ea40 0003 	orr.w	r0, r0, r3
 800033a:	4629      	mov	r1, r5
 800033c:	bd30      	pop	{r4, r5, pc}
 800033e:	fa21 f004 	lsr.w	r0, r1, r4
 8000342:	4629      	mov	r1, r5
 8000344:	bd30      	pop	{r4, r5, pc}
 8000346:	f094 0f00 	teq	r4, #0
 800034a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800034e:	bf06      	itte	eq
 8000350:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000354:	3401      	addeq	r4, #1
 8000356:	3d01      	subne	r5, #1
 8000358:	e74e      	b.n	80001f8 <__adddf3+0x8c>
 800035a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800035e:	bf18      	it	ne
 8000360:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000364:	d029      	beq.n	80003ba <__adddf3+0x24e>
 8000366:	ea94 0f05 	teq	r4, r5
 800036a:	bf08      	it	eq
 800036c:	ea90 0f02 	teqeq	r0, r2
 8000370:	d005      	beq.n	800037e <__adddf3+0x212>
 8000372:	ea54 0c00 	orrs.w	ip, r4, r0
 8000376:	bf04      	itt	eq
 8000378:	4619      	moveq	r1, r3
 800037a:	4610      	moveq	r0, r2
 800037c:	bd30      	pop	{r4, r5, pc}
 800037e:	ea91 0f03 	teq	r1, r3
 8000382:	bf1e      	ittt	ne
 8000384:	2100      	movne	r1, #0
 8000386:	2000      	movne	r0, #0
 8000388:	bd30      	popne	{r4, r5, pc}
 800038a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800038e:	d105      	bne.n	800039c <__adddf3+0x230>
 8000390:	0040      	lsls	r0, r0, #1
 8000392:	4149      	adcs	r1, r1
 8000394:	bf28      	it	cs
 8000396:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800039a:	bd30      	pop	{r4, r5, pc}
 800039c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80003a0:	bf3c      	itt	cc
 80003a2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80003a6:	bd30      	popcc	{r4, r5, pc}
 80003a8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003ac:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80003b0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80003b4:	f04f 0000 	mov.w	r0, #0
 80003b8:	bd30      	pop	{r4, r5, pc}
 80003ba:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003be:	bf1a      	itte	ne
 80003c0:	4619      	movne	r1, r3
 80003c2:	4610      	movne	r0, r2
 80003c4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80003c8:	bf1c      	itt	ne
 80003ca:	460b      	movne	r3, r1
 80003cc:	4602      	movne	r2, r0
 80003ce:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80003d2:	bf06      	itte	eq
 80003d4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80003d8:	ea91 0f03 	teqeq	r1, r3
 80003dc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80003e0:	bd30      	pop	{r4, r5, pc}
 80003e2:	bf00      	nop

080003e4 <__aeabi_ui2d>:
 80003e4:	f090 0f00 	teq	r0, #0
 80003e8:	bf04      	itt	eq
 80003ea:	2100      	moveq	r1, #0
 80003ec:	4770      	bxeq	lr
 80003ee:	b530      	push	{r4, r5, lr}
 80003f0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80003f4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80003f8:	f04f 0500 	mov.w	r5, #0
 80003fc:	f04f 0100 	mov.w	r1, #0
 8000400:	e750      	b.n	80002a4 <__adddf3+0x138>
 8000402:	bf00      	nop

08000404 <__aeabi_i2d>:
 8000404:	f090 0f00 	teq	r0, #0
 8000408:	bf04      	itt	eq
 800040a:	2100      	moveq	r1, #0
 800040c:	4770      	bxeq	lr
 800040e:	b530      	push	{r4, r5, lr}
 8000410:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000414:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000418:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800041c:	bf48      	it	mi
 800041e:	4240      	negmi	r0, r0
 8000420:	f04f 0100 	mov.w	r1, #0
 8000424:	e73e      	b.n	80002a4 <__adddf3+0x138>
 8000426:	bf00      	nop

08000428 <__aeabi_f2d>:
 8000428:	0042      	lsls	r2, r0, #1
 800042a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800042e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000432:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000436:	bf1f      	itttt	ne
 8000438:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800043c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000440:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000444:	4770      	bxne	lr
 8000446:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800044a:	bf08      	it	eq
 800044c:	4770      	bxeq	lr
 800044e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000452:	bf04      	itt	eq
 8000454:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000458:	4770      	bxeq	lr
 800045a:	b530      	push	{r4, r5, lr}
 800045c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000460:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000464:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000468:	e71c      	b.n	80002a4 <__adddf3+0x138>
 800046a:	bf00      	nop

0800046c <__aeabi_ul2d>:
 800046c:	ea50 0201 	orrs.w	r2, r0, r1
 8000470:	bf08      	it	eq
 8000472:	4770      	bxeq	lr
 8000474:	b530      	push	{r4, r5, lr}
 8000476:	f04f 0500 	mov.w	r5, #0
 800047a:	e00a      	b.n	8000492 <__aeabi_l2d+0x16>

0800047c <__aeabi_l2d>:
 800047c:	ea50 0201 	orrs.w	r2, r0, r1
 8000480:	bf08      	it	eq
 8000482:	4770      	bxeq	lr
 8000484:	b530      	push	{r4, r5, lr}
 8000486:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800048a:	d502      	bpl.n	8000492 <__aeabi_l2d+0x16>
 800048c:	4240      	negs	r0, r0
 800048e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000492:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000496:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800049a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800049e:	f43f aed8 	beq.w	8000252 <__adddf3+0xe6>
 80004a2:	f04f 0203 	mov.w	r2, #3
 80004a6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004aa:	bf18      	it	ne
 80004ac:	3203      	addne	r2, #3
 80004ae:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004b2:	bf18      	it	ne
 80004b4:	3203      	addne	r2, #3
 80004b6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80004ba:	f1c2 0320 	rsb	r3, r2, #32
 80004be:	fa00 fc03 	lsl.w	ip, r0, r3
 80004c2:	fa20 f002 	lsr.w	r0, r0, r2
 80004c6:	fa01 fe03 	lsl.w	lr, r1, r3
 80004ca:	ea40 000e 	orr.w	r0, r0, lr
 80004ce:	fa21 f102 	lsr.w	r1, r1, r2
 80004d2:	4414      	add	r4, r2
 80004d4:	e6bd      	b.n	8000252 <__adddf3+0xe6>
 80004d6:	bf00      	nop

080004d8 <__aeabi_dmul>:
 80004d8:	b570      	push	{r4, r5, r6, lr}
 80004da:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80004de:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80004e2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80004e6:	bf1d      	ittte	ne
 80004e8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80004ec:	ea94 0f0c 	teqne	r4, ip
 80004f0:	ea95 0f0c 	teqne	r5, ip
 80004f4:	f000 f8de 	bleq	80006b4 <__aeabi_dmul+0x1dc>
 80004f8:	442c      	add	r4, r5
 80004fa:	ea81 0603 	eor.w	r6, r1, r3
 80004fe:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000502:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000506:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800050a:	bf18      	it	ne
 800050c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000510:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000514:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000518:	d038      	beq.n	800058c <__aeabi_dmul+0xb4>
 800051a:	fba0 ce02 	umull	ip, lr, r0, r2
 800051e:	f04f 0500 	mov.w	r5, #0
 8000522:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000526:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800052a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800052e:	f04f 0600 	mov.w	r6, #0
 8000532:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000536:	f09c 0f00 	teq	ip, #0
 800053a:	bf18      	it	ne
 800053c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000540:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000544:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000548:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800054c:	d204      	bcs.n	8000558 <__aeabi_dmul+0x80>
 800054e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000552:	416d      	adcs	r5, r5
 8000554:	eb46 0606 	adc.w	r6, r6, r6
 8000558:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800055c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000560:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000564:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000568:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800056c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000570:	bf88      	it	hi
 8000572:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000576:	d81e      	bhi.n	80005b6 <__aeabi_dmul+0xde>
 8000578:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800057c:	bf08      	it	eq
 800057e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000582:	f150 0000 	adcs.w	r0, r0, #0
 8000586:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800058a:	bd70      	pop	{r4, r5, r6, pc}
 800058c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000590:	ea46 0101 	orr.w	r1, r6, r1
 8000594:	ea40 0002 	orr.w	r0, r0, r2
 8000598:	ea81 0103 	eor.w	r1, r1, r3
 800059c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80005a0:	bfc2      	ittt	gt
 80005a2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80005a6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80005aa:	bd70      	popgt	{r4, r5, r6, pc}
 80005ac:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005b0:	f04f 0e00 	mov.w	lr, #0
 80005b4:	3c01      	subs	r4, #1
 80005b6:	f300 80ab 	bgt.w	8000710 <__aeabi_dmul+0x238>
 80005ba:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80005be:	bfde      	ittt	le
 80005c0:	2000      	movle	r0, #0
 80005c2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80005c6:	bd70      	pople	{r4, r5, r6, pc}
 80005c8:	f1c4 0400 	rsb	r4, r4, #0
 80005cc:	3c20      	subs	r4, #32
 80005ce:	da35      	bge.n	800063c <__aeabi_dmul+0x164>
 80005d0:	340c      	adds	r4, #12
 80005d2:	dc1b      	bgt.n	800060c <__aeabi_dmul+0x134>
 80005d4:	f104 0414 	add.w	r4, r4, #20
 80005d8:	f1c4 0520 	rsb	r5, r4, #32
 80005dc:	fa00 f305 	lsl.w	r3, r0, r5
 80005e0:	fa20 f004 	lsr.w	r0, r0, r4
 80005e4:	fa01 f205 	lsl.w	r2, r1, r5
 80005e8:	ea40 0002 	orr.w	r0, r0, r2
 80005ec:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80005f0:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005f4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80005f8:	fa21 f604 	lsr.w	r6, r1, r4
 80005fc:	eb42 0106 	adc.w	r1, r2, r6
 8000600:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000604:	bf08      	it	eq
 8000606:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800060a:	bd70      	pop	{r4, r5, r6, pc}
 800060c:	f1c4 040c 	rsb	r4, r4, #12
 8000610:	f1c4 0520 	rsb	r5, r4, #32
 8000614:	fa00 f304 	lsl.w	r3, r0, r4
 8000618:	fa20 f005 	lsr.w	r0, r0, r5
 800061c:	fa01 f204 	lsl.w	r2, r1, r4
 8000620:	ea40 0002 	orr.w	r0, r0, r2
 8000624:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000628:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800062c:	f141 0100 	adc.w	r1, r1, #0
 8000630:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000634:	bf08      	it	eq
 8000636:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800063a:	bd70      	pop	{r4, r5, r6, pc}
 800063c:	f1c4 0520 	rsb	r5, r4, #32
 8000640:	fa00 f205 	lsl.w	r2, r0, r5
 8000644:	ea4e 0e02 	orr.w	lr, lr, r2
 8000648:	fa20 f304 	lsr.w	r3, r0, r4
 800064c:	fa01 f205 	lsl.w	r2, r1, r5
 8000650:	ea43 0302 	orr.w	r3, r3, r2
 8000654:	fa21 f004 	lsr.w	r0, r1, r4
 8000658:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800065c:	fa21 f204 	lsr.w	r2, r1, r4
 8000660:	ea20 0002 	bic.w	r0, r0, r2
 8000664:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000668:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800066c:	bf08      	it	eq
 800066e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000672:	bd70      	pop	{r4, r5, r6, pc}
 8000674:	f094 0f00 	teq	r4, #0
 8000678:	d10f      	bne.n	800069a <__aeabi_dmul+0x1c2>
 800067a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800067e:	0040      	lsls	r0, r0, #1
 8000680:	eb41 0101 	adc.w	r1, r1, r1
 8000684:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000688:	bf08      	it	eq
 800068a:	3c01      	subeq	r4, #1
 800068c:	d0f7      	beq.n	800067e <__aeabi_dmul+0x1a6>
 800068e:	ea41 0106 	orr.w	r1, r1, r6
 8000692:	f095 0f00 	teq	r5, #0
 8000696:	bf18      	it	ne
 8000698:	4770      	bxne	lr
 800069a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800069e:	0052      	lsls	r2, r2, #1
 80006a0:	eb43 0303 	adc.w	r3, r3, r3
 80006a4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80006a8:	bf08      	it	eq
 80006aa:	3d01      	subeq	r5, #1
 80006ac:	d0f7      	beq.n	800069e <__aeabi_dmul+0x1c6>
 80006ae:	ea43 0306 	orr.w	r3, r3, r6
 80006b2:	4770      	bx	lr
 80006b4:	ea94 0f0c 	teq	r4, ip
 80006b8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80006bc:	bf18      	it	ne
 80006be:	ea95 0f0c 	teqne	r5, ip
 80006c2:	d00c      	beq.n	80006de <__aeabi_dmul+0x206>
 80006c4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006c8:	bf18      	it	ne
 80006ca:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ce:	d1d1      	bne.n	8000674 <__aeabi_dmul+0x19c>
 80006d0:	ea81 0103 	eor.w	r1, r1, r3
 80006d4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006d8:	f04f 0000 	mov.w	r0, #0
 80006dc:	bd70      	pop	{r4, r5, r6, pc}
 80006de:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006e2:	bf06      	itte	eq
 80006e4:	4610      	moveq	r0, r2
 80006e6:	4619      	moveq	r1, r3
 80006e8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ec:	d019      	beq.n	8000722 <__aeabi_dmul+0x24a>
 80006ee:	ea94 0f0c 	teq	r4, ip
 80006f2:	d102      	bne.n	80006fa <__aeabi_dmul+0x222>
 80006f4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80006f8:	d113      	bne.n	8000722 <__aeabi_dmul+0x24a>
 80006fa:	ea95 0f0c 	teq	r5, ip
 80006fe:	d105      	bne.n	800070c <__aeabi_dmul+0x234>
 8000700:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000704:	bf1c      	itt	ne
 8000706:	4610      	movne	r0, r2
 8000708:	4619      	movne	r1, r3
 800070a:	d10a      	bne.n	8000722 <__aeabi_dmul+0x24a>
 800070c:	ea81 0103 	eor.w	r1, r1, r3
 8000710:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000714:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000718:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800071c:	f04f 0000 	mov.w	r0, #0
 8000720:	bd70      	pop	{r4, r5, r6, pc}
 8000722:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000726:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800072a:	bd70      	pop	{r4, r5, r6, pc}

0800072c <__aeabi_ddiv>:
 800072c:	b570      	push	{r4, r5, r6, lr}
 800072e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000732:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000736:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800073a:	bf1d      	ittte	ne
 800073c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000740:	ea94 0f0c 	teqne	r4, ip
 8000744:	ea95 0f0c 	teqne	r5, ip
 8000748:	f000 f8a7 	bleq	800089a <__aeabi_ddiv+0x16e>
 800074c:	eba4 0405 	sub.w	r4, r4, r5
 8000750:	ea81 0e03 	eor.w	lr, r1, r3
 8000754:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000758:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800075c:	f000 8088 	beq.w	8000870 <__aeabi_ddiv+0x144>
 8000760:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000764:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000768:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800076c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000770:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000774:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000778:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800077c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000780:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000784:	429d      	cmp	r5, r3
 8000786:	bf08      	it	eq
 8000788:	4296      	cmpeq	r6, r2
 800078a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 800078e:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000792:	d202      	bcs.n	800079a <__aeabi_ddiv+0x6e>
 8000794:	085b      	lsrs	r3, r3, #1
 8000796:	ea4f 0232 	mov.w	r2, r2, rrx
 800079a:	1ab6      	subs	r6, r6, r2
 800079c:	eb65 0503 	sbc.w	r5, r5, r3
 80007a0:	085b      	lsrs	r3, r3, #1
 80007a2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007a6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80007aa:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80007ae:	ebb6 0e02 	subs.w	lr, r6, r2
 80007b2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007b6:	bf22      	ittt	cs
 80007b8:	1ab6      	subcs	r6, r6, r2
 80007ba:	4675      	movcs	r5, lr
 80007bc:	ea40 000c 	orrcs.w	r0, r0, ip
 80007c0:	085b      	lsrs	r3, r3, #1
 80007c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007c6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007ca:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007ce:	bf22      	ittt	cs
 80007d0:	1ab6      	subcs	r6, r6, r2
 80007d2:	4675      	movcs	r5, lr
 80007d4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80007d8:	085b      	lsrs	r3, r3, #1
 80007da:	ea4f 0232 	mov.w	r2, r2, rrx
 80007de:	ebb6 0e02 	subs.w	lr, r6, r2
 80007e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007e6:	bf22      	ittt	cs
 80007e8:	1ab6      	subcs	r6, r6, r2
 80007ea:	4675      	movcs	r5, lr
 80007ec:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80007f0:	085b      	lsrs	r3, r3, #1
 80007f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007fe:	bf22      	ittt	cs
 8000800:	1ab6      	subcs	r6, r6, r2
 8000802:	4675      	movcs	r5, lr
 8000804:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000808:	ea55 0e06 	orrs.w	lr, r5, r6
 800080c:	d018      	beq.n	8000840 <__aeabi_ddiv+0x114>
 800080e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000812:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000816:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800081a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800081e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000822:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000826:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800082a:	d1c0      	bne.n	80007ae <__aeabi_ddiv+0x82>
 800082c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000830:	d10b      	bne.n	800084a <__aeabi_ddiv+0x11e>
 8000832:	ea41 0100 	orr.w	r1, r1, r0
 8000836:	f04f 0000 	mov.w	r0, #0
 800083a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800083e:	e7b6      	b.n	80007ae <__aeabi_ddiv+0x82>
 8000840:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000844:	bf04      	itt	eq
 8000846:	4301      	orreq	r1, r0
 8000848:	2000      	moveq	r0, #0
 800084a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800084e:	bf88      	it	hi
 8000850:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000854:	f63f aeaf 	bhi.w	80005b6 <__aeabi_dmul+0xde>
 8000858:	ebb5 0c03 	subs.w	ip, r5, r3
 800085c:	bf04      	itt	eq
 800085e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000862:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000866:	f150 0000 	adcs.w	r0, r0, #0
 800086a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800086e:	bd70      	pop	{r4, r5, r6, pc}
 8000870:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000874:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000878:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800087c:	bfc2      	ittt	gt
 800087e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000882:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000886:	bd70      	popgt	{r4, r5, r6, pc}
 8000888:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800088c:	f04f 0e00 	mov.w	lr, #0
 8000890:	3c01      	subs	r4, #1
 8000892:	e690      	b.n	80005b6 <__aeabi_dmul+0xde>
 8000894:	ea45 0e06 	orr.w	lr, r5, r6
 8000898:	e68d      	b.n	80005b6 <__aeabi_dmul+0xde>
 800089a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800089e:	ea94 0f0c 	teq	r4, ip
 80008a2:	bf08      	it	eq
 80008a4:	ea95 0f0c 	teqeq	r5, ip
 80008a8:	f43f af3b 	beq.w	8000722 <__aeabi_dmul+0x24a>
 80008ac:	ea94 0f0c 	teq	r4, ip
 80008b0:	d10a      	bne.n	80008c8 <__aeabi_ddiv+0x19c>
 80008b2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80008b6:	f47f af34 	bne.w	8000722 <__aeabi_dmul+0x24a>
 80008ba:	ea95 0f0c 	teq	r5, ip
 80008be:	f47f af25 	bne.w	800070c <__aeabi_dmul+0x234>
 80008c2:	4610      	mov	r0, r2
 80008c4:	4619      	mov	r1, r3
 80008c6:	e72c      	b.n	8000722 <__aeabi_dmul+0x24a>
 80008c8:	ea95 0f0c 	teq	r5, ip
 80008cc:	d106      	bne.n	80008dc <__aeabi_ddiv+0x1b0>
 80008ce:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008d2:	f43f aefd 	beq.w	80006d0 <__aeabi_dmul+0x1f8>
 80008d6:	4610      	mov	r0, r2
 80008d8:	4619      	mov	r1, r3
 80008da:	e722      	b.n	8000722 <__aeabi_dmul+0x24a>
 80008dc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80008e0:	bf18      	it	ne
 80008e2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80008e6:	f47f aec5 	bne.w	8000674 <__aeabi_dmul+0x19c>
 80008ea:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80008ee:	f47f af0d 	bne.w	800070c <__aeabi_dmul+0x234>
 80008f2:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80008f6:	f47f aeeb 	bne.w	80006d0 <__aeabi_dmul+0x1f8>
 80008fa:	e712      	b.n	8000722 <__aeabi_dmul+0x24a>

080008fc <__gedf2>:
 80008fc:	f04f 3cff 	mov.w	ip, #4294967295
 8000900:	e006      	b.n	8000910 <__cmpdf2+0x4>
 8000902:	bf00      	nop

08000904 <__ledf2>:
 8000904:	f04f 0c01 	mov.w	ip, #1
 8000908:	e002      	b.n	8000910 <__cmpdf2+0x4>
 800090a:	bf00      	nop

0800090c <__cmpdf2>:
 800090c:	f04f 0c01 	mov.w	ip, #1
 8000910:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000914:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000918:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 800091c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000920:	bf18      	it	ne
 8000922:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000926:	d01b      	beq.n	8000960 <__cmpdf2+0x54>
 8000928:	b001      	add	sp, #4
 800092a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 800092e:	bf0c      	ite	eq
 8000930:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000934:	ea91 0f03 	teqne	r1, r3
 8000938:	bf02      	ittt	eq
 800093a:	ea90 0f02 	teqeq	r0, r2
 800093e:	2000      	moveq	r0, #0
 8000940:	4770      	bxeq	lr
 8000942:	f110 0f00 	cmn.w	r0, #0
 8000946:	ea91 0f03 	teq	r1, r3
 800094a:	bf58      	it	pl
 800094c:	4299      	cmppl	r1, r3
 800094e:	bf08      	it	eq
 8000950:	4290      	cmpeq	r0, r2
 8000952:	bf2c      	ite	cs
 8000954:	17d8      	asrcs	r0, r3, #31
 8000956:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 800095a:	f040 0001 	orr.w	r0, r0, #1
 800095e:	4770      	bx	lr
 8000960:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000964:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000968:	d102      	bne.n	8000970 <__cmpdf2+0x64>
 800096a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 800096e:	d107      	bne.n	8000980 <__cmpdf2+0x74>
 8000970:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000974:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000978:	d1d6      	bne.n	8000928 <__cmpdf2+0x1c>
 800097a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 800097e:	d0d3      	beq.n	8000928 <__cmpdf2+0x1c>
 8000980:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000984:	4770      	bx	lr
 8000986:	bf00      	nop

08000988 <__aeabi_cdrcmple>:
 8000988:	4684      	mov	ip, r0
 800098a:	4610      	mov	r0, r2
 800098c:	4662      	mov	r2, ip
 800098e:	468c      	mov	ip, r1
 8000990:	4619      	mov	r1, r3
 8000992:	4663      	mov	r3, ip
 8000994:	e000      	b.n	8000998 <__aeabi_cdcmpeq>
 8000996:	bf00      	nop

08000998 <__aeabi_cdcmpeq>:
 8000998:	b501      	push	{r0, lr}
 800099a:	f7ff ffb7 	bl	800090c <__cmpdf2>
 800099e:	2800      	cmp	r0, #0
 80009a0:	bf48      	it	mi
 80009a2:	f110 0f00 	cmnmi.w	r0, #0
 80009a6:	bd01      	pop	{r0, pc}

080009a8 <__aeabi_dcmpeq>:
 80009a8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009ac:	f7ff fff4 	bl	8000998 <__aeabi_cdcmpeq>
 80009b0:	bf0c      	ite	eq
 80009b2:	2001      	moveq	r0, #1
 80009b4:	2000      	movne	r0, #0
 80009b6:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ba:	bf00      	nop

080009bc <__aeabi_dcmplt>:
 80009bc:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009c0:	f7ff ffea 	bl	8000998 <__aeabi_cdcmpeq>
 80009c4:	bf34      	ite	cc
 80009c6:	2001      	movcc	r0, #1
 80009c8:	2000      	movcs	r0, #0
 80009ca:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ce:	bf00      	nop

080009d0 <__aeabi_dcmple>:
 80009d0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009d4:	f7ff ffe0 	bl	8000998 <__aeabi_cdcmpeq>
 80009d8:	bf94      	ite	ls
 80009da:	2001      	movls	r0, #1
 80009dc:	2000      	movhi	r0, #0
 80009de:	f85d fb08 	ldr.w	pc, [sp], #8
 80009e2:	bf00      	nop

080009e4 <__aeabi_dcmpge>:
 80009e4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009e8:	f7ff ffce 	bl	8000988 <__aeabi_cdrcmple>
 80009ec:	bf94      	ite	ls
 80009ee:	2001      	movls	r0, #1
 80009f0:	2000      	movhi	r0, #0
 80009f2:	f85d fb08 	ldr.w	pc, [sp], #8
 80009f6:	bf00      	nop

080009f8 <__aeabi_dcmpgt>:
 80009f8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009fc:	f7ff ffc4 	bl	8000988 <__aeabi_cdrcmple>
 8000a00:	bf34      	ite	cc
 8000a02:	2001      	movcc	r0, #1
 8000a04:	2000      	movcs	r0, #0
 8000a06:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a0a:	bf00      	nop

08000a0c <__aeabi_dcmpun>:
 8000a0c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a10:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a14:	d102      	bne.n	8000a1c <__aeabi_dcmpun+0x10>
 8000a16:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a1a:	d10a      	bne.n	8000a32 <__aeabi_dcmpun+0x26>
 8000a1c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a20:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a24:	d102      	bne.n	8000a2c <__aeabi_dcmpun+0x20>
 8000a26:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a2a:	d102      	bne.n	8000a32 <__aeabi_dcmpun+0x26>
 8000a2c:	f04f 0000 	mov.w	r0, #0
 8000a30:	4770      	bx	lr
 8000a32:	f04f 0001 	mov.w	r0, #1
 8000a36:	4770      	bx	lr

08000a38 <__aeabi_d2iz>:
 8000a38:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a3c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000a40:	d215      	bcs.n	8000a6e <__aeabi_d2iz+0x36>
 8000a42:	d511      	bpl.n	8000a68 <__aeabi_d2iz+0x30>
 8000a44:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000a48:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a4c:	d912      	bls.n	8000a74 <__aeabi_d2iz+0x3c>
 8000a4e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a52:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000a56:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a5a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000a5e:	fa23 f002 	lsr.w	r0, r3, r2
 8000a62:	bf18      	it	ne
 8000a64:	4240      	negne	r0, r0
 8000a66:	4770      	bx	lr
 8000a68:	f04f 0000 	mov.w	r0, #0
 8000a6c:	4770      	bx	lr
 8000a6e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000a72:	d105      	bne.n	8000a80 <__aeabi_d2iz+0x48>
 8000a74:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000a78:	bf08      	it	eq
 8000a7a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000a7e:	4770      	bx	lr
 8000a80:	f04f 0000 	mov.w	r0, #0
 8000a84:	4770      	bx	lr
 8000a86:	bf00      	nop

08000a88 <__aeabi_d2uiz>:
 8000a88:	004a      	lsls	r2, r1, #1
 8000a8a:	d211      	bcs.n	8000ab0 <__aeabi_d2uiz+0x28>
 8000a8c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000a90:	d211      	bcs.n	8000ab6 <__aeabi_d2uiz+0x2e>
 8000a92:	d50d      	bpl.n	8000ab0 <__aeabi_d2uiz+0x28>
 8000a94:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000a98:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a9c:	d40e      	bmi.n	8000abc <__aeabi_d2uiz+0x34>
 8000a9e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000aa2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000aa6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000aaa:	fa23 f002 	lsr.w	r0, r3, r2
 8000aae:	4770      	bx	lr
 8000ab0:	f04f 0000 	mov.w	r0, #0
 8000ab4:	4770      	bx	lr
 8000ab6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000aba:	d102      	bne.n	8000ac2 <__aeabi_d2uiz+0x3a>
 8000abc:	f04f 30ff 	mov.w	r0, #4294967295
 8000ac0:	4770      	bx	lr
 8000ac2:	f04f 0000 	mov.w	r0, #0
 8000ac6:	4770      	bx	lr

08000ac8 <__aeabi_d2f>:
 8000ac8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000acc:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000ad0:	bf24      	itt	cs
 8000ad2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000ad6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000ada:	d90d      	bls.n	8000af8 <__aeabi_d2f+0x30>
 8000adc:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000ae0:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000ae4:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000ae8:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000aec:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000af0:	bf08      	it	eq
 8000af2:	f020 0001 	biceq.w	r0, r0, #1
 8000af6:	4770      	bx	lr
 8000af8:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000afc:	d121      	bne.n	8000b42 <__aeabi_d2f+0x7a>
 8000afe:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000b02:	bfbc      	itt	lt
 8000b04:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000b08:	4770      	bxlt	lr
 8000b0a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000b0e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000b12:	f1c2 0218 	rsb	r2, r2, #24
 8000b16:	f1c2 0c20 	rsb	ip, r2, #32
 8000b1a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000b1e:	fa20 f002 	lsr.w	r0, r0, r2
 8000b22:	bf18      	it	ne
 8000b24:	f040 0001 	orrne.w	r0, r0, #1
 8000b28:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b2c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000b30:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000b34:	ea40 000c 	orr.w	r0, r0, ip
 8000b38:	fa23 f302 	lsr.w	r3, r3, r2
 8000b3c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000b40:	e7cc      	b.n	8000adc <__aeabi_d2f+0x14>
 8000b42:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000b46:	d107      	bne.n	8000b58 <__aeabi_d2f+0x90>
 8000b48:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000b4c:	bf1e      	ittt	ne
 8000b4e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000b52:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000b56:	4770      	bxne	lr
 8000b58:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000b5c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000b60:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000b64:	4770      	bx	lr
 8000b66:	bf00      	nop

08000b68 <__aeabi_frsub>:
 8000b68:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
 8000b6c:	e002      	b.n	8000b74 <__addsf3>
 8000b6e:	bf00      	nop

08000b70 <__aeabi_fsub>:
 8000b70:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

08000b74 <__addsf3>:
 8000b74:	0042      	lsls	r2, r0, #1
 8000b76:	bf1f      	itttt	ne
 8000b78:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000b7c:	ea92 0f03 	teqne	r2, r3
 8000b80:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000b84:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000b88:	d06a      	beq.n	8000c60 <__addsf3+0xec>
 8000b8a:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000b8e:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8000b92:	bfc1      	itttt	gt
 8000b94:	18d2      	addgt	r2, r2, r3
 8000b96:	4041      	eorgt	r1, r0
 8000b98:	4048      	eorgt	r0, r1
 8000b9a:	4041      	eorgt	r1, r0
 8000b9c:	bfb8      	it	lt
 8000b9e:	425b      	neglt	r3, r3
 8000ba0:	2b19      	cmp	r3, #25
 8000ba2:	bf88      	it	hi
 8000ba4:	4770      	bxhi	lr
 8000ba6:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 8000baa:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000bae:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 8000bb2:	bf18      	it	ne
 8000bb4:	4240      	negne	r0, r0
 8000bb6:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000bba:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 8000bbe:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 8000bc2:	bf18      	it	ne
 8000bc4:	4249      	negne	r1, r1
 8000bc6:	ea92 0f03 	teq	r2, r3
 8000bca:	d03f      	beq.n	8000c4c <__addsf3+0xd8>
 8000bcc:	f1a2 0201 	sub.w	r2, r2, #1
 8000bd0:	fa41 fc03 	asr.w	ip, r1, r3
 8000bd4:	eb10 000c 	adds.w	r0, r0, ip
 8000bd8:	f1c3 0320 	rsb	r3, r3, #32
 8000bdc:	fa01 f103 	lsl.w	r1, r1, r3
 8000be0:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000be4:	d502      	bpl.n	8000bec <__addsf3+0x78>
 8000be6:	4249      	negs	r1, r1
 8000be8:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8000bec:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 8000bf0:	d313      	bcc.n	8000c1a <__addsf3+0xa6>
 8000bf2:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8000bf6:	d306      	bcc.n	8000c06 <__addsf3+0x92>
 8000bf8:	0840      	lsrs	r0, r0, #1
 8000bfa:	ea4f 0131 	mov.w	r1, r1, rrx
 8000bfe:	f102 0201 	add.w	r2, r2, #1
 8000c02:	2afe      	cmp	r2, #254	; 0xfe
 8000c04:	d251      	bcs.n	8000caa <__addsf3+0x136>
 8000c06:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
 8000c0a:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000c0e:	bf08      	it	eq
 8000c10:	f020 0001 	biceq.w	r0, r0, #1
 8000c14:	ea40 0003 	orr.w	r0, r0, r3
 8000c18:	4770      	bx	lr
 8000c1a:	0049      	lsls	r1, r1, #1
 8000c1c:	eb40 0000 	adc.w	r0, r0, r0
 8000c20:	3a01      	subs	r2, #1
 8000c22:	bf28      	it	cs
 8000c24:	f5b0 0f00 	cmpcs.w	r0, #8388608	; 0x800000
 8000c28:	d2ed      	bcs.n	8000c06 <__addsf3+0x92>
 8000c2a:	fab0 fc80 	clz	ip, r0
 8000c2e:	f1ac 0c08 	sub.w	ip, ip, #8
 8000c32:	ebb2 020c 	subs.w	r2, r2, ip
 8000c36:	fa00 f00c 	lsl.w	r0, r0, ip
 8000c3a:	bfaa      	itet	ge
 8000c3c:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000c40:	4252      	neglt	r2, r2
 8000c42:	4318      	orrge	r0, r3
 8000c44:	bfbc      	itt	lt
 8000c46:	40d0      	lsrlt	r0, r2
 8000c48:	4318      	orrlt	r0, r3
 8000c4a:	4770      	bx	lr
 8000c4c:	f092 0f00 	teq	r2, #0
 8000c50:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
 8000c54:	bf06      	itte	eq
 8000c56:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
 8000c5a:	3201      	addeq	r2, #1
 8000c5c:	3b01      	subne	r3, #1
 8000c5e:	e7b5      	b.n	8000bcc <__addsf3+0x58>
 8000c60:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000c64:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000c68:	bf18      	it	ne
 8000c6a:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000c6e:	d021      	beq.n	8000cb4 <__addsf3+0x140>
 8000c70:	ea92 0f03 	teq	r2, r3
 8000c74:	d004      	beq.n	8000c80 <__addsf3+0x10c>
 8000c76:	f092 0f00 	teq	r2, #0
 8000c7a:	bf08      	it	eq
 8000c7c:	4608      	moveq	r0, r1
 8000c7e:	4770      	bx	lr
 8000c80:	ea90 0f01 	teq	r0, r1
 8000c84:	bf1c      	itt	ne
 8000c86:	2000      	movne	r0, #0
 8000c88:	4770      	bxne	lr
 8000c8a:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
 8000c8e:	d104      	bne.n	8000c9a <__addsf3+0x126>
 8000c90:	0040      	lsls	r0, r0, #1
 8000c92:	bf28      	it	cs
 8000c94:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
 8000c98:	4770      	bx	lr
 8000c9a:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
 8000c9e:	bf3c      	itt	cc
 8000ca0:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
 8000ca4:	4770      	bxcc	lr
 8000ca6:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000caa:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
 8000cae:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000cb2:	4770      	bx	lr
 8000cb4:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000cb8:	bf16      	itet	ne
 8000cba:	4608      	movne	r0, r1
 8000cbc:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8000cc0:	4601      	movne	r1, r0
 8000cc2:	0242      	lsls	r2, r0, #9
 8000cc4:	bf06      	itte	eq
 8000cc6:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8000cca:	ea90 0f01 	teqeq	r0, r1
 8000cce:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
 8000cd2:	4770      	bx	lr

08000cd4 <__aeabi_ui2f>:
 8000cd4:	f04f 0300 	mov.w	r3, #0
 8000cd8:	e004      	b.n	8000ce4 <__aeabi_i2f+0x8>
 8000cda:	bf00      	nop

08000cdc <__aeabi_i2f>:
 8000cdc:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
 8000ce0:	bf48      	it	mi
 8000ce2:	4240      	negmi	r0, r0
 8000ce4:	ea5f 0c00 	movs.w	ip, r0
 8000ce8:	bf08      	it	eq
 8000cea:	4770      	bxeq	lr
 8000cec:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
 8000cf0:	4601      	mov	r1, r0
 8000cf2:	f04f 0000 	mov.w	r0, #0
 8000cf6:	e01c      	b.n	8000d32 <__aeabi_l2f+0x2a>

08000cf8 <__aeabi_ul2f>:
 8000cf8:	ea50 0201 	orrs.w	r2, r0, r1
 8000cfc:	bf08      	it	eq
 8000cfe:	4770      	bxeq	lr
 8000d00:	f04f 0300 	mov.w	r3, #0
 8000d04:	e00a      	b.n	8000d1c <__aeabi_l2f+0x14>
 8000d06:	bf00      	nop

08000d08 <__aeabi_l2f>:
 8000d08:	ea50 0201 	orrs.w	r2, r0, r1
 8000d0c:	bf08      	it	eq
 8000d0e:	4770      	bxeq	lr
 8000d10:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
 8000d14:	d502      	bpl.n	8000d1c <__aeabi_l2f+0x14>
 8000d16:	4240      	negs	r0, r0
 8000d18:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000d1c:	ea5f 0c01 	movs.w	ip, r1
 8000d20:	bf02      	ittt	eq
 8000d22:	4684      	moveq	ip, r0
 8000d24:	4601      	moveq	r1, r0
 8000d26:	2000      	moveq	r0, #0
 8000d28:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
 8000d2c:	bf08      	it	eq
 8000d2e:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
 8000d32:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 8000d36:	fabc f28c 	clz	r2, ip
 8000d3a:	3a08      	subs	r2, #8
 8000d3c:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000d40:	db10      	blt.n	8000d64 <__aeabi_l2f+0x5c>
 8000d42:	fa01 fc02 	lsl.w	ip, r1, r2
 8000d46:	4463      	add	r3, ip
 8000d48:	fa00 fc02 	lsl.w	ip, r0, r2
 8000d4c:	f1c2 0220 	rsb	r2, r2, #32
 8000d50:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000d54:	fa20 f202 	lsr.w	r2, r0, r2
 8000d58:	eb43 0002 	adc.w	r0, r3, r2
 8000d5c:	bf08      	it	eq
 8000d5e:	f020 0001 	biceq.w	r0, r0, #1
 8000d62:	4770      	bx	lr
 8000d64:	f102 0220 	add.w	r2, r2, #32
 8000d68:	fa01 fc02 	lsl.w	ip, r1, r2
 8000d6c:	f1c2 0220 	rsb	r2, r2, #32
 8000d70:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000d74:	fa21 f202 	lsr.w	r2, r1, r2
 8000d78:	eb43 0002 	adc.w	r0, r3, r2
 8000d7c:	bf08      	it	eq
 8000d7e:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000d82:	4770      	bx	lr

08000d84 <__aeabi_fmul>:
 8000d84:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000d88:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000d8c:	bf1e      	ittt	ne
 8000d8e:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000d92:	ea92 0f0c 	teqne	r2, ip
 8000d96:	ea93 0f0c 	teqne	r3, ip
 8000d9a:	d06f      	beq.n	8000e7c <__aeabi_fmul+0xf8>
 8000d9c:	441a      	add	r2, r3
 8000d9e:	ea80 0c01 	eor.w	ip, r0, r1
 8000da2:	0240      	lsls	r0, r0, #9
 8000da4:	bf18      	it	ne
 8000da6:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 8000daa:	d01e      	beq.n	8000dea <__aeabi_fmul+0x66>
 8000dac:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8000db0:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 8000db4:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 8000db8:	fba0 3101 	umull	r3, r1, r0, r1
 8000dbc:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000dc0:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
 8000dc4:	bf3e      	ittt	cc
 8000dc6:	0049      	lslcc	r1, r1, #1
 8000dc8:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 8000dcc:	005b      	lslcc	r3, r3, #1
 8000dce:	ea40 0001 	orr.w	r0, r0, r1
 8000dd2:	f162 027f 	sbc.w	r2, r2, #127	; 0x7f
 8000dd6:	2afd      	cmp	r2, #253	; 0xfd
 8000dd8:	d81d      	bhi.n	8000e16 <__aeabi_fmul+0x92>
 8000dda:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8000dde:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000de2:	bf08      	it	eq
 8000de4:	f020 0001 	biceq.w	r0, r0, #1
 8000de8:	4770      	bx	lr
 8000dea:	f090 0f00 	teq	r0, #0
 8000dee:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8000df2:	bf08      	it	eq
 8000df4:	0249      	lsleq	r1, r1, #9
 8000df6:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000dfa:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 8000dfe:	3a7f      	subs	r2, #127	; 0x7f
 8000e00:	bfc2      	ittt	gt
 8000e02:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000e06:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000e0a:	4770      	bxgt	lr
 8000e0c:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000e10:	f04f 0300 	mov.w	r3, #0
 8000e14:	3a01      	subs	r2, #1
 8000e16:	dc5d      	bgt.n	8000ed4 <__aeabi_fmul+0x150>
 8000e18:	f112 0f19 	cmn.w	r2, #25
 8000e1c:	bfdc      	itt	le
 8000e1e:	f000 4000 	andle.w	r0, r0, #2147483648	; 0x80000000
 8000e22:	4770      	bxle	lr
 8000e24:	f1c2 0200 	rsb	r2, r2, #0
 8000e28:	0041      	lsls	r1, r0, #1
 8000e2a:	fa21 f102 	lsr.w	r1, r1, r2
 8000e2e:	f1c2 0220 	rsb	r2, r2, #32
 8000e32:	fa00 fc02 	lsl.w	ip, r0, r2
 8000e36:	ea5f 0031 	movs.w	r0, r1, rrx
 8000e3a:	f140 0000 	adc.w	r0, r0, #0
 8000e3e:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 8000e42:	bf08      	it	eq
 8000e44:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000e48:	4770      	bx	lr
 8000e4a:	f092 0f00 	teq	r2, #0
 8000e4e:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000e52:	bf02      	ittt	eq
 8000e54:	0040      	lsleq	r0, r0, #1
 8000e56:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000e5a:	3a01      	subeq	r2, #1
 8000e5c:	d0f9      	beq.n	8000e52 <__aeabi_fmul+0xce>
 8000e5e:	ea40 000c 	orr.w	r0, r0, ip
 8000e62:	f093 0f00 	teq	r3, #0
 8000e66:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000e6a:	bf02      	ittt	eq
 8000e6c:	0049      	lsleq	r1, r1, #1
 8000e6e:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000e72:	3b01      	subeq	r3, #1
 8000e74:	d0f9      	beq.n	8000e6a <__aeabi_fmul+0xe6>
 8000e76:	ea41 010c 	orr.w	r1, r1, ip
 8000e7a:	e78f      	b.n	8000d9c <__aeabi_fmul+0x18>
 8000e7c:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000e80:	ea92 0f0c 	teq	r2, ip
 8000e84:	bf18      	it	ne
 8000e86:	ea93 0f0c 	teqne	r3, ip
 8000e8a:	d00a      	beq.n	8000ea2 <__aeabi_fmul+0x11e>
 8000e8c:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8000e90:	bf18      	it	ne
 8000e92:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8000e96:	d1d8      	bne.n	8000e4a <__aeabi_fmul+0xc6>
 8000e98:	ea80 0001 	eor.w	r0, r0, r1
 8000e9c:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000ea0:	4770      	bx	lr
 8000ea2:	f090 0f00 	teq	r0, #0
 8000ea6:	bf17      	itett	ne
 8000ea8:	f090 4f00 	teqne	r0, #2147483648	; 0x80000000
 8000eac:	4608      	moveq	r0, r1
 8000eae:	f091 0f00 	teqne	r1, #0
 8000eb2:	f091 4f00 	teqne	r1, #2147483648	; 0x80000000
 8000eb6:	d014      	beq.n	8000ee2 <__aeabi_fmul+0x15e>
 8000eb8:	ea92 0f0c 	teq	r2, ip
 8000ebc:	d101      	bne.n	8000ec2 <__aeabi_fmul+0x13e>
 8000ebe:	0242      	lsls	r2, r0, #9
 8000ec0:	d10f      	bne.n	8000ee2 <__aeabi_fmul+0x15e>
 8000ec2:	ea93 0f0c 	teq	r3, ip
 8000ec6:	d103      	bne.n	8000ed0 <__aeabi_fmul+0x14c>
 8000ec8:	024b      	lsls	r3, r1, #9
 8000eca:	bf18      	it	ne
 8000ecc:	4608      	movne	r0, r1
 8000ece:	d108      	bne.n	8000ee2 <__aeabi_fmul+0x15e>
 8000ed0:	ea80 0001 	eor.w	r0, r0, r1
 8000ed4:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000ed8:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000edc:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000ee0:	4770      	bx	lr
 8000ee2:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000ee6:	f440 0040 	orr.w	r0, r0, #12582912	; 0xc00000
 8000eea:	4770      	bx	lr

08000eec <__aeabi_fdiv>:
 8000eec:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000ef0:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000ef4:	bf1e      	ittt	ne
 8000ef6:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000efa:	ea92 0f0c 	teqne	r2, ip
 8000efe:	ea93 0f0c 	teqne	r3, ip
 8000f02:	d069      	beq.n	8000fd8 <__aeabi_fdiv+0xec>
 8000f04:	eba2 0203 	sub.w	r2, r2, r3
 8000f08:	ea80 0c01 	eor.w	ip, r0, r1
 8000f0c:	0249      	lsls	r1, r1, #9
 8000f0e:	ea4f 2040 	mov.w	r0, r0, lsl #9
 8000f12:	d037      	beq.n	8000f84 <__aeabi_fdiv+0x98>
 8000f14:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8000f18:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
 8000f1c:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
 8000f20:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000f24:	428b      	cmp	r3, r1
 8000f26:	bf38      	it	cc
 8000f28:	005b      	lslcc	r3, r3, #1
 8000f2a:	f142 027d 	adc.w	r2, r2, #125	; 0x7d
 8000f2e:	f44f 0c00 	mov.w	ip, #8388608	; 0x800000
 8000f32:	428b      	cmp	r3, r1
 8000f34:	bf24      	itt	cs
 8000f36:	1a5b      	subcs	r3, r3, r1
 8000f38:	ea40 000c 	orrcs.w	r0, r0, ip
 8000f3c:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
 8000f40:	bf24      	itt	cs
 8000f42:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
 8000f46:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000f4a:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
 8000f4e:	bf24      	itt	cs
 8000f50:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
 8000f54:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000f58:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
 8000f5c:	bf24      	itt	cs
 8000f5e:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
 8000f62:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000f66:	011b      	lsls	r3, r3, #4
 8000f68:	bf18      	it	ne
 8000f6a:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
 8000f6e:	d1e0      	bne.n	8000f32 <__aeabi_fdiv+0x46>
 8000f70:	2afd      	cmp	r2, #253	; 0xfd
 8000f72:	f63f af50 	bhi.w	8000e16 <__aeabi_fmul+0x92>
 8000f76:	428b      	cmp	r3, r1
 8000f78:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000f7c:	bf08      	it	eq
 8000f7e:	f020 0001 	biceq.w	r0, r0, #1
 8000f82:	4770      	bx	lr
 8000f84:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8000f88:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000f8c:	327f      	adds	r2, #127	; 0x7f
 8000f8e:	bfc2      	ittt	gt
 8000f90:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000f94:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000f98:	4770      	bxgt	lr
 8000f9a:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000f9e:	f04f 0300 	mov.w	r3, #0
 8000fa2:	3a01      	subs	r2, #1
 8000fa4:	e737      	b.n	8000e16 <__aeabi_fmul+0x92>
 8000fa6:	f092 0f00 	teq	r2, #0
 8000faa:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000fae:	bf02      	ittt	eq
 8000fb0:	0040      	lsleq	r0, r0, #1
 8000fb2:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000fb6:	3a01      	subeq	r2, #1
 8000fb8:	d0f9      	beq.n	8000fae <__aeabi_fdiv+0xc2>
 8000fba:	ea40 000c 	orr.w	r0, r0, ip
 8000fbe:	f093 0f00 	teq	r3, #0
 8000fc2:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000fc6:	bf02      	ittt	eq
 8000fc8:	0049      	lsleq	r1, r1, #1
 8000fca:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000fce:	3b01      	subeq	r3, #1
 8000fd0:	d0f9      	beq.n	8000fc6 <__aeabi_fdiv+0xda>
 8000fd2:	ea41 010c 	orr.w	r1, r1, ip
 8000fd6:	e795      	b.n	8000f04 <__aeabi_fdiv+0x18>
 8000fd8:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000fdc:	ea92 0f0c 	teq	r2, ip
 8000fe0:	d108      	bne.n	8000ff4 <__aeabi_fdiv+0x108>
 8000fe2:	0242      	lsls	r2, r0, #9
 8000fe4:	f47f af7d 	bne.w	8000ee2 <__aeabi_fmul+0x15e>
 8000fe8:	ea93 0f0c 	teq	r3, ip
 8000fec:	f47f af70 	bne.w	8000ed0 <__aeabi_fmul+0x14c>
 8000ff0:	4608      	mov	r0, r1
 8000ff2:	e776      	b.n	8000ee2 <__aeabi_fmul+0x15e>
 8000ff4:	ea93 0f0c 	teq	r3, ip
 8000ff8:	d104      	bne.n	8001004 <__aeabi_fdiv+0x118>
 8000ffa:	024b      	lsls	r3, r1, #9
 8000ffc:	f43f af4c 	beq.w	8000e98 <__aeabi_fmul+0x114>
 8001000:	4608      	mov	r0, r1
 8001002:	e76e      	b.n	8000ee2 <__aeabi_fmul+0x15e>
 8001004:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8001008:	bf18      	it	ne
 800100a:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 800100e:	d1ca      	bne.n	8000fa6 <__aeabi_fdiv+0xba>
 8001010:	f030 4200 	bics.w	r2, r0, #2147483648	; 0x80000000
 8001014:	f47f af5c 	bne.w	8000ed0 <__aeabi_fmul+0x14c>
 8001018:	f031 4300 	bics.w	r3, r1, #2147483648	; 0x80000000
 800101c:	f47f af3c 	bne.w	8000e98 <__aeabi_fmul+0x114>
 8001020:	e75f      	b.n	8000ee2 <__aeabi_fmul+0x15e>
 8001022:	bf00      	nop

08001024 <__aeabi_f2uiz>:
 8001024:	0042      	lsls	r2, r0, #1
 8001026:	d20e      	bcs.n	8001046 <__aeabi_f2uiz+0x22>
 8001028:	f1b2 4ffe 	cmp.w	r2, #2130706432	; 0x7f000000
 800102c:	d30b      	bcc.n	8001046 <__aeabi_f2uiz+0x22>
 800102e:	f04f 039e 	mov.w	r3, #158	; 0x9e
 8001032:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 8001036:	d409      	bmi.n	800104c <__aeabi_f2uiz+0x28>
 8001038:	ea4f 2300 	mov.w	r3, r0, lsl #8
 800103c:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8001040:	fa23 f002 	lsr.w	r0, r3, r2
 8001044:	4770      	bx	lr
 8001046:	f04f 0000 	mov.w	r0, #0
 800104a:	4770      	bx	lr
 800104c:	f112 0f61 	cmn.w	r2, #97	; 0x61
 8001050:	d101      	bne.n	8001056 <__aeabi_f2uiz+0x32>
 8001052:	0242      	lsls	r2, r0, #9
 8001054:	d102      	bne.n	800105c <__aeabi_f2uiz+0x38>
 8001056:	f04f 30ff 	mov.w	r0, #4294967295
 800105a:	4770      	bx	lr
 800105c:	f04f 0000 	mov.w	r0, #0
 8001060:	4770      	bx	lr
 8001062:	bf00      	nop

08001064 <__aeabi_d2lz>:
 8001064:	b538      	push	{r3, r4, r5, lr}
 8001066:	460c      	mov	r4, r1
 8001068:	4605      	mov	r5, r0
 800106a:	4621      	mov	r1, r4
 800106c:	4628      	mov	r0, r5
 800106e:	2200      	movs	r2, #0
 8001070:	2300      	movs	r3, #0
 8001072:	f7ff fca3 	bl	80009bc <__aeabi_dcmplt>
 8001076:	b928      	cbnz	r0, 8001084 <__aeabi_d2lz+0x20>
 8001078:	4628      	mov	r0, r5
 800107a:	4621      	mov	r1, r4
 800107c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8001080:	f000 b80a 	b.w	8001098 <__aeabi_d2ulz>
 8001084:	4628      	mov	r0, r5
 8001086:	f104 4100 	add.w	r1, r4, #2147483648	; 0x80000000
 800108a:	f000 f805 	bl	8001098 <__aeabi_d2ulz>
 800108e:	4240      	negs	r0, r0
 8001090:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8001094:	bd38      	pop	{r3, r4, r5, pc}
 8001096:	bf00      	nop

08001098 <__aeabi_d2ulz>:
 8001098:	b5d0      	push	{r4, r6, r7, lr}
 800109a:	2200      	movs	r2, #0
 800109c:	4b0b      	ldr	r3, [pc, #44]	; (80010cc <__aeabi_d2ulz+0x34>)
 800109e:	4606      	mov	r6, r0
 80010a0:	460f      	mov	r7, r1
 80010a2:	f7ff fa19 	bl	80004d8 <__aeabi_dmul>
 80010a6:	f7ff fcef 	bl	8000a88 <__aeabi_d2uiz>
 80010aa:	4604      	mov	r4, r0
 80010ac:	f7ff f99a 	bl	80003e4 <__aeabi_ui2d>
 80010b0:	2200      	movs	r2, #0
 80010b2:	4b07      	ldr	r3, [pc, #28]	; (80010d0 <__aeabi_d2ulz+0x38>)
 80010b4:	f7ff fa10 	bl	80004d8 <__aeabi_dmul>
 80010b8:	4602      	mov	r2, r0
 80010ba:	460b      	mov	r3, r1
 80010bc:	4630      	mov	r0, r6
 80010be:	4639      	mov	r1, r7
 80010c0:	f7ff f852 	bl	8000168 <__aeabi_dsub>
 80010c4:	f7ff fce0 	bl	8000a88 <__aeabi_d2uiz>
 80010c8:	4621      	mov	r1, r4
 80010ca:	bdd0      	pop	{r4, r6, r7, pc}
 80010cc:	3df00000 	.word	0x3df00000
 80010d0:	41f00000 	.word	0x41f00000

080010d4 <PowerOn>:
	BH1750_cmd cmd = RESET_REGISTER;
	HAL_I2C_Master_Transmit(hi2c, BH1750_ADDR_LOW_W, (uint8_t *)&cmd, 1, 50);
	HAL_Delay(1);
}

void PowerOn(){
 80010d4:	b580      	push	{r7, lr}
 80010d6:	b084      	sub	sp, #16
 80010d8:	af02      	add	r7, sp, #8
	BH1750_cmd cmd = POWER_ON;
 80010da:	2301      	movs	r3, #1
 80010dc:	71fb      	strb	r3, [r7, #7]
	HAL_I2C_Master_Transmit(hi2c, BH1750_ADDR_LOW_W, (uint8_t *)&cmd, 1, 50);
 80010de:	1dfa      	adds	r2, r7, #7
 80010e0:	2332      	movs	r3, #50	; 0x32
 80010e2:	9300      	str	r3, [sp, #0]
 80010e4:	2301      	movs	r3, #1
 80010e6:	2146      	movs	r1, #70	; 0x46
 80010e8:	4804      	ldr	r0, [pc, #16]	; (80010fc <PowerOn+0x28>)
 80010ea:	f002 fad5 	bl	8003698 <HAL_I2C_Master_Transmit>
	HAL_Delay(1);
 80010ee:	2001      	movs	r0, #1
 80010f0:	f001 f9d0 	bl	8002494 <HAL_Delay>
}
 80010f4:	bf00      	nop
 80010f6:	3708      	adds	r7, #8
 80010f8:	46bd      	mov	sp, r7
 80010fa:	bd80      	pop	{r7, pc}
 80010fc:	200002ac 	.word	0x200002ac

08001100 <PowerDown>:

void PowerDown(){
 8001100:	b580      	push	{r7, lr}
 8001102:	b084      	sub	sp, #16
 8001104:	af02      	add	r7, sp, #8
	BH1750_cmd cmd = POWER_DOWN;
 8001106:	2300      	movs	r3, #0
 8001108:	71fb      	strb	r3, [r7, #7]
	HAL_I2C_Master_Transmit(hi2c, BH1750_ADDR_LOW_W, (uint8_t *)&cmd, 1, 50);
 800110a:	1dfa      	adds	r2, r7, #7
 800110c:	2332      	movs	r3, #50	; 0x32
 800110e:	9300      	str	r3, [sp, #0]
 8001110:	2301      	movs	r3, #1
 8001112:	2146      	movs	r1, #70	; 0x46
 8001114:	4804      	ldr	r0, [pc, #16]	; (8001128 <PowerDown+0x28>)
 8001116:	f002 fabf 	bl	8003698 <HAL_I2C_Master_Transmit>
	HAL_Delay(1);
 800111a:	2001      	movs	r0, #1
 800111c:	f001 f9ba 	bl	8002494 <HAL_Delay>
}
 8001120:	bf00      	nop
 8001122:	3708      	adds	r7, #8
 8001124:	46bd      	mov	sp, r7
 8001126:	bd80      	pop	{r7, pc}
 8001128:	200002ac 	.word	0x200002ac

0800112c <setMeasurement>:

void setMeasurement(BH1750_cmd cmd){
 800112c:	b580      	push	{r7, lr}
 800112e:	b084      	sub	sp, #16
 8001130:	af02      	add	r7, sp, #8
 8001132:	4603      	mov	r3, r0
 8001134:	71fb      	strb	r3, [r7, #7]
	if(cmd == CONT_L_MODE||ONCE_L_MODE) {
		HAL_I2C_Master_Transmit(hi2c, BH1750_ADDR_LOW_W, (uint8_t *)&cmd, 1, 50);
 8001136:	1dfa      	adds	r2, r7, #7
 8001138:	2332      	movs	r3, #50	; 0x32
 800113a:	9300      	str	r3, [sp, #0]
 800113c:	2301      	movs	r3, #1
 800113e:	2146      	movs	r1, #70	; 0x46
 8001140:	4804      	ldr	r0, [pc, #16]	; (8001154 <setMeasurement+0x28>)
 8001142:	f002 faa9 	bl	8003698 <HAL_I2C_Master_Transmit>
		HAL_Delay(16);
 8001146:	2010      	movs	r0, #16
 8001148:	f001 f9a4 	bl	8002494 <HAL_Delay>
	}
	else {
		HAL_I2C_Master_Transmit(hi2c, BH1750_ADDR_LOW_W, (uint8_t *)&cmd, 1, 50);
		HAL_Delay(120);
	}
}
 800114c:	bf00      	nop
 800114e:	3708      	adds	r7, #8
 8001150:	46bd      	mov	sp, r7
 8001152:	bd80      	pop	{r7, pc}
 8001154:	200002ac 	.word	0x200002ac

08001158 <BH1750_getResult>:

float BH1750_getResult(){
 8001158:	b580      	push	{r7, lr}
 800115a:	b084      	sub	sp, #16
 800115c:	af02      	add	r7, sp, #8
	uint8_t byte[2];
	uint16_t result;
	float light = 0;
 800115e:	f04f 0300 	mov.w	r3, #0
 8001162:	607b      	str	r3, [r7, #4]

	HAL_I2C_Master_Receive(hi2c, BH1750_ADDR_LOW_R, (uint8_t *)&byte, 2, 100);
 8001164:	463a      	mov	r2, r7
 8001166:	2364      	movs	r3, #100	; 0x64
 8001168:	9300      	str	r3, [sp, #0]
 800116a:	2302      	movs	r3, #2
 800116c:	2147      	movs	r1, #71	; 0x47
 800116e:	4812      	ldr	r0, [pc, #72]	; (80011b8 <BH1750_getResult+0x60>)
 8001170:	f002 fb90 	bl	8003894 <HAL_I2C_Master_Receive>
	result = (byte[0]<<8)|byte[1];
 8001174:	783b      	ldrb	r3, [r7, #0]
 8001176:	021b      	lsls	r3, r3, #8
 8001178:	b21a      	sxth	r2, r3
 800117a:	787b      	ldrb	r3, [r7, #1]
 800117c:	b21b      	sxth	r3, r3
 800117e:	4313      	orrs	r3, r2
 8001180:	b21b      	sxth	r3, r3
 8001182:	807b      	strh	r3, [r7, #2]
	light = (float)result/1.2;
 8001184:	887b      	ldrh	r3, [r7, #2]
 8001186:	4618      	mov	r0, r3
 8001188:	f7ff fda4 	bl	8000cd4 <__aeabi_ui2f>
 800118c:	4603      	mov	r3, r0
 800118e:	4618      	mov	r0, r3
 8001190:	f7ff f94a 	bl	8000428 <__aeabi_f2d>
 8001194:	f04f 3233 	mov.w	r2, #858993459	; 0x33333333
 8001198:	4b08      	ldr	r3, [pc, #32]	; (80011bc <BH1750_getResult+0x64>)
 800119a:	f7ff fac7 	bl	800072c <__aeabi_ddiv>
 800119e:	4602      	mov	r2, r0
 80011a0:	460b      	mov	r3, r1
 80011a2:	4610      	mov	r0, r2
 80011a4:	4619      	mov	r1, r3
 80011a6:	f7ff fc8f 	bl	8000ac8 <__aeabi_d2f>
 80011aa:	4603      	mov	r3, r0
 80011ac:	607b      	str	r3, [r7, #4]
	return light;
 80011ae:	687b      	ldr	r3, [r7, #4]
}
 80011b0:	4618      	mov	r0, r3
 80011b2:	3708      	adds	r7, #8
 80011b4:	46bd      	mov	sp, r7
 80011b6:	bd80      	pop	{r7, pc}
 80011b8:	200002ac 	.word	0x200002ac
 80011bc:	3ff33333 	.word	0x3ff33333

080011c0 <bufclr>:
#include "stdio.h"
#include "string.h"


void bufclr (char *buf)
{
 80011c0:	b580      	push	{r7, lr}
 80011c2:	b084      	sub	sp, #16
 80011c4:	af00      	add	r7, sp, #0
 80011c6:	6078      	str	r0, [r7, #4]
	int len = strlen (buf);
 80011c8:	6878      	ldr	r0, [r7, #4]
 80011ca:	f7fe ffc1 	bl	8000150 <strlen>
 80011ce:	4603      	mov	r3, r0
 80011d0:	60bb      	str	r3, [r7, #8]
	for (int i=0; i<len; i++) buf[i] = '\0';
 80011d2:	2300      	movs	r3, #0
 80011d4:	60fb      	str	r3, [r7, #12]
 80011d6:	e007      	b.n	80011e8 <bufclr+0x28>
 80011d8:	68fb      	ldr	r3, [r7, #12]
 80011da:	687a      	ldr	r2, [r7, #4]
 80011dc:	4413      	add	r3, r2
 80011de:	2200      	movs	r2, #0
 80011e0:	701a      	strb	r2, [r3, #0]
 80011e2:	68fb      	ldr	r3, [r7, #12]
 80011e4:	3301      	adds	r3, #1
 80011e6:	60fb      	str	r3, [r7, #12]
 80011e8:	68fa      	ldr	r2, [r7, #12]
 80011ea:	68bb      	ldr	r3, [r7, #8]
 80011ec:	429a      	cmp	r2, r3
 80011ee:	dbf3      	blt.n	80011d8 <bufclr+0x18>
}
 80011f0:	bf00      	nop
 80011f2:	bf00      	nop
 80011f4:	3710      	adds	r7, #16
 80011f6:	46bd      	mov	sp, r7
 80011f8:	bd80      	pop	{r7, pc}
	...

080011fc <ESP_Init>:


void ESP_Init (char *SSID, char *PASSWD)
{
 80011fc:	b580      	push	{r7, lr}
 80011fe:	b096      	sub	sp, #88	; 0x58
 8001200:	af00      	add	r7, sp, #0
 8001202:	6078      	str	r0, [r7, #4]
 8001204:	6039      	str	r1, [r7, #0]
	char data[80];

	Ringbuf_init();
 8001206:	f000 f9a3 	bl	8001550 <Ringbuf_init>

	Uart_sendstring("AT+RST\r\n");
 800120a:	4823      	ldr	r0, [pc, #140]	; (8001298 <ESP_Init+0x9c>)
 800120c:	f000 fa60 	bl	80016d0 <Uart_sendstring>
	HAL_Delay(1000);
 8001210:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001214:	f001 f93e 	bl	8002494 <HAL_Delay>

	Uart_flush();
 8001218:	f000 f9de 	bl	80015d8 <Uart_flush>

	/********* AT **********/
	Uart_sendstring("AT\r\n");
 800121c:	481f      	ldr	r0, [pc, #124]	; (800129c <ESP_Init+0xa0>)
 800121e:	f000 fa57 	bl	80016d0 <Uart_sendstring>
	while(!(Wait_for("OK\r\n")));
 8001222:	bf00      	nop
 8001224:	481e      	ldr	r0, [pc, #120]	; (80012a0 <ESP_Init+0xa4>)
 8001226:	f000 fa83 	bl	8001730 <Wait_for>
 800122a:	4603      	mov	r3, r0
 800122c:	2b00      	cmp	r3, #0
 800122e:	d0f9      	beq.n	8001224 <ESP_Init+0x28>

	Uart_flush();
 8001230:	f000 f9d2 	bl	80015d8 <Uart_flush>


	/********* AT+CWMODE=1 **********/
	Uart_sendstring("AT+CWMODE=1\r\n");
 8001234:	481b      	ldr	r0, [pc, #108]	; (80012a4 <ESP_Init+0xa8>)
 8001236:	f000 fa4b 	bl	80016d0 <Uart_sendstring>
	while (!(Wait_for("OK\r\n")));
 800123a:	bf00      	nop
 800123c:	4818      	ldr	r0, [pc, #96]	; (80012a0 <ESP_Init+0xa4>)
 800123e:	f000 fa77 	bl	8001730 <Wait_for>
 8001242:	4603      	mov	r3, r0
 8001244:	2b00      	cmp	r3, #0
 8001246:	d0f9      	beq.n	800123c <ESP_Init+0x40>

	Uart_flush();
 8001248:	f000 f9c6 	bl	80015d8 <Uart_flush>


	/********* AT+CWJAP="SSID","PASSWD" **********/
	sprintf (data, "AT+CWJAP=\"%s\",\"%s\"\r\n", SSID, PASSWD);
 800124c:	f107 0008 	add.w	r0, r7, #8
 8001250:	683b      	ldr	r3, [r7, #0]
 8001252:	687a      	ldr	r2, [r7, #4]
 8001254:	4914      	ldr	r1, [pc, #80]	; (80012a8 <ESP_Init+0xac>)
 8001256:	f005 fb95 	bl	8006984 <siprintf>
	Uart_sendstring(data);
 800125a:	f107 0308 	add.w	r3, r7, #8
 800125e:	4618      	mov	r0, r3
 8001260:	f000 fa36 	bl	80016d0 <Uart_sendstring>
	while (!(Wait_for("GOT IP\r\n")));
 8001264:	bf00      	nop
 8001266:	4811      	ldr	r0, [pc, #68]	; (80012ac <ESP_Init+0xb0>)
 8001268:	f000 fa62 	bl	8001730 <Wait_for>
 800126c:	4603      	mov	r3, r0
 800126e:	2b00      	cmp	r3, #0
 8001270:	d0f9      	beq.n	8001266 <ESP_Init+0x6a>

	Uart_flush();
 8001272:	f000 f9b1 	bl	80015d8 <Uart_flush>

	/********* AT+CIPMUX=0 **********/
	Uart_sendstring("AT+CIPMUX=0\r\n");
 8001276:	480e      	ldr	r0, [pc, #56]	; (80012b0 <ESP_Init+0xb4>)
 8001278:	f000 fa2a 	bl	80016d0 <Uart_sendstring>
	while (!(Wait_for("OK\r\n")));
 800127c:	bf00      	nop
 800127e:	4808      	ldr	r0, [pc, #32]	; (80012a0 <ESP_Init+0xa4>)
 8001280:	f000 fa56 	bl	8001730 <Wait_for>
 8001284:	4603      	mov	r3, r0
 8001286:	2b00      	cmp	r3, #0
 8001288:	d0f9      	beq.n	800127e <ESP_Init+0x82>

	Uart_flush();
 800128a:	f000 f9a5 	bl	80015d8 <Uart_flush>

}
 800128e:	bf00      	nop
 8001290:	3758      	adds	r7, #88	; 0x58
 8001292:	46bd      	mov	sp, r7
 8001294:	bd80      	pop	{r7, pc}
 8001296:	bf00      	nop
 8001298:	0800a4e0 	.word	0x0800a4e0
 800129c:	0800a4ec 	.word	0x0800a4ec
 80012a0:	0800a4f4 	.word	0x0800a4f4
 80012a4:	0800a4fc 	.word	0x0800a4fc
 80012a8:	0800a50c 	.word	0x0800a50c
 80012ac:	0800a524 	.word	0x0800a524
 80012b0:	0800a530 	.word	0x0800a530

080012b4 <ESP_Send_Multi>:
	Ringbuf_init();

}

void ESP_Send_Multi (char *APIkey, int numberoffileds, uint16_t value[])
{
 80012b4:	b580      	push	{r7, lr}
 80012b6:	f5ad 7d3e 	sub.w	sp, sp, #760	; 0x2f8
 80012ba:	af00      	add	r7, sp, #0
 80012bc:	f107 030c 	add.w	r3, r7, #12
 80012c0:	6018      	str	r0, [r3, #0]
 80012c2:	f107 0308 	add.w	r3, r7, #8
 80012c6:	6019      	str	r1, [r3, #0]
 80012c8:	1d3b      	adds	r3, r7, #4
 80012ca:	601a      	str	r2, [r3, #0]
	char local_buf[500] = {0};
 80012cc:	f107 03fc 	add.w	r3, r7, #252	; 0xfc
 80012d0:	2200      	movs	r2, #0
 80012d2:	601a      	str	r2, [r3, #0]
 80012d4:	3304      	adds	r3, #4
 80012d6:	f44f 72f8 	mov.w	r2, #496	; 0x1f0
 80012da:	2100      	movs	r1, #0
 80012dc:	4618      	mov	r0, r3
 80012de:	f004 fcd3 	bl	8005c88 <memset>
	char local_buf2[30] = {0};
 80012e2:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 80012e6:	2200      	movs	r2, #0
 80012e8:	601a      	str	r2, [r3, #0]
 80012ea:	3304      	adds	r3, #4
 80012ec:	2200      	movs	r2, #0
 80012ee:	601a      	str	r2, [r3, #0]
 80012f0:	605a      	str	r2, [r3, #4]
 80012f2:	609a      	str	r2, [r3, #8]
 80012f4:	60da      	str	r2, [r3, #12]
 80012f6:	611a      	str	r2, [r3, #16]
 80012f8:	615a      	str	r2, [r3, #20]
 80012fa:	831a      	strh	r2, [r3, #24]
	char field_buf[200] = {0};
 80012fc:	f107 0314 	add.w	r3, r7, #20
 8001300:	2200      	movs	r2, #0
 8001302:	601a      	str	r2, [r3, #0]
 8001304:	3304      	adds	r3, #4
 8001306:	22c4      	movs	r2, #196	; 0xc4
 8001308:	2100      	movs	r1, #0
 800130a:	4618      	mov	r0, r3
 800130c:	f004 fcbc 	bl	8005c88 <memset>


	Uart_sendstring("AT+CIPSTART=\"TCP\",\"184.106.153.149\",80\r\n");
 8001310:	4844      	ldr	r0, [pc, #272]	; (8001424 <ESP_Send_Multi+0x170>)
 8001312:	f000 f9dd 	bl	80016d0 <Uart_sendstring>
	while (!(Wait_for("OK\r\n")));
 8001316:	bf00      	nop
 8001318:	4843      	ldr	r0, [pc, #268]	; (8001428 <ESP_Send_Multi+0x174>)
 800131a:	f000 fa09 	bl	8001730 <Wait_for>
 800131e:	4603      	mov	r3, r0
 8001320:	2b00      	cmp	r3, #0
 8001322:	d0f9      	beq.n	8001318 <ESP_Send_Multi+0x64>

	sprintf (local_buf, "GET /update?api_key=%s", APIkey);
 8001324:	f107 030c 	add.w	r3, r7, #12
 8001328:	f107 00fc 	add.w	r0, r7, #252	; 0xfc
 800132c:	681a      	ldr	r2, [r3, #0]
 800132e:	493f      	ldr	r1, [pc, #252]	; (800142c <ESP_Send_Multi+0x178>)
 8001330:	f005 fb28 	bl	8006984 <siprintf>
	for (int i=0; i<numberoffileds; i++)
 8001334:	2300      	movs	r3, #0
 8001336:	f8c7 32f4 	str.w	r3, [r7, #756]	; 0x2f4
 800133a:	e01c      	b.n	8001376 <ESP_Send_Multi+0xc2>
	{
		sprintf(field_buf, "&field%d=%u",i+1, value[i]);
 800133c:	f8d7 32f4 	ldr.w	r3, [r7, #756]	; 0x2f4
 8001340:	1c59      	adds	r1, r3, #1
 8001342:	f8d7 32f4 	ldr.w	r3, [r7, #756]	; 0x2f4
 8001346:	005b      	lsls	r3, r3, #1
 8001348:	1d3a      	adds	r2, r7, #4
 800134a:	6812      	ldr	r2, [r2, #0]
 800134c:	4413      	add	r3, r2
 800134e:	881b      	ldrh	r3, [r3, #0]
 8001350:	f107 0014 	add.w	r0, r7, #20
 8001354:	460a      	mov	r2, r1
 8001356:	4936      	ldr	r1, [pc, #216]	; (8001430 <ESP_Send_Multi+0x17c>)
 8001358:	f005 fb14 	bl	8006984 <siprintf>
		strcat (local_buf, field_buf);
 800135c:	f107 0214 	add.w	r2, r7, #20
 8001360:	f107 03fc 	add.w	r3, r7, #252	; 0xfc
 8001364:	4611      	mov	r1, r2
 8001366:	4618      	mov	r0, r3
 8001368:	f005 fb2c 	bl	80069c4 <strcat>
	for (int i=0; i<numberoffileds; i++)
 800136c:	f8d7 32f4 	ldr.w	r3, [r7, #756]	; 0x2f4
 8001370:	3301      	adds	r3, #1
 8001372:	f8c7 32f4 	str.w	r3, [r7, #756]	; 0x2f4
 8001376:	f107 0308 	add.w	r3, r7, #8
 800137a:	f8d7 22f4 	ldr.w	r2, [r7, #756]	; 0x2f4
 800137e:	681b      	ldr	r3, [r3, #0]
 8001380:	429a      	cmp	r2, r3
 8001382:	dbdb      	blt.n	800133c <ESP_Send_Multi+0x88>
	}

	strcat(local_buf, "\r\n");
 8001384:	f107 03fc 	add.w	r3, r7, #252	; 0xfc
 8001388:	4618      	mov	r0, r3
 800138a:	f7fe fee1 	bl	8000150 <strlen>
 800138e:	4603      	mov	r3, r0
 8001390:	461a      	mov	r2, r3
 8001392:	f107 03fc 	add.w	r3, r7, #252	; 0xfc
 8001396:	4413      	add	r3, r2
 8001398:	4a26      	ldr	r2, [pc, #152]	; (8001434 <ESP_Send_Multi+0x180>)
 800139a:	8811      	ldrh	r1, [r2, #0]
 800139c:	7892      	ldrb	r2, [r2, #2]
 800139e:	8019      	strh	r1, [r3, #0]
 80013a0:	709a      	strb	r2, [r3, #2]
	int len = strlen (local_buf);
 80013a2:	f107 03fc 	add.w	r3, r7, #252	; 0xfc
 80013a6:	4618      	mov	r0, r3
 80013a8:	f7fe fed2 	bl	8000150 <strlen>
 80013ac:	4603      	mov	r3, r0
 80013ae:	f8c7 32f0 	str.w	r3, [r7, #752]	; 0x2f0

	sprintf (local_buf2, "AT+CIPSEND=%d\r\n", len);
 80013b2:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 80013b6:	f8d7 22f0 	ldr.w	r2, [r7, #752]	; 0x2f0
 80013ba:	491f      	ldr	r1, [pc, #124]	; (8001438 <ESP_Send_Multi+0x184>)
 80013bc:	4618      	mov	r0, r3
 80013be:	f005 fae1 	bl	8006984 <siprintf>
	Uart_sendstring(local_buf2);
 80013c2:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 80013c6:	4618      	mov	r0, r3
 80013c8:	f000 f982 	bl	80016d0 <Uart_sendstring>
	while (!(Wait_for(">")));
 80013cc:	bf00      	nop
 80013ce:	481b      	ldr	r0, [pc, #108]	; (800143c <ESP_Send_Multi+0x188>)
 80013d0:	f000 f9ae 	bl	8001730 <Wait_for>
 80013d4:	4603      	mov	r3, r0
 80013d6:	2b00      	cmp	r3, #0
 80013d8:	d0f9      	beq.n	80013ce <ESP_Send_Multi+0x11a>

	Uart_sendstring (local_buf);
 80013da:	f107 03fc 	add.w	r3, r7, #252	; 0xfc
 80013de:	4618      	mov	r0, r3
 80013e0:	f000 f976 	bl	80016d0 <Uart_sendstring>
	while (!(Wait_for("SEND OK\r\n")));
 80013e4:	bf00      	nop
 80013e6:	4816      	ldr	r0, [pc, #88]	; (8001440 <ESP_Send_Multi+0x18c>)
 80013e8:	f000 f9a2 	bl	8001730 <Wait_for>
 80013ec:	4603      	mov	r3, r0
 80013ee:	2b00      	cmp	r3, #0
 80013f0:	d0f9      	beq.n	80013e6 <ESP_Send_Multi+0x132>

	while (!(Wait_for("CLOSED")));
 80013f2:	bf00      	nop
 80013f4:	4813      	ldr	r0, [pc, #76]	; (8001444 <ESP_Send_Multi+0x190>)
 80013f6:	f000 f99b 	bl	8001730 <Wait_for>
 80013fa:	4603      	mov	r3, r0
 80013fc:	2b00      	cmp	r3, #0
 80013fe:	d0f9      	beq.n	80013f4 <ESP_Send_Multi+0x140>

	bufclr(local_buf);
 8001400:	f107 03fc 	add.w	r3, r7, #252	; 0xfc
 8001404:	4618      	mov	r0, r3
 8001406:	f7ff fedb 	bl	80011c0 <bufclr>
	bufclr(local_buf2);
 800140a:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 800140e:	4618      	mov	r0, r3
 8001410:	f7ff fed6 	bl	80011c0 <bufclr>

	Ringbuf_init();
 8001414:	f000 f89c 	bl	8001550 <Ringbuf_init>

}
 8001418:	bf00      	nop
 800141a:	f507 773e 	add.w	r7, r7, #760	; 0x2f8
 800141e:	46bd      	mov	sp, r7
 8001420:	bd80      	pop	{r7, pc}
 8001422:	bf00      	nop
 8001424:	0800a540 	.word	0x0800a540
 8001428:	0800a4f4 	.word	0x0800a4f4
 800142c:	0800a5b8 	.word	0x0800a5b8
 8001430:	0800a5d0 	.word	0x0800a5d0
 8001434:	0800a5dc 	.word	0x0800a5dc
 8001438:	0800a590 	.word	0x0800a590
 800143c:	0800a5a0 	.word	0x0800a5a0
 8001440:	0800a5a4 	.word	0x0800a5a4
 8001444:	0800a5b0 	.word	0x0800a5b0

08001448 <get_temp_humi>:


extern I2C_HandleTypeDef hi2c2;
#define hi2c &hi2c2

t_h get_temp_humi(){
 8001448:	b580      	push	{r7, lr}
 800144a:	b08a      	sub	sp, #40	; 0x28
 800144c:	af02      	add	r7, sp, #8
 800144e:	6078      	str	r0, [r7, #4]
	uint8_t data[2];
	int temp;
	int humi;
	uint8_t readbuff[6];

	HAL_Delay(50);
 8001450:	2032      	movs	r0, #50	; 0x32
 8001452:	f001 f81f 	bl	8002494 <HAL_Delay>
	data[0] = 0x22; //command
 8001456:	2322      	movs	r3, #34	; 0x22
 8001458:	753b      	strb	r3, [r7, #20]
	data[1] = 0x36;
 800145a:	2336      	movs	r3, #54	; 0x36
 800145c:	757b      	strb	r3, [r7, #21]
	HAL_I2C_Master_Transmit(hi2c,SLAVE_ADDRESS_SHT31A<<1,data,2,50);
 800145e:	f107 0214 	add.w	r2, r7, #20
 8001462:	2332      	movs	r3, #50	; 0x32
 8001464:	9300      	str	r3, [sp, #0]
 8001466:	2302      	movs	r3, #2
 8001468:	2188      	movs	r1, #136	; 0x88
 800146a:	4835      	ldr	r0, [pc, #212]	; (8001540 <get_temp_humi+0xf8>)
 800146c:	f002 f914 	bl	8003698 <HAL_I2C_Master_Transmit>
	HAL_Delay(50);
 8001470:	2032      	movs	r0, #50	; 0x32
 8001472:	f001 f80f 	bl	8002494 <HAL_Delay>
	HAL_I2C_Master_Receive(hi2c,SLAVE_ADDRESS_SHT31A<<1,readbuff,6,50);
 8001476:	f107 020c 	add.w	r2, r7, #12
 800147a:	2332      	movs	r3, #50	; 0x32
 800147c:	9300      	str	r3, [sp, #0]
 800147e:	2306      	movs	r3, #6
 8001480:	2188      	movs	r1, #136	; 0x88
 8001482:	482f      	ldr	r0, [pc, #188]	; (8001540 <get_temp_humi+0xf8>)
 8001484:	f002 fa06 	bl	8003894 <HAL_I2C_Master_Receive>

	temp = (readbuff[0] * 256) + readbuff[1];
 8001488:	7b3b      	ldrb	r3, [r7, #12]
 800148a:	021b      	lsls	r3, r3, #8
 800148c:	7b7a      	ldrb	r2, [r7, #13]
 800148e:	4413      	add	r3, r2
 8001490:	61fb      	str	r3, [r7, #28]
	SHT31.Temperature = -45.0 + (175.0 * temp / 65535.0);
 8001492:	69f8      	ldr	r0, [r7, #28]
 8001494:	f7fe ffb6 	bl	8000404 <__aeabi_i2d>
 8001498:	a325      	add	r3, pc, #148	; (adr r3, 8001530 <get_temp_humi+0xe8>)
 800149a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800149e:	f7ff f81b 	bl	80004d8 <__aeabi_dmul>
 80014a2:	4602      	mov	r2, r0
 80014a4:	460b      	mov	r3, r1
 80014a6:	4610      	mov	r0, r2
 80014a8:	4619      	mov	r1, r3
 80014aa:	a323      	add	r3, pc, #140	; (adr r3, 8001538 <get_temp_humi+0xf0>)
 80014ac:	e9d3 2300 	ldrd	r2, r3, [r3]
 80014b0:	f7ff f93c 	bl	800072c <__aeabi_ddiv>
 80014b4:	4602      	mov	r2, r0
 80014b6:	460b      	mov	r3, r1
 80014b8:	4610      	mov	r0, r2
 80014ba:	4619      	mov	r1, r3
 80014bc:	f04f 0200 	mov.w	r2, #0
 80014c0:	4b20      	ldr	r3, [pc, #128]	; (8001544 <get_temp_humi+0xfc>)
 80014c2:	f7fe fe51 	bl	8000168 <__aeabi_dsub>
 80014c6:	4602      	mov	r2, r0
 80014c8:	460b      	mov	r3, r1
 80014ca:	4610      	mov	r0, r2
 80014cc:	4619      	mov	r1, r3
 80014ce:	f7ff fafb 	bl	8000ac8 <__aeabi_d2f>
 80014d2:	4603      	mov	r3, r0
 80014d4:	4a1c      	ldr	r2, [pc, #112]	; (8001548 <get_temp_humi+0x100>)
 80014d6:	6013      	str	r3, [r2, #0]
	humi = (readbuff[3] * 256) + readbuff[4];
 80014d8:	7bfb      	ldrb	r3, [r7, #15]
 80014da:	021b      	lsls	r3, r3, #8
 80014dc:	7c3a      	ldrb	r2, [r7, #16]
 80014de:	4413      	add	r3, r2
 80014e0:	61bb      	str	r3, [r7, #24]
	SHT31.Humidity = (100.0 * humi / 65535.0);
 80014e2:	69b8      	ldr	r0, [r7, #24]
 80014e4:	f7fe ff8e 	bl	8000404 <__aeabi_i2d>
 80014e8:	f04f 0200 	mov.w	r2, #0
 80014ec:	4b17      	ldr	r3, [pc, #92]	; (800154c <get_temp_humi+0x104>)
 80014ee:	f7fe fff3 	bl	80004d8 <__aeabi_dmul>
 80014f2:	4602      	mov	r2, r0
 80014f4:	460b      	mov	r3, r1
 80014f6:	4610      	mov	r0, r2
 80014f8:	4619      	mov	r1, r3
 80014fa:	a30f      	add	r3, pc, #60	; (adr r3, 8001538 <get_temp_humi+0xf0>)
 80014fc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001500:	f7ff f914 	bl	800072c <__aeabi_ddiv>
 8001504:	4602      	mov	r2, r0
 8001506:	460b      	mov	r3, r1
 8001508:	4610      	mov	r0, r2
 800150a:	4619      	mov	r1, r3
 800150c:	f7ff fadc 	bl	8000ac8 <__aeabi_d2f>
 8001510:	4603      	mov	r3, r0
 8001512:	4a0d      	ldr	r2, [pc, #52]	; (8001548 <get_temp_humi+0x100>)
 8001514:	6053      	str	r3, [r2, #4]
	return SHT31;
 8001516:	687b      	ldr	r3, [r7, #4]
 8001518:	4a0b      	ldr	r2, [pc, #44]	; (8001548 <get_temp_humi+0x100>)
 800151a:	e892 0003 	ldmia.w	r2, {r0, r1}
 800151e:	e883 0003 	stmia.w	r3, {r0, r1}
}
 8001522:	6878      	ldr	r0, [r7, #4]
 8001524:	3720      	adds	r7, #32
 8001526:	46bd      	mov	sp, r7
 8001528:	bd80      	pop	{r7, pc}
 800152a:	bf00      	nop
 800152c:	f3af 8000 	nop.w
 8001530:	00000000 	.word	0x00000000
 8001534:	4065e000 	.word	0x4065e000
 8001538:	00000000 	.word	0x00000000
 800153c:	40efffe0 	.word	0x40efffe0
 8001540:	200002ac 	.word	0x200002ac
 8001544:	40468000 	.word	0x40468000
 8001548:	2000029c 	.word	0x2000029c
 800154c:	40590000 	.word	0x40590000

08001550 <Ringbuf_init>:

void store_char(unsigned char c, ring_buffer *buffer);


void Ringbuf_init(void)
{
 8001550:	b480      	push	{r7}
 8001552:	af00      	add	r7, sp, #0
  _rx_buffer = &rx_buffer;
 8001554:	4b0c      	ldr	r3, [pc, #48]	; (8001588 <Ringbuf_init+0x38>)
 8001556:	4a0d      	ldr	r2, [pc, #52]	; (800158c <Ringbuf_init+0x3c>)
 8001558:	601a      	str	r2, [r3, #0]
  _tx_buffer = &tx_buffer;
 800155a:	4b0d      	ldr	r3, [pc, #52]	; (8001590 <Ringbuf_init+0x40>)
 800155c:	4a0d      	ldr	r2, [pc, #52]	; (8001594 <Ringbuf_init+0x44>)
 800155e:	601a      	str	r2, [r3, #0]

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(uart, UART_IT_ERR);
 8001560:	4b0d      	ldr	r3, [pc, #52]	; (8001598 <Ringbuf_init+0x48>)
 8001562:	681b      	ldr	r3, [r3, #0]
 8001564:	695a      	ldr	r2, [r3, #20]
 8001566:	4b0c      	ldr	r3, [pc, #48]	; (8001598 <Ringbuf_init+0x48>)
 8001568:	681b      	ldr	r3, [r3, #0]
 800156a:	f042 0201 	orr.w	r2, r2, #1
 800156e:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(uart, UART_IT_RXNE);
 8001570:	4b09      	ldr	r3, [pc, #36]	; (8001598 <Ringbuf_init+0x48>)
 8001572:	681b      	ldr	r3, [r3, #0]
 8001574:	68da      	ldr	r2, [r3, #12]
 8001576:	4b08      	ldr	r3, [pc, #32]	; (8001598 <Ringbuf_init+0x48>)
 8001578:	681b      	ldr	r3, [r3, #0]
 800157a:	f042 0220 	orr.w	r2, r2, #32
 800157e:	60da      	str	r2, [r3, #12]
}
 8001580:	bf00      	nop
 8001582:	46bd      	mov	sp, r7
 8001584:	bc80      	pop	{r7}
 8001586:	4770      	bx	lr
 8001588:	200002a8 	.word	0x200002a8
 800158c:	200001fc 	.word	0x200001fc
 8001590:	200002a4 	.word	0x200002a4
 8001594:	20000244 	.word	0x20000244
 8001598:	20000380 	.word	0x20000380

0800159c <store_char>:

void store_char(unsigned char c, ring_buffer *buffer)
{
 800159c:	b480      	push	{r7}
 800159e:	b085      	sub	sp, #20
 80015a0:	af00      	add	r7, sp, #0
 80015a2:	4603      	mov	r3, r0
 80015a4:	6039      	str	r1, [r7, #0]
 80015a6:	71fb      	strb	r3, [r7, #7]
  int i = (unsigned int)(buffer->head + 1) % UART_BUFFER_SIZE;
 80015a8:	683b      	ldr	r3, [r7, #0]
 80015aa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80015ac:	3301      	adds	r3, #1
 80015ae:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80015b2:	60fb      	str	r3, [r7, #12]

  // if we should be storing the received character into the location
  // just before the tail (meaning that the head would advance to the
  // current location of the tail), we're about to overflow the buffer
  // and so we don't write the character or advance the head.
  if(i != buffer->tail) {
 80015b4:	683b      	ldr	r3, [r7, #0]
 80015b6:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80015b8:	68fb      	ldr	r3, [r7, #12]
 80015ba:	429a      	cmp	r2, r3
 80015bc:	d007      	beq.n	80015ce <store_char+0x32>
    buffer->buffer[buffer->head] = c;
 80015be:	683b      	ldr	r3, [r7, #0]
 80015c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80015c2:	683a      	ldr	r2, [r7, #0]
 80015c4:	79f9      	ldrb	r1, [r7, #7]
 80015c6:	54d1      	strb	r1, [r2, r3]
    buffer->head = i;
 80015c8:	68fa      	ldr	r2, [r7, #12]
 80015ca:	683b      	ldr	r3, [r7, #0]
 80015cc:	641a      	str	r2, [r3, #64]	; 0x40
  }
}
 80015ce:	bf00      	nop
 80015d0:	3714      	adds	r7, #20
 80015d2:	46bd      	mov	sp, r7
 80015d4:	bc80      	pop	{r7}
 80015d6:	4770      	bx	lr

080015d8 <Uart_flush>:

void Uart_flush (void)
{
 80015d8:	b480      	push	{r7}
 80015da:	af00      	add	r7, sp, #0

	  _rx_buffer->head = _rx_buffer->tail;
 80015dc:	4b04      	ldr	r3, [pc, #16]	; (80015f0 <Uart_flush+0x18>)
 80015de:	681a      	ldr	r2, [r3, #0]
 80015e0:	4b03      	ldr	r3, [pc, #12]	; (80015f0 <Uart_flush+0x18>)
 80015e2:	681b      	ldr	r3, [r3, #0]
 80015e4:	6c52      	ldr	r2, [r2, #68]	; 0x44
 80015e6:	641a      	str	r2, [r3, #64]	; 0x40
}
 80015e8:	bf00      	nop
 80015ea:	46bd      	mov	sp, r7
 80015ec:	bc80      	pop	{r7}
 80015ee:	4770      	bx	lr
 80015f0:	200002a8 	.word	0x200002a8

080015f4 <Uart_read>:
	if (so_far == stringlength) return 1;
	else return -1;
}

int Uart_read(void)
{
 80015f4:	b480      	push	{r7}
 80015f6:	b083      	sub	sp, #12
 80015f8:	af00      	add	r7, sp, #0
  // if the head isn't ahead of the tail, we don't have any characters
  if(_rx_buffer->head == _rx_buffer->tail)
 80015fa:	4b10      	ldr	r3, [pc, #64]	; (800163c <Uart_read+0x48>)
 80015fc:	681b      	ldr	r3, [r3, #0]
 80015fe:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001600:	4b0e      	ldr	r3, [pc, #56]	; (800163c <Uart_read+0x48>)
 8001602:	681b      	ldr	r3, [r3, #0]
 8001604:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001606:	429a      	cmp	r2, r3
 8001608:	d102      	bne.n	8001610 <Uart_read+0x1c>
  {
    return -1;
 800160a:	f04f 33ff 	mov.w	r3, #4294967295
 800160e:	e010      	b.n	8001632 <Uart_read+0x3e>
  }
  else
  {
    unsigned char c = _rx_buffer->buffer[_rx_buffer->tail];
 8001610:	4b0a      	ldr	r3, [pc, #40]	; (800163c <Uart_read+0x48>)
 8001612:	681a      	ldr	r2, [r3, #0]
 8001614:	4b09      	ldr	r3, [pc, #36]	; (800163c <Uart_read+0x48>)
 8001616:	681b      	ldr	r3, [r3, #0]
 8001618:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800161a:	5cd3      	ldrb	r3, [r2, r3]
 800161c:	71fb      	strb	r3, [r7, #7]
    _rx_buffer->tail = (unsigned int)(_rx_buffer->tail + 1) % UART_BUFFER_SIZE;
 800161e:	4b07      	ldr	r3, [pc, #28]	; (800163c <Uart_read+0x48>)
 8001620:	681b      	ldr	r3, [r3, #0]
 8001622:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001624:	1c5a      	adds	r2, r3, #1
 8001626:	4b05      	ldr	r3, [pc, #20]	; (800163c <Uart_read+0x48>)
 8001628:	681b      	ldr	r3, [r3, #0]
 800162a:	f002 023f 	and.w	r2, r2, #63	; 0x3f
 800162e:	645a      	str	r2, [r3, #68]	; 0x44
    return c;
 8001630:	79fb      	ldrb	r3, [r7, #7]
  }
}
 8001632:	4618      	mov	r0, r3
 8001634:	370c      	adds	r7, #12
 8001636:	46bd      	mov	sp, r7
 8001638:	bc80      	pop	{r7}
 800163a:	4770      	bx	lr
 800163c:	200002a8 	.word	0x200002a8

08001640 <Uart_write>:

void Uart_write(int c)
{
 8001640:	b480      	push	{r7}
 8001642:	b085      	sub	sp, #20
 8001644:	af00      	add	r7, sp, #0
 8001646:	6078      	str	r0, [r7, #4]
	if (c>=0)
 8001648:	687b      	ldr	r3, [r7, #4]
 800164a:	2b00      	cmp	r3, #0
 800164c:	db21      	blt.n	8001692 <Uart_write+0x52>
	{
		int i = (_tx_buffer->head + 1) % UART_BUFFER_SIZE;
 800164e:	4b13      	ldr	r3, [pc, #76]	; (800169c <Uart_write+0x5c>)
 8001650:	681b      	ldr	r3, [r3, #0]
 8001652:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001654:	3301      	adds	r3, #1
 8001656:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800165a:	60fb      	str	r3, [r7, #12]

		// If the output buffer is full, there's nothing for it other than to
		// wait for the interrupt handler to empty it a bit
		// ???: return 0 here instead?
		while (i == _tx_buffer->tail);
 800165c:	bf00      	nop
 800165e:	4b0f      	ldr	r3, [pc, #60]	; (800169c <Uart_write+0x5c>)
 8001660:	681b      	ldr	r3, [r3, #0]
 8001662:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8001664:	68fb      	ldr	r3, [r7, #12]
 8001666:	429a      	cmp	r2, r3
 8001668:	d0f9      	beq.n	800165e <Uart_write+0x1e>

		_tx_buffer->buffer[_tx_buffer->head] = (uint8_t)c;
 800166a:	4b0c      	ldr	r3, [pc, #48]	; (800169c <Uart_write+0x5c>)
 800166c:	681a      	ldr	r2, [r3, #0]
 800166e:	4b0b      	ldr	r3, [pc, #44]	; (800169c <Uart_write+0x5c>)
 8001670:	681b      	ldr	r3, [r3, #0]
 8001672:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001674:	6879      	ldr	r1, [r7, #4]
 8001676:	b2c9      	uxtb	r1, r1
 8001678:	54d1      	strb	r1, [r2, r3]
		_tx_buffer->head = i;
 800167a:	4b08      	ldr	r3, [pc, #32]	; (800169c <Uart_write+0x5c>)
 800167c:	681b      	ldr	r3, [r3, #0]
 800167e:	68fa      	ldr	r2, [r7, #12]
 8001680:	641a      	str	r2, [r3, #64]	; 0x40

		__HAL_UART_ENABLE_IT(uart, UART_IT_TXE); // Enable UART transmission interrupt
 8001682:	4b07      	ldr	r3, [pc, #28]	; (80016a0 <Uart_write+0x60>)
 8001684:	681b      	ldr	r3, [r3, #0]
 8001686:	68da      	ldr	r2, [r3, #12]
 8001688:	4b05      	ldr	r3, [pc, #20]	; (80016a0 <Uart_write+0x60>)
 800168a:	681b      	ldr	r3, [r3, #0]
 800168c:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8001690:	60da      	str	r2, [r3, #12]
	}
}
 8001692:	bf00      	nop
 8001694:	3714      	adds	r7, #20
 8001696:	46bd      	mov	sp, r7
 8001698:	bc80      	pop	{r7}
 800169a:	4770      	bx	lr
 800169c:	200002a4 	.word	0x200002a4
 80016a0:	20000380 	.word	0x20000380

080016a4 <IsDataAvailable>:

int IsDataAvailable(void)
{
 80016a4:	b480      	push	{r7}
 80016a6:	af00      	add	r7, sp, #0
  return (uint16_t)(UART_BUFFER_SIZE + _rx_buffer->head - _rx_buffer->tail) % UART_BUFFER_SIZE;
 80016a8:	4b08      	ldr	r3, [pc, #32]	; (80016cc <IsDataAvailable+0x28>)
 80016aa:	681b      	ldr	r3, [r3, #0]
 80016ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80016ae:	b29a      	uxth	r2, r3
 80016b0:	4b06      	ldr	r3, [pc, #24]	; (80016cc <IsDataAvailable+0x28>)
 80016b2:	681b      	ldr	r3, [r3, #0]
 80016b4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80016b6:	b29b      	uxth	r3, r3
 80016b8:	1ad3      	subs	r3, r2, r3
 80016ba:	b29b      	uxth	r3, r3
 80016bc:	3340      	adds	r3, #64	; 0x40
 80016be:	b29b      	uxth	r3, r3
 80016c0:	f003 033f 	and.w	r3, r3, #63	; 0x3f
}
 80016c4:	4618      	mov	r0, r3
 80016c6:	46bd      	mov	sp, r7
 80016c8:	bc80      	pop	{r7}
 80016ca:	4770      	bx	lr
 80016cc:	200002a8 	.word	0x200002a8

080016d0 <Uart_sendstring>:

void Uart_sendstring (const char *s)
{
 80016d0:	b580      	push	{r7, lr}
 80016d2:	b082      	sub	sp, #8
 80016d4:	af00      	add	r7, sp, #0
 80016d6:	6078      	str	r0, [r7, #4]
	while(*s) Uart_write(*s++);
 80016d8:	e006      	b.n	80016e8 <Uart_sendstring+0x18>
 80016da:	687b      	ldr	r3, [r7, #4]
 80016dc:	1c5a      	adds	r2, r3, #1
 80016de:	607a      	str	r2, [r7, #4]
 80016e0:	781b      	ldrb	r3, [r3, #0]
 80016e2:	4618      	mov	r0, r3
 80016e4:	f7ff ffac 	bl	8001640 <Uart_write>
 80016e8:	687b      	ldr	r3, [r7, #4]
 80016ea:	781b      	ldrb	r3, [r3, #0]
 80016ec:	2b00      	cmp	r3, #0
 80016ee:	d1f4      	bne.n	80016da <Uart_sendstring+0xa>
}
 80016f0:	bf00      	nop
 80016f2:	bf00      	nop
 80016f4:	3708      	adds	r7, #8
 80016f6:	46bd      	mov	sp, r7
 80016f8:	bd80      	pop	{r7, pc}
	...

080016fc <Uart_peek>:

  while(*s) Uart_write(*s++);
}

int Uart_peek()
{
 80016fc:	b480      	push	{r7}
 80016fe:	af00      	add	r7, sp, #0
  if(_rx_buffer->head == _rx_buffer->tail)
 8001700:	4b0a      	ldr	r3, [pc, #40]	; (800172c <Uart_peek+0x30>)
 8001702:	681b      	ldr	r3, [r3, #0]
 8001704:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001706:	4b09      	ldr	r3, [pc, #36]	; (800172c <Uart_peek+0x30>)
 8001708:	681b      	ldr	r3, [r3, #0]
 800170a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800170c:	429a      	cmp	r2, r3
 800170e:	d102      	bne.n	8001716 <Uart_peek+0x1a>
  {
    return -1;
 8001710:	f04f 33ff 	mov.w	r3, #4294967295
 8001714:	e005      	b.n	8001722 <Uart_peek+0x26>
  }
  else
  {
    return _rx_buffer->buffer[_rx_buffer->tail];
 8001716:	4b05      	ldr	r3, [pc, #20]	; (800172c <Uart_peek+0x30>)
 8001718:	681a      	ldr	r2, [r3, #0]
 800171a:	4b04      	ldr	r3, [pc, #16]	; (800172c <Uart_peek+0x30>)
 800171c:	681b      	ldr	r3, [r3, #0]
 800171e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001720:	5cd3      	ldrb	r3, [r2, r3]
  }
}
 8001722:	4618      	mov	r0, r3
 8001724:	46bd      	mov	sp, r7
 8001726:	bc80      	pop	{r7}
 8001728:	4770      	bx	lr
 800172a:	bf00      	nop
 800172c:	200002a8 	.word	0x200002a8

08001730 <Wait_for>:
	return 1;
}


int Wait_for (char *string)
{
 8001730:	b580      	push	{r7, lr}
 8001732:	b084      	sub	sp, #16
 8001734:	af00      	add	r7, sp, #0
 8001736:	6078      	str	r0, [r7, #4]
	int so_far =0;
 8001738:	2300      	movs	r3, #0
 800173a:	60fb      	str	r3, [r7, #12]
	int len = strlen (string);
 800173c:	6878      	ldr	r0, [r7, #4]
 800173e:	f7fe fd07 	bl	8000150 <strlen>
 8001742:	4603      	mov	r3, r0
 8001744:	60bb      	str	r3, [r7, #8]

again:
	while (!IsDataAvailable());
 8001746:	bf00      	nop
 8001748:	f7ff ffac 	bl	80016a4 <IsDataAvailable>
 800174c:	4603      	mov	r3, r0
 800174e:	2b00      	cmp	r3, #0
 8001750:	d0fa      	beq.n	8001748 <Wait_for+0x18>
	if (Uart_peek() != string[so_far])
 8001752:	f7ff ffd3 	bl	80016fc <Uart_peek>
 8001756:	4601      	mov	r1, r0
 8001758:	68fb      	ldr	r3, [r7, #12]
 800175a:	687a      	ldr	r2, [r7, #4]
 800175c:	4413      	add	r3, r2
 800175e:	781b      	ldrb	r3, [r3, #0]
 8001760:	4299      	cmp	r1, r3
 8001762:	d01a      	beq.n	800179a <Wait_for+0x6a>
	{
		 _rx_buffer->tail = (unsigned int)(_rx_buffer->tail + 1) % UART_BUFFER_SIZE ;
 8001764:	4b1b      	ldr	r3, [pc, #108]	; (80017d4 <Wait_for+0xa4>)
 8001766:	681b      	ldr	r3, [r3, #0]
 8001768:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800176a:	1c5a      	adds	r2, r3, #1
 800176c:	4b19      	ldr	r3, [pc, #100]	; (80017d4 <Wait_for+0xa4>)
 800176e:	681b      	ldr	r3, [r3, #0]
 8001770:	f002 023f 	and.w	r2, r2, #63	; 0x3f
 8001774:	645a      	str	r2, [r3, #68]	; 0x44
		goto again;
 8001776:	e7e6      	b.n	8001746 <Wait_for+0x16>

	}
	while (Uart_peek() == string [so_far])
	{
		so_far++;
 8001778:	68fb      	ldr	r3, [r7, #12]
 800177a:	3301      	adds	r3, #1
 800177c:	60fb      	str	r3, [r7, #12]
		Uart_read();
 800177e:	f7ff ff39 	bl	80015f4 <Uart_read>
		if (so_far == len) return 1;
 8001782:	68fa      	ldr	r2, [r7, #12]
 8001784:	68bb      	ldr	r3, [r7, #8]
 8001786:	429a      	cmp	r2, r3
 8001788:	d101      	bne.n	800178e <Wait_for+0x5e>
 800178a:	2301      	movs	r3, #1
 800178c:	e01d      	b.n	80017ca <Wait_for+0x9a>
		while (!IsDataAvailable());
 800178e:	bf00      	nop
 8001790:	f7ff ff88 	bl	80016a4 <IsDataAvailable>
 8001794:	4603      	mov	r3, r0
 8001796:	2b00      	cmp	r3, #0
 8001798:	d0fa      	beq.n	8001790 <Wait_for+0x60>
	while (Uart_peek() == string [so_far])
 800179a:	f7ff ffaf 	bl	80016fc <Uart_peek>
 800179e:	4601      	mov	r1, r0
 80017a0:	68fb      	ldr	r3, [r7, #12]
 80017a2:	687a      	ldr	r2, [r7, #4]
 80017a4:	4413      	add	r3, r2
 80017a6:	781b      	ldrb	r3, [r3, #0]
 80017a8:	4299      	cmp	r1, r3
 80017aa:	d0e5      	beq.n	8001778 <Wait_for+0x48>
	}

	if (so_far != len)
 80017ac:	68fa      	ldr	r2, [r7, #12]
 80017ae:	68bb      	ldr	r3, [r7, #8]
 80017b0:	429a      	cmp	r2, r3
 80017b2:	d002      	beq.n	80017ba <Wait_for+0x8a>
	{
		so_far = 0;
 80017b4:	2300      	movs	r3, #0
 80017b6:	60fb      	str	r3, [r7, #12]
		goto again;
 80017b8:	e7c5      	b.n	8001746 <Wait_for+0x16>
	}

	if (so_far == len) return 1;
 80017ba:	68fa      	ldr	r2, [r7, #12]
 80017bc:	68bb      	ldr	r3, [r7, #8]
 80017be:	429a      	cmp	r2, r3
 80017c0:	d101      	bne.n	80017c6 <Wait_for+0x96>
 80017c2:	2301      	movs	r3, #1
 80017c4:	e001      	b.n	80017ca <Wait_for+0x9a>
	else return -1;
 80017c6:	f04f 33ff 	mov.w	r3, #4294967295
}
 80017ca:	4618      	mov	r0, r3
 80017cc:	3710      	adds	r7, #16
 80017ce:	46bd      	mov	sp, r7
 80017d0:	bd80      	pop	{r7, pc}
 80017d2:	bf00      	nop
 80017d4:	200002a8 	.word	0x200002a8

080017d8 <Uart_isr>:




void Uart_isr (UART_HandleTypeDef *huart)
{
 80017d8:	b580      	push	{r7, lr}
 80017da:	b086      	sub	sp, #24
 80017dc:	af00      	add	r7, sp, #0
 80017de:	6078      	str	r0, [r7, #4]
	  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 80017e0:	687b      	ldr	r3, [r7, #4]
 80017e2:	681b      	ldr	r3, [r3, #0]
 80017e4:	681b      	ldr	r3, [r3, #0]
 80017e6:	617b      	str	r3, [r7, #20]
	  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80017e8:	687b      	ldr	r3, [r7, #4]
 80017ea:	681b      	ldr	r3, [r3, #0]
 80017ec:	68db      	ldr	r3, [r3, #12]
 80017ee:	613b      	str	r3, [r7, #16]

    /* if DR is not empty and the Rx Int is enabled */
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80017f0:	697b      	ldr	r3, [r7, #20]
 80017f2:	f003 0320 	and.w	r3, r3, #32
 80017f6:	2b00      	cmp	r3, #0
 80017f8:	d013      	beq.n	8001822 <Uart_isr+0x4a>
 80017fa:	693b      	ldr	r3, [r7, #16]
 80017fc:	f003 0320 	and.w	r3, r3, #32
 8001800:	2b00      	cmp	r3, #0
 8001802:	d00e      	beq.n	8001822 <Uart_isr+0x4a>
    	    	      * @note   TC flag can be also cleared by software sequence: a read operation to
    	    	      *          USART_SR register followed by a write operation to USART_DR register.
    	    	      * @note   TXE flag is cleared only by a write to the USART_DR register.

    	 *********************/
		huart->Instance->SR;                       /* Read status register */
 8001804:	687b      	ldr	r3, [r7, #4]
 8001806:	681b      	ldr	r3, [r3, #0]
 8001808:	681b      	ldr	r3, [r3, #0]
        unsigned char c = huart->Instance->DR;     /* Read data register */
 800180a:	687b      	ldr	r3, [r7, #4]
 800180c:	681b      	ldr	r3, [r3, #0]
 800180e:	685b      	ldr	r3, [r3, #4]
 8001810:	73fb      	strb	r3, [r7, #15]
        store_char (c, _rx_buffer);  // store data in buffer
 8001812:	4b1c      	ldr	r3, [pc, #112]	; (8001884 <Uart_isr+0xac>)
 8001814:	681a      	ldr	r2, [r3, #0]
 8001816:	7bfb      	ldrb	r3, [r7, #15]
 8001818:	4611      	mov	r1, r2
 800181a:	4618      	mov	r0, r3
 800181c:	f7ff febe 	bl	800159c <store_char>
        return;
 8001820:	e02c      	b.n	800187c <Uart_isr+0xa4>
    }

    /*If interrupt is caused due to Transmit Data Register Empty */
    if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8001822:	697b      	ldr	r3, [r7, #20]
 8001824:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001828:	2b00      	cmp	r3, #0
 800182a:	d027      	beq.n	800187c <Uart_isr+0xa4>
 800182c:	693b      	ldr	r3, [r7, #16]
 800182e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001832:	2b00      	cmp	r3, #0
 8001834:	d022      	beq.n	800187c <Uart_isr+0xa4>
    {
    	if(tx_buffer.head == tx_buffer.tail)
 8001836:	4b14      	ldr	r3, [pc, #80]	; (8001888 <Uart_isr+0xb0>)
 8001838:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800183a:	4b13      	ldr	r3, [pc, #76]	; (8001888 <Uart_isr+0xb0>)
 800183c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800183e:	429a      	cmp	r2, r3
 8001840:	d108      	bne.n	8001854 <Uart_isr+0x7c>
    	    {
    	      // Buffer empty, so disable interrupts
    	      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8001842:	687b      	ldr	r3, [r7, #4]
 8001844:	681b      	ldr	r3, [r3, #0]
 8001846:	68da      	ldr	r2, [r3, #12]
 8001848:	687b      	ldr	r3, [r7, #4]
 800184a:	681b      	ldr	r3, [r3, #0]
 800184c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8001850:	60da      	str	r2, [r3, #12]

    	      huart->Instance->SR;
    	      huart->Instance->DR = c;

    	    }
    	return;
 8001852:	e012      	b.n	800187a <Uart_isr+0xa2>
    	      unsigned char c = tx_buffer.buffer[tx_buffer.tail];
 8001854:	4b0c      	ldr	r3, [pc, #48]	; (8001888 <Uart_isr+0xb0>)
 8001856:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001858:	4a0b      	ldr	r2, [pc, #44]	; (8001888 <Uart_isr+0xb0>)
 800185a:	5cd3      	ldrb	r3, [r2, r3]
 800185c:	73bb      	strb	r3, [r7, #14]
    	      tx_buffer.tail = (tx_buffer.tail + 1) % UART_BUFFER_SIZE;
 800185e:	4b0a      	ldr	r3, [pc, #40]	; (8001888 <Uart_isr+0xb0>)
 8001860:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001862:	3301      	adds	r3, #1
 8001864:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8001868:	4a07      	ldr	r2, [pc, #28]	; (8001888 <Uart_isr+0xb0>)
 800186a:	6453      	str	r3, [r2, #68]	; 0x44
    	      huart->Instance->SR;
 800186c:	687b      	ldr	r3, [r7, #4]
 800186e:	681b      	ldr	r3, [r3, #0]
 8001870:	681b      	ldr	r3, [r3, #0]
    	      huart->Instance->DR = c;
 8001872:	687b      	ldr	r3, [r7, #4]
 8001874:	681b      	ldr	r3, [r3, #0]
 8001876:	7bba      	ldrb	r2, [r7, #14]
 8001878:	605a      	str	r2, [r3, #4]
    	return;
 800187a:	bf00      	nop
    }
}
 800187c:	3718      	adds	r7, #24
 800187e:	46bd      	mov	sp, r7
 8001880:	bd80      	pop	{r7, pc}
 8001882:	bf00      	nop
 8001884:	200002a8 	.word	0x200002a8
 8001888:	20000244 	.word	0x20000244

0800188c <lcd_init>:
#define hi2c &hi2c2

#define SLAVE_ADDRESS_LCD 0x4E

void lcd_init (void)
{
 800188c:	b580      	push	{r7, lr}
 800188e:	af00      	add	r7, sp, #0
	// 4 bit set
	HAL_Delay(20);  // wait for >15ms
 8001890:	2014      	movs	r0, #20
 8001892:	f000 fdff 	bl	8002494 <HAL_Delay>
	lcd_send_command (0x30);
 8001896:	2030      	movs	r0, #48	; 0x30
 8001898:	f000 f832 	bl	8001900 <lcd_send_command>
	HAL_Delay(5);  // wait for >4.1ms
 800189c:	2005      	movs	r0, #5
 800189e:	f000 fdf9 	bl	8002494 <HAL_Delay>
	lcd_send_command (0x30);
 80018a2:	2030      	movs	r0, #48	; 0x30
 80018a4:	f000 f82c 	bl	8001900 <lcd_send_command>
	HAL_Delay(1);  // wait for >100us
 80018a8:	2001      	movs	r0, #1
 80018aa:	f000 fdf3 	bl	8002494 <HAL_Delay>
	lcd_send_command (0x30);
 80018ae:	2030      	movs	r0, #48	; 0x30
 80018b0:	f000 f826 	bl	8001900 <lcd_send_command>
	HAL_Delay(10);
 80018b4:	200a      	movs	r0, #10
 80018b6:	f000 fded 	bl	8002494 <HAL_Delay>
	lcd_send_command (0x20);  // 4bit mode
 80018ba:	2020      	movs	r0, #32
 80018bc:	f000 f820 	bl	8001900 <lcd_send_command>
	HAL_Delay(10);
 80018c0:	200a      	movs	r0, #10
 80018c2:	f000 fde7 	bl	8002494 <HAL_Delay>
	// set display
	lcd_send_command (0x28); // Function set: DL=0 (4 bit mode), N = 1 (2 line display) F = 0 (5x8 characters)
 80018c6:	2028      	movs	r0, #40	; 0x28
 80018c8:	f000 f81a 	bl	8001900 <lcd_send_command>
	HAL_Delay(1);
 80018cc:	2001      	movs	r0, #1
 80018ce:	f000 fde1 	bl	8002494 <HAL_Delay>
	lcd_send_command (0x08); //Display on/off control: D=0,C=0, B=0  ---> display off
 80018d2:	2008      	movs	r0, #8
 80018d4:	f000 f814 	bl	8001900 <lcd_send_command>
	HAL_Delay(1);
 80018d8:	2001      	movs	r0, #1
 80018da:	f000 fddb 	bl	8002494 <HAL_Delay>
	lcd_send_command (0x01);  // clear display
 80018de:	2001      	movs	r0, #1
 80018e0:	f000 f80e 	bl	8001900 <lcd_send_command>
	HAL_Delay(2);
 80018e4:	2002      	movs	r0, #2
 80018e6:	f000 fdd5 	bl	8002494 <HAL_Delay>
	lcd_send_command (0x06); //Entry mode set: I/D = 1 (increment cursor), SH = 0 (no shift)
 80018ea:	2006      	movs	r0, #6
 80018ec:	f000 f808 	bl	8001900 <lcd_send_command>
	HAL_Delay(1);
 80018f0:	2001      	movs	r0, #1
 80018f2:	f000 fdcf 	bl	8002494 <HAL_Delay>
	lcd_send_command (0x0C); //Display on/off control: D = 1, C, B = 0
 80018f6:	200c      	movs	r0, #12
 80018f8:	f000 f802 	bl	8001900 <lcd_send_command>
}
 80018fc:	bf00      	nop
 80018fe:	bd80      	pop	{r7, pc}

08001900 <lcd_send_command>:

void lcd_send_command (char cmd)
{
 8001900:	b580      	push	{r7, lr}
 8001902:	b086      	sub	sp, #24
 8001904:	af02      	add	r7, sp, #8
 8001906:	4603      	mov	r3, r0
 8001908:	71fb      	strb	r3, [r7, #7]
  char data_u, data_l;
	uint8_t data_t[4];
	data_u = (cmd&0xf0);
 800190a:	79fb      	ldrb	r3, [r7, #7]
 800190c:	f023 030f 	bic.w	r3, r3, #15
 8001910:	73fb      	strb	r3, [r7, #15]
	data_l = ((cmd<<4)&0xf0);
 8001912:	79fb      	ldrb	r3, [r7, #7]
 8001914:	011b      	lsls	r3, r3, #4
 8001916:	73bb      	strb	r3, [r7, #14]
	data_t[0] = data_u|0x0C;  // E =1, RS =0, R/W =0
 8001918:	7bfb      	ldrb	r3, [r7, #15]
 800191a:	f043 030c 	orr.w	r3, r3, #12
 800191e:	b2db      	uxtb	r3, r3
 8001920:	723b      	strb	r3, [r7, #8]
	data_t[1] = data_u|0x08;  // E =0, RS =0
 8001922:	7bfb      	ldrb	r3, [r7, #15]
 8001924:	f043 0308 	orr.w	r3, r3, #8
 8001928:	b2db      	uxtb	r3, r3
 800192a:	727b      	strb	r3, [r7, #9]
	data_t[2] = data_l|0x0C;  // E =1, RS =0
 800192c:	7bbb      	ldrb	r3, [r7, #14]
 800192e:	f043 030c 	orr.w	r3, r3, #12
 8001932:	b2db      	uxtb	r3, r3
 8001934:	72bb      	strb	r3, [r7, #10]
	data_t[3] = data_l|0x08;  // E =0, RS =0
 8001936:	7bbb      	ldrb	r3, [r7, #14]
 8001938:	f043 0308 	orr.w	r3, r3, #8
 800193c:	b2db      	uxtb	r3, r3
 800193e:	72fb      	strb	r3, [r7, #11]
	HAL_I2C_Master_Transmit (hi2c, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 8001940:	f107 0208 	add.w	r2, r7, #8
 8001944:	2364      	movs	r3, #100	; 0x64
 8001946:	9300      	str	r3, [sp, #0]
 8001948:	2304      	movs	r3, #4
 800194a:	214e      	movs	r1, #78	; 0x4e
 800194c:	4803      	ldr	r0, [pc, #12]	; (800195c <lcd_send_command+0x5c>)
 800194e:	f001 fea3 	bl	8003698 <HAL_I2C_Master_Transmit>
}
 8001952:	bf00      	nop
 8001954:	3710      	adds	r7, #16
 8001956:	46bd      	mov	sp, r7
 8001958:	bd80      	pop	{r7, pc}
 800195a:	bf00      	nop
 800195c:	200002ac 	.word	0x200002ac

08001960 <lcd_send_data>:

void lcd_send_data (char data)
{
 8001960:	b580      	push	{r7, lr}
 8001962:	b086      	sub	sp, #24
 8001964:	af02      	add	r7, sp, #8
 8001966:	4603      	mov	r3, r0
 8001968:	71fb      	strb	r3, [r7, #7]
	char data_u, data_l;
	uint8_t data_t[4];
	data_u = (data&0xf0);
 800196a:	79fb      	ldrb	r3, [r7, #7]
 800196c:	f023 030f 	bic.w	r3, r3, #15
 8001970:	73fb      	strb	r3, [r7, #15]
	data_l = ((data<<4)&0xf0);
 8001972:	79fb      	ldrb	r3, [r7, #7]
 8001974:	011b      	lsls	r3, r3, #4
 8001976:	73bb      	strb	r3, [r7, #14]
	data_t[0] = data_u|0x0D;  // E =1, RS =1, R/W =0
 8001978:	7bfb      	ldrb	r3, [r7, #15]
 800197a:	f043 030d 	orr.w	r3, r3, #13
 800197e:	b2db      	uxtb	r3, r3
 8001980:	723b      	strb	r3, [r7, #8]
	data_t[1] = data_u|0x09;  // E =0, RS =1
 8001982:	7bfb      	ldrb	r3, [r7, #15]
 8001984:	f043 0309 	orr.w	r3, r3, #9
 8001988:	b2db      	uxtb	r3, r3
 800198a:	727b      	strb	r3, [r7, #9]
	data_t[2] = data_l|0x0D;  // E =1, RS =1
 800198c:	7bbb      	ldrb	r3, [r7, #14]
 800198e:	f043 030d 	orr.w	r3, r3, #13
 8001992:	b2db      	uxtb	r3, r3
 8001994:	72bb      	strb	r3, [r7, #10]
	data_t[3] = data_l|0x09;  // E =0, RS =1
 8001996:	7bbb      	ldrb	r3, [r7, #14]
 8001998:	f043 0309 	orr.w	r3, r3, #9
 800199c:	b2db      	uxtb	r3, r3
 800199e:	72fb      	strb	r3, [r7, #11]
	HAL_I2C_Master_Transmit (hi2c, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 80019a0:	f107 0208 	add.w	r2, r7, #8
 80019a4:	2364      	movs	r3, #100	; 0x64
 80019a6:	9300      	str	r3, [sp, #0]
 80019a8:	2304      	movs	r3, #4
 80019aa:	214e      	movs	r1, #78	; 0x4e
 80019ac:	4803      	ldr	r0, [pc, #12]	; (80019bc <lcd_send_data+0x5c>)
 80019ae:	f001 fe73 	bl	8003698 <HAL_I2C_Master_Transmit>
}
 80019b2:	bf00      	nop
 80019b4:	3710      	adds	r7, #16
 80019b6:	46bd      	mov	sp, r7
 80019b8:	bd80      	pop	{r7, pc}
 80019ba:	bf00      	nop
 80019bc:	200002ac 	.word	0x200002ac

080019c0 <lcd_clear>:

void lcd_clear (void)
{
 80019c0:	b580      	push	{r7, lr}
 80019c2:	af00      	add	r7, sp, #0
	lcd_send_command(0x01);
 80019c4:	2001      	movs	r0, #1
 80019c6:	f7ff ff9b 	bl	8001900 <lcd_send_command>
	HAL_Delay(2);
 80019ca:	2002      	movs	r0, #2
 80019cc:	f000 fd62 	bl	8002494 <HAL_Delay>
}
 80019d0:	bf00      	nop
 80019d2:	bd80      	pop	{r7, pc}

080019d4 <lcd_put_cur>:

void lcd_put_cur(int row, int col)
{
 80019d4:	b580      	push	{r7, lr}
 80019d6:	b082      	sub	sp, #8
 80019d8:	af00      	add	r7, sp, #0
 80019da:	6078      	str	r0, [r7, #4]
 80019dc:	6039      	str	r1, [r7, #0]
    switch (row)
 80019de:	687b      	ldr	r3, [r7, #4]
 80019e0:	2b00      	cmp	r3, #0
 80019e2:	d003      	beq.n	80019ec <lcd_put_cur+0x18>
 80019e4:	687b      	ldr	r3, [r7, #4]
 80019e6:	2b01      	cmp	r3, #1
 80019e8:	d005      	beq.n	80019f6 <lcd_put_cur+0x22>
 80019ea:	e009      	b.n	8001a00 <lcd_put_cur+0x2c>
    {
        case 0:
            col |= 0x80; // DDRAM address row 1
 80019ec:	683b      	ldr	r3, [r7, #0]
 80019ee:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80019f2:	603b      	str	r3, [r7, #0]
            break;
 80019f4:	e004      	b.n	8001a00 <lcd_put_cur+0x2c>
        case 1:
            col |= 0xC0; // DDRAM address row 2
 80019f6:	683b      	ldr	r3, [r7, #0]
 80019f8:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 80019fc:	603b      	str	r3, [r7, #0]
            break;
 80019fe:	bf00      	nop
    }

    lcd_send_command (col);
 8001a00:	683b      	ldr	r3, [r7, #0]
 8001a02:	b2db      	uxtb	r3, r3
 8001a04:	4618      	mov	r0, r3
 8001a06:	f7ff ff7b 	bl	8001900 <lcd_send_command>
}
 8001a0a:	bf00      	nop
 8001a0c:	3708      	adds	r7, #8
 8001a0e:	46bd      	mov	sp, r7
 8001a10:	bd80      	pop	{r7, pc}

08001a12 <lcd_send_string>:

void lcd_send_string (char *str)
{
 8001a12:	b580      	push	{r7, lr}
 8001a14:	b082      	sub	sp, #8
 8001a16:	af00      	add	r7, sp, #0
 8001a18:	6078      	str	r0, [r7, #4]
	while (*str) lcd_send_data (*str++);
 8001a1a:	e006      	b.n	8001a2a <lcd_send_string+0x18>
 8001a1c:	687b      	ldr	r3, [r7, #4]
 8001a1e:	1c5a      	adds	r2, r3, #1
 8001a20:	607a      	str	r2, [r7, #4]
 8001a22:	781b      	ldrb	r3, [r3, #0]
 8001a24:	4618      	mov	r0, r3
 8001a26:	f7ff ff9b 	bl	8001960 <lcd_send_data>
 8001a2a:	687b      	ldr	r3, [r7, #4]
 8001a2c:	781b      	ldrb	r3, [r3, #0]
 8001a2e:	2b00      	cmp	r3, #0
 8001a30:	d1f4      	bne.n	8001a1c <lcd_send_string+0xa>
}
 8001a32:	bf00      	nop
 8001a34:	bf00      	nop
 8001a36:	3708      	adds	r7, #8
 8001a38:	46bd      	mov	sp, r7
 8001a3a:	bd80      	pop	{r7, pc}

08001a3c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001a3c:	b5b0      	push	{r4, r5, r7, lr}
 8001a3e:	b08c      	sub	sp, #48	; 0x30
 8001a40:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001a42:	f000 fcc5 	bl	80023d0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001a46:	f000 f8e1 	bl	8001c0c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001a4a:	f000 fa21 	bl	8001e90 <MX_GPIO_Init>
  MX_ADC1_Init();
 8001a4e:	f000 f939 	bl	8001cc4 <MX_ADC1_Init>
  MX_I2C2_Init();
 8001a52:	f000 f975 	bl	8001d40 <MX_I2C2_Init>
  MX_TIM1_Init();
 8001a56:	f000 f9a1 	bl	8001d9c <MX_TIM1_Init>
  MX_USART2_UART_Init();
 8001a5a:	f000 f9ef 	bl	8001e3c <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_Base_Start(&htim1);
 8001a5e:	485d      	ldr	r0, [pc, #372]	; (8001bd4 <main+0x198>)
 8001a60:	f003 fa88 	bl	8004f74 <HAL_TIM_Base_Start>


    lcd_init();
 8001a64:	f7ff ff12 	bl	800188c <lcd_init>
    lcd_clear();
 8001a68:	f7ff ffaa 	bl	80019c0 <lcd_clear>
    lcd_send_string("Four variables");
 8001a6c:	485a      	ldr	r0, [pc, #360]	; (8001bd8 <main+0x19c>)
 8001a6e:	f7ff ffd0 	bl	8001a12 <lcd_send_string>

    //set up connect ESP to wifi
    ESP_Init("TP-LINK_8803D8", "0988020288");
 8001a72:	495a      	ldr	r1, [pc, #360]	; (8001bdc <main+0x1a0>)
 8001a74:	485a      	ldr	r0, [pc, #360]	; (8001be0 <main+0x1a4>)
 8001a76:	f7ff fbc1 	bl	80011fc <ESP_Init>

    //set up for BH1750FVI
    PowerDown();
 8001a7a:	f7ff fb41 	bl	8001100 <PowerDown>
    PowerOn();
 8001a7e:	f7ff fb29 	bl	80010d4 <PowerOn>
    setMeasurement(CONT_H_MODE);
 8001a82:	2010      	movs	r0, #16
 8001a84:	f7ff fb52 	bl	800112c <setMeasurement>

    HAL_Delay(1000);
 8001a88:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001a8c:	f000 fd02 	bl	8002494 <HAL_Delay>
    lcd_clear();
 8001a90:	f7ff ff96 	bl	80019c0 <lcd_clear>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  get_temp_humi();
 8001a94:	463b      	mov	r3, r7
 8001a96:	4618      	mov	r0, r3
 8001a98:	f7ff fcd6 	bl	8001448 <get_temp_humi>
//	  Display_LCD("Temp",1, (float)SHT31.Temperature);
//	  Display_LCD("Humi",2, (float)SHT31.Humidity);

	  char str[16];
	  lcd_put_cur(0,0);
 8001a9c:	2100      	movs	r1, #0
 8001a9e:	2000      	movs	r0, #0
 8001aa0:	f7ff ff98 	bl	80019d4 <lcd_put_cur>
	  sprintf(str,"T:%.2f,H:%.2f", SHT31.Temperature, SHT31.Humidity);
 8001aa4:	4b4f      	ldr	r3, [pc, #316]	; (8001be4 <main+0x1a8>)
 8001aa6:	681b      	ldr	r3, [r3, #0]
 8001aa8:	4618      	mov	r0, r3
 8001aaa:	f7fe fcbd 	bl	8000428 <__aeabi_f2d>
 8001aae:	4604      	mov	r4, r0
 8001ab0:	460d      	mov	r5, r1
 8001ab2:	4b4c      	ldr	r3, [pc, #304]	; (8001be4 <main+0x1a8>)
 8001ab4:	685b      	ldr	r3, [r3, #4]
 8001ab6:	4618      	mov	r0, r3
 8001ab8:	f7fe fcb6 	bl	8000428 <__aeabi_f2d>
 8001abc:	4602      	mov	r2, r0
 8001abe:	460b      	mov	r3, r1
 8001ac0:	f107 0018 	add.w	r0, r7, #24
 8001ac4:	e9cd 2300 	strd	r2, r3, [sp]
 8001ac8:	4622      	mov	r2, r4
 8001aca:	462b      	mov	r3, r5
 8001acc:	4946      	ldr	r1, [pc, #280]	; (8001be8 <main+0x1ac>)
 8001ace:	f004 ff59 	bl	8006984 <siprintf>
	  lcd_send_string(str);
 8001ad2:	f107 0318 	add.w	r3, r7, #24
 8001ad6:	4618      	mov	r0, r3
 8001ad8:	f7ff ff9b 	bl	8001a12 <lcd_send_string>

//	  PowerOn();
//	  BH1750_reset();
//	  setMeasurement(ONCE_H_MODE);
	  lux = BH1750_getResult();
 8001adc:	f7ff fb3c 	bl	8001158 <BH1750_getResult>
 8001ae0:	4603      	mov	r3, r0
 8001ae2:	4a42      	ldr	r2, [pc, #264]	; (8001bec <main+0x1b0>)
 8001ae4:	6013      	str	r3, [r2, #0]

	  HAL_ADC_Start(&hadc1);
 8001ae6:	4842      	ldr	r0, [pc, #264]	; (8001bf0 <main+0x1b4>)
 8001ae8:	f000 fdd0 	bl	800268c <HAL_ADC_Start>
	  HAL_ADC_PollForConversion(&hadc1, 100);
 8001aec:	2164      	movs	r1, #100	; 0x64
 8001aee:	4840      	ldr	r0, [pc, #256]	; (8001bf0 <main+0x1b4>)
 8001af0:	f000 fea6 	bl	8002840 <HAL_ADC_PollForConversion>
	  soil_moisture = HAL_ADC_GetValue(&hadc1);
 8001af4:	483e      	ldr	r0, [pc, #248]	; (8001bf0 <main+0x1b4>)
 8001af6:	f000 ffa9 	bl	8002a4c <HAL_ADC_GetValue>
 8001afa:	4603      	mov	r3, r0
 8001afc:	b29a      	uxth	r2, r3
 8001afe:	4b3d      	ldr	r3, [pc, #244]	; (8001bf4 <main+0x1b8>)
 8001b00:	801a      	strh	r2, [r3, #0]
	  HAL_ADC_Stop(&hadc1);
 8001b02:	483b      	ldr	r0, [pc, #236]	; (8001bf0 <main+0x1b4>)
 8001b04:	f000 fe70 	bl	80027e8 <HAL_ADC_Stop>

	  //mapping analog signal to %
	  fsoil_moisture = 100 - mapping((float)soil_moisture, 0, 4096, 0, 100);
 8001b08:	4b3a      	ldr	r3, [pc, #232]	; (8001bf4 <main+0x1b8>)
 8001b0a:	881b      	ldrh	r3, [r3, #0]
 8001b0c:	4618      	mov	r0, r3
 8001b0e:	f7ff f8e1 	bl	8000cd4 <__aeabi_ui2f>
 8001b12:	4b39      	ldr	r3, [pc, #228]	; (8001bf8 <main+0x1bc>)
 8001b14:	9300      	str	r3, [sp, #0]
 8001b16:	f04f 0300 	mov.w	r3, #0
 8001b1a:	f04f 428b 	mov.w	r2, #1166016512	; 0x45800000
 8001b1e:	f04f 0100 	mov.w	r1, #0
 8001b22:	f000 fb3b 	bl	800219c <mapping>
 8001b26:	4603      	mov	r3, r0
 8001b28:	4619      	mov	r1, r3
 8001b2a:	4833      	ldr	r0, [pc, #204]	; (8001bf8 <main+0x1bc>)
 8001b2c:	f7ff f820 	bl	8000b70 <__aeabi_fsub>
 8001b30:	4603      	mov	r3, r0
 8001b32:	461a      	mov	r2, r3
 8001b34:	4b31      	ldr	r3, [pc, #196]	; (8001bfc <main+0x1c0>)
 8001b36:	601a      	str	r2, [r3, #0]
//	  Display_LCD("%", 2, fsoil_moisture);

	  char str1[16];
	  lcd_put_cur(1,0);
 8001b38:	2100      	movs	r1, #0
 8001b3a:	2001      	movs	r0, #1
 8001b3c:	f7ff ff4a 	bl	80019d4 <lcd_put_cur>
	  sprintf(str1,"S:%.2f,L:%.2f", fsoil_moisture, lux);
 8001b40:	4b2e      	ldr	r3, [pc, #184]	; (8001bfc <main+0x1c0>)
 8001b42:	681b      	ldr	r3, [r3, #0]
 8001b44:	4618      	mov	r0, r3
 8001b46:	f7fe fc6f 	bl	8000428 <__aeabi_f2d>
 8001b4a:	4604      	mov	r4, r0
 8001b4c:	460d      	mov	r5, r1
 8001b4e:	4b27      	ldr	r3, [pc, #156]	; (8001bec <main+0x1b0>)
 8001b50:	681b      	ldr	r3, [r3, #0]
 8001b52:	4618      	mov	r0, r3
 8001b54:	f7fe fc68 	bl	8000428 <__aeabi_f2d>
 8001b58:	4602      	mov	r2, r0
 8001b5a:	460b      	mov	r3, r1
 8001b5c:	f107 0008 	add.w	r0, r7, #8
 8001b60:	e9cd 2300 	strd	r2, r3, [sp]
 8001b64:	4622      	mov	r2, r4
 8001b66:	462b      	mov	r3, r5
 8001b68:	4925      	ldr	r1, [pc, #148]	; (8001c00 <main+0x1c4>)
 8001b6a:	f004 ff0b 	bl	8006984 <siprintf>
	  lcd_send_string(str1);
 8001b6e:	f107 0308 	add.w	r3, r7, #8
 8001b72:	4618      	mov	r0, r3
 8001b74:	f7ff ff4d 	bl	8001a12 <lcd_send_string>

	  value_up[0] = SHT31.Temperature;
 8001b78:	4b1a      	ldr	r3, [pc, #104]	; (8001be4 <main+0x1a8>)
 8001b7a:	681b      	ldr	r3, [r3, #0]
 8001b7c:	4618      	mov	r0, r3
 8001b7e:	f7ff fa51 	bl	8001024 <__aeabi_f2uiz>
 8001b82:	4603      	mov	r3, r0
 8001b84:	b29a      	uxth	r2, r3
 8001b86:	4b1f      	ldr	r3, [pc, #124]	; (8001c04 <main+0x1c8>)
 8001b88:	801a      	strh	r2, [r3, #0]
	  value_up[1] = SHT31.Humidity;
 8001b8a:	4b16      	ldr	r3, [pc, #88]	; (8001be4 <main+0x1a8>)
 8001b8c:	685b      	ldr	r3, [r3, #4]
 8001b8e:	4618      	mov	r0, r3
 8001b90:	f7ff fa48 	bl	8001024 <__aeabi_f2uiz>
 8001b94:	4603      	mov	r3, r0
 8001b96:	b29a      	uxth	r2, r3
 8001b98:	4b1a      	ldr	r3, [pc, #104]	; (8001c04 <main+0x1c8>)
 8001b9a:	805a      	strh	r2, [r3, #2]
	  value_up[2] = fsoil_moisture;
 8001b9c:	4b17      	ldr	r3, [pc, #92]	; (8001bfc <main+0x1c0>)
 8001b9e:	681b      	ldr	r3, [r3, #0]
 8001ba0:	4618      	mov	r0, r3
 8001ba2:	f7ff fa3f 	bl	8001024 <__aeabi_f2uiz>
 8001ba6:	4603      	mov	r3, r0
 8001ba8:	b29a      	uxth	r2, r3
 8001baa:	4b16      	ldr	r3, [pc, #88]	; (8001c04 <main+0x1c8>)
 8001bac:	809a      	strh	r2, [r3, #4]
	  value_up[3] = lux;
 8001bae:	4b0f      	ldr	r3, [pc, #60]	; (8001bec <main+0x1b0>)
 8001bb0:	681b      	ldr	r3, [r3, #0]
 8001bb2:	4618      	mov	r0, r3
 8001bb4:	f7ff fa36 	bl	8001024 <__aeabi_f2uiz>
 8001bb8:	4603      	mov	r3, r0
 8001bba:	b29a      	uxth	r2, r3
 8001bbc:	4b11      	ldr	r3, [pc, #68]	; (8001c04 <main+0x1c8>)
 8001bbe:	80da      	strh	r2, [r3, #6]

	  ESP_Send_Multi("F18PP9CB39PMVB5H", 4, value_up);
 8001bc0:	4a10      	ldr	r2, [pc, #64]	; (8001c04 <main+0x1c8>)
 8001bc2:	2104      	movs	r1, #4
 8001bc4:	4810      	ldr	r0, [pc, #64]	; (8001c08 <main+0x1cc>)
 8001bc6:	f7ff fb75 	bl	80012b4 <ESP_Send_Multi>

	  HAL_Delay(15000);
 8001bca:	f643 2098 	movw	r0, #15000	; 0x3a98
 8001bce:	f000 fc61 	bl	8002494 <HAL_Delay>
  {
 8001bd2:	e75f      	b.n	8001a94 <main+0x58>
 8001bd4:	20000338 	.word	0x20000338
 8001bd8:	0800a5e0 	.word	0x0800a5e0
 8001bdc:	0800a5f0 	.word	0x0800a5f0
 8001be0:	0800a5fc 	.word	0x0800a5fc
 8001be4:	2000029c 	.word	0x2000029c
 8001be8:	0800a60c 	.word	0x0800a60c
 8001bec:	2000028c 	.word	0x2000028c
 8001bf0:	20000304 	.word	0x20000304
 8001bf4:	20000334 	.word	0x20000334
 8001bf8:	42c80000 	.word	0x42c80000
 8001bfc:	20000300 	.word	0x20000300
 8001c00:	0800a61c 	.word	0x0800a61c
 8001c04:	200003c4 	.word	0x200003c4
 8001c08:	0800a62c 	.word	0x0800a62c

08001c0c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001c0c:	b580      	push	{r7, lr}
 8001c0e:	b094      	sub	sp, #80	; 0x50
 8001c10:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001c12:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001c16:	2228      	movs	r2, #40	; 0x28
 8001c18:	2100      	movs	r1, #0
 8001c1a:	4618      	mov	r0, r3
 8001c1c:	f004 f834 	bl	8005c88 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001c20:	f107 0314 	add.w	r3, r7, #20
 8001c24:	2200      	movs	r2, #0
 8001c26:	601a      	str	r2, [r3, #0]
 8001c28:	605a      	str	r2, [r3, #4]
 8001c2a:	609a      	str	r2, [r3, #8]
 8001c2c:	60da      	str	r2, [r3, #12]
 8001c2e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001c30:	1d3b      	adds	r3, r7, #4
 8001c32:	2200      	movs	r2, #0
 8001c34:	601a      	str	r2, [r3, #0]
 8001c36:	605a      	str	r2, [r3, #4]
 8001c38:	609a      	str	r2, [r3, #8]
 8001c3a:	60da      	str	r2, [r3, #12]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8001c3c:	2301      	movs	r3, #1
 8001c3e:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001c40:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001c44:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8001c46:	2300      	movs	r3, #0
 8001c48:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001c4a:	2301      	movs	r3, #1
 8001c4c:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001c4e:	2302      	movs	r3, #2
 8001c50:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001c52:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001c56:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8001c58:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 8001c5c:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001c5e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001c62:	4618      	mov	r0, r3
 8001c64:	f002 fba2 	bl	80043ac <HAL_RCC_OscConfig>
 8001c68:	4603      	mov	r3, r0
 8001c6a:	2b00      	cmp	r3, #0
 8001c6c:	d001      	beq.n	8001c72 <SystemClock_Config+0x66>
  {
    Error_Handler();
 8001c6e:	f000 f93d 	bl	8001eec <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001c72:	230f      	movs	r3, #15
 8001c74:	617b      	str	r3, [r7, #20]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001c76:	2302      	movs	r3, #2
 8001c78:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001c7a:	2300      	movs	r3, #0
 8001c7c:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8001c7e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001c82:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001c84:	2300      	movs	r3, #0
 8001c86:	627b      	str	r3, [r7, #36]	; 0x24

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8001c88:	f107 0314 	add.w	r3, r7, #20
 8001c8c:	2102      	movs	r1, #2
 8001c8e:	4618      	mov	r0, r3
 8001c90:	f002 fe0c 	bl	80048ac <HAL_RCC_ClockConfig>
 8001c94:	4603      	mov	r3, r0
 8001c96:	2b00      	cmp	r3, #0
 8001c98:	d001      	beq.n	8001c9e <SystemClock_Config+0x92>
  {
    Error_Handler();
 8001c9a:	f000 f927 	bl	8001eec <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 8001c9e:	2302      	movs	r3, #2
 8001ca0:	607b      	str	r3, [r7, #4]
  PeriphClkInit.AdcClockSelection = RCC_ADCPCLK2_DIV6;
 8001ca2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8001ca6:	60fb      	str	r3, [r7, #12]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001ca8:	1d3b      	adds	r3, r7, #4
 8001caa:	4618      	mov	r0, r3
 8001cac:	f002 ff98 	bl	8004be0 <HAL_RCCEx_PeriphCLKConfig>
 8001cb0:	4603      	mov	r3, r0
 8001cb2:	2b00      	cmp	r3, #0
 8001cb4:	d001      	beq.n	8001cba <SystemClock_Config+0xae>
  {
    Error_Handler();
 8001cb6:	f000 f919 	bl	8001eec <Error_Handler>
  }
}
 8001cba:	bf00      	nop
 8001cbc:	3750      	adds	r7, #80	; 0x50
 8001cbe:	46bd      	mov	sp, r7
 8001cc0:	bd80      	pop	{r7, pc}
	...

08001cc4 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8001cc4:	b580      	push	{r7, lr}
 8001cc6:	b084      	sub	sp, #16
 8001cc8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8001cca:	1d3b      	adds	r3, r7, #4
 8001ccc:	2200      	movs	r2, #0
 8001cce:	601a      	str	r2, [r3, #0]
 8001cd0:	605a      	str	r2, [r3, #4]
 8001cd2:	609a      	str	r2, [r3, #8]
  /* USER CODE BEGIN ADC1_Init 1 */

  /* USER CODE END ADC1_Init 1 */
  /** Common config
  */
  hadc1.Instance = ADC1;
 8001cd4:	4b18      	ldr	r3, [pc, #96]	; (8001d38 <MX_ADC1_Init+0x74>)
 8001cd6:	4a19      	ldr	r2, [pc, #100]	; (8001d3c <MX_ADC1_Init+0x78>)
 8001cd8:	601a      	str	r2, [r3, #0]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8001cda:	4b17      	ldr	r3, [pc, #92]	; (8001d38 <MX_ADC1_Init+0x74>)
 8001cdc:	2200      	movs	r2, #0
 8001cde:	609a      	str	r2, [r3, #8]
  hadc1.Init.ContinuousConvMode = ENABLE;
 8001ce0:	4b15      	ldr	r3, [pc, #84]	; (8001d38 <MX_ADC1_Init+0x74>)
 8001ce2:	2201      	movs	r2, #1
 8001ce4:	731a      	strb	r2, [r3, #12]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8001ce6:	4b14      	ldr	r3, [pc, #80]	; (8001d38 <MX_ADC1_Init+0x74>)
 8001ce8:	2200      	movs	r2, #0
 8001cea:	751a      	strb	r2, [r3, #20]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8001cec:	4b12      	ldr	r3, [pc, #72]	; (8001d38 <MX_ADC1_Init+0x74>)
 8001cee:	f44f 2260 	mov.w	r2, #917504	; 0xe0000
 8001cf2:	61da      	str	r2, [r3, #28]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8001cf4:	4b10      	ldr	r3, [pc, #64]	; (8001d38 <MX_ADC1_Init+0x74>)
 8001cf6:	2200      	movs	r2, #0
 8001cf8:	605a      	str	r2, [r3, #4]
  hadc1.Init.NbrOfConversion = 1;
 8001cfa:	4b0f      	ldr	r3, [pc, #60]	; (8001d38 <MX_ADC1_Init+0x74>)
 8001cfc:	2201      	movs	r2, #1
 8001cfe:	611a      	str	r2, [r3, #16]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8001d00:	480d      	ldr	r0, [pc, #52]	; (8001d38 <MX_ADC1_Init+0x74>)
 8001d02:	f000 fbeb 	bl	80024dc <HAL_ADC_Init>
 8001d06:	4603      	mov	r3, r0
 8001d08:	2b00      	cmp	r3, #0
 8001d0a:	d001      	beq.n	8001d10 <MX_ADC1_Init+0x4c>
  {
    Error_Handler();
 8001d0c:	f000 f8ee 	bl	8001eec <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_0;
 8001d10:	2300      	movs	r3, #0
 8001d12:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8001d14:	2301      	movs	r3, #1
 8001d16:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 8001d18:	2300      	movs	r3, #0
 8001d1a:	60fb      	str	r3, [r7, #12]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001d1c:	1d3b      	adds	r3, r7, #4
 8001d1e:	4619      	mov	r1, r3
 8001d20:	4805      	ldr	r0, [pc, #20]	; (8001d38 <MX_ADC1_Init+0x74>)
 8001d22:	f000 fe9f 	bl	8002a64 <HAL_ADC_ConfigChannel>
 8001d26:	4603      	mov	r3, r0
 8001d28:	2b00      	cmp	r3, #0
 8001d2a:	d001      	beq.n	8001d30 <MX_ADC1_Init+0x6c>
  {
    Error_Handler();
 8001d2c:	f000 f8de 	bl	8001eec <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8001d30:	bf00      	nop
 8001d32:	3710      	adds	r7, #16
 8001d34:	46bd      	mov	sp, r7
 8001d36:	bd80      	pop	{r7, pc}
 8001d38:	20000304 	.word	0x20000304
 8001d3c:	40012400 	.word	0x40012400

08001d40 <MX_I2C2_Init>:
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C2_Init(void)
{
 8001d40:	b580      	push	{r7, lr}
 8001d42:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 8001d44:	4b12      	ldr	r3, [pc, #72]	; (8001d90 <MX_I2C2_Init+0x50>)
 8001d46:	4a13      	ldr	r2, [pc, #76]	; (8001d94 <MX_I2C2_Init+0x54>)
 8001d48:	601a      	str	r2, [r3, #0]
  hi2c2.Init.ClockSpeed = 100000;
 8001d4a:	4b11      	ldr	r3, [pc, #68]	; (8001d90 <MX_I2C2_Init+0x50>)
 8001d4c:	4a12      	ldr	r2, [pc, #72]	; (8001d98 <MX_I2C2_Init+0x58>)
 8001d4e:	605a      	str	r2, [r3, #4]
  hi2c2.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8001d50:	4b0f      	ldr	r3, [pc, #60]	; (8001d90 <MX_I2C2_Init+0x50>)
 8001d52:	2200      	movs	r2, #0
 8001d54:	609a      	str	r2, [r3, #8]
  hi2c2.Init.OwnAddress1 = 0;
 8001d56:	4b0e      	ldr	r3, [pc, #56]	; (8001d90 <MX_I2C2_Init+0x50>)
 8001d58:	2200      	movs	r2, #0
 8001d5a:	60da      	str	r2, [r3, #12]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001d5c:	4b0c      	ldr	r3, [pc, #48]	; (8001d90 <MX_I2C2_Init+0x50>)
 8001d5e:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8001d62:	611a      	str	r2, [r3, #16]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001d64:	4b0a      	ldr	r3, [pc, #40]	; (8001d90 <MX_I2C2_Init+0x50>)
 8001d66:	2200      	movs	r2, #0
 8001d68:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2 = 0;
 8001d6a:	4b09      	ldr	r3, [pc, #36]	; (8001d90 <MX_I2C2_Init+0x50>)
 8001d6c:	2200      	movs	r2, #0
 8001d6e:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001d70:	4b07      	ldr	r3, [pc, #28]	; (8001d90 <MX_I2C2_Init+0x50>)
 8001d72:	2200      	movs	r2, #0
 8001d74:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001d76:	4b06      	ldr	r3, [pc, #24]	; (8001d90 <MX_I2C2_Init+0x50>)
 8001d78:	2200      	movs	r2, #0
 8001d7a:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 8001d7c:	4804      	ldr	r0, [pc, #16]	; (8001d90 <MX_I2C2_Init+0x50>)
 8001d7e:	f001 fb47 	bl	8003410 <HAL_I2C_Init>
 8001d82:	4603      	mov	r3, r0
 8001d84:	2b00      	cmp	r3, #0
 8001d86:	d001      	beq.n	8001d8c <MX_I2C2_Init+0x4c>
  {
    Error_Handler();
 8001d88:	f000 f8b0 	bl	8001eec <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 8001d8c:	bf00      	nop
 8001d8e:	bd80      	pop	{r7, pc}
 8001d90:	200002ac 	.word	0x200002ac
 8001d94:	40005800 	.word	0x40005800
 8001d98:	000186a0 	.word	0x000186a0

08001d9c <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8001d9c:	b580      	push	{r7, lr}
 8001d9e:	b086      	sub	sp, #24
 8001da0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001da2:	f107 0308 	add.w	r3, r7, #8
 8001da6:	2200      	movs	r2, #0
 8001da8:	601a      	str	r2, [r3, #0]
 8001daa:	605a      	str	r2, [r3, #4]
 8001dac:	609a      	str	r2, [r3, #8]
 8001dae:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001db0:	463b      	mov	r3, r7
 8001db2:	2200      	movs	r2, #0
 8001db4:	601a      	str	r2, [r3, #0]
 8001db6:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8001db8:	4b1e      	ldr	r3, [pc, #120]	; (8001e34 <MX_TIM1_Init+0x98>)
 8001dba:	4a1f      	ldr	r2, [pc, #124]	; (8001e38 <MX_TIM1_Init+0x9c>)
 8001dbc:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 72-1;
 8001dbe:	4b1d      	ldr	r3, [pc, #116]	; (8001e34 <MX_TIM1_Init+0x98>)
 8001dc0:	2247      	movs	r2, #71	; 0x47
 8001dc2:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001dc4:	4b1b      	ldr	r3, [pc, #108]	; (8001e34 <MX_TIM1_Init+0x98>)
 8001dc6:	2200      	movs	r2, #0
 8001dc8:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 8001dca:	4b1a      	ldr	r3, [pc, #104]	; (8001e34 <MX_TIM1_Init+0x98>)
 8001dcc:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001dd0:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001dd2:	4b18      	ldr	r3, [pc, #96]	; (8001e34 <MX_TIM1_Init+0x98>)
 8001dd4:	2200      	movs	r2, #0
 8001dd6:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8001dd8:	4b16      	ldr	r3, [pc, #88]	; (8001e34 <MX_TIM1_Init+0x98>)
 8001dda:	2200      	movs	r2, #0
 8001ddc:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001dde:	4b15      	ldr	r3, [pc, #84]	; (8001e34 <MX_TIM1_Init+0x98>)
 8001de0:	2200      	movs	r2, #0
 8001de2:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8001de4:	4813      	ldr	r0, [pc, #76]	; (8001e34 <MX_TIM1_Init+0x98>)
 8001de6:	f003 f875 	bl	8004ed4 <HAL_TIM_Base_Init>
 8001dea:	4603      	mov	r3, r0
 8001dec:	2b00      	cmp	r3, #0
 8001dee:	d001      	beq.n	8001df4 <MX_TIM1_Init+0x58>
  {
    Error_Handler();
 8001df0:	f000 f87c 	bl	8001eec <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001df4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001df8:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8001dfa:	f107 0308 	add.w	r3, r7, #8
 8001dfe:	4619      	mov	r1, r3
 8001e00:	480c      	ldr	r0, [pc, #48]	; (8001e34 <MX_TIM1_Init+0x98>)
 8001e02:	f003 f901 	bl	8005008 <HAL_TIM_ConfigClockSource>
 8001e06:	4603      	mov	r3, r0
 8001e08:	2b00      	cmp	r3, #0
 8001e0a:	d001      	beq.n	8001e10 <MX_TIM1_Init+0x74>
  {
    Error_Handler();
 8001e0c:	f000 f86e 	bl	8001eec <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001e10:	2300      	movs	r3, #0
 8001e12:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001e14:	2300      	movs	r3, #0
 8001e16:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8001e18:	463b      	mov	r3, r7
 8001e1a:	4619      	mov	r1, r3
 8001e1c:	4805      	ldr	r0, [pc, #20]	; (8001e34 <MX_TIM1_Init+0x98>)
 8001e1e:	f003 faaf 	bl	8005380 <HAL_TIMEx_MasterConfigSynchronization>
 8001e22:	4603      	mov	r3, r0
 8001e24:	2b00      	cmp	r3, #0
 8001e26:	d001      	beq.n	8001e2c <MX_TIM1_Init+0x90>
  {
    Error_Handler();
 8001e28:	f000 f860 	bl	8001eec <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 8001e2c:	bf00      	nop
 8001e2e:	3718      	adds	r7, #24
 8001e30:	46bd      	mov	sp, r7
 8001e32:	bd80      	pop	{r7, pc}
 8001e34:	20000338 	.word	0x20000338
 8001e38:	40012c00 	.word	0x40012c00

08001e3c <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8001e3c:	b580      	push	{r7, lr}
 8001e3e:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001e40:	4b11      	ldr	r3, [pc, #68]	; (8001e88 <MX_USART2_UART_Init+0x4c>)
 8001e42:	4a12      	ldr	r2, [pc, #72]	; (8001e8c <MX_USART2_UART_Init+0x50>)
 8001e44:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8001e46:	4b10      	ldr	r3, [pc, #64]	; (8001e88 <MX_USART2_UART_Init+0x4c>)
 8001e48:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001e4c:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8001e4e:	4b0e      	ldr	r3, [pc, #56]	; (8001e88 <MX_USART2_UART_Init+0x4c>)
 8001e50:	2200      	movs	r2, #0
 8001e52:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001e54:	4b0c      	ldr	r3, [pc, #48]	; (8001e88 <MX_USART2_UART_Init+0x4c>)
 8001e56:	2200      	movs	r2, #0
 8001e58:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8001e5a:	4b0b      	ldr	r3, [pc, #44]	; (8001e88 <MX_USART2_UART_Init+0x4c>)
 8001e5c:	2200      	movs	r2, #0
 8001e5e:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001e60:	4b09      	ldr	r3, [pc, #36]	; (8001e88 <MX_USART2_UART_Init+0x4c>)
 8001e62:	220c      	movs	r2, #12
 8001e64:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001e66:	4b08      	ldr	r3, [pc, #32]	; (8001e88 <MX_USART2_UART_Init+0x4c>)
 8001e68:	2200      	movs	r2, #0
 8001e6a:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001e6c:	4b06      	ldr	r3, [pc, #24]	; (8001e88 <MX_USART2_UART_Init+0x4c>)
 8001e6e:	2200      	movs	r2, #0
 8001e70:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8001e72:	4805      	ldr	r0, [pc, #20]	; (8001e88 <MX_USART2_UART_Init+0x4c>)
 8001e74:	f003 fae2 	bl	800543c <HAL_UART_Init>
 8001e78:	4603      	mov	r3, r0
 8001e7a:	2b00      	cmp	r3, #0
 8001e7c:	d001      	beq.n	8001e82 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8001e7e:	f000 f835 	bl	8001eec <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8001e82:	bf00      	nop
 8001e84:	bd80      	pop	{r7, pc}
 8001e86:	bf00      	nop
 8001e88:	20000380 	.word	0x20000380
 8001e8c:	40004400 	.word	0x40004400

08001e90 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001e90:	b480      	push	{r7}
 8001e92:	b085      	sub	sp, #20
 8001e94:	af00      	add	r7, sp, #0

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001e96:	4b14      	ldr	r3, [pc, #80]	; (8001ee8 <MX_GPIO_Init+0x58>)
 8001e98:	699b      	ldr	r3, [r3, #24]
 8001e9a:	4a13      	ldr	r2, [pc, #76]	; (8001ee8 <MX_GPIO_Init+0x58>)
 8001e9c:	f043 0320 	orr.w	r3, r3, #32
 8001ea0:	6193      	str	r3, [r2, #24]
 8001ea2:	4b11      	ldr	r3, [pc, #68]	; (8001ee8 <MX_GPIO_Init+0x58>)
 8001ea4:	699b      	ldr	r3, [r3, #24]
 8001ea6:	f003 0320 	and.w	r3, r3, #32
 8001eaa:	60fb      	str	r3, [r7, #12]
 8001eac:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001eae:	4b0e      	ldr	r3, [pc, #56]	; (8001ee8 <MX_GPIO_Init+0x58>)
 8001eb0:	699b      	ldr	r3, [r3, #24]
 8001eb2:	4a0d      	ldr	r2, [pc, #52]	; (8001ee8 <MX_GPIO_Init+0x58>)
 8001eb4:	f043 0304 	orr.w	r3, r3, #4
 8001eb8:	6193      	str	r3, [r2, #24]
 8001eba:	4b0b      	ldr	r3, [pc, #44]	; (8001ee8 <MX_GPIO_Init+0x58>)
 8001ebc:	699b      	ldr	r3, [r3, #24]
 8001ebe:	f003 0304 	and.w	r3, r3, #4
 8001ec2:	60bb      	str	r3, [r7, #8]
 8001ec4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001ec6:	4b08      	ldr	r3, [pc, #32]	; (8001ee8 <MX_GPIO_Init+0x58>)
 8001ec8:	699b      	ldr	r3, [r3, #24]
 8001eca:	4a07      	ldr	r2, [pc, #28]	; (8001ee8 <MX_GPIO_Init+0x58>)
 8001ecc:	f043 0308 	orr.w	r3, r3, #8
 8001ed0:	6193      	str	r3, [r2, #24]
 8001ed2:	4b05      	ldr	r3, [pc, #20]	; (8001ee8 <MX_GPIO_Init+0x58>)
 8001ed4:	699b      	ldr	r3, [r3, #24]
 8001ed6:	f003 0308 	and.w	r3, r3, #8
 8001eda:	607b      	str	r3, [r7, #4]
 8001edc:	687b      	ldr	r3, [r7, #4]

}
 8001ede:	bf00      	nop
 8001ee0:	3714      	adds	r7, #20
 8001ee2:	46bd      	mov	sp, r7
 8001ee4:	bc80      	pop	{r7}
 8001ee6:	4770      	bx	lr
 8001ee8:	40021000 	.word	0x40021000

08001eec <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001eec:	b480      	push	{r7}
 8001eee:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001ef0:	b672      	cpsid	i
}
 8001ef2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001ef4:	e7fe      	b.n	8001ef4 <Error_Handler+0x8>
	...

08001ef8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001ef8:	b480      	push	{r7}
 8001efa:	b085      	sub	sp, #20
 8001efc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8001efe:	4b15      	ldr	r3, [pc, #84]	; (8001f54 <HAL_MspInit+0x5c>)
 8001f00:	699b      	ldr	r3, [r3, #24]
 8001f02:	4a14      	ldr	r2, [pc, #80]	; (8001f54 <HAL_MspInit+0x5c>)
 8001f04:	f043 0301 	orr.w	r3, r3, #1
 8001f08:	6193      	str	r3, [r2, #24]
 8001f0a:	4b12      	ldr	r3, [pc, #72]	; (8001f54 <HAL_MspInit+0x5c>)
 8001f0c:	699b      	ldr	r3, [r3, #24]
 8001f0e:	f003 0301 	and.w	r3, r3, #1
 8001f12:	60bb      	str	r3, [r7, #8]
 8001f14:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001f16:	4b0f      	ldr	r3, [pc, #60]	; (8001f54 <HAL_MspInit+0x5c>)
 8001f18:	69db      	ldr	r3, [r3, #28]
 8001f1a:	4a0e      	ldr	r2, [pc, #56]	; (8001f54 <HAL_MspInit+0x5c>)
 8001f1c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001f20:	61d3      	str	r3, [r2, #28]
 8001f22:	4b0c      	ldr	r3, [pc, #48]	; (8001f54 <HAL_MspInit+0x5c>)
 8001f24:	69db      	ldr	r3, [r3, #28]
 8001f26:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001f2a:	607b      	str	r3, [r7, #4]
 8001f2c:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8001f2e:	4b0a      	ldr	r3, [pc, #40]	; (8001f58 <HAL_MspInit+0x60>)
 8001f30:	685b      	ldr	r3, [r3, #4]
 8001f32:	60fb      	str	r3, [r7, #12]
 8001f34:	68fb      	ldr	r3, [r7, #12]
 8001f36:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8001f3a:	60fb      	str	r3, [r7, #12]
 8001f3c:	68fb      	ldr	r3, [r7, #12]
 8001f3e:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8001f42:	60fb      	str	r3, [r7, #12]
 8001f44:	4a04      	ldr	r2, [pc, #16]	; (8001f58 <HAL_MspInit+0x60>)
 8001f46:	68fb      	ldr	r3, [r7, #12]
 8001f48:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001f4a:	bf00      	nop
 8001f4c:	3714      	adds	r7, #20
 8001f4e:	46bd      	mov	sp, r7
 8001f50:	bc80      	pop	{r7}
 8001f52:	4770      	bx	lr
 8001f54:	40021000 	.word	0x40021000
 8001f58:	40010000 	.word	0x40010000

08001f5c <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8001f5c:	b580      	push	{r7, lr}
 8001f5e:	b088      	sub	sp, #32
 8001f60:	af00      	add	r7, sp, #0
 8001f62:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001f64:	f107 0310 	add.w	r3, r7, #16
 8001f68:	2200      	movs	r2, #0
 8001f6a:	601a      	str	r2, [r3, #0]
 8001f6c:	605a      	str	r2, [r3, #4]
 8001f6e:	609a      	str	r2, [r3, #8]
 8001f70:	60da      	str	r2, [r3, #12]
  if(hadc->Instance==ADC1)
 8001f72:	687b      	ldr	r3, [r7, #4]
 8001f74:	681b      	ldr	r3, [r3, #0]
 8001f76:	4a14      	ldr	r2, [pc, #80]	; (8001fc8 <HAL_ADC_MspInit+0x6c>)
 8001f78:	4293      	cmp	r3, r2
 8001f7a:	d121      	bne.n	8001fc0 <HAL_ADC_MspInit+0x64>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8001f7c:	4b13      	ldr	r3, [pc, #76]	; (8001fcc <HAL_ADC_MspInit+0x70>)
 8001f7e:	699b      	ldr	r3, [r3, #24]
 8001f80:	4a12      	ldr	r2, [pc, #72]	; (8001fcc <HAL_ADC_MspInit+0x70>)
 8001f82:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001f86:	6193      	str	r3, [r2, #24]
 8001f88:	4b10      	ldr	r3, [pc, #64]	; (8001fcc <HAL_ADC_MspInit+0x70>)
 8001f8a:	699b      	ldr	r3, [r3, #24]
 8001f8c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001f90:	60fb      	str	r3, [r7, #12]
 8001f92:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001f94:	4b0d      	ldr	r3, [pc, #52]	; (8001fcc <HAL_ADC_MspInit+0x70>)
 8001f96:	699b      	ldr	r3, [r3, #24]
 8001f98:	4a0c      	ldr	r2, [pc, #48]	; (8001fcc <HAL_ADC_MspInit+0x70>)
 8001f9a:	f043 0304 	orr.w	r3, r3, #4
 8001f9e:	6193      	str	r3, [r2, #24]
 8001fa0:	4b0a      	ldr	r3, [pc, #40]	; (8001fcc <HAL_ADC_MspInit+0x70>)
 8001fa2:	699b      	ldr	r3, [r3, #24]
 8001fa4:	f003 0304 	and.w	r3, r3, #4
 8001fa8:	60bb      	str	r3, [r7, #8]
 8001faa:	68bb      	ldr	r3, [r7, #8]
    /**ADC1 GPIO Configuration
    PA0-WKUP     ------> ADC1_IN0
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8001fac:	2301      	movs	r3, #1
 8001fae:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001fb0:	2303      	movs	r3, #3
 8001fb2:	617b      	str	r3, [r7, #20]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001fb4:	f107 0310 	add.w	r3, r7, #16
 8001fb8:	4619      	mov	r1, r3
 8001fba:	4805      	ldr	r0, [pc, #20]	; (8001fd0 <HAL_ADC_MspInit+0x74>)
 8001fbc:	f001 f8a4 	bl	8003108 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8001fc0:	bf00      	nop
 8001fc2:	3720      	adds	r7, #32
 8001fc4:	46bd      	mov	sp, r7
 8001fc6:	bd80      	pop	{r7, pc}
 8001fc8:	40012400 	.word	0x40012400
 8001fcc:	40021000 	.word	0x40021000
 8001fd0:	40010800 	.word	0x40010800

08001fd4 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001fd4:	b580      	push	{r7, lr}
 8001fd6:	b088      	sub	sp, #32
 8001fd8:	af00      	add	r7, sp, #0
 8001fda:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001fdc:	f107 0310 	add.w	r3, r7, #16
 8001fe0:	2200      	movs	r2, #0
 8001fe2:	601a      	str	r2, [r3, #0]
 8001fe4:	605a      	str	r2, [r3, #4]
 8001fe6:	609a      	str	r2, [r3, #8]
 8001fe8:	60da      	str	r2, [r3, #12]
  if(hi2c->Instance==I2C2)
 8001fea:	687b      	ldr	r3, [r7, #4]
 8001fec:	681b      	ldr	r3, [r3, #0]
 8001fee:	4a16      	ldr	r2, [pc, #88]	; (8002048 <HAL_I2C_MspInit+0x74>)
 8001ff0:	4293      	cmp	r3, r2
 8001ff2:	d124      	bne.n	800203e <HAL_I2C_MspInit+0x6a>
  {
  /* USER CODE BEGIN I2C2_MspInit 0 */

  /* USER CODE END I2C2_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001ff4:	4b15      	ldr	r3, [pc, #84]	; (800204c <HAL_I2C_MspInit+0x78>)
 8001ff6:	699b      	ldr	r3, [r3, #24]
 8001ff8:	4a14      	ldr	r2, [pc, #80]	; (800204c <HAL_I2C_MspInit+0x78>)
 8001ffa:	f043 0308 	orr.w	r3, r3, #8
 8001ffe:	6193      	str	r3, [r2, #24]
 8002000:	4b12      	ldr	r3, [pc, #72]	; (800204c <HAL_I2C_MspInit+0x78>)
 8002002:	699b      	ldr	r3, [r3, #24]
 8002004:	f003 0308 	and.w	r3, r3, #8
 8002008:	60fb      	str	r3, [r7, #12]
 800200a:	68fb      	ldr	r3, [r7, #12]
    /**I2C2 GPIO Configuration
    PB10     ------> I2C2_SCL
    PB11     ------> I2C2_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 800200c:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8002010:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002012:	2312      	movs	r3, #18
 8002014:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8002016:	2303      	movs	r3, #3
 8002018:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800201a:	f107 0310 	add.w	r3, r7, #16
 800201e:	4619      	mov	r1, r3
 8002020:	480b      	ldr	r0, [pc, #44]	; (8002050 <HAL_I2C_MspInit+0x7c>)
 8002022:	f001 f871 	bl	8003108 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C2_CLK_ENABLE();
 8002026:	4b09      	ldr	r3, [pc, #36]	; (800204c <HAL_I2C_MspInit+0x78>)
 8002028:	69db      	ldr	r3, [r3, #28]
 800202a:	4a08      	ldr	r2, [pc, #32]	; (800204c <HAL_I2C_MspInit+0x78>)
 800202c:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8002030:	61d3      	str	r3, [r2, #28]
 8002032:	4b06      	ldr	r3, [pc, #24]	; (800204c <HAL_I2C_MspInit+0x78>)
 8002034:	69db      	ldr	r3, [r3, #28]
 8002036:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800203a:	60bb      	str	r3, [r7, #8]
 800203c:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }

}
 800203e:	bf00      	nop
 8002040:	3720      	adds	r7, #32
 8002042:	46bd      	mov	sp, r7
 8002044:	bd80      	pop	{r7, pc}
 8002046:	bf00      	nop
 8002048:	40005800 	.word	0x40005800
 800204c:	40021000 	.word	0x40021000
 8002050:	40010c00 	.word	0x40010c00

08002054 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8002054:	b480      	push	{r7}
 8002056:	b085      	sub	sp, #20
 8002058:	af00      	add	r7, sp, #0
 800205a:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 800205c:	687b      	ldr	r3, [r7, #4]
 800205e:	681b      	ldr	r3, [r3, #0]
 8002060:	4a09      	ldr	r2, [pc, #36]	; (8002088 <HAL_TIM_Base_MspInit+0x34>)
 8002062:	4293      	cmp	r3, r2
 8002064:	d10b      	bne.n	800207e <HAL_TIM_Base_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8002066:	4b09      	ldr	r3, [pc, #36]	; (800208c <HAL_TIM_Base_MspInit+0x38>)
 8002068:	699b      	ldr	r3, [r3, #24]
 800206a:	4a08      	ldr	r2, [pc, #32]	; (800208c <HAL_TIM_Base_MspInit+0x38>)
 800206c:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8002070:	6193      	str	r3, [r2, #24]
 8002072:	4b06      	ldr	r3, [pc, #24]	; (800208c <HAL_TIM_Base_MspInit+0x38>)
 8002074:	699b      	ldr	r3, [r3, #24]
 8002076:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800207a:	60fb      	str	r3, [r7, #12]
 800207c:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }

}
 800207e:	bf00      	nop
 8002080:	3714      	adds	r7, #20
 8002082:	46bd      	mov	sp, r7
 8002084:	bc80      	pop	{r7}
 8002086:	4770      	bx	lr
 8002088:	40012c00 	.word	0x40012c00
 800208c:	40021000 	.word	0x40021000

08002090 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8002090:	b580      	push	{r7, lr}
 8002092:	b088      	sub	sp, #32
 8002094:	af00      	add	r7, sp, #0
 8002096:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002098:	f107 0310 	add.w	r3, r7, #16
 800209c:	2200      	movs	r2, #0
 800209e:	601a      	str	r2, [r3, #0]
 80020a0:	605a      	str	r2, [r3, #4]
 80020a2:	609a      	str	r2, [r3, #8]
 80020a4:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART2)
 80020a6:	687b      	ldr	r3, [r7, #4]
 80020a8:	681b      	ldr	r3, [r3, #0]
 80020aa:	4a1f      	ldr	r2, [pc, #124]	; (8002128 <HAL_UART_MspInit+0x98>)
 80020ac:	4293      	cmp	r3, r2
 80020ae:	d137      	bne.n	8002120 <HAL_UART_MspInit+0x90>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 80020b0:	4b1e      	ldr	r3, [pc, #120]	; (800212c <HAL_UART_MspInit+0x9c>)
 80020b2:	69db      	ldr	r3, [r3, #28]
 80020b4:	4a1d      	ldr	r2, [pc, #116]	; (800212c <HAL_UART_MspInit+0x9c>)
 80020b6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80020ba:	61d3      	str	r3, [r2, #28]
 80020bc:	4b1b      	ldr	r3, [pc, #108]	; (800212c <HAL_UART_MspInit+0x9c>)
 80020be:	69db      	ldr	r3, [r3, #28]
 80020c0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80020c4:	60fb      	str	r3, [r7, #12]
 80020c6:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80020c8:	4b18      	ldr	r3, [pc, #96]	; (800212c <HAL_UART_MspInit+0x9c>)
 80020ca:	699b      	ldr	r3, [r3, #24]
 80020cc:	4a17      	ldr	r2, [pc, #92]	; (800212c <HAL_UART_MspInit+0x9c>)
 80020ce:	f043 0304 	orr.w	r3, r3, #4
 80020d2:	6193      	str	r3, [r2, #24]
 80020d4:	4b15      	ldr	r3, [pc, #84]	; (800212c <HAL_UART_MspInit+0x9c>)
 80020d6:	699b      	ldr	r3, [r3, #24]
 80020d8:	f003 0304 	and.w	r3, r3, #4
 80020dc:	60bb      	str	r3, [r7, #8]
 80020de:	68bb      	ldr	r3, [r7, #8]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 80020e0:	2304      	movs	r3, #4
 80020e2:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80020e4:	2302      	movs	r3, #2
 80020e6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80020e8:	2303      	movs	r3, #3
 80020ea:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80020ec:	f107 0310 	add.w	r3, r7, #16
 80020f0:	4619      	mov	r1, r3
 80020f2:	480f      	ldr	r0, [pc, #60]	; (8002130 <HAL_UART_MspInit+0xa0>)
 80020f4:	f001 f808 	bl	8003108 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_3;
 80020f8:	2308      	movs	r3, #8
 80020fa:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80020fc:	2300      	movs	r3, #0
 80020fe:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002100:	2300      	movs	r3, #0
 8002102:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002104:	f107 0310 	add.w	r3, r7, #16
 8002108:	4619      	mov	r1, r3
 800210a:	4809      	ldr	r0, [pc, #36]	; (8002130 <HAL_UART_MspInit+0xa0>)
 800210c:	f000 fffc 	bl	8003108 <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8002110:	2200      	movs	r2, #0
 8002112:	2100      	movs	r1, #0
 8002114:	2026      	movs	r0, #38	; 0x26
 8002116:	f000 ff10 	bl	8002f3a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 800211a:	2026      	movs	r0, #38	; 0x26
 800211c:	f000 ff29 	bl	8002f72 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8002120:	bf00      	nop
 8002122:	3720      	adds	r7, #32
 8002124:	46bd      	mov	sp, r7
 8002126:	bd80      	pop	{r7, pc}
 8002128:	40004400 	.word	0x40004400
 800212c:	40021000 	.word	0x40021000
 8002130:	40010800 	.word	0x40010800

08002134 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002134:	b480      	push	{r7}
 8002136:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8002138:	e7fe      	b.n	8002138 <NMI_Handler+0x4>

0800213a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800213a:	b480      	push	{r7}
 800213c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800213e:	e7fe      	b.n	800213e <HardFault_Handler+0x4>

08002140 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002140:	b480      	push	{r7}
 8002142:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002144:	e7fe      	b.n	8002144 <MemManage_Handler+0x4>

08002146 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002146:	b480      	push	{r7}
 8002148:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800214a:	e7fe      	b.n	800214a <BusFault_Handler+0x4>

0800214c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800214c:	b480      	push	{r7}
 800214e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002150:	e7fe      	b.n	8002150 <UsageFault_Handler+0x4>

08002152 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002152:	b480      	push	{r7}
 8002154:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8002156:	bf00      	nop
 8002158:	46bd      	mov	sp, r7
 800215a:	bc80      	pop	{r7}
 800215c:	4770      	bx	lr

0800215e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800215e:	b480      	push	{r7}
 8002160:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002162:	bf00      	nop
 8002164:	46bd      	mov	sp, r7
 8002166:	bc80      	pop	{r7}
 8002168:	4770      	bx	lr

0800216a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800216a:	b480      	push	{r7}
 800216c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800216e:	bf00      	nop
 8002170:	46bd      	mov	sp, r7
 8002172:	bc80      	pop	{r7}
 8002174:	4770      	bx	lr

08002176 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002176:	b580      	push	{r7, lr}
 8002178:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800217a:	f000 f96f 	bl	800245c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800217e:	bf00      	nop
 8002180:	bd80      	pop	{r7, pc}
	...

08002184 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8002184:	b580      	push	{r7, lr}
 8002186:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */
Uart_isr(&huart2);
 8002188:	4803      	ldr	r0, [pc, #12]	; (8002198 <USART2_IRQHandler+0x14>)
 800218a:	f7ff fb25 	bl	80017d8 <Uart_isr>
  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 800218e:	4802      	ldr	r0, [pc, #8]	; (8002198 <USART2_IRQHandler+0x14>)
 8002190:	f003 f9a2 	bl	80054d8 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8002194:	bf00      	nop
 8002196:	bd80      	pop	{r7, pc}
 8002198:	20000380 	.word	0x20000380

0800219c <mapping>:
	lcd_put_cur(put_cur-1,0);
	sprintf(str,"%s: %.2f",s, f);
	lcd_send_string(str);
}

float mapping(float value, float in_min, float in_max, float out_min, float out_max){
 800219c:	b590      	push	{r4, r7, lr}
 800219e:	b087      	sub	sp, #28
 80021a0:	af00      	add	r7, sp, #0
 80021a2:	60f8      	str	r0, [r7, #12]
 80021a4:	60b9      	str	r1, [r7, #8]
 80021a6:	607a      	str	r2, [r7, #4]
 80021a8:	603b      	str	r3, [r7, #0]
	float percent = (value-in_min)*(out_max-out_min)/(in_max-in_min)+out_min;
 80021aa:	68b9      	ldr	r1, [r7, #8]
 80021ac:	68f8      	ldr	r0, [r7, #12]
 80021ae:	f7fe fcdf 	bl	8000b70 <__aeabi_fsub>
 80021b2:	4603      	mov	r3, r0
 80021b4:	461c      	mov	r4, r3
 80021b6:	6839      	ldr	r1, [r7, #0]
 80021b8:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80021ba:	f7fe fcd9 	bl	8000b70 <__aeabi_fsub>
 80021be:	4603      	mov	r3, r0
 80021c0:	4619      	mov	r1, r3
 80021c2:	4620      	mov	r0, r4
 80021c4:	f7fe fdde 	bl	8000d84 <__aeabi_fmul>
 80021c8:	4603      	mov	r3, r0
 80021ca:	461c      	mov	r4, r3
 80021cc:	68b9      	ldr	r1, [r7, #8]
 80021ce:	6878      	ldr	r0, [r7, #4]
 80021d0:	f7fe fcce 	bl	8000b70 <__aeabi_fsub>
 80021d4:	4603      	mov	r3, r0
 80021d6:	4619      	mov	r1, r3
 80021d8:	4620      	mov	r0, r4
 80021da:	f7fe fe87 	bl	8000eec <__aeabi_fdiv>
 80021de:	4603      	mov	r3, r0
 80021e0:	4619      	mov	r1, r3
 80021e2:	6838      	ldr	r0, [r7, #0]
 80021e4:	f7fe fcc6 	bl	8000b74 <__addsf3>
 80021e8:	4603      	mov	r3, r0
 80021ea:	617b      	str	r3, [r7, #20]
	return percent;
 80021ec:	697b      	ldr	r3, [r7, #20]
}
 80021ee:	4618      	mov	r0, r3
 80021f0:	371c      	adds	r7, #28
 80021f2:	46bd      	mov	sp, r7
 80021f4:	bd90      	pop	{r4, r7, pc}

080021f6 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 80021f6:	b480      	push	{r7}
 80021f8:	af00      	add	r7, sp, #0
	return 1;
 80021fa:	2301      	movs	r3, #1
}
 80021fc:	4618      	mov	r0, r3
 80021fe:	46bd      	mov	sp, r7
 8002200:	bc80      	pop	{r7}
 8002202:	4770      	bx	lr

08002204 <_kill>:

int _kill(int pid, int sig)
{
 8002204:	b580      	push	{r7, lr}
 8002206:	b082      	sub	sp, #8
 8002208:	af00      	add	r7, sp, #0
 800220a:	6078      	str	r0, [r7, #4]
 800220c:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 800220e:	f003 fd11 	bl	8005c34 <__errno>
 8002212:	4603      	mov	r3, r0
 8002214:	2216      	movs	r2, #22
 8002216:	601a      	str	r2, [r3, #0]
	return -1;
 8002218:	f04f 33ff 	mov.w	r3, #4294967295
}
 800221c:	4618      	mov	r0, r3
 800221e:	3708      	adds	r7, #8
 8002220:	46bd      	mov	sp, r7
 8002222:	bd80      	pop	{r7, pc}

08002224 <_exit>:

void _exit (int status)
{
 8002224:	b580      	push	{r7, lr}
 8002226:	b082      	sub	sp, #8
 8002228:	af00      	add	r7, sp, #0
 800222a:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 800222c:	f04f 31ff 	mov.w	r1, #4294967295
 8002230:	6878      	ldr	r0, [r7, #4]
 8002232:	f7ff ffe7 	bl	8002204 <_kill>
	while (1) {}		/* Make sure we hang here */
 8002236:	e7fe      	b.n	8002236 <_exit+0x12>

08002238 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8002238:	b580      	push	{r7, lr}
 800223a:	b086      	sub	sp, #24
 800223c:	af00      	add	r7, sp, #0
 800223e:	60f8      	str	r0, [r7, #12]
 8002240:	60b9      	str	r1, [r7, #8]
 8002242:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002244:	2300      	movs	r3, #0
 8002246:	617b      	str	r3, [r7, #20]
 8002248:	e00a      	b.n	8002260 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 800224a:	f3af 8000 	nop.w
 800224e:	4601      	mov	r1, r0
 8002250:	68bb      	ldr	r3, [r7, #8]
 8002252:	1c5a      	adds	r2, r3, #1
 8002254:	60ba      	str	r2, [r7, #8]
 8002256:	b2ca      	uxtb	r2, r1
 8002258:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800225a:	697b      	ldr	r3, [r7, #20]
 800225c:	3301      	adds	r3, #1
 800225e:	617b      	str	r3, [r7, #20]
 8002260:	697a      	ldr	r2, [r7, #20]
 8002262:	687b      	ldr	r3, [r7, #4]
 8002264:	429a      	cmp	r2, r3
 8002266:	dbf0      	blt.n	800224a <_read+0x12>
	}

return len;
 8002268:	687b      	ldr	r3, [r7, #4]
}
 800226a:	4618      	mov	r0, r3
 800226c:	3718      	adds	r7, #24
 800226e:	46bd      	mov	sp, r7
 8002270:	bd80      	pop	{r7, pc}

08002272 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8002272:	b580      	push	{r7, lr}
 8002274:	b086      	sub	sp, #24
 8002276:	af00      	add	r7, sp, #0
 8002278:	60f8      	str	r0, [r7, #12]
 800227a:	60b9      	str	r1, [r7, #8]
 800227c:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800227e:	2300      	movs	r3, #0
 8002280:	617b      	str	r3, [r7, #20]
 8002282:	e009      	b.n	8002298 <_write+0x26>
	{
		__io_putchar(*ptr++);
 8002284:	68bb      	ldr	r3, [r7, #8]
 8002286:	1c5a      	adds	r2, r3, #1
 8002288:	60ba      	str	r2, [r7, #8]
 800228a:	781b      	ldrb	r3, [r3, #0]
 800228c:	4618      	mov	r0, r3
 800228e:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002292:	697b      	ldr	r3, [r7, #20]
 8002294:	3301      	adds	r3, #1
 8002296:	617b      	str	r3, [r7, #20]
 8002298:	697a      	ldr	r2, [r7, #20]
 800229a:	687b      	ldr	r3, [r7, #4]
 800229c:	429a      	cmp	r2, r3
 800229e:	dbf1      	blt.n	8002284 <_write+0x12>
	}
	return len;
 80022a0:	687b      	ldr	r3, [r7, #4]
}
 80022a2:	4618      	mov	r0, r3
 80022a4:	3718      	adds	r7, #24
 80022a6:	46bd      	mov	sp, r7
 80022a8:	bd80      	pop	{r7, pc}

080022aa <_close>:

int _close(int file)
{
 80022aa:	b480      	push	{r7}
 80022ac:	b083      	sub	sp, #12
 80022ae:	af00      	add	r7, sp, #0
 80022b0:	6078      	str	r0, [r7, #4]
	return -1;
 80022b2:	f04f 33ff 	mov.w	r3, #4294967295
}
 80022b6:	4618      	mov	r0, r3
 80022b8:	370c      	adds	r7, #12
 80022ba:	46bd      	mov	sp, r7
 80022bc:	bc80      	pop	{r7}
 80022be:	4770      	bx	lr

080022c0 <_fstat>:


int _fstat(int file, struct stat *st)
{
 80022c0:	b480      	push	{r7}
 80022c2:	b083      	sub	sp, #12
 80022c4:	af00      	add	r7, sp, #0
 80022c6:	6078      	str	r0, [r7, #4]
 80022c8:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 80022ca:	683b      	ldr	r3, [r7, #0]
 80022cc:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80022d0:	605a      	str	r2, [r3, #4]
	return 0;
 80022d2:	2300      	movs	r3, #0
}
 80022d4:	4618      	mov	r0, r3
 80022d6:	370c      	adds	r7, #12
 80022d8:	46bd      	mov	sp, r7
 80022da:	bc80      	pop	{r7}
 80022dc:	4770      	bx	lr

080022de <_isatty>:

int _isatty(int file)
{
 80022de:	b480      	push	{r7}
 80022e0:	b083      	sub	sp, #12
 80022e2:	af00      	add	r7, sp, #0
 80022e4:	6078      	str	r0, [r7, #4]
	return 1;
 80022e6:	2301      	movs	r3, #1
}
 80022e8:	4618      	mov	r0, r3
 80022ea:	370c      	adds	r7, #12
 80022ec:	46bd      	mov	sp, r7
 80022ee:	bc80      	pop	{r7}
 80022f0:	4770      	bx	lr

080022f2 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80022f2:	b480      	push	{r7}
 80022f4:	b085      	sub	sp, #20
 80022f6:	af00      	add	r7, sp, #0
 80022f8:	60f8      	str	r0, [r7, #12]
 80022fa:	60b9      	str	r1, [r7, #8]
 80022fc:	607a      	str	r2, [r7, #4]
	return 0;
 80022fe:	2300      	movs	r3, #0
}
 8002300:	4618      	mov	r0, r3
 8002302:	3714      	adds	r7, #20
 8002304:	46bd      	mov	sp, r7
 8002306:	bc80      	pop	{r7}
 8002308:	4770      	bx	lr
	...

0800230c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800230c:	b580      	push	{r7, lr}
 800230e:	b086      	sub	sp, #24
 8002310:	af00      	add	r7, sp, #0
 8002312:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002314:	4a14      	ldr	r2, [pc, #80]	; (8002368 <_sbrk+0x5c>)
 8002316:	4b15      	ldr	r3, [pc, #84]	; (800236c <_sbrk+0x60>)
 8002318:	1ad3      	subs	r3, r2, r3
 800231a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 800231c:	697b      	ldr	r3, [r7, #20]
 800231e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002320:	4b13      	ldr	r3, [pc, #76]	; (8002370 <_sbrk+0x64>)
 8002322:	681b      	ldr	r3, [r3, #0]
 8002324:	2b00      	cmp	r3, #0
 8002326:	d102      	bne.n	800232e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002328:	4b11      	ldr	r3, [pc, #68]	; (8002370 <_sbrk+0x64>)
 800232a:	4a12      	ldr	r2, [pc, #72]	; (8002374 <_sbrk+0x68>)
 800232c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800232e:	4b10      	ldr	r3, [pc, #64]	; (8002370 <_sbrk+0x64>)
 8002330:	681a      	ldr	r2, [r3, #0]
 8002332:	687b      	ldr	r3, [r7, #4]
 8002334:	4413      	add	r3, r2
 8002336:	693a      	ldr	r2, [r7, #16]
 8002338:	429a      	cmp	r2, r3
 800233a:	d207      	bcs.n	800234c <_sbrk+0x40>
  {
    errno = ENOMEM;
 800233c:	f003 fc7a 	bl	8005c34 <__errno>
 8002340:	4603      	mov	r3, r0
 8002342:	220c      	movs	r2, #12
 8002344:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8002346:	f04f 33ff 	mov.w	r3, #4294967295
 800234a:	e009      	b.n	8002360 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 800234c:	4b08      	ldr	r3, [pc, #32]	; (8002370 <_sbrk+0x64>)
 800234e:	681b      	ldr	r3, [r3, #0]
 8002350:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8002352:	4b07      	ldr	r3, [pc, #28]	; (8002370 <_sbrk+0x64>)
 8002354:	681a      	ldr	r2, [r3, #0]
 8002356:	687b      	ldr	r3, [r7, #4]
 8002358:	4413      	add	r3, r2
 800235a:	4a05      	ldr	r2, [pc, #20]	; (8002370 <_sbrk+0x64>)
 800235c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800235e:	68fb      	ldr	r3, [r7, #12]
}
 8002360:	4618      	mov	r0, r3
 8002362:	3718      	adds	r7, #24
 8002364:	46bd      	mov	sp, r7
 8002366:	bd80      	pop	{r7, pc}
 8002368:	20005000 	.word	0x20005000
 800236c:	00000400 	.word	0x00000400
 8002370:	20000290 	.word	0x20000290
 8002374:	200003e0 	.word	0x200003e0

08002378 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8002378:	b480      	push	{r7}
 800237a:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800237c:	bf00      	nop
 800237e:	46bd      	mov	sp, r7
 8002380:	bc80      	pop	{r7}
 8002382:	4770      	bx	lr

08002384 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8002384:	480c      	ldr	r0, [pc, #48]	; (80023b8 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8002386:	490d      	ldr	r1, [pc, #52]	; (80023bc <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8002388:	4a0d      	ldr	r2, [pc, #52]	; (80023c0 <LoopFillZerobss+0x1a>)
  movs r3, #0
 800238a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800238c:	e002      	b.n	8002394 <LoopCopyDataInit>

0800238e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800238e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002390:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002392:	3304      	adds	r3, #4

08002394 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002394:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002396:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002398:	d3f9      	bcc.n	800238e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800239a:	4a0a      	ldr	r2, [pc, #40]	; (80023c4 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 800239c:	4c0a      	ldr	r4, [pc, #40]	; (80023c8 <LoopFillZerobss+0x22>)
  movs r3, #0
 800239e:	2300      	movs	r3, #0
  b LoopFillZerobss
 80023a0:	e001      	b.n	80023a6 <LoopFillZerobss>

080023a2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80023a2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80023a4:	3204      	adds	r2, #4

080023a6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80023a6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80023a8:	d3fb      	bcc.n	80023a2 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 80023aa:	f7ff ffe5 	bl	8002378 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80023ae:	f003 fc47 	bl	8005c40 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80023b2:	f7ff fb43 	bl	8001a3c <main>
  bx lr
 80023b6:	4770      	bx	lr
  ldr r0, =_sdata
 80023b8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80023bc:	200001e0 	.word	0x200001e0
  ldr r2, =_sidata
 80023c0:	0800ab34 	.word	0x0800ab34
  ldr r2, =_sbss
 80023c4:	200001e0 	.word	0x200001e0
  ldr r4, =_ebss
 80023c8:	200003e0 	.word	0x200003e0

080023cc <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80023cc:	e7fe      	b.n	80023cc <ADC1_2_IRQHandler>
	...

080023d0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80023d0:	b580      	push	{r7, lr}
 80023d2:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80023d4:	4b08      	ldr	r3, [pc, #32]	; (80023f8 <HAL_Init+0x28>)
 80023d6:	681b      	ldr	r3, [r3, #0]
 80023d8:	4a07      	ldr	r2, [pc, #28]	; (80023f8 <HAL_Init+0x28>)
 80023da:	f043 0310 	orr.w	r3, r3, #16
 80023de:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80023e0:	2003      	movs	r0, #3
 80023e2:	f000 fd9f 	bl	8002f24 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80023e6:	2000      	movs	r0, #0
 80023e8:	f000 f808 	bl	80023fc <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80023ec:	f7ff fd84 	bl	8001ef8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80023f0:	2300      	movs	r3, #0
}
 80023f2:	4618      	mov	r0, r3
 80023f4:	bd80      	pop	{r7, pc}
 80023f6:	bf00      	nop
 80023f8:	40022000 	.word	0x40022000

080023fc <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80023fc:	b580      	push	{r7, lr}
 80023fe:	b082      	sub	sp, #8
 8002400:	af00      	add	r7, sp, #0
 8002402:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002404:	4b12      	ldr	r3, [pc, #72]	; (8002450 <HAL_InitTick+0x54>)
 8002406:	681a      	ldr	r2, [r3, #0]
 8002408:	4b12      	ldr	r3, [pc, #72]	; (8002454 <HAL_InitTick+0x58>)
 800240a:	781b      	ldrb	r3, [r3, #0]
 800240c:	4619      	mov	r1, r3
 800240e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002412:	fbb3 f3f1 	udiv	r3, r3, r1
 8002416:	fbb2 f3f3 	udiv	r3, r2, r3
 800241a:	4618      	mov	r0, r3
 800241c:	f000 fdb7 	bl	8002f8e <HAL_SYSTICK_Config>
 8002420:	4603      	mov	r3, r0
 8002422:	2b00      	cmp	r3, #0
 8002424:	d001      	beq.n	800242a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8002426:	2301      	movs	r3, #1
 8002428:	e00e      	b.n	8002448 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800242a:	687b      	ldr	r3, [r7, #4]
 800242c:	2b0f      	cmp	r3, #15
 800242e:	d80a      	bhi.n	8002446 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002430:	2200      	movs	r2, #0
 8002432:	6879      	ldr	r1, [r7, #4]
 8002434:	f04f 30ff 	mov.w	r0, #4294967295
 8002438:	f000 fd7f 	bl	8002f3a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800243c:	4a06      	ldr	r2, [pc, #24]	; (8002458 <HAL_InitTick+0x5c>)
 800243e:	687b      	ldr	r3, [r7, #4]
 8002440:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8002442:	2300      	movs	r3, #0
 8002444:	e000      	b.n	8002448 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8002446:	2301      	movs	r3, #1
}
 8002448:	4618      	mov	r0, r3
 800244a:	3708      	adds	r7, #8
 800244c:	46bd      	mov	sp, r7
 800244e:	bd80      	pop	{r7, pc}
 8002450:	20000000 	.word	0x20000000
 8002454:	20000008 	.word	0x20000008
 8002458:	20000004 	.word	0x20000004

0800245c <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800245c:	b480      	push	{r7}
 800245e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002460:	4b05      	ldr	r3, [pc, #20]	; (8002478 <HAL_IncTick+0x1c>)
 8002462:	781b      	ldrb	r3, [r3, #0]
 8002464:	461a      	mov	r2, r3
 8002466:	4b05      	ldr	r3, [pc, #20]	; (800247c <HAL_IncTick+0x20>)
 8002468:	681b      	ldr	r3, [r3, #0]
 800246a:	4413      	add	r3, r2
 800246c:	4a03      	ldr	r2, [pc, #12]	; (800247c <HAL_IncTick+0x20>)
 800246e:	6013      	str	r3, [r2, #0]
}
 8002470:	bf00      	nop
 8002472:	46bd      	mov	sp, r7
 8002474:	bc80      	pop	{r7}
 8002476:	4770      	bx	lr
 8002478:	20000008 	.word	0x20000008
 800247c:	200003cc 	.word	0x200003cc

08002480 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002480:	b480      	push	{r7}
 8002482:	af00      	add	r7, sp, #0
  return uwTick;
 8002484:	4b02      	ldr	r3, [pc, #8]	; (8002490 <HAL_GetTick+0x10>)
 8002486:	681b      	ldr	r3, [r3, #0]
}
 8002488:	4618      	mov	r0, r3
 800248a:	46bd      	mov	sp, r7
 800248c:	bc80      	pop	{r7}
 800248e:	4770      	bx	lr
 8002490:	200003cc 	.word	0x200003cc

08002494 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002494:	b580      	push	{r7, lr}
 8002496:	b084      	sub	sp, #16
 8002498:	af00      	add	r7, sp, #0
 800249a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800249c:	f7ff fff0 	bl	8002480 <HAL_GetTick>
 80024a0:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80024a2:	687b      	ldr	r3, [r7, #4]
 80024a4:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80024a6:	68fb      	ldr	r3, [r7, #12]
 80024a8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80024ac:	d005      	beq.n	80024ba <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80024ae:	4b0a      	ldr	r3, [pc, #40]	; (80024d8 <HAL_Delay+0x44>)
 80024b0:	781b      	ldrb	r3, [r3, #0]
 80024b2:	461a      	mov	r2, r3
 80024b4:	68fb      	ldr	r3, [r7, #12]
 80024b6:	4413      	add	r3, r2
 80024b8:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80024ba:	bf00      	nop
 80024bc:	f7ff ffe0 	bl	8002480 <HAL_GetTick>
 80024c0:	4602      	mov	r2, r0
 80024c2:	68bb      	ldr	r3, [r7, #8]
 80024c4:	1ad3      	subs	r3, r2, r3
 80024c6:	68fa      	ldr	r2, [r7, #12]
 80024c8:	429a      	cmp	r2, r3
 80024ca:	d8f7      	bhi.n	80024bc <HAL_Delay+0x28>
  {
  }
}
 80024cc:	bf00      	nop
 80024ce:	bf00      	nop
 80024d0:	3710      	adds	r7, #16
 80024d2:	46bd      	mov	sp, r7
 80024d4:	bd80      	pop	{r7, pc}
 80024d6:	bf00      	nop
 80024d8:	20000008 	.word	0x20000008

080024dc <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 80024dc:	b580      	push	{r7, lr}
 80024de:	b086      	sub	sp, #24
 80024e0:	af00      	add	r7, sp, #0
 80024e2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80024e4:	2300      	movs	r3, #0
 80024e6:	75fb      	strb	r3, [r7, #23]
  uint32_t tmp_cr1 = 0U;
 80024e8:	2300      	movs	r3, #0
 80024ea:	613b      	str	r3, [r7, #16]
  uint32_t tmp_cr2 = 0U;
 80024ec:	2300      	movs	r3, #0
 80024ee:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_sqr1 = 0U;
 80024f0:	2300      	movs	r3, #0
 80024f2:	60fb      	str	r3, [r7, #12]
  
  /* Check ADC handle */
  if(hadc == NULL)
 80024f4:	687b      	ldr	r3, [r7, #4]
 80024f6:	2b00      	cmp	r3, #0
 80024f8:	d101      	bne.n	80024fe <HAL_ADC_Init+0x22>
  {
    return HAL_ERROR;
 80024fa:	2301      	movs	r3, #1
 80024fc:	e0be      	b.n	800267c <HAL_ADC_Init+0x1a0>
  assert_param(IS_ADC_DATA_ALIGN(hadc->Init.DataAlign));
  assert_param(IS_ADC_SCAN_MODE(hadc->Init.ScanConvMode));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXTTRIG(hadc->Init.ExternalTrigConv));
  
  if(hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 80024fe:	687b      	ldr	r3, [r7, #4]
 8002500:	689b      	ldr	r3, [r3, #8]
 8002502:	2b00      	cmp	r3, #0
  /* Refer to header of this file for more details on clock enabling          */
  /* procedure.                                                               */

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8002504:	687b      	ldr	r3, [r7, #4]
 8002506:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002508:	2b00      	cmp	r3, #0
 800250a:	d109      	bne.n	8002520 <HAL_ADC_Init+0x44>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 800250c:	687b      	ldr	r3, [r7, #4]
 800250e:	2200      	movs	r2, #0
 8002510:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8002512:	687b      	ldr	r3, [r7, #4]
 8002514:	2200      	movs	r2, #0
 8002516:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 800251a:	6878      	ldr	r0, [r7, #4]
 800251c:	f7ff fd1e 	bl	8001f5c <HAL_ADC_MspInit>
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  /* Note: In case of ADC already enabled, precaution to not launch an        */
  /*       unwanted conversion while modifying register CR2 by writing 1 to   */
  /*       bit ADON.                                                          */
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 8002520:	6878      	ldr	r0, [r7, #4]
 8002522:	f000 fbf1 	bl	8002d08 <ADC_ConversionStop_Disable>
 8002526:	4603      	mov	r3, r0
 8002528:	75fb      	strb	r3, [r7, #23]
  
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 800252a:	687b      	ldr	r3, [r7, #4]
 800252c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800252e:	f003 0310 	and.w	r3, r3, #16
 8002532:	2b00      	cmp	r3, #0
 8002534:	f040 8099 	bne.w	800266a <HAL_ADC_Init+0x18e>
 8002538:	7dfb      	ldrb	r3, [r7, #23]
 800253a:	2b00      	cmp	r3, #0
 800253c:	f040 8095 	bne.w	800266a <HAL_ADC_Init+0x18e>
      (tmp_hal_status == HAL_OK)                                  )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002540:	687b      	ldr	r3, [r7, #4]
 8002542:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002544:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8002548:	f023 0302 	bic.w	r3, r3, #2
 800254c:	f043 0202 	orr.w	r2, r3, #2
 8002550:	687b      	ldr	r3, [r7, #4]
 8002552:	629a      	str	r2, [r3, #40]	; 0x28
    /*  - continuous conversion mode                                          */
    /* Note: External trigger polarity (ADC_CR2_EXTTRIG) is set into          */
    /*       HAL_ADC_Start_xxx functions because if set in this function,     */
    /*       a conversion on injected group would start a conversion also on  */
    /*       regular group after ADC enabling.                                */
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8002554:	687b      	ldr	r3, [r7, #4]
 8002556:	685a      	ldr	r2, [r3, #4]
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 8002558:	687b      	ldr	r3, [r7, #4]
 800255a:	69db      	ldr	r3, [r3, #28]
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 800255c:	431a      	orrs	r2, r3
                ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)   );
 800255e:	687b      	ldr	r3, [r7, #4]
 8002560:	7b1b      	ldrb	r3, [r3, #12]
 8002562:	005b      	lsls	r3, r3, #1
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 8002564:	4313      	orrs	r3, r2
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8002566:	68ba      	ldr	r2, [r7, #8]
 8002568:	4313      	orrs	r3, r2
 800256a:	60bb      	str	r3, [r7, #8]

    /* Configuration of ADC:                                                  */
    /*  - scan mode                                                           */
    /*  - discontinuous mode disable/enable                                   */
    /*  - discontinuous mode number of conversions                            */
    tmp_cr1 |= (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode));
 800256c:	687b      	ldr	r3, [r7, #4]
 800256e:	689b      	ldr	r3, [r3, #8]
 8002570:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002574:	d003      	beq.n	800257e <HAL_ADC_Init+0xa2>
 8002576:	687b      	ldr	r3, [r7, #4]
 8002578:	689b      	ldr	r3, [r3, #8]
 800257a:	2b01      	cmp	r3, #1
 800257c:	d102      	bne.n	8002584 <HAL_ADC_Init+0xa8>
 800257e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002582:	e000      	b.n	8002586 <HAL_ADC_Init+0xaa>
 8002584:	2300      	movs	r3, #0
 8002586:	693a      	ldr	r2, [r7, #16]
 8002588:	4313      	orrs	r3, r2
 800258a:	613b      	str	r3, [r7, #16]
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    /* Note: If parameter "Init.ScanConvMode" is set to disable, parameter    */
    /*       discontinuous is set anyway, but will have no effect on ADC HW.  */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 800258c:	687b      	ldr	r3, [r7, #4]
 800258e:	7d1b      	ldrb	r3, [r3, #20]
 8002590:	2b01      	cmp	r3, #1
 8002592:	d119      	bne.n	80025c8 <HAL_ADC_Init+0xec>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 8002594:	687b      	ldr	r3, [r7, #4]
 8002596:	7b1b      	ldrb	r3, [r3, #12]
 8002598:	2b00      	cmp	r3, #0
 800259a:	d109      	bne.n	80025b0 <HAL_ADC_Init+0xd4>
      {
        /* Enable the selected ADC regular discontinuous mode */
        /* Set the number of channels to be converted in discontinuous mode */
        SET_BIT(tmp_cr1, ADC_CR1_DISCEN                                            |
 800259c:	687b      	ldr	r3, [r7, #4]
 800259e:	699b      	ldr	r3, [r3, #24]
 80025a0:	3b01      	subs	r3, #1
 80025a2:	035a      	lsls	r2, r3, #13
 80025a4:	693b      	ldr	r3, [r7, #16]
 80025a6:	4313      	orrs	r3, r2
 80025a8:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80025ac:	613b      	str	r3, [r7, #16]
 80025ae:	e00b      	b.n	80025c8 <HAL_ADC_Init+0xec>
      {
        /* ADC regular group settings continuous and sequencer discontinuous*/
        /* cannot be enabled simultaneously.                                */
        
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80025b0:	687b      	ldr	r3, [r7, #4]
 80025b2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80025b4:	f043 0220 	orr.w	r2, r3, #32
 80025b8:	687b      	ldr	r3, [r7, #4]
 80025ba:	629a      	str	r2, [r3, #40]	; 0x28
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80025bc:	687b      	ldr	r3, [r7, #4]
 80025be:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80025c0:	f043 0201 	orr.w	r2, r3, #1
 80025c4:	687b      	ldr	r3, [r7, #4]
 80025c6:	62da      	str	r2, [r3, #44]	; 0x2c
      }
    }
    
    /* Update ADC configuration register CR1 with previous settings */
      MODIFY_REG(hadc->Instance->CR1,
 80025c8:	687b      	ldr	r3, [r7, #4]
 80025ca:	681b      	ldr	r3, [r3, #0]
 80025cc:	685b      	ldr	r3, [r3, #4]
 80025ce:	f423 4169 	bic.w	r1, r3, #59648	; 0xe900
 80025d2:	687b      	ldr	r3, [r7, #4]
 80025d4:	681b      	ldr	r3, [r3, #0]
 80025d6:	693a      	ldr	r2, [r7, #16]
 80025d8:	430a      	orrs	r2, r1
 80025da:	605a      	str	r2, [r3, #4]
                 ADC_CR1_DISCEN  |
                 ADC_CR1_DISCNUM    ,
                 tmp_cr1             );
    
    /* Update ADC configuration register CR2 with previous settings */
      MODIFY_REG(hadc->Instance->CR2,
 80025dc:	687b      	ldr	r3, [r7, #4]
 80025de:	681b      	ldr	r3, [r3, #0]
 80025e0:	689a      	ldr	r2, [r3, #8]
 80025e2:	4b28      	ldr	r3, [pc, #160]	; (8002684 <HAL_ADC_Init+0x1a8>)
 80025e4:	4013      	ands	r3, r2
 80025e6:	687a      	ldr	r2, [r7, #4]
 80025e8:	6812      	ldr	r2, [r2, #0]
 80025ea:	68b9      	ldr	r1, [r7, #8]
 80025ec:	430b      	orrs	r3, r1
 80025ee:	6093      	str	r3, [r2, #8]
    /*   Note: Scan mode is present by hardware on this device and, if        */
    /*   disabled, discards automatically nb of conversions. Anyway, nb of    */
    /*   conversions is forced to 0x00 for alignment over all STM32 devices.  */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion"                                          */
    if (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode) == ADC_SCAN_ENABLE)
 80025f0:	687b      	ldr	r3, [r7, #4]
 80025f2:	689b      	ldr	r3, [r3, #8]
 80025f4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80025f8:	d003      	beq.n	8002602 <HAL_ADC_Init+0x126>
 80025fa:	687b      	ldr	r3, [r7, #4]
 80025fc:	689b      	ldr	r3, [r3, #8]
 80025fe:	2b01      	cmp	r3, #1
 8002600:	d104      	bne.n	800260c <HAL_ADC_Init+0x130>
    {
      tmp_sqr1 = ADC_SQR1_L_SHIFT(hadc->Init.NbrOfConversion);
 8002602:	687b      	ldr	r3, [r7, #4]
 8002604:	691b      	ldr	r3, [r3, #16]
 8002606:	3b01      	subs	r3, #1
 8002608:	051b      	lsls	r3, r3, #20
 800260a:	60fb      	str	r3, [r7, #12]
    }
      
    MODIFY_REG(hadc->Instance->SQR1,
 800260c:	687b      	ldr	r3, [r7, #4]
 800260e:	681b      	ldr	r3, [r3, #0]
 8002610:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002612:	f423 0170 	bic.w	r1, r3, #15728640	; 0xf00000
 8002616:	687b      	ldr	r3, [r7, #4]
 8002618:	681b      	ldr	r3, [r3, #0]
 800261a:	68fa      	ldr	r2, [r7, #12]
 800261c:	430a      	orrs	r2, r1
 800261e:	62da      	str	r2, [r3, #44]	; 0x2c
    /* ensure of no potential problem of ADC core IP clocking.                */
    /* Check through register CR2 (excluding bits set in other functions:     */
    /* execution control bits (ADON, JSWSTART, SWSTART), regular group bits   */
    /* (DMA), injected group bits (JEXTTRIG and JEXTSEL), channel internal    */
    /* measurement path bit (TSVREFE).                                        */
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8002620:	687b      	ldr	r3, [r7, #4]
 8002622:	681b      	ldr	r3, [r3, #0]
 8002624:	689a      	ldr	r2, [r3, #8]
 8002626:	4b18      	ldr	r3, [pc, #96]	; (8002688 <HAL_ADC_Init+0x1ac>)
 8002628:	4013      	ands	r3, r2
 800262a:	68ba      	ldr	r2, [r7, #8]
 800262c:	429a      	cmp	r2, r3
 800262e:	d10b      	bne.n	8002648 <HAL_ADC_Init+0x16c>
                                        ADC_CR2_JEXTTRIG | ADC_CR2_JEXTSEL |
                                        ADC_CR2_TSVREFE                     ))
         == tmp_cr2)
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 8002630:	687b      	ldr	r3, [r7, #4]
 8002632:	2200      	movs	r2, #0
 8002634:	62da      	str	r2, [r3, #44]	; 0x2c
      
      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 8002636:	687b      	ldr	r3, [r7, #4]
 8002638:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800263a:	f023 0303 	bic.w	r3, r3, #3
 800263e:	f043 0201 	orr.w	r2, r3, #1
 8002642:	687b      	ldr	r3, [r7, #4]
 8002644:	629a      	str	r2, [r3, #40]	; 0x28
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8002646:	e018      	b.n	800267a <HAL_ADC_Init+0x19e>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 8002648:	687b      	ldr	r3, [r7, #4]
 800264a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800264c:	f023 0312 	bic.w	r3, r3, #18
 8002650:	f043 0210 	orr.w	r2, r3, #16
 8002654:	687b      	ldr	r3, [r7, #4]
 8002656:	629a      	str	r2, [r3, #40]	; 0x28
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002658:	687b      	ldr	r3, [r7, #4]
 800265a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800265c:	f043 0201 	orr.w	r2, r3, #1
 8002660:	687b      	ldr	r3, [r7, #4]
 8002662:	62da      	str	r2, [r3, #44]	; 0x2c
      
      tmp_hal_status = HAL_ERROR;
 8002664:	2301      	movs	r3, #1
 8002666:	75fb      	strb	r3, [r7, #23]
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8002668:	e007      	b.n	800267a <HAL_ADC_Init+0x19e>
  
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800266a:	687b      	ldr	r3, [r7, #4]
 800266c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800266e:	f043 0210 	orr.w	r2, r3, #16
 8002672:	687b      	ldr	r3, [r7, #4]
 8002674:	629a      	str	r2, [r3, #40]	; 0x28
        
    tmp_hal_status = HAL_ERROR;
 8002676:	2301      	movs	r3, #1
 8002678:	75fb      	strb	r3, [r7, #23]
  }
  
  /* Return function status */
  return tmp_hal_status;
 800267a:	7dfb      	ldrb	r3, [r7, #23]
}
 800267c:	4618      	mov	r0, r3
 800267e:	3718      	adds	r7, #24
 8002680:	46bd      	mov	sp, r7
 8002682:	bd80      	pop	{r7, pc}
 8002684:	ffe1f7fd 	.word	0xffe1f7fd
 8002688:	ff1f0efe 	.word	0xff1f0efe

0800268c <HAL_ADC_Start>:
  *         Interruptions enabled in this function: None.
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef* hadc)
{
 800268c:	b580      	push	{r7, lr}
 800268e:	b084      	sub	sp, #16
 8002690:	af00      	add	r7, sp, #0
 8002692:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002694:	2300      	movs	r3, #0
 8002696:	73fb      	strb	r3, [r7, #15]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8002698:	687b      	ldr	r3, [r7, #4]
 800269a:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800269e:	2b01      	cmp	r3, #1
 80026a0:	d101      	bne.n	80026a6 <HAL_ADC_Start+0x1a>
 80026a2:	2302      	movs	r3, #2
 80026a4:	e098      	b.n	80027d8 <HAL_ADC_Start+0x14c>
 80026a6:	687b      	ldr	r3, [r7, #4]
 80026a8:	2201      	movs	r2, #1
 80026aa:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
   
  /* Enable the ADC peripheral */
  tmp_hal_status = ADC_Enable(hadc);
 80026ae:	6878      	ldr	r0, [r7, #4]
 80026b0:	f000 fad0 	bl	8002c54 <ADC_Enable>
 80026b4:	4603      	mov	r3, r0
 80026b6:	73fb      	strb	r3, [r7, #15]
  
  /* Start conversion if ADC is effectively enabled */
  if (tmp_hal_status == HAL_OK)
 80026b8:	7bfb      	ldrb	r3, [r7, #15]
 80026ba:	2b00      	cmp	r3, #0
 80026bc:	f040 8087 	bne.w	80027ce <HAL_ADC_Start+0x142>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular operation                      */
    ADC_STATE_CLR_SET(hadc->State,
 80026c0:	687b      	ldr	r3, [r7, #4]
 80026c2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80026c4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80026c8:	f023 0301 	bic.w	r3, r3, #1
 80026cc:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 80026d0:	687b      	ldr	r3, [r7, #4]
 80026d2:	629a      	str	r2, [r3, #40]	; 0x28
                      HAL_ADC_STATE_REG_BUSY);
    
    /* Set group injected state (from auto-injection) and multimode state     */
    /* for all cases of multimode: independent mode, multimode ADC master     */
    /* or multimode ADC slave (for devices with several ADCs):                */
    if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 80026d4:	687b      	ldr	r3, [r7, #4]
 80026d6:	681b      	ldr	r3, [r3, #0]
 80026d8:	4a41      	ldr	r2, [pc, #260]	; (80027e0 <HAL_ADC_Start+0x154>)
 80026da:	4293      	cmp	r3, r2
 80026dc:	d105      	bne.n	80026ea <HAL_ADC_Start+0x5e>
 80026de:	4b41      	ldr	r3, [pc, #260]	; (80027e4 <HAL_ADC_Start+0x158>)
 80026e0:	685b      	ldr	r3, [r3, #4]
 80026e2:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
 80026e6:	2b00      	cmp	r3, #0
 80026e8:	d115      	bne.n	8002716 <HAL_ADC_Start+0x8a>
    {
      /* Set ADC state (ADC independent or master) */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 80026ea:	687b      	ldr	r3, [r7, #4]
 80026ec:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80026ee:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 80026f2:	687b      	ldr	r3, [r7, #4]
 80026f4:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 80026f6:	687b      	ldr	r3, [r7, #4]
 80026f8:	681b      	ldr	r3, [r3, #0]
 80026fa:	685b      	ldr	r3, [r3, #4]
 80026fc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002700:	2b00      	cmp	r3, #0
 8002702:	d026      	beq.n	8002752 <HAL_ADC_Start+0xc6>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8002704:	687b      	ldr	r3, [r7, #4]
 8002706:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002708:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 800270c:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8002710:	687b      	ldr	r3, [r7, #4]
 8002712:	629a      	str	r2, [r3, #40]	; 0x28
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8002714:	e01d      	b.n	8002752 <HAL_ADC_Start+0xc6>
      }
    }
    else
    {
      /* Set ADC state (ADC slave) */
      SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8002716:	687b      	ldr	r3, [r7, #4]
 8002718:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800271a:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 800271e:	687b      	ldr	r3, [r7, #4]
 8002720:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (ADC_MULTIMODE_AUTO_INJECTED(hadc))
 8002722:	687b      	ldr	r3, [r7, #4]
 8002724:	681b      	ldr	r3, [r3, #0]
 8002726:	4a2f      	ldr	r2, [pc, #188]	; (80027e4 <HAL_ADC_Start+0x158>)
 8002728:	4293      	cmp	r3, r2
 800272a:	d004      	beq.n	8002736 <HAL_ADC_Start+0xaa>
 800272c:	687b      	ldr	r3, [r7, #4]
 800272e:	681b      	ldr	r3, [r3, #0]
 8002730:	4a2b      	ldr	r2, [pc, #172]	; (80027e0 <HAL_ADC_Start+0x154>)
 8002732:	4293      	cmp	r3, r2
 8002734:	d10d      	bne.n	8002752 <HAL_ADC_Start+0xc6>
 8002736:	4b2b      	ldr	r3, [pc, #172]	; (80027e4 <HAL_ADC_Start+0x158>)
 8002738:	685b      	ldr	r3, [r3, #4]
 800273a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800273e:	2b00      	cmp	r3, #0
 8002740:	d007      	beq.n	8002752 <HAL_ADC_Start+0xc6>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8002742:	687b      	ldr	r3, [r7, #4]
 8002744:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002746:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 800274a:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 800274e:	687b      	ldr	r3, [r7, #4]
 8002750:	629a      	str	r2, [r3, #40]	; 0x28
      }
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8002752:	687b      	ldr	r3, [r7, #4]
 8002754:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002756:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800275a:	2b00      	cmp	r3, #0
 800275c:	d006      	beq.n	800276c <HAL_ADC_Start+0xe0>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 800275e:	687b      	ldr	r3, [r7, #4]
 8002760:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002762:	f023 0206 	bic.w	r2, r3, #6
 8002766:	687b      	ldr	r3, [r7, #4]
 8002768:	62da      	str	r2, [r3, #44]	; 0x2c
 800276a:	e002      	b.n	8002772 <HAL_ADC_Start+0xe6>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 800276c:	687b      	ldr	r3, [r7, #4]
 800276e:	2200      	movs	r2, #0
 8002770:	62da      	str	r2, [r3, #44]	; 0x2c
    }
    
    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 8002772:	687b      	ldr	r3, [r7, #4]
 8002774:	2200      	movs	r2, #0
 8002776:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
    /* Clear regular group conversion flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC);
 800277a:	687b      	ldr	r3, [r7, #4]
 800277c:	681b      	ldr	r3, [r3, #0]
 800277e:	f06f 0202 	mvn.w	r2, #2
 8002782:	601a      	str	r2, [r3, #0]
    /*  - if ADC is slave, ADC is enabled only (conversion is not started).   */
    /*  - if ADC is master, ADC is enabled and conversion is started.         */
    /* If ADC is master, ADC is enabled and conversion is started.            */
    /* Note: Alternate trigger for single conversion could be to force an     */
    /*       additional set of bit ADON "hadc->Instance->CR2 |= ADC_CR2_ADON;"*/
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 8002784:	687b      	ldr	r3, [r7, #4]
 8002786:	681b      	ldr	r3, [r3, #0]
 8002788:	689b      	ldr	r3, [r3, #8]
 800278a:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
 800278e:	f5b3 2f60 	cmp.w	r3, #917504	; 0xe0000
 8002792:	d113      	bne.n	80027bc <HAL_ADC_Start+0x130>
        ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc)  )
 8002794:	687b      	ldr	r3, [r7, #4]
 8002796:	681b      	ldr	r3, [r3, #0]
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 8002798:	4a11      	ldr	r2, [pc, #68]	; (80027e0 <HAL_ADC_Start+0x154>)
 800279a:	4293      	cmp	r3, r2
 800279c:	d105      	bne.n	80027aa <HAL_ADC_Start+0x11e>
        ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc)  )
 800279e:	4b11      	ldr	r3, [pc, #68]	; (80027e4 <HAL_ADC_Start+0x158>)
 80027a0:	685b      	ldr	r3, [r3, #4]
 80027a2:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 80027a6:	2b00      	cmp	r3, #0
 80027a8:	d108      	bne.n	80027bc <HAL_ADC_Start+0x130>
    {
      /* Start ADC conversion on regular group with SW start */
      SET_BIT(hadc->Instance->CR2, (ADC_CR2_SWSTART | ADC_CR2_EXTTRIG));
 80027aa:	687b      	ldr	r3, [r7, #4]
 80027ac:	681b      	ldr	r3, [r3, #0]
 80027ae:	689a      	ldr	r2, [r3, #8]
 80027b0:	687b      	ldr	r3, [r7, #4]
 80027b2:	681b      	ldr	r3, [r3, #0]
 80027b4:	f442 02a0 	orr.w	r2, r2, #5242880	; 0x500000
 80027b8:	609a      	str	r2, [r3, #8]
 80027ba:	e00c      	b.n	80027d6 <HAL_ADC_Start+0x14a>
    }
    else
    {
      /* Start ADC conversion on regular group with external trigger */
      SET_BIT(hadc->Instance->CR2, ADC_CR2_EXTTRIG);
 80027bc:	687b      	ldr	r3, [r7, #4]
 80027be:	681b      	ldr	r3, [r3, #0]
 80027c0:	689a      	ldr	r2, [r3, #8]
 80027c2:	687b      	ldr	r3, [r7, #4]
 80027c4:	681b      	ldr	r3, [r3, #0]
 80027c6:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 80027ca:	609a      	str	r2, [r3, #8]
 80027cc:	e003      	b.n	80027d6 <HAL_ADC_Start+0x14a>
    }
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 80027ce:	687b      	ldr	r3, [r7, #4]
 80027d0:	2200      	movs	r2, #0
 80027d2:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  }
    
  /* Return function status */
  return tmp_hal_status;
 80027d6:	7bfb      	ldrb	r3, [r7, #15]
}
 80027d8:	4618      	mov	r0, r3
 80027da:	3710      	adds	r7, #16
 80027dc:	46bd      	mov	sp, r7
 80027de:	bd80      	pop	{r7, pc}
 80027e0:	40012800 	.word	0x40012800
 80027e4:	40012400 	.word	0x40012400

080027e8 <HAL_ADC_Stop>:
  *         should be preliminarily stopped using HAL_ADCEx_InjectedStop function.
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Stop(ADC_HandleTypeDef* hadc)
{
 80027e8:	b580      	push	{r7, lr}
 80027ea:	b084      	sub	sp, #16
 80027ec:	af00      	add	r7, sp, #0
 80027ee:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80027f0:	2300      	movs	r3, #0
 80027f2:	73fb      	strb	r3, [r7, #15]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
     
  /* Process locked */
  __HAL_LOCK(hadc);
 80027f4:	687b      	ldr	r3, [r7, #4]
 80027f6:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80027fa:	2b01      	cmp	r3, #1
 80027fc:	d101      	bne.n	8002802 <HAL_ADC_Stop+0x1a>
 80027fe:	2302      	movs	r3, #2
 8002800:	e01a      	b.n	8002838 <HAL_ADC_Stop+0x50>
 8002802:	687b      	ldr	r3, [r7, #4]
 8002804:	2201      	movs	r2, #1
 8002806:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 800280a:	6878      	ldr	r0, [r7, #4]
 800280c:	f000 fa7c 	bl	8002d08 <ADC_ConversionStop_Disable>
 8002810:	4603      	mov	r3, r0
 8002812:	73fb      	strb	r3, [r7, #15]
  
  /* Check if ADC is effectively disabled */
  if (tmp_hal_status == HAL_OK)
 8002814:	7bfb      	ldrb	r3, [r7, #15]
 8002816:	2b00      	cmp	r3, #0
 8002818:	d109      	bne.n	800282e <HAL_ADC_Stop+0x46>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800281a:	687b      	ldr	r3, [r7, #4]
 800281c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800281e:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8002822:	f023 0301 	bic.w	r3, r3, #1
 8002826:	f043 0201 	orr.w	r2, r3, #1
 800282a:	687b      	ldr	r3, [r7, #4]
 800282c:	629a      	str	r2, [r3, #40]	; 0x28
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_READY);
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800282e:	687b      	ldr	r3, [r7, #4]
 8002830:	2200      	movs	r2, #0
 8002832:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  /* Return function status */
  return tmp_hal_status;
 8002836:	7bfb      	ldrb	r3, [r7, #15]
}
 8002838:	4618      	mov	r0, r3
 800283a:	3710      	adds	r7, #16
 800283c:	46bd      	mov	sp, r7
 800283e:	bd80      	pop	{r7, pc}

08002840 <HAL_ADC_PollForConversion>:
  * @param  hadc: ADC handle
  * @param  Timeout: Timeout value in millisecond.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef* hadc, uint32_t Timeout)
{
 8002840:	b590      	push	{r4, r7, lr}
 8002842:	b087      	sub	sp, #28
 8002844:	af00      	add	r7, sp, #0
 8002846:	6078      	str	r0, [r7, #4]
 8002848:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 800284a:	2300      	movs	r3, #0
 800284c:	617b      	str	r3, [r7, #20]
  
  /* Variables for polling in case of scan mode enabled and polling for each  */
  /* conversion.                                                              */
  __IO uint32_t Conversion_Timeout_CPU_cycles = 0U;
 800284e:	2300      	movs	r3, #0
 8002850:	60fb      	str	r3, [r7, #12]
  uint32_t Conversion_Timeout_CPU_cycles_max = 0U;
 8002852:	2300      	movs	r3, #0
 8002854:	613b      	str	r3, [r7, #16]
 
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Get tick count */
  tickstart = HAL_GetTick();
 8002856:	f7ff fe13 	bl	8002480 <HAL_GetTick>
 800285a:	6178      	str	r0, [r7, #20]
  
  /* Verification that ADC configuration is compliant with polling for        */
  /* each conversion:                                                         */
  /* Particular case is ADC configured in DMA mode                            */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_DMA))
 800285c:	687b      	ldr	r3, [r7, #4]
 800285e:	681b      	ldr	r3, [r3, #0]
 8002860:	689b      	ldr	r3, [r3, #8]
 8002862:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002866:	2b00      	cmp	r3, #0
 8002868:	d00b      	beq.n	8002882 <HAL_ADC_PollForConversion+0x42>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800286a:	687b      	ldr	r3, [r7, #4]
 800286c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800286e:	f043 0220 	orr.w	r2, r3, #32
 8002872:	687b      	ldr	r3, [r7, #4]
 8002874:	629a      	str	r2, [r3, #40]	; 0x28
    
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8002876:	687b      	ldr	r3, [r7, #4]
 8002878:	2200      	movs	r2, #0
 800287a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    
    return HAL_ERROR;
 800287e:	2301      	movs	r3, #1
 8002880:	e0d3      	b.n	8002a2a <HAL_ADC_PollForConversion+0x1ea>
  /*    from ADC conversion time (selected sampling time + conversion time of */
  /*    12.5 ADC clock cycles) and APB2/ADC clock prescalers (depending on    */
  /*    settings, conversion time range can be from 28 to 32256 CPU cycles).  */
  /*    As flag EOC is not set after each conversion, no timeout status can   */
  /*    be set.                                                               */
  if (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_SCAN) &&
 8002882:	687b      	ldr	r3, [r7, #4]
 8002884:	681b      	ldr	r3, [r3, #0]
 8002886:	685b      	ldr	r3, [r3, #4]
 8002888:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800288c:	2b00      	cmp	r3, #0
 800288e:	d131      	bne.n	80028f4 <HAL_ADC_PollForConversion+0xb4>
      HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L)    )
 8002890:	687b      	ldr	r3, [r7, #4]
 8002892:	681b      	ldr	r3, [r3, #0]
 8002894:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002896:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
  if (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_SCAN) &&
 800289a:	2b00      	cmp	r3, #0
 800289c:	d12a      	bne.n	80028f4 <HAL_ADC_PollForConversion+0xb4>
  {
    /* Wait until End of Conversion flag is raised */
    while(HAL_IS_BIT_CLR(hadc->Instance->SR, ADC_FLAG_EOC))
 800289e:	e021      	b.n	80028e4 <HAL_ADC_PollForConversion+0xa4>
    {
      /* Check if timeout is disabled (set to infinite wait) */
      if(Timeout != HAL_MAX_DELAY)
 80028a0:	683b      	ldr	r3, [r7, #0]
 80028a2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80028a6:	d01d      	beq.n	80028e4 <HAL_ADC_PollForConversion+0xa4>
      {
        if((Timeout == 0U) || ((HAL_GetTick() - tickstart ) > Timeout))
 80028a8:	683b      	ldr	r3, [r7, #0]
 80028aa:	2b00      	cmp	r3, #0
 80028ac:	d007      	beq.n	80028be <HAL_ADC_PollForConversion+0x7e>
 80028ae:	f7ff fde7 	bl	8002480 <HAL_GetTick>
 80028b2:	4602      	mov	r2, r0
 80028b4:	697b      	ldr	r3, [r7, #20]
 80028b6:	1ad3      	subs	r3, r2, r3
 80028b8:	683a      	ldr	r2, [r7, #0]
 80028ba:	429a      	cmp	r2, r3
 80028bc:	d212      	bcs.n	80028e4 <HAL_ADC_PollForConversion+0xa4>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if(HAL_IS_BIT_CLR(hadc->Instance->SR, ADC_FLAG_EOC))
 80028be:	687b      	ldr	r3, [r7, #4]
 80028c0:	681b      	ldr	r3, [r3, #0]
 80028c2:	681b      	ldr	r3, [r3, #0]
 80028c4:	f003 0302 	and.w	r3, r3, #2
 80028c8:	2b00      	cmp	r3, #0
 80028ca:	d10b      	bne.n	80028e4 <HAL_ADC_PollForConversion+0xa4>
          {
            /* Update ADC state machine to timeout */
            SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 80028cc:	687b      	ldr	r3, [r7, #4]
 80028ce:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80028d0:	f043 0204 	orr.w	r2, r3, #4
 80028d4:	687b      	ldr	r3, [r7, #4]
 80028d6:	629a      	str	r2, [r3, #40]	; 0x28
            
            /* Process unlocked */
            __HAL_UNLOCK(hadc);
 80028d8:	687b      	ldr	r3, [r7, #4]
 80028da:	2200      	movs	r2, #0
 80028dc:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
            
            return HAL_TIMEOUT;
 80028e0:	2303      	movs	r3, #3
 80028e2:	e0a2      	b.n	8002a2a <HAL_ADC_PollForConversion+0x1ea>
    while(HAL_IS_BIT_CLR(hadc->Instance->SR, ADC_FLAG_EOC))
 80028e4:	687b      	ldr	r3, [r7, #4]
 80028e6:	681b      	ldr	r3, [r3, #0]
 80028e8:	681b      	ldr	r3, [r3, #0]
 80028ea:	f003 0302 	and.w	r3, r3, #2
 80028ee:	2b00      	cmp	r3, #0
 80028f0:	d0d6      	beq.n	80028a0 <HAL_ADC_PollForConversion+0x60>
  if (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_SCAN) &&
 80028f2:	e070      	b.n	80029d6 <HAL_ADC_PollForConversion+0x196>
    /* Replace polling by wait for maximum conversion time */
    /*  - Computation of CPU clock cycles corresponding to ADC clock cycles   */
    /*    and ADC maximum conversion cycles on all channels.                  */
    /*  - Wait for the expected ADC clock cycles delay                        */
    Conversion_Timeout_CPU_cycles_max = ((SystemCoreClock
                                          / HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_ADC))
 80028f4:	4b4f      	ldr	r3, [pc, #316]	; (8002a34 <HAL_ADC_PollForConversion+0x1f4>)
 80028f6:	681c      	ldr	r4, [r3, #0]
 80028f8:	2002      	movs	r0, #2
 80028fa:	f002 fa27 	bl	8004d4c <HAL_RCCEx_GetPeriphCLKFreq>
 80028fe:	4603      	mov	r3, r0
 8002900:	fbb4 f2f3 	udiv	r2, r4, r3
                                         * ADC_CONVCYCLES_MAX_RANGE(hadc)                 );
 8002904:	687b      	ldr	r3, [r7, #4]
 8002906:	681b      	ldr	r3, [r3, #0]
 8002908:	6919      	ldr	r1, [r3, #16]
 800290a:	4b4b      	ldr	r3, [pc, #300]	; (8002a38 <HAL_ADC_PollForConversion+0x1f8>)
 800290c:	400b      	ands	r3, r1
 800290e:	2b00      	cmp	r3, #0
 8002910:	d118      	bne.n	8002944 <HAL_ADC_PollForConversion+0x104>
 8002912:	687b      	ldr	r3, [r7, #4]
 8002914:	681b      	ldr	r3, [r3, #0]
 8002916:	68d9      	ldr	r1, [r3, #12]
 8002918:	4b48      	ldr	r3, [pc, #288]	; (8002a3c <HAL_ADC_PollForConversion+0x1fc>)
 800291a:	400b      	ands	r3, r1
 800291c:	2b00      	cmp	r3, #0
 800291e:	d111      	bne.n	8002944 <HAL_ADC_PollForConversion+0x104>
 8002920:	687b      	ldr	r3, [r7, #4]
 8002922:	681b      	ldr	r3, [r3, #0]
 8002924:	6919      	ldr	r1, [r3, #16]
 8002926:	4b46      	ldr	r3, [pc, #280]	; (8002a40 <HAL_ADC_PollForConversion+0x200>)
 8002928:	400b      	ands	r3, r1
 800292a:	2b00      	cmp	r3, #0
 800292c:	d108      	bne.n	8002940 <HAL_ADC_PollForConversion+0x100>
 800292e:	687b      	ldr	r3, [r7, #4]
 8002930:	681b      	ldr	r3, [r3, #0]
 8002932:	68d9      	ldr	r1, [r3, #12]
 8002934:	4b43      	ldr	r3, [pc, #268]	; (8002a44 <HAL_ADC_PollForConversion+0x204>)
 8002936:	400b      	ands	r3, r1
 8002938:	2b00      	cmp	r3, #0
 800293a:	d101      	bne.n	8002940 <HAL_ADC_PollForConversion+0x100>
 800293c:	2314      	movs	r3, #20
 800293e:	e020      	b.n	8002982 <HAL_ADC_PollForConversion+0x142>
 8002940:	2329      	movs	r3, #41	; 0x29
 8002942:	e01e      	b.n	8002982 <HAL_ADC_PollForConversion+0x142>
 8002944:	687b      	ldr	r3, [r7, #4]
 8002946:	681b      	ldr	r3, [r3, #0]
 8002948:	6919      	ldr	r1, [r3, #16]
 800294a:	4b3d      	ldr	r3, [pc, #244]	; (8002a40 <HAL_ADC_PollForConversion+0x200>)
 800294c:	400b      	ands	r3, r1
 800294e:	2b00      	cmp	r3, #0
 8002950:	d106      	bne.n	8002960 <HAL_ADC_PollForConversion+0x120>
 8002952:	687b      	ldr	r3, [r7, #4]
 8002954:	681b      	ldr	r3, [r3, #0]
 8002956:	68d9      	ldr	r1, [r3, #12]
 8002958:	4b3a      	ldr	r3, [pc, #232]	; (8002a44 <HAL_ADC_PollForConversion+0x204>)
 800295a:	400b      	ands	r3, r1
 800295c:	2b00      	cmp	r3, #0
 800295e:	d00d      	beq.n	800297c <HAL_ADC_PollForConversion+0x13c>
 8002960:	687b      	ldr	r3, [r7, #4]
 8002962:	681b      	ldr	r3, [r3, #0]
 8002964:	6919      	ldr	r1, [r3, #16]
 8002966:	4b38      	ldr	r3, [pc, #224]	; (8002a48 <HAL_ADC_PollForConversion+0x208>)
 8002968:	400b      	ands	r3, r1
 800296a:	2b00      	cmp	r3, #0
 800296c:	d108      	bne.n	8002980 <HAL_ADC_PollForConversion+0x140>
 800296e:	687b      	ldr	r3, [r7, #4]
 8002970:	681b      	ldr	r3, [r3, #0]
 8002972:	68d9      	ldr	r1, [r3, #12]
 8002974:	4b34      	ldr	r3, [pc, #208]	; (8002a48 <HAL_ADC_PollForConversion+0x208>)
 8002976:	400b      	ands	r3, r1
 8002978:	2b00      	cmp	r3, #0
 800297a:	d101      	bne.n	8002980 <HAL_ADC_PollForConversion+0x140>
 800297c:	2354      	movs	r3, #84	; 0x54
 800297e:	e000      	b.n	8002982 <HAL_ADC_PollForConversion+0x142>
 8002980:	23fc      	movs	r3, #252	; 0xfc
    Conversion_Timeout_CPU_cycles_max = ((SystemCoreClock
 8002982:	fb02 f303 	mul.w	r3, r2, r3
 8002986:	613b      	str	r3, [r7, #16]
    
    while(Conversion_Timeout_CPU_cycles < Conversion_Timeout_CPU_cycles_max)
 8002988:	e021      	b.n	80029ce <HAL_ADC_PollForConversion+0x18e>
    {
      /* Check if timeout is disabled (set to infinite wait) */
      if(Timeout != HAL_MAX_DELAY)
 800298a:	683b      	ldr	r3, [r7, #0]
 800298c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002990:	d01a      	beq.n	80029c8 <HAL_ADC_PollForConversion+0x188>
      {
        if((Timeout == 0U) || ((HAL_GetTick() - tickstart) > Timeout))
 8002992:	683b      	ldr	r3, [r7, #0]
 8002994:	2b00      	cmp	r3, #0
 8002996:	d007      	beq.n	80029a8 <HAL_ADC_PollForConversion+0x168>
 8002998:	f7ff fd72 	bl	8002480 <HAL_GetTick>
 800299c:	4602      	mov	r2, r0
 800299e:	697b      	ldr	r3, [r7, #20]
 80029a0:	1ad3      	subs	r3, r2, r3
 80029a2:	683a      	ldr	r2, [r7, #0]
 80029a4:	429a      	cmp	r2, r3
 80029a6:	d20f      	bcs.n	80029c8 <HAL_ADC_PollForConversion+0x188>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if(Conversion_Timeout_CPU_cycles < Conversion_Timeout_CPU_cycles_max)
 80029a8:	68fb      	ldr	r3, [r7, #12]
 80029aa:	693a      	ldr	r2, [r7, #16]
 80029ac:	429a      	cmp	r2, r3
 80029ae:	d90b      	bls.n	80029c8 <HAL_ADC_PollForConversion+0x188>
          {
            /* Update ADC state machine to timeout */
            SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 80029b0:	687b      	ldr	r3, [r7, #4]
 80029b2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80029b4:	f043 0204 	orr.w	r2, r3, #4
 80029b8:	687b      	ldr	r3, [r7, #4]
 80029ba:	629a      	str	r2, [r3, #40]	; 0x28

            /* Process unlocked */
            __HAL_UNLOCK(hadc);
 80029bc:	687b      	ldr	r3, [r7, #4]
 80029be:	2200      	movs	r2, #0
 80029c0:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

            return HAL_TIMEOUT;
 80029c4:	2303      	movs	r3, #3
 80029c6:	e030      	b.n	8002a2a <HAL_ADC_PollForConversion+0x1ea>
          }
        }
      }
      Conversion_Timeout_CPU_cycles ++;
 80029c8:	68fb      	ldr	r3, [r7, #12]
 80029ca:	3301      	adds	r3, #1
 80029cc:	60fb      	str	r3, [r7, #12]
    while(Conversion_Timeout_CPU_cycles < Conversion_Timeout_CPU_cycles_max)
 80029ce:	68fb      	ldr	r3, [r7, #12]
 80029d0:	693a      	ldr	r2, [r7, #16]
 80029d2:	429a      	cmp	r2, r3
 80029d4:	d8d9      	bhi.n	800298a <HAL_ADC_PollForConversion+0x14a>
    }
  }
  
  /* Clear regular group conversion flag */
  __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 80029d6:	687b      	ldr	r3, [r7, #4]
 80029d8:	681b      	ldr	r3, [r3, #0]
 80029da:	f06f 0212 	mvn.w	r2, #18
 80029de:	601a      	str	r2, [r3, #0]
  
  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 80029e0:	687b      	ldr	r3, [r7, #4]
 80029e2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80029e4:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 80029e8:	687b      	ldr	r3, [r7, #4]
 80029ea:	629a      	str	r2, [r3, #40]	; 0x28
  /* Determine whether any further conversion upcoming on group regular       */
  /* by external trigger, continuous mode or scan sequence on going.          */
  /* Note: On STM32F1 devices, in case of sequencer enabled                   */
  /*       (several ranks selected), end of conversion flag is raised         */
  /*       at the end of the sequence.                                        */
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 80029ec:	687b      	ldr	r3, [r7, #4]
 80029ee:	681b      	ldr	r3, [r3, #0]
 80029f0:	689b      	ldr	r3, [r3, #8]
 80029f2:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
 80029f6:	f5b3 2f60 	cmp.w	r3, #917504	; 0xe0000
 80029fa:	d115      	bne.n	8002a28 <HAL_ADC_PollForConversion+0x1e8>
     (hadc->Init.ContinuousConvMode == DISABLE)   )
 80029fc:	687b      	ldr	r3, [r7, #4]
 80029fe:	7b1b      	ldrb	r3, [r3, #12]
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8002a00:	2b00      	cmp	r3, #0
 8002a02:	d111      	bne.n	8002a28 <HAL_ADC_PollForConversion+0x1e8>
  {   
    /* Set ADC state */
    CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8002a04:	687b      	ldr	r3, [r7, #4]
 8002a06:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002a08:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8002a0c:	687b      	ldr	r3, [r7, #4]
 8002a0e:	629a      	str	r2, [r3, #40]	; 0x28

    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8002a10:	687b      	ldr	r3, [r7, #4]
 8002a12:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002a14:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002a18:	2b00      	cmp	r3, #0
 8002a1a:	d105      	bne.n	8002a28 <HAL_ADC_PollForConversion+0x1e8>
    { 
      SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8002a1c:	687b      	ldr	r3, [r7, #4]
 8002a1e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002a20:	f043 0201 	orr.w	r2, r3, #1
 8002a24:	687b      	ldr	r3, [r7, #4]
 8002a26:	629a      	str	r2, [r3, #40]	; 0x28
    }
  }
  
  /* Return ADC state */
  return HAL_OK;
 8002a28:	2300      	movs	r3, #0
}
 8002a2a:	4618      	mov	r0, r3
 8002a2c:	371c      	adds	r7, #28
 8002a2e:	46bd      	mov	sp, r7
 8002a30:	bd90      	pop	{r4, r7, pc}
 8002a32:	bf00      	nop
 8002a34:	20000000 	.word	0x20000000
 8002a38:	24924924 	.word	0x24924924
 8002a3c:	00924924 	.word	0x00924924
 8002a40:	12492492 	.word	0x12492492
 8002a44:	00492492 	.word	0x00492492
 8002a48:	00249249 	.word	0x00249249

08002a4c <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param  hadc: ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{
 8002a4c:	b480      	push	{r7}
 8002a4e:	b083      	sub	sp, #12
 8002a50:	af00      	add	r7, sp, #0
 8002a52:	6078      	str	r0, [r7, #4]

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */
  
  /* Return ADC converted value */ 
  return hadc->Instance->DR;
 8002a54:	687b      	ldr	r3, [r7, #4]
 8002a56:	681b      	ldr	r3, [r3, #0]
 8002a58:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
}
 8002a5a:	4618      	mov	r0, r3
 8002a5c:	370c      	adds	r7, #12
 8002a5e:	46bd      	mov	sp, r7
 8002a60:	bc80      	pop	{r7}
 8002a62:	4770      	bx	lr

08002a64 <HAL_ADC_ConfigChannel>:
  * @param  hadc: ADC handle
  * @param  sConfig: Structure of ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{ 
 8002a64:	b480      	push	{r7}
 8002a66:	b085      	sub	sp, #20
 8002a68:	af00      	add	r7, sp, #0
 8002a6a:	6078      	str	r0, [r7, #4]
 8002a6c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002a6e:	2300      	movs	r3, #0
 8002a70:	73fb      	strb	r3, [r7, #15]
  __IO uint32_t wait_loop_index = 0U;
 8002a72:	2300      	movs	r3, #0
 8002a74:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8002a76:	687b      	ldr	r3, [r7, #4]
 8002a78:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8002a7c:	2b01      	cmp	r3, #1
 8002a7e:	d101      	bne.n	8002a84 <HAL_ADC_ConfigChannel+0x20>
 8002a80:	2302      	movs	r3, #2
 8002a82:	e0dc      	b.n	8002c3e <HAL_ADC_ConfigChannel+0x1da>
 8002a84:	687b      	ldr	r3, [r7, #4]
 8002a86:	2201      	movs	r2, #1
 8002a88:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  
  /* Regular sequence configuration */
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8002a8c:	683b      	ldr	r3, [r7, #0]
 8002a8e:	685b      	ldr	r3, [r3, #4]
 8002a90:	2b06      	cmp	r3, #6
 8002a92:	d81c      	bhi.n	8002ace <HAL_ADC_ConfigChannel+0x6a>
  {
    MODIFY_REG(hadc->Instance->SQR3                        ,
 8002a94:	687b      	ldr	r3, [r7, #4]
 8002a96:	681b      	ldr	r3, [r3, #0]
 8002a98:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8002a9a:	683b      	ldr	r3, [r7, #0]
 8002a9c:	685a      	ldr	r2, [r3, #4]
 8002a9e:	4613      	mov	r3, r2
 8002aa0:	009b      	lsls	r3, r3, #2
 8002aa2:	4413      	add	r3, r2
 8002aa4:	3b05      	subs	r3, #5
 8002aa6:	221f      	movs	r2, #31
 8002aa8:	fa02 f303 	lsl.w	r3, r2, r3
 8002aac:	43db      	mvns	r3, r3
 8002aae:	4019      	ands	r1, r3
 8002ab0:	683b      	ldr	r3, [r7, #0]
 8002ab2:	6818      	ldr	r0, [r3, #0]
 8002ab4:	683b      	ldr	r3, [r7, #0]
 8002ab6:	685a      	ldr	r2, [r3, #4]
 8002ab8:	4613      	mov	r3, r2
 8002aba:	009b      	lsls	r3, r3, #2
 8002abc:	4413      	add	r3, r2
 8002abe:	3b05      	subs	r3, #5
 8002ac0:	fa00 f203 	lsl.w	r2, r0, r3
 8002ac4:	687b      	ldr	r3, [r7, #4]
 8002ac6:	681b      	ldr	r3, [r3, #0]
 8002ac8:	430a      	orrs	r2, r1
 8002aca:	635a      	str	r2, [r3, #52]	; 0x34
 8002acc:	e03c      	b.n	8002b48 <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank)    ,
               ADC_SQR3_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8002ace:	683b      	ldr	r3, [r7, #0]
 8002ad0:	685b      	ldr	r3, [r3, #4]
 8002ad2:	2b0c      	cmp	r3, #12
 8002ad4:	d81c      	bhi.n	8002b10 <HAL_ADC_ConfigChannel+0xac>
  {
    MODIFY_REG(hadc->Instance->SQR2                        ,
 8002ad6:	687b      	ldr	r3, [r7, #4]
 8002ad8:	681b      	ldr	r3, [r3, #0]
 8002ada:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8002adc:	683b      	ldr	r3, [r7, #0]
 8002ade:	685a      	ldr	r2, [r3, #4]
 8002ae0:	4613      	mov	r3, r2
 8002ae2:	009b      	lsls	r3, r3, #2
 8002ae4:	4413      	add	r3, r2
 8002ae6:	3b23      	subs	r3, #35	; 0x23
 8002ae8:	221f      	movs	r2, #31
 8002aea:	fa02 f303 	lsl.w	r3, r2, r3
 8002aee:	43db      	mvns	r3, r3
 8002af0:	4019      	ands	r1, r3
 8002af2:	683b      	ldr	r3, [r7, #0]
 8002af4:	6818      	ldr	r0, [r3, #0]
 8002af6:	683b      	ldr	r3, [r7, #0]
 8002af8:	685a      	ldr	r2, [r3, #4]
 8002afa:	4613      	mov	r3, r2
 8002afc:	009b      	lsls	r3, r3, #2
 8002afe:	4413      	add	r3, r2
 8002b00:	3b23      	subs	r3, #35	; 0x23
 8002b02:	fa00 f203 	lsl.w	r2, r0, r3
 8002b06:	687b      	ldr	r3, [r7, #4]
 8002b08:	681b      	ldr	r3, [r3, #0]
 8002b0a:	430a      	orrs	r2, r1
 8002b0c:	631a      	str	r2, [r3, #48]	; 0x30
 8002b0e:	e01b      	b.n	8002b48 <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR2_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 13 to 16 */
  else
  {
    MODIFY_REG(hadc->Instance->SQR1                        ,
 8002b10:	687b      	ldr	r3, [r7, #4]
 8002b12:	681b      	ldr	r3, [r3, #0]
 8002b14:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8002b16:	683b      	ldr	r3, [r7, #0]
 8002b18:	685a      	ldr	r2, [r3, #4]
 8002b1a:	4613      	mov	r3, r2
 8002b1c:	009b      	lsls	r3, r3, #2
 8002b1e:	4413      	add	r3, r2
 8002b20:	3b41      	subs	r3, #65	; 0x41
 8002b22:	221f      	movs	r2, #31
 8002b24:	fa02 f303 	lsl.w	r3, r2, r3
 8002b28:	43db      	mvns	r3, r3
 8002b2a:	4019      	ands	r1, r3
 8002b2c:	683b      	ldr	r3, [r7, #0]
 8002b2e:	6818      	ldr	r0, [r3, #0]
 8002b30:	683b      	ldr	r3, [r7, #0]
 8002b32:	685a      	ldr	r2, [r3, #4]
 8002b34:	4613      	mov	r3, r2
 8002b36:	009b      	lsls	r3, r3, #2
 8002b38:	4413      	add	r3, r2
 8002b3a:	3b41      	subs	r3, #65	; 0x41
 8002b3c:	fa00 f203 	lsl.w	r2, r0, r3
 8002b40:	687b      	ldr	r3, [r7, #4]
 8002b42:	681b      	ldr	r3, [r3, #0]
 8002b44:	430a      	orrs	r2, r1
 8002b46:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  
  
  /* Channel sampling time configuration */
  /* For channels 10 to 17 */
  if (sConfig->Channel >= ADC_CHANNEL_10)
 8002b48:	683b      	ldr	r3, [r7, #0]
 8002b4a:	681b      	ldr	r3, [r3, #0]
 8002b4c:	2b09      	cmp	r3, #9
 8002b4e:	d91c      	bls.n	8002b8a <HAL_ADC_ConfigChannel+0x126>
  {
    MODIFY_REG(hadc->Instance->SMPR1                             ,
 8002b50:	687b      	ldr	r3, [r7, #4]
 8002b52:	681b      	ldr	r3, [r3, #0]
 8002b54:	68d9      	ldr	r1, [r3, #12]
 8002b56:	683b      	ldr	r3, [r7, #0]
 8002b58:	681a      	ldr	r2, [r3, #0]
 8002b5a:	4613      	mov	r3, r2
 8002b5c:	005b      	lsls	r3, r3, #1
 8002b5e:	4413      	add	r3, r2
 8002b60:	3b1e      	subs	r3, #30
 8002b62:	2207      	movs	r2, #7
 8002b64:	fa02 f303 	lsl.w	r3, r2, r3
 8002b68:	43db      	mvns	r3, r3
 8002b6a:	4019      	ands	r1, r3
 8002b6c:	683b      	ldr	r3, [r7, #0]
 8002b6e:	6898      	ldr	r0, [r3, #8]
 8002b70:	683b      	ldr	r3, [r7, #0]
 8002b72:	681a      	ldr	r2, [r3, #0]
 8002b74:	4613      	mov	r3, r2
 8002b76:	005b      	lsls	r3, r3, #1
 8002b78:	4413      	add	r3, r2
 8002b7a:	3b1e      	subs	r3, #30
 8002b7c:	fa00 f203 	lsl.w	r2, r0, r3
 8002b80:	687b      	ldr	r3, [r7, #4]
 8002b82:	681b      	ldr	r3, [r3, #0]
 8002b84:	430a      	orrs	r2, r1
 8002b86:	60da      	str	r2, [r3, #12]
 8002b88:	e019      	b.n	8002bbe <HAL_ADC_ConfigChannel+0x15a>
               ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel)      ,
               ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel) );
  }
  else /* For channels 0 to 9 */
  {
    MODIFY_REG(hadc->Instance->SMPR2                             ,
 8002b8a:	687b      	ldr	r3, [r7, #4]
 8002b8c:	681b      	ldr	r3, [r3, #0]
 8002b8e:	6919      	ldr	r1, [r3, #16]
 8002b90:	683b      	ldr	r3, [r7, #0]
 8002b92:	681a      	ldr	r2, [r3, #0]
 8002b94:	4613      	mov	r3, r2
 8002b96:	005b      	lsls	r3, r3, #1
 8002b98:	4413      	add	r3, r2
 8002b9a:	2207      	movs	r2, #7
 8002b9c:	fa02 f303 	lsl.w	r3, r2, r3
 8002ba0:	43db      	mvns	r3, r3
 8002ba2:	4019      	ands	r1, r3
 8002ba4:	683b      	ldr	r3, [r7, #0]
 8002ba6:	6898      	ldr	r0, [r3, #8]
 8002ba8:	683b      	ldr	r3, [r7, #0]
 8002baa:	681a      	ldr	r2, [r3, #0]
 8002bac:	4613      	mov	r3, r2
 8002bae:	005b      	lsls	r3, r3, #1
 8002bb0:	4413      	add	r3, r2
 8002bb2:	fa00 f203 	lsl.w	r2, r0, r3
 8002bb6:	687b      	ldr	r3, [r7, #4]
 8002bb8:	681b      	ldr	r3, [r3, #0]
 8002bba:	430a      	orrs	r2, r1
 8002bbc:	611a      	str	r2, [r3, #16]
               ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel) );
  }
  
  /* If ADC1 Channel_16 or Channel_17 is selected, enable Temperature sensor  */
  /* and VREFINT measurement path.                                            */
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 8002bbe:	683b      	ldr	r3, [r7, #0]
 8002bc0:	681b      	ldr	r3, [r3, #0]
 8002bc2:	2b10      	cmp	r3, #16
 8002bc4:	d003      	beq.n	8002bce <HAL_ADC_ConfigChannel+0x16a>
      (sConfig->Channel == ADC_CHANNEL_VREFINT)      )
 8002bc6:	683b      	ldr	r3, [r7, #0]
 8002bc8:	681b      	ldr	r3, [r3, #0]
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 8002bca:	2b11      	cmp	r3, #17
 8002bcc:	d132      	bne.n	8002c34 <HAL_ADC_ConfigChannel+0x1d0>
  {
    /* For STM32F1 devices with several ADC: Only ADC1 can access internal    */
    /* measurement channels (VrefInt/TempSensor). If these channels are       */
    /* intended to be set on other ADC instances, an error is reported.       */
    if (hadc->Instance == ADC1)
 8002bce:	687b      	ldr	r3, [r7, #4]
 8002bd0:	681b      	ldr	r3, [r3, #0]
 8002bd2:	4a1d      	ldr	r2, [pc, #116]	; (8002c48 <HAL_ADC_ConfigChannel+0x1e4>)
 8002bd4:	4293      	cmp	r3, r2
 8002bd6:	d125      	bne.n	8002c24 <HAL_ADC_ConfigChannel+0x1c0>
    {
      if (READ_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE) == RESET)
 8002bd8:	687b      	ldr	r3, [r7, #4]
 8002bda:	681b      	ldr	r3, [r3, #0]
 8002bdc:	689b      	ldr	r3, [r3, #8]
 8002bde:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8002be2:	2b00      	cmp	r3, #0
 8002be4:	d126      	bne.n	8002c34 <HAL_ADC_ConfigChannel+0x1d0>
      {
        SET_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE);
 8002be6:	687b      	ldr	r3, [r7, #4]
 8002be8:	681b      	ldr	r3, [r3, #0]
 8002bea:	689a      	ldr	r2, [r3, #8]
 8002bec:	687b      	ldr	r3, [r7, #4]
 8002bee:	681b      	ldr	r3, [r3, #0]
 8002bf0:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 8002bf4:	609a      	str	r2, [r3, #8]
        
        if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8002bf6:	683b      	ldr	r3, [r7, #0]
 8002bf8:	681b      	ldr	r3, [r3, #0]
 8002bfa:	2b10      	cmp	r3, #16
 8002bfc:	d11a      	bne.n	8002c34 <HAL_ADC_ConfigChannel+0x1d0>
        {
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8002bfe:	4b13      	ldr	r3, [pc, #76]	; (8002c4c <HAL_ADC_ConfigChannel+0x1e8>)
 8002c00:	681b      	ldr	r3, [r3, #0]
 8002c02:	4a13      	ldr	r2, [pc, #76]	; (8002c50 <HAL_ADC_ConfigChannel+0x1ec>)
 8002c04:	fba2 2303 	umull	r2, r3, r2, r3
 8002c08:	0c9a      	lsrs	r2, r3, #18
 8002c0a:	4613      	mov	r3, r2
 8002c0c:	009b      	lsls	r3, r3, #2
 8002c0e:	4413      	add	r3, r2
 8002c10:	005b      	lsls	r3, r3, #1
 8002c12:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8002c14:	e002      	b.n	8002c1c <HAL_ADC_ConfigChannel+0x1b8>
          {
            wait_loop_index--;
 8002c16:	68bb      	ldr	r3, [r7, #8]
 8002c18:	3b01      	subs	r3, #1
 8002c1a:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8002c1c:	68bb      	ldr	r3, [r7, #8]
 8002c1e:	2b00      	cmp	r3, #0
 8002c20:	d1f9      	bne.n	8002c16 <HAL_ADC_ConfigChannel+0x1b2>
 8002c22:	e007      	b.n	8002c34 <HAL_ADC_ConfigChannel+0x1d0>
      }
    }
    else
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002c24:	687b      	ldr	r3, [r7, #4]
 8002c26:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002c28:	f043 0220 	orr.w	r2, r3, #32
 8002c2c:	687b      	ldr	r3, [r7, #4]
 8002c2e:	629a      	str	r2, [r3, #40]	; 0x28
      
      tmp_hal_status = HAL_ERROR;
 8002c30:	2301      	movs	r3, #1
 8002c32:	73fb      	strb	r3, [r7, #15]
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002c34:	687b      	ldr	r3, [r7, #4]
 8002c36:	2200      	movs	r2, #0
 8002c38:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  /* Return function status */
  return tmp_hal_status;
 8002c3c:	7bfb      	ldrb	r3, [r7, #15]
}
 8002c3e:	4618      	mov	r0, r3
 8002c40:	3714      	adds	r7, #20
 8002c42:	46bd      	mov	sp, r7
 8002c44:	bc80      	pop	{r7}
 8002c46:	4770      	bx	lr
 8002c48:	40012400 	.word	0x40012400
 8002c4c:	20000000 	.word	0x20000000
 8002c50:	431bde83 	.word	0x431bde83

08002c54 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef* hadc)
{
 8002c54:	b580      	push	{r7, lr}
 8002c56:	b084      	sub	sp, #16
 8002c58:	af00      	add	r7, sp, #0
 8002c5a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8002c5c:	2300      	movs	r3, #0
 8002c5e:	60fb      	str	r3, [r7, #12]
  __IO uint32_t wait_loop_index = 0U;
 8002c60:	2300      	movs	r3, #0
 8002c62:	60bb      	str	r3, [r7, #8]
  
  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (ADC_IS_ENABLE(hadc) == RESET)
 8002c64:	687b      	ldr	r3, [r7, #4]
 8002c66:	681b      	ldr	r3, [r3, #0]
 8002c68:	689b      	ldr	r3, [r3, #8]
 8002c6a:	f003 0301 	and.w	r3, r3, #1
 8002c6e:	2b01      	cmp	r3, #1
 8002c70:	d040      	beq.n	8002cf4 <ADC_Enable+0xa0>
  {
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8002c72:	687b      	ldr	r3, [r7, #4]
 8002c74:	681b      	ldr	r3, [r3, #0]
 8002c76:	689a      	ldr	r2, [r3, #8]
 8002c78:	687b      	ldr	r3, [r7, #4]
 8002c7a:	681b      	ldr	r3, [r3, #0]
 8002c7c:	f042 0201 	orr.w	r2, r2, #1
 8002c80:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8002c82:	4b1f      	ldr	r3, [pc, #124]	; (8002d00 <ADC_Enable+0xac>)
 8002c84:	681b      	ldr	r3, [r3, #0]
 8002c86:	4a1f      	ldr	r2, [pc, #124]	; (8002d04 <ADC_Enable+0xb0>)
 8002c88:	fba2 2303 	umull	r2, r3, r2, r3
 8002c8c:	0c9b      	lsrs	r3, r3, #18
 8002c8e:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 8002c90:	e002      	b.n	8002c98 <ADC_Enable+0x44>
    {
      wait_loop_index--;
 8002c92:	68bb      	ldr	r3, [r7, #8]
 8002c94:	3b01      	subs	r3, #1
 8002c96:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 8002c98:	68bb      	ldr	r3, [r7, #8]
 8002c9a:	2b00      	cmp	r3, #0
 8002c9c:	d1f9      	bne.n	8002c92 <ADC_Enable+0x3e>
    }
    
    /* Get tick count */
    tickstart = HAL_GetTick();
 8002c9e:	f7ff fbef 	bl	8002480 <HAL_GetTick>
 8002ca2:	60f8      	str	r0, [r7, #12]

    /* Wait for ADC effectively enabled */
    while(ADC_IS_ENABLE(hadc) == RESET)
 8002ca4:	e01f      	b.n	8002ce6 <ADC_Enable+0x92>
    {
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8002ca6:	f7ff fbeb 	bl	8002480 <HAL_GetTick>
 8002caa:	4602      	mov	r2, r0
 8002cac:	68fb      	ldr	r3, [r7, #12]
 8002cae:	1ad3      	subs	r3, r2, r3
 8002cb0:	2b02      	cmp	r3, #2
 8002cb2:	d918      	bls.n	8002ce6 <ADC_Enable+0x92>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(ADC_IS_ENABLE(hadc) == RESET)
 8002cb4:	687b      	ldr	r3, [r7, #4]
 8002cb6:	681b      	ldr	r3, [r3, #0]
 8002cb8:	689b      	ldr	r3, [r3, #8]
 8002cba:	f003 0301 	and.w	r3, r3, #1
 8002cbe:	2b01      	cmp	r3, #1
 8002cc0:	d011      	beq.n	8002ce6 <ADC_Enable+0x92>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002cc2:	687b      	ldr	r3, [r7, #4]
 8002cc4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002cc6:	f043 0210 	orr.w	r2, r3, #16
 8002cca:	687b      	ldr	r3, [r7, #4]
 8002ccc:	629a      	str	r2, [r3, #40]	; 0x28

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002cce:	687b      	ldr	r3, [r7, #4]
 8002cd0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002cd2:	f043 0201 	orr.w	r2, r3, #1
 8002cd6:	687b      	ldr	r3, [r7, #4]
 8002cd8:	62da      	str	r2, [r3, #44]	; 0x2c

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8002cda:	687b      	ldr	r3, [r7, #4]
 8002cdc:	2200      	movs	r2, #0
 8002cde:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

          return HAL_ERROR;
 8002ce2:	2301      	movs	r3, #1
 8002ce4:	e007      	b.n	8002cf6 <ADC_Enable+0xa2>
    while(ADC_IS_ENABLE(hadc) == RESET)
 8002ce6:	687b      	ldr	r3, [r7, #4]
 8002ce8:	681b      	ldr	r3, [r3, #0]
 8002cea:	689b      	ldr	r3, [r3, #8]
 8002cec:	f003 0301 	and.w	r3, r3, #1
 8002cf0:	2b01      	cmp	r3, #1
 8002cf2:	d1d8      	bne.n	8002ca6 <ADC_Enable+0x52>
      }
    }
  }
   
  /* Return HAL status */
  return HAL_OK;
 8002cf4:	2300      	movs	r3, #0
}
 8002cf6:	4618      	mov	r0, r3
 8002cf8:	3710      	adds	r7, #16
 8002cfa:	46bd      	mov	sp, r7
 8002cfc:	bd80      	pop	{r7, pc}
 8002cfe:	bf00      	nop
 8002d00:	20000000 	.word	0x20000000
 8002d04:	431bde83 	.word	0x431bde83

08002d08 <ADC_ConversionStop_Disable>:
  *         stopped to disable the ADC.
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop_Disable(ADC_HandleTypeDef* hadc)
{
 8002d08:	b580      	push	{r7, lr}
 8002d0a:	b084      	sub	sp, #16
 8002d0c:	af00      	add	r7, sp, #0
 8002d0e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8002d10:	2300      	movs	r3, #0
 8002d12:	60fb      	str	r3, [r7, #12]
  
  /* Verification if ADC is not already disabled */
  if (ADC_IS_ENABLE(hadc) != RESET)
 8002d14:	687b      	ldr	r3, [r7, #4]
 8002d16:	681b      	ldr	r3, [r3, #0]
 8002d18:	689b      	ldr	r3, [r3, #8]
 8002d1a:	f003 0301 	and.w	r3, r3, #1
 8002d1e:	2b01      	cmp	r3, #1
 8002d20:	d12e      	bne.n	8002d80 <ADC_ConversionStop_Disable+0x78>
  {
    /* Disable the ADC peripheral */
    __HAL_ADC_DISABLE(hadc);
 8002d22:	687b      	ldr	r3, [r7, #4]
 8002d24:	681b      	ldr	r3, [r3, #0]
 8002d26:	689a      	ldr	r2, [r3, #8]
 8002d28:	687b      	ldr	r3, [r7, #4]
 8002d2a:	681b      	ldr	r3, [r3, #0]
 8002d2c:	f022 0201 	bic.w	r2, r2, #1
 8002d30:	609a      	str	r2, [r3, #8]
     
    /* Get tick count */
    tickstart = HAL_GetTick();
 8002d32:	f7ff fba5 	bl	8002480 <HAL_GetTick>
 8002d36:	60f8      	str	r0, [r7, #12]
    
    /* Wait for ADC effectively disabled */
    while(ADC_IS_ENABLE(hadc) != RESET)
 8002d38:	e01b      	b.n	8002d72 <ADC_ConversionStop_Disable+0x6a>
    {
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8002d3a:	f7ff fba1 	bl	8002480 <HAL_GetTick>
 8002d3e:	4602      	mov	r2, r0
 8002d40:	68fb      	ldr	r3, [r7, #12]
 8002d42:	1ad3      	subs	r3, r2, r3
 8002d44:	2b02      	cmp	r3, #2
 8002d46:	d914      	bls.n	8002d72 <ADC_ConversionStop_Disable+0x6a>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(ADC_IS_ENABLE(hadc) != RESET)
 8002d48:	687b      	ldr	r3, [r7, #4]
 8002d4a:	681b      	ldr	r3, [r3, #0]
 8002d4c:	689b      	ldr	r3, [r3, #8]
 8002d4e:	f003 0301 	and.w	r3, r3, #1
 8002d52:	2b01      	cmp	r3, #1
 8002d54:	d10d      	bne.n	8002d72 <ADC_ConversionStop_Disable+0x6a>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002d56:	687b      	ldr	r3, [r7, #4]
 8002d58:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002d5a:	f043 0210 	orr.w	r2, r3, #16
 8002d5e:	687b      	ldr	r3, [r7, #4]
 8002d60:	629a      	str	r2, [r3, #40]	; 0x28

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002d62:	687b      	ldr	r3, [r7, #4]
 8002d64:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002d66:	f043 0201 	orr.w	r2, r3, #1
 8002d6a:	687b      	ldr	r3, [r7, #4]
 8002d6c:	62da      	str	r2, [r3, #44]	; 0x2c

          return HAL_ERROR;
 8002d6e:	2301      	movs	r3, #1
 8002d70:	e007      	b.n	8002d82 <ADC_ConversionStop_Disable+0x7a>
    while(ADC_IS_ENABLE(hadc) != RESET)
 8002d72:	687b      	ldr	r3, [r7, #4]
 8002d74:	681b      	ldr	r3, [r3, #0]
 8002d76:	689b      	ldr	r3, [r3, #8]
 8002d78:	f003 0301 	and.w	r3, r3, #1
 8002d7c:	2b01      	cmp	r3, #1
 8002d7e:	d0dc      	beq.n	8002d3a <ADC_ConversionStop_Disable+0x32>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 8002d80:	2300      	movs	r3, #0
}
 8002d82:	4618      	mov	r0, r3
 8002d84:	3710      	adds	r7, #16
 8002d86:	46bd      	mov	sp, r7
 8002d88:	bd80      	pop	{r7, pc}
	...

08002d8c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002d8c:	b480      	push	{r7}
 8002d8e:	b085      	sub	sp, #20
 8002d90:	af00      	add	r7, sp, #0
 8002d92:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002d94:	687b      	ldr	r3, [r7, #4]
 8002d96:	f003 0307 	and.w	r3, r3, #7
 8002d9a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002d9c:	4b0c      	ldr	r3, [pc, #48]	; (8002dd0 <__NVIC_SetPriorityGrouping+0x44>)
 8002d9e:	68db      	ldr	r3, [r3, #12]
 8002da0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002da2:	68ba      	ldr	r2, [r7, #8]
 8002da4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002da8:	4013      	ands	r3, r2
 8002daa:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8002dac:	68fb      	ldr	r3, [r7, #12]
 8002dae:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002db0:	68bb      	ldr	r3, [r7, #8]
 8002db2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002db4:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002db8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002dbc:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002dbe:	4a04      	ldr	r2, [pc, #16]	; (8002dd0 <__NVIC_SetPriorityGrouping+0x44>)
 8002dc0:	68bb      	ldr	r3, [r7, #8]
 8002dc2:	60d3      	str	r3, [r2, #12]
}
 8002dc4:	bf00      	nop
 8002dc6:	3714      	adds	r7, #20
 8002dc8:	46bd      	mov	sp, r7
 8002dca:	bc80      	pop	{r7}
 8002dcc:	4770      	bx	lr
 8002dce:	bf00      	nop
 8002dd0:	e000ed00 	.word	0xe000ed00

08002dd4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002dd4:	b480      	push	{r7}
 8002dd6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002dd8:	4b04      	ldr	r3, [pc, #16]	; (8002dec <__NVIC_GetPriorityGrouping+0x18>)
 8002dda:	68db      	ldr	r3, [r3, #12]
 8002ddc:	0a1b      	lsrs	r3, r3, #8
 8002dde:	f003 0307 	and.w	r3, r3, #7
}
 8002de2:	4618      	mov	r0, r3
 8002de4:	46bd      	mov	sp, r7
 8002de6:	bc80      	pop	{r7}
 8002de8:	4770      	bx	lr
 8002dea:	bf00      	nop
 8002dec:	e000ed00 	.word	0xe000ed00

08002df0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002df0:	b480      	push	{r7}
 8002df2:	b083      	sub	sp, #12
 8002df4:	af00      	add	r7, sp, #0
 8002df6:	4603      	mov	r3, r0
 8002df8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002dfa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002dfe:	2b00      	cmp	r3, #0
 8002e00:	db0b      	blt.n	8002e1a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002e02:	79fb      	ldrb	r3, [r7, #7]
 8002e04:	f003 021f 	and.w	r2, r3, #31
 8002e08:	4906      	ldr	r1, [pc, #24]	; (8002e24 <__NVIC_EnableIRQ+0x34>)
 8002e0a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002e0e:	095b      	lsrs	r3, r3, #5
 8002e10:	2001      	movs	r0, #1
 8002e12:	fa00 f202 	lsl.w	r2, r0, r2
 8002e16:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8002e1a:	bf00      	nop
 8002e1c:	370c      	adds	r7, #12
 8002e1e:	46bd      	mov	sp, r7
 8002e20:	bc80      	pop	{r7}
 8002e22:	4770      	bx	lr
 8002e24:	e000e100 	.word	0xe000e100

08002e28 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002e28:	b480      	push	{r7}
 8002e2a:	b083      	sub	sp, #12
 8002e2c:	af00      	add	r7, sp, #0
 8002e2e:	4603      	mov	r3, r0
 8002e30:	6039      	str	r1, [r7, #0]
 8002e32:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002e34:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002e38:	2b00      	cmp	r3, #0
 8002e3a:	db0a      	blt.n	8002e52 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002e3c:	683b      	ldr	r3, [r7, #0]
 8002e3e:	b2da      	uxtb	r2, r3
 8002e40:	490c      	ldr	r1, [pc, #48]	; (8002e74 <__NVIC_SetPriority+0x4c>)
 8002e42:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002e46:	0112      	lsls	r2, r2, #4
 8002e48:	b2d2      	uxtb	r2, r2
 8002e4a:	440b      	add	r3, r1
 8002e4c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002e50:	e00a      	b.n	8002e68 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002e52:	683b      	ldr	r3, [r7, #0]
 8002e54:	b2da      	uxtb	r2, r3
 8002e56:	4908      	ldr	r1, [pc, #32]	; (8002e78 <__NVIC_SetPriority+0x50>)
 8002e58:	79fb      	ldrb	r3, [r7, #7]
 8002e5a:	f003 030f 	and.w	r3, r3, #15
 8002e5e:	3b04      	subs	r3, #4
 8002e60:	0112      	lsls	r2, r2, #4
 8002e62:	b2d2      	uxtb	r2, r2
 8002e64:	440b      	add	r3, r1
 8002e66:	761a      	strb	r2, [r3, #24]
}
 8002e68:	bf00      	nop
 8002e6a:	370c      	adds	r7, #12
 8002e6c:	46bd      	mov	sp, r7
 8002e6e:	bc80      	pop	{r7}
 8002e70:	4770      	bx	lr
 8002e72:	bf00      	nop
 8002e74:	e000e100 	.word	0xe000e100
 8002e78:	e000ed00 	.word	0xe000ed00

08002e7c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002e7c:	b480      	push	{r7}
 8002e7e:	b089      	sub	sp, #36	; 0x24
 8002e80:	af00      	add	r7, sp, #0
 8002e82:	60f8      	str	r0, [r7, #12]
 8002e84:	60b9      	str	r1, [r7, #8]
 8002e86:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002e88:	68fb      	ldr	r3, [r7, #12]
 8002e8a:	f003 0307 	and.w	r3, r3, #7
 8002e8e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002e90:	69fb      	ldr	r3, [r7, #28]
 8002e92:	f1c3 0307 	rsb	r3, r3, #7
 8002e96:	2b04      	cmp	r3, #4
 8002e98:	bf28      	it	cs
 8002e9a:	2304      	movcs	r3, #4
 8002e9c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002e9e:	69fb      	ldr	r3, [r7, #28]
 8002ea0:	3304      	adds	r3, #4
 8002ea2:	2b06      	cmp	r3, #6
 8002ea4:	d902      	bls.n	8002eac <NVIC_EncodePriority+0x30>
 8002ea6:	69fb      	ldr	r3, [r7, #28]
 8002ea8:	3b03      	subs	r3, #3
 8002eaa:	e000      	b.n	8002eae <NVIC_EncodePriority+0x32>
 8002eac:	2300      	movs	r3, #0
 8002eae:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002eb0:	f04f 32ff 	mov.w	r2, #4294967295
 8002eb4:	69bb      	ldr	r3, [r7, #24]
 8002eb6:	fa02 f303 	lsl.w	r3, r2, r3
 8002eba:	43da      	mvns	r2, r3
 8002ebc:	68bb      	ldr	r3, [r7, #8]
 8002ebe:	401a      	ands	r2, r3
 8002ec0:	697b      	ldr	r3, [r7, #20]
 8002ec2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002ec4:	f04f 31ff 	mov.w	r1, #4294967295
 8002ec8:	697b      	ldr	r3, [r7, #20]
 8002eca:	fa01 f303 	lsl.w	r3, r1, r3
 8002ece:	43d9      	mvns	r1, r3
 8002ed0:	687b      	ldr	r3, [r7, #4]
 8002ed2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002ed4:	4313      	orrs	r3, r2
         );
}
 8002ed6:	4618      	mov	r0, r3
 8002ed8:	3724      	adds	r7, #36	; 0x24
 8002eda:	46bd      	mov	sp, r7
 8002edc:	bc80      	pop	{r7}
 8002ede:	4770      	bx	lr

08002ee0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002ee0:	b580      	push	{r7, lr}
 8002ee2:	b082      	sub	sp, #8
 8002ee4:	af00      	add	r7, sp, #0
 8002ee6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002ee8:	687b      	ldr	r3, [r7, #4]
 8002eea:	3b01      	subs	r3, #1
 8002eec:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002ef0:	d301      	bcc.n	8002ef6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002ef2:	2301      	movs	r3, #1
 8002ef4:	e00f      	b.n	8002f16 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002ef6:	4a0a      	ldr	r2, [pc, #40]	; (8002f20 <SysTick_Config+0x40>)
 8002ef8:	687b      	ldr	r3, [r7, #4]
 8002efa:	3b01      	subs	r3, #1
 8002efc:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002efe:	210f      	movs	r1, #15
 8002f00:	f04f 30ff 	mov.w	r0, #4294967295
 8002f04:	f7ff ff90 	bl	8002e28 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002f08:	4b05      	ldr	r3, [pc, #20]	; (8002f20 <SysTick_Config+0x40>)
 8002f0a:	2200      	movs	r2, #0
 8002f0c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002f0e:	4b04      	ldr	r3, [pc, #16]	; (8002f20 <SysTick_Config+0x40>)
 8002f10:	2207      	movs	r2, #7
 8002f12:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002f14:	2300      	movs	r3, #0
}
 8002f16:	4618      	mov	r0, r3
 8002f18:	3708      	adds	r7, #8
 8002f1a:	46bd      	mov	sp, r7
 8002f1c:	bd80      	pop	{r7, pc}
 8002f1e:	bf00      	nop
 8002f20:	e000e010 	.word	0xe000e010

08002f24 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002f24:	b580      	push	{r7, lr}
 8002f26:	b082      	sub	sp, #8
 8002f28:	af00      	add	r7, sp, #0
 8002f2a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002f2c:	6878      	ldr	r0, [r7, #4]
 8002f2e:	f7ff ff2d 	bl	8002d8c <__NVIC_SetPriorityGrouping>
}
 8002f32:	bf00      	nop
 8002f34:	3708      	adds	r7, #8
 8002f36:	46bd      	mov	sp, r7
 8002f38:	bd80      	pop	{r7, pc}

08002f3a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002f3a:	b580      	push	{r7, lr}
 8002f3c:	b086      	sub	sp, #24
 8002f3e:	af00      	add	r7, sp, #0
 8002f40:	4603      	mov	r3, r0
 8002f42:	60b9      	str	r1, [r7, #8]
 8002f44:	607a      	str	r2, [r7, #4]
 8002f46:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002f48:	2300      	movs	r3, #0
 8002f4a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002f4c:	f7ff ff42 	bl	8002dd4 <__NVIC_GetPriorityGrouping>
 8002f50:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002f52:	687a      	ldr	r2, [r7, #4]
 8002f54:	68b9      	ldr	r1, [r7, #8]
 8002f56:	6978      	ldr	r0, [r7, #20]
 8002f58:	f7ff ff90 	bl	8002e7c <NVIC_EncodePriority>
 8002f5c:	4602      	mov	r2, r0
 8002f5e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002f62:	4611      	mov	r1, r2
 8002f64:	4618      	mov	r0, r3
 8002f66:	f7ff ff5f 	bl	8002e28 <__NVIC_SetPriority>
}
 8002f6a:	bf00      	nop
 8002f6c:	3718      	adds	r7, #24
 8002f6e:	46bd      	mov	sp, r7
 8002f70:	bd80      	pop	{r7, pc}

08002f72 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002f72:	b580      	push	{r7, lr}
 8002f74:	b082      	sub	sp, #8
 8002f76:	af00      	add	r7, sp, #0
 8002f78:	4603      	mov	r3, r0
 8002f7a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002f7c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002f80:	4618      	mov	r0, r3
 8002f82:	f7ff ff35 	bl	8002df0 <__NVIC_EnableIRQ>
}
 8002f86:	bf00      	nop
 8002f88:	3708      	adds	r7, #8
 8002f8a:	46bd      	mov	sp, r7
 8002f8c:	bd80      	pop	{r7, pc}

08002f8e <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002f8e:	b580      	push	{r7, lr}
 8002f90:	b082      	sub	sp, #8
 8002f92:	af00      	add	r7, sp, #0
 8002f94:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002f96:	6878      	ldr	r0, [r7, #4]
 8002f98:	f7ff ffa2 	bl	8002ee0 <SysTick_Config>
 8002f9c:	4603      	mov	r3, r0
}
 8002f9e:	4618      	mov	r0, r3
 8002fa0:	3708      	adds	r7, #8
 8002fa2:	46bd      	mov	sp, r7
 8002fa4:	bd80      	pop	{r7, pc}

08002fa6 <HAL_DMA_Abort>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8002fa6:	b480      	push	{r7}
 8002fa8:	b085      	sub	sp, #20
 8002faa:	af00      	add	r7, sp, #0
 8002fac:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002fae:	2300      	movs	r3, #0
 8002fb0:	73fb      	strb	r3, [r7, #15]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002fb2:	687b      	ldr	r3, [r7, #4]
 8002fb4:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8002fb8:	2b02      	cmp	r3, #2
 8002fba:	d008      	beq.n	8002fce <HAL_DMA_Abort+0x28>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002fbc:	687b      	ldr	r3, [r7, #4]
 8002fbe:	2204      	movs	r2, #4
 8002fc0:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002fc2:	687b      	ldr	r3, [r7, #4]
 8002fc4:	2200      	movs	r2, #0
 8002fc6:	f883 2020 	strb.w	r2, [r3, #32]
    
    return HAL_ERROR;
 8002fca:	2301      	movs	r3, #1
 8002fcc:	e020      	b.n	8003010 <HAL_DMA_Abort+0x6a>
  }
  else

  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002fce:	687b      	ldr	r3, [r7, #4]
 8002fd0:	681b      	ldr	r3, [r3, #0]
 8002fd2:	681a      	ldr	r2, [r3, #0]
 8002fd4:	687b      	ldr	r3, [r7, #4]
 8002fd6:	681b      	ldr	r3, [r3, #0]
 8002fd8:	f022 020e 	bic.w	r2, r2, #14
 8002fdc:	601a      	str	r2, [r3, #0]
      
    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8002fde:	687b      	ldr	r3, [r7, #4]
 8002fe0:	681b      	ldr	r3, [r3, #0]
 8002fe2:	681a      	ldr	r2, [r3, #0]
 8002fe4:	687b      	ldr	r3, [r7, #4]
 8002fe6:	681b      	ldr	r3, [r3, #0]
 8002fe8:	f022 0201 	bic.w	r2, r2, #1
 8002fec:	601a      	str	r2, [r3, #0]
      
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8002fee:	687b      	ldr	r3, [r7, #4]
 8002ff0:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002ff2:	687b      	ldr	r3, [r7, #4]
 8002ff4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002ff6:	2101      	movs	r1, #1
 8002ff8:	fa01 f202 	lsl.w	r2, r1, r2
 8002ffc:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8002ffe:	687b      	ldr	r3, [r7, #4]
 8003000:	2201      	movs	r2, #1
 8003002:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);      
 8003006:	687b      	ldr	r3, [r7, #4]
 8003008:	2200      	movs	r2, #0
 800300a:	f883 2020 	strb.w	r2, [r3, #32]
  
  return status; 
 800300e:	7bfb      	ldrb	r3, [r7, #15]
}
 8003010:	4618      	mov	r0, r3
 8003012:	3714      	adds	r7, #20
 8003014:	46bd      	mov	sp, r7
 8003016:	bc80      	pop	{r7}
 8003018:	4770      	bx	lr
	...

0800301c <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 800301c:	b580      	push	{r7, lr}
 800301e:	b084      	sub	sp, #16
 8003020:	af00      	add	r7, sp, #0
 8003022:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003024:	2300      	movs	r3, #0
 8003026:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8003028:	687b      	ldr	r3, [r7, #4]
 800302a:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 800302e:	2b02      	cmp	r3, #2
 8003030:	d005      	beq.n	800303e <HAL_DMA_Abort_IT+0x22>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003032:	687b      	ldr	r3, [r7, #4]
 8003034:	2204      	movs	r2, #4
 8003036:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 8003038:	2301      	movs	r3, #1
 800303a:	73fb      	strb	r3, [r7, #15]
 800303c:	e051      	b.n	80030e2 <HAL_DMA_Abort_IT+0xc6>
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800303e:	687b      	ldr	r3, [r7, #4]
 8003040:	681b      	ldr	r3, [r3, #0]
 8003042:	681a      	ldr	r2, [r3, #0]
 8003044:	687b      	ldr	r3, [r7, #4]
 8003046:	681b      	ldr	r3, [r3, #0]
 8003048:	f022 020e 	bic.w	r2, r2, #14
 800304c:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 800304e:	687b      	ldr	r3, [r7, #4]
 8003050:	681b      	ldr	r3, [r3, #0]
 8003052:	681a      	ldr	r2, [r3, #0]
 8003054:	687b      	ldr	r3, [r7, #4]
 8003056:	681b      	ldr	r3, [r3, #0]
 8003058:	f022 0201 	bic.w	r2, r2, #1
 800305c:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 800305e:	687b      	ldr	r3, [r7, #4]
 8003060:	681b      	ldr	r3, [r3, #0]
 8003062:	4a22      	ldr	r2, [pc, #136]	; (80030ec <HAL_DMA_Abort_IT+0xd0>)
 8003064:	4293      	cmp	r3, r2
 8003066:	d029      	beq.n	80030bc <HAL_DMA_Abort_IT+0xa0>
 8003068:	687b      	ldr	r3, [r7, #4]
 800306a:	681b      	ldr	r3, [r3, #0]
 800306c:	4a20      	ldr	r2, [pc, #128]	; (80030f0 <HAL_DMA_Abort_IT+0xd4>)
 800306e:	4293      	cmp	r3, r2
 8003070:	d022      	beq.n	80030b8 <HAL_DMA_Abort_IT+0x9c>
 8003072:	687b      	ldr	r3, [r7, #4]
 8003074:	681b      	ldr	r3, [r3, #0]
 8003076:	4a1f      	ldr	r2, [pc, #124]	; (80030f4 <HAL_DMA_Abort_IT+0xd8>)
 8003078:	4293      	cmp	r3, r2
 800307a:	d01a      	beq.n	80030b2 <HAL_DMA_Abort_IT+0x96>
 800307c:	687b      	ldr	r3, [r7, #4]
 800307e:	681b      	ldr	r3, [r3, #0]
 8003080:	4a1d      	ldr	r2, [pc, #116]	; (80030f8 <HAL_DMA_Abort_IT+0xdc>)
 8003082:	4293      	cmp	r3, r2
 8003084:	d012      	beq.n	80030ac <HAL_DMA_Abort_IT+0x90>
 8003086:	687b      	ldr	r3, [r7, #4]
 8003088:	681b      	ldr	r3, [r3, #0]
 800308a:	4a1c      	ldr	r2, [pc, #112]	; (80030fc <HAL_DMA_Abort_IT+0xe0>)
 800308c:	4293      	cmp	r3, r2
 800308e:	d00a      	beq.n	80030a6 <HAL_DMA_Abort_IT+0x8a>
 8003090:	687b      	ldr	r3, [r7, #4]
 8003092:	681b      	ldr	r3, [r3, #0]
 8003094:	4a1a      	ldr	r2, [pc, #104]	; (8003100 <HAL_DMA_Abort_IT+0xe4>)
 8003096:	4293      	cmp	r3, r2
 8003098:	d102      	bne.n	80030a0 <HAL_DMA_Abort_IT+0x84>
 800309a:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 800309e:	e00e      	b.n	80030be <HAL_DMA_Abort_IT+0xa2>
 80030a0:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80030a4:	e00b      	b.n	80030be <HAL_DMA_Abort_IT+0xa2>
 80030a6:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80030aa:	e008      	b.n	80030be <HAL_DMA_Abort_IT+0xa2>
 80030ac:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80030b0:	e005      	b.n	80030be <HAL_DMA_Abort_IT+0xa2>
 80030b2:	f44f 7380 	mov.w	r3, #256	; 0x100
 80030b6:	e002      	b.n	80030be <HAL_DMA_Abort_IT+0xa2>
 80030b8:	2310      	movs	r3, #16
 80030ba:	e000      	b.n	80030be <HAL_DMA_Abort_IT+0xa2>
 80030bc:	2301      	movs	r3, #1
 80030be:	4a11      	ldr	r2, [pc, #68]	; (8003104 <HAL_DMA_Abort_IT+0xe8>)
 80030c0:	6053      	str	r3, [r2, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80030c2:	687b      	ldr	r3, [r7, #4]
 80030c4:	2201      	movs	r2, #1
 80030c6:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80030ca:	687b      	ldr	r3, [r7, #4]
 80030cc:	2200      	movs	r2, #0
 80030ce:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 80030d2:	687b      	ldr	r3, [r7, #4]
 80030d4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80030d6:	2b00      	cmp	r3, #0
 80030d8:	d003      	beq.n	80030e2 <HAL_DMA_Abort_IT+0xc6>
    {
      hdma->XferAbortCallback(hdma);
 80030da:	687b      	ldr	r3, [r7, #4]
 80030dc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80030de:	6878      	ldr	r0, [r7, #4]
 80030e0:	4798      	blx	r3
    } 
  }
  return status;
 80030e2:	7bfb      	ldrb	r3, [r7, #15]
}
 80030e4:	4618      	mov	r0, r3
 80030e6:	3710      	adds	r7, #16
 80030e8:	46bd      	mov	sp, r7
 80030ea:	bd80      	pop	{r7, pc}
 80030ec:	40020008 	.word	0x40020008
 80030f0:	4002001c 	.word	0x4002001c
 80030f4:	40020030 	.word	0x40020030
 80030f8:	40020044 	.word	0x40020044
 80030fc:	40020058 	.word	0x40020058
 8003100:	4002006c 	.word	0x4002006c
 8003104:	40020000 	.word	0x40020000

08003108 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003108:	b480      	push	{r7}
 800310a:	b08b      	sub	sp, #44	; 0x2c
 800310c:	af00      	add	r7, sp, #0
 800310e:	6078      	str	r0, [r7, #4]
 8003110:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8003112:	2300      	movs	r3, #0
 8003114:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8003116:	2300      	movs	r3, #0
 8003118:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800311a:	e169      	b.n	80033f0 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 800311c:	2201      	movs	r2, #1
 800311e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003120:	fa02 f303 	lsl.w	r3, r2, r3
 8003124:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8003126:	683b      	ldr	r3, [r7, #0]
 8003128:	681b      	ldr	r3, [r3, #0]
 800312a:	69fa      	ldr	r2, [r7, #28]
 800312c:	4013      	ands	r3, r2
 800312e:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8003130:	69ba      	ldr	r2, [r7, #24]
 8003132:	69fb      	ldr	r3, [r7, #28]
 8003134:	429a      	cmp	r2, r3
 8003136:	f040 8158 	bne.w	80033ea <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 800313a:	683b      	ldr	r3, [r7, #0]
 800313c:	685b      	ldr	r3, [r3, #4]
 800313e:	4a9a      	ldr	r2, [pc, #616]	; (80033a8 <HAL_GPIO_Init+0x2a0>)
 8003140:	4293      	cmp	r3, r2
 8003142:	d05e      	beq.n	8003202 <HAL_GPIO_Init+0xfa>
 8003144:	4a98      	ldr	r2, [pc, #608]	; (80033a8 <HAL_GPIO_Init+0x2a0>)
 8003146:	4293      	cmp	r3, r2
 8003148:	d875      	bhi.n	8003236 <HAL_GPIO_Init+0x12e>
 800314a:	4a98      	ldr	r2, [pc, #608]	; (80033ac <HAL_GPIO_Init+0x2a4>)
 800314c:	4293      	cmp	r3, r2
 800314e:	d058      	beq.n	8003202 <HAL_GPIO_Init+0xfa>
 8003150:	4a96      	ldr	r2, [pc, #600]	; (80033ac <HAL_GPIO_Init+0x2a4>)
 8003152:	4293      	cmp	r3, r2
 8003154:	d86f      	bhi.n	8003236 <HAL_GPIO_Init+0x12e>
 8003156:	4a96      	ldr	r2, [pc, #600]	; (80033b0 <HAL_GPIO_Init+0x2a8>)
 8003158:	4293      	cmp	r3, r2
 800315a:	d052      	beq.n	8003202 <HAL_GPIO_Init+0xfa>
 800315c:	4a94      	ldr	r2, [pc, #592]	; (80033b0 <HAL_GPIO_Init+0x2a8>)
 800315e:	4293      	cmp	r3, r2
 8003160:	d869      	bhi.n	8003236 <HAL_GPIO_Init+0x12e>
 8003162:	4a94      	ldr	r2, [pc, #592]	; (80033b4 <HAL_GPIO_Init+0x2ac>)
 8003164:	4293      	cmp	r3, r2
 8003166:	d04c      	beq.n	8003202 <HAL_GPIO_Init+0xfa>
 8003168:	4a92      	ldr	r2, [pc, #584]	; (80033b4 <HAL_GPIO_Init+0x2ac>)
 800316a:	4293      	cmp	r3, r2
 800316c:	d863      	bhi.n	8003236 <HAL_GPIO_Init+0x12e>
 800316e:	4a92      	ldr	r2, [pc, #584]	; (80033b8 <HAL_GPIO_Init+0x2b0>)
 8003170:	4293      	cmp	r3, r2
 8003172:	d046      	beq.n	8003202 <HAL_GPIO_Init+0xfa>
 8003174:	4a90      	ldr	r2, [pc, #576]	; (80033b8 <HAL_GPIO_Init+0x2b0>)
 8003176:	4293      	cmp	r3, r2
 8003178:	d85d      	bhi.n	8003236 <HAL_GPIO_Init+0x12e>
 800317a:	2b12      	cmp	r3, #18
 800317c:	d82a      	bhi.n	80031d4 <HAL_GPIO_Init+0xcc>
 800317e:	2b12      	cmp	r3, #18
 8003180:	d859      	bhi.n	8003236 <HAL_GPIO_Init+0x12e>
 8003182:	a201      	add	r2, pc, #4	; (adr r2, 8003188 <HAL_GPIO_Init+0x80>)
 8003184:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003188:	08003203 	.word	0x08003203
 800318c:	080031dd 	.word	0x080031dd
 8003190:	080031ef 	.word	0x080031ef
 8003194:	08003231 	.word	0x08003231
 8003198:	08003237 	.word	0x08003237
 800319c:	08003237 	.word	0x08003237
 80031a0:	08003237 	.word	0x08003237
 80031a4:	08003237 	.word	0x08003237
 80031a8:	08003237 	.word	0x08003237
 80031ac:	08003237 	.word	0x08003237
 80031b0:	08003237 	.word	0x08003237
 80031b4:	08003237 	.word	0x08003237
 80031b8:	08003237 	.word	0x08003237
 80031bc:	08003237 	.word	0x08003237
 80031c0:	08003237 	.word	0x08003237
 80031c4:	08003237 	.word	0x08003237
 80031c8:	08003237 	.word	0x08003237
 80031cc:	080031e5 	.word	0x080031e5
 80031d0:	080031f9 	.word	0x080031f9
 80031d4:	4a79      	ldr	r2, [pc, #484]	; (80033bc <HAL_GPIO_Init+0x2b4>)
 80031d6:	4293      	cmp	r3, r2
 80031d8:	d013      	beq.n	8003202 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 80031da:	e02c      	b.n	8003236 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 80031dc:	683b      	ldr	r3, [r7, #0]
 80031de:	68db      	ldr	r3, [r3, #12]
 80031e0:	623b      	str	r3, [r7, #32]
          break;
 80031e2:	e029      	b.n	8003238 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 80031e4:	683b      	ldr	r3, [r7, #0]
 80031e6:	68db      	ldr	r3, [r3, #12]
 80031e8:	3304      	adds	r3, #4
 80031ea:	623b      	str	r3, [r7, #32]
          break;
 80031ec:	e024      	b.n	8003238 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 80031ee:	683b      	ldr	r3, [r7, #0]
 80031f0:	68db      	ldr	r3, [r3, #12]
 80031f2:	3308      	adds	r3, #8
 80031f4:	623b      	str	r3, [r7, #32]
          break;
 80031f6:	e01f      	b.n	8003238 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 80031f8:	683b      	ldr	r3, [r7, #0]
 80031fa:	68db      	ldr	r3, [r3, #12]
 80031fc:	330c      	adds	r3, #12
 80031fe:	623b      	str	r3, [r7, #32]
          break;
 8003200:	e01a      	b.n	8003238 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8003202:	683b      	ldr	r3, [r7, #0]
 8003204:	689b      	ldr	r3, [r3, #8]
 8003206:	2b00      	cmp	r3, #0
 8003208:	d102      	bne.n	8003210 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 800320a:	2304      	movs	r3, #4
 800320c:	623b      	str	r3, [r7, #32]
          break;
 800320e:	e013      	b.n	8003238 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8003210:	683b      	ldr	r3, [r7, #0]
 8003212:	689b      	ldr	r3, [r3, #8]
 8003214:	2b01      	cmp	r3, #1
 8003216:	d105      	bne.n	8003224 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8003218:	2308      	movs	r3, #8
 800321a:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 800321c:	687b      	ldr	r3, [r7, #4]
 800321e:	69fa      	ldr	r2, [r7, #28]
 8003220:	611a      	str	r2, [r3, #16]
          break;
 8003222:	e009      	b.n	8003238 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8003224:	2308      	movs	r3, #8
 8003226:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8003228:	687b      	ldr	r3, [r7, #4]
 800322a:	69fa      	ldr	r2, [r7, #28]
 800322c:	615a      	str	r2, [r3, #20]
          break;
 800322e:	e003      	b.n	8003238 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8003230:	2300      	movs	r3, #0
 8003232:	623b      	str	r3, [r7, #32]
          break;
 8003234:	e000      	b.n	8003238 <HAL_GPIO_Init+0x130>
          break;
 8003236:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8003238:	69bb      	ldr	r3, [r7, #24]
 800323a:	2bff      	cmp	r3, #255	; 0xff
 800323c:	d801      	bhi.n	8003242 <HAL_GPIO_Init+0x13a>
 800323e:	687b      	ldr	r3, [r7, #4]
 8003240:	e001      	b.n	8003246 <HAL_GPIO_Init+0x13e>
 8003242:	687b      	ldr	r3, [r7, #4]
 8003244:	3304      	adds	r3, #4
 8003246:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8003248:	69bb      	ldr	r3, [r7, #24]
 800324a:	2bff      	cmp	r3, #255	; 0xff
 800324c:	d802      	bhi.n	8003254 <HAL_GPIO_Init+0x14c>
 800324e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003250:	009b      	lsls	r3, r3, #2
 8003252:	e002      	b.n	800325a <HAL_GPIO_Init+0x152>
 8003254:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003256:	3b08      	subs	r3, #8
 8003258:	009b      	lsls	r3, r3, #2
 800325a:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 800325c:	697b      	ldr	r3, [r7, #20]
 800325e:	681a      	ldr	r2, [r3, #0]
 8003260:	210f      	movs	r1, #15
 8003262:	693b      	ldr	r3, [r7, #16]
 8003264:	fa01 f303 	lsl.w	r3, r1, r3
 8003268:	43db      	mvns	r3, r3
 800326a:	401a      	ands	r2, r3
 800326c:	6a39      	ldr	r1, [r7, #32]
 800326e:	693b      	ldr	r3, [r7, #16]
 8003270:	fa01 f303 	lsl.w	r3, r1, r3
 8003274:	431a      	orrs	r2, r3
 8003276:	697b      	ldr	r3, [r7, #20]
 8003278:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800327a:	683b      	ldr	r3, [r7, #0]
 800327c:	685b      	ldr	r3, [r3, #4]
 800327e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003282:	2b00      	cmp	r3, #0
 8003284:	f000 80b1 	beq.w	80033ea <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8003288:	4b4d      	ldr	r3, [pc, #308]	; (80033c0 <HAL_GPIO_Init+0x2b8>)
 800328a:	699b      	ldr	r3, [r3, #24]
 800328c:	4a4c      	ldr	r2, [pc, #304]	; (80033c0 <HAL_GPIO_Init+0x2b8>)
 800328e:	f043 0301 	orr.w	r3, r3, #1
 8003292:	6193      	str	r3, [r2, #24]
 8003294:	4b4a      	ldr	r3, [pc, #296]	; (80033c0 <HAL_GPIO_Init+0x2b8>)
 8003296:	699b      	ldr	r3, [r3, #24]
 8003298:	f003 0301 	and.w	r3, r3, #1
 800329c:	60bb      	str	r3, [r7, #8]
 800329e:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 80032a0:	4a48      	ldr	r2, [pc, #288]	; (80033c4 <HAL_GPIO_Init+0x2bc>)
 80032a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80032a4:	089b      	lsrs	r3, r3, #2
 80032a6:	3302      	adds	r3, #2
 80032a8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80032ac:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 80032ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80032b0:	f003 0303 	and.w	r3, r3, #3
 80032b4:	009b      	lsls	r3, r3, #2
 80032b6:	220f      	movs	r2, #15
 80032b8:	fa02 f303 	lsl.w	r3, r2, r3
 80032bc:	43db      	mvns	r3, r3
 80032be:	68fa      	ldr	r2, [r7, #12]
 80032c0:	4013      	ands	r3, r2
 80032c2:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 80032c4:	687b      	ldr	r3, [r7, #4]
 80032c6:	4a40      	ldr	r2, [pc, #256]	; (80033c8 <HAL_GPIO_Init+0x2c0>)
 80032c8:	4293      	cmp	r3, r2
 80032ca:	d013      	beq.n	80032f4 <HAL_GPIO_Init+0x1ec>
 80032cc:	687b      	ldr	r3, [r7, #4]
 80032ce:	4a3f      	ldr	r2, [pc, #252]	; (80033cc <HAL_GPIO_Init+0x2c4>)
 80032d0:	4293      	cmp	r3, r2
 80032d2:	d00d      	beq.n	80032f0 <HAL_GPIO_Init+0x1e8>
 80032d4:	687b      	ldr	r3, [r7, #4]
 80032d6:	4a3e      	ldr	r2, [pc, #248]	; (80033d0 <HAL_GPIO_Init+0x2c8>)
 80032d8:	4293      	cmp	r3, r2
 80032da:	d007      	beq.n	80032ec <HAL_GPIO_Init+0x1e4>
 80032dc:	687b      	ldr	r3, [r7, #4]
 80032de:	4a3d      	ldr	r2, [pc, #244]	; (80033d4 <HAL_GPIO_Init+0x2cc>)
 80032e0:	4293      	cmp	r3, r2
 80032e2:	d101      	bne.n	80032e8 <HAL_GPIO_Init+0x1e0>
 80032e4:	2303      	movs	r3, #3
 80032e6:	e006      	b.n	80032f6 <HAL_GPIO_Init+0x1ee>
 80032e8:	2304      	movs	r3, #4
 80032ea:	e004      	b.n	80032f6 <HAL_GPIO_Init+0x1ee>
 80032ec:	2302      	movs	r3, #2
 80032ee:	e002      	b.n	80032f6 <HAL_GPIO_Init+0x1ee>
 80032f0:	2301      	movs	r3, #1
 80032f2:	e000      	b.n	80032f6 <HAL_GPIO_Init+0x1ee>
 80032f4:	2300      	movs	r3, #0
 80032f6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80032f8:	f002 0203 	and.w	r2, r2, #3
 80032fc:	0092      	lsls	r2, r2, #2
 80032fe:	4093      	lsls	r3, r2
 8003300:	68fa      	ldr	r2, [r7, #12]
 8003302:	4313      	orrs	r3, r2
 8003304:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8003306:	492f      	ldr	r1, [pc, #188]	; (80033c4 <HAL_GPIO_Init+0x2bc>)
 8003308:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800330a:	089b      	lsrs	r3, r3, #2
 800330c:	3302      	adds	r3, #2
 800330e:	68fa      	ldr	r2, [r7, #12]
 8003310:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8003314:	683b      	ldr	r3, [r7, #0]
 8003316:	685b      	ldr	r3, [r3, #4]
 8003318:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800331c:	2b00      	cmp	r3, #0
 800331e:	d006      	beq.n	800332e <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8003320:	4b2d      	ldr	r3, [pc, #180]	; (80033d8 <HAL_GPIO_Init+0x2d0>)
 8003322:	681a      	ldr	r2, [r3, #0]
 8003324:	492c      	ldr	r1, [pc, #176]	; (80033d8 <HAL_GPIO_Init+0x2d0>)
 8003326:	69bb      	ldr	r3, [r7, #24]
 8003328:	4313      	orrs	r3, r2
 800332a:	600b      	str	r3, [r1, #0]
 800332c:	e006      	b.n	800333c <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 800332e:	4b2a      	ldr	r3, [pc, #168]	; (80033d8 <HAL_GPIO_Init+0x2d0>)
 8003330:	681a      	ldr	r2, [r3, #0]
 8003332:	69bb      	ldr	r3, [r7, #24]
 8003334:	43db      	mvns	r3, r3
 8003336:	4928      	ldr	r1, [pc, #160]	; (80033d8 <HAL_GPIO_Init+0x2d0>)
 8003338:	4013      	ands	r3, r2
 800333a:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 800333c:	683b      	ldr	r3, [r7, #0]
 800333e:	685b      	ldr	r3, [r3, #4]
 8003340:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003344:	2b00      	cmp	r3, #0
 8003346:	d006      	beq.n	8003356 <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8003348:	4b23      	ldr	r3, [pc, #140]	; (80033d8 <HAL_GPIO_Init+0x2d0>)
 800334a:	685a      	ldr	r2, [r3, #4]
 800334c:	4922      	ldr	r1, [pc, #136]	; (80033d8 <HAL_GPIO_Init+0x2d0>)
 800334e:	69bb      	ldr	r3, [r7, #24]
 8003350:	4313      	orrs	r3, r2
 8003352:	604b      	str	r3, [r1, #4]
 8003354:	e006      	b.n	8003364 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8003356:	4b20      	ldr	r3, [pc, #128]	; (80033d8 <HAL_GPIO_Init+0x2d0>)
 8003358:	685a      	ldr	r2, [r3, #4]
 800335a:	69bb      	ldr	r3, [r7, #24]
 800335c:	43db      	mvns	r3, r3
 800335e:	491e      	ldr	r1, [pc, #120]	; (80033d8 <HAL_GPIO_Init+0x2d0>)
 8003360:	4013      	ands	r3, r2
 8003362:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8003364:	683b      	ldr	r3, [r7, #0]
 8003366:	685b      	ldr	r3, [r3, #4]
 8003368:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800336c:	2b00      	cmp	r3, #0
 800336e:	d006      	beq.n	800337e <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8003370:	4b19      	ldr	r3, [pc, #100]	; (80033d8 <HAL_GPIO_Init+0x2d0>)
 8003372:	689a      	ldr	r2, [r3, #8]
 8003374:	4918      	ldr	r1, [pc, #96]	; (80033d8 <HAL_GPIO_Init+0x2d0>)
 8003376:	69bb      	ldr	r3, [r7, #24]
 8003378:	4313      	orrs	r3, r2
 800337a:	608b      	str	r3, [r1, #8]
 800337c:	e006      	b.n	800338c <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 800337e:	4b16      	ldr	r3, [pc, #88]	; (80033d8 <HAL_GPIO_Init+0x2d0>)
 8003380:	689a      	ldr	r2, [r3, #8]
 8003382:	69bb      	ldr	r3, [r7, #24]
 8003384:	43db      	mvns	r3, r3
 8003386:	4914      	ldr	r1, [pc, #80]	; (80033d8 <HAL_GPIO_Init+0x2d0>)
 8003388:	4013      	ands	r3, r2
 800338a:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 800338c:	683b      	ldr	r3, [r7, #0]
 800338e:	685b      	ldr	r3, [r3, #4]
 8003390:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003394:	2b00      	cmp	r3, #0
 8003396:	d021      	beq.n	80033dc <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8003398:	4b0f      	ldr	r3, [pc, #60]	; (80033d8 <HAL_GPIO_Init+0x2d0>)
 800339a:	68da      	ldr	r2, [r3, #12]
 800339c:	490e      	ldr	r1, [pc, #56]	; (80033d8 <HAL_GPIO_Init+0x2d0>)
 800339e:	69bb      	ldr	r3, [r7, #24]
 80033a0:	4313      	orrs	r3, r2
 80033a2:	60cb      	str	r3, [r1, #12]
 80033a4:	e021      	b.n	80033ea <HAL_GPIO_Init+0x2e2>
 80033a6:	bf00      	nop
 80033a8:	10320000 	.word	0x10320000
 80033ac:	10310000 	.word	0x10310000
 80033b0:	10220000 	.word	0x10220000
 80033b4:	10210000 	.word	0x10210000
 80033b8:	10120000 	.word	0x10120000
 80033bc:	10110000 	.word	0x10110000
 80033c0:	40021000 	.word	0x40021000
 80033c4:	40010000 	.word	0x40010000
 80033c8:	40010800 	.word	0x40010800
 80033cc:	40010c00 	.word	0x40010c00
 80033d0:	40011000 	.word	0x40011000
 80033d4:	40011400 	.word	0x40011400
 80033d8:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 80033dc:	4b0b      	ldr	r3, [pc, #44]	; (800340c <HAL_GPIO_Init+0x304>)
 80033de:	68da      	ldr	r2, [r3, #12]
 80033e0:	69bb      	ldr	r3, [r7, #24]
 80033e2:	43db      	mvns	r3, r3
 80033e4:	4909      	ldr	r1, [pc, #36]	; (800340c <HAL_GPIO_Init+0x304>)
 80033e6:	4013      	ands	r3, r2
 80033e8:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 80033ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80033ec:	3301      	adds	r3, #1
 80033ee:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80033f0:	683b      	ldr	r3, [r7, #0]
 80033f2:	681a      	ldr	r2, [r3, #0]
 80033f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80033f6:	fa22 f303 	lsr.w	r3, r2, r3
 80033fa:	2b00      	cmp	r3, #0
 80033fc:	f47f ae8e 	bne.w	800311c <HAL_GPIO_Init+0x14>
  }
}
 8003400:	bf00      	nop
 8003402:	bf00      	nop
 8003404:	372c      	adds	r7, #44	; 0x2c
 8003406:	46bd      	mov	sp, r7
 8003408:	bc80      	pop	{r7}
 800340a:	4770      	bx	lr
 800340c:	40010400 	.word	0x40010400

08003410 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8003410:	b580      	push	{r7, lr}
 8003412:	b084      	sub	sp, #16
 8003414:	af00      	add	r7, sp, #0
 8003416:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8003418:	687b      	ldr	r3, [r7, #4]
 800341a:	2b00      	cmp	r3, #0
 800341c:	d101      	bne.n	8003422 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800341e:	2301      	movs	r3, #1
 8003420:	e12b      	b.n	800367a <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8003422:	687b      	ldr	r3, [r7, #4]
 8003424:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003428:	b2db      	uxtb	r3, r3
 800342a:	2b00      	cmp	r3, #0
 800342c:	d106      	bne.n	800343c <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800342e:	687b      	ldr	r3, [r7, #4]
 8003430:	2200      	movs	r2, #0
 8003432:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8003436:	6878      	ldr	r0, [r7, #4]
 8003438:	f7fe fdcc 	bl	8001fd4 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 800343c:	687b      	ldr	r3, [r7, #4]
 800343e:	2224      	movs	r2, #36	; 0x24
 8003440:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8003444:	687b      	ldr	r3, [r7, #4]
 8003446:	681b      	ldr	r3, [r3, #0]
 8003448:	681a      	ldr	r2, [r3, #0]
 800344a:	687b      	ldr	r3, [r7, #4]
 800344c:	681b      	ldr	r3, [r3, #0]
 800344e:	f022 0201 	bic.w	r2, r2, #1
 8003452:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8003454:	687b      	ldr	r3, [r7, #4]
 8003456:	681b      	ldr	r3, [r3, #0]
 8003458:	681a      	ldr	r2, [r3, #0]
 800345a:	687b      	ldr	r3, [r7, #4]
 800345c:	681b      	ldr	r3, [r3, #0]
 800345e:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8003462:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8003464:	687b      	ldr	r3, [r7, #4]
 8003466:	681b      	ldr	r3, [r3, #0]
 8003468:	681a      	ldr	r2, [r3, #0]
 800346a:	687b      	ldr	r3, [r7, #4]
 800346c:	681b      	ldr	r3, [r3, #0]
 800346e:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8003472:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8003474:	f001 fb6e 	bl	8004b54 <HAL_RCC_GetPCLK1Freq>
 8003478:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 800347a:	687b      	ldr	r3, [r7, #4]
 800347c:	685b      	ldr	r3, [r3, #4]
 800347e:	4a81      	ldr	r2, [pc, #516]	; (8003684 <HAL_I2C_Init+0x274>)
 8003480:	4293      	cmp	r3, r2
 8003482:	d807      	bhi.n	8003494 <HAL_I2C_Init+0x84>
 8003484:	68fb      	ldr	r3, [r7, #12]
 8003486:	4a80      	ldr	r2, [pc, #512]	; (8003688 <HAL_I2C_Init+0x278>)
 8003488:	4293      	cmp	r3, r2
 800348a:	bf94      	ite	ls
 800348c:	2301      	movls	r3, #1
 800348e:	2300      	movhi	r3, #0
 8003490:	b2db      	uxtb	r3, r3
 8003492:	e006      	b.n	80034a2 <HAL_I2C_Init+0x92>
 8003494:	68fb      	ldr	r3, [r7, #12]
 8003496:	4a7d      	ldr	r2, [pc, #500]	; (800368c <HAL_I2C_Init+0x27c>)
 8003498:	4293      	cmp	r3, r2
 800349a:	bf94      	ite	ls
 800349c:	2301      	movls	r3, #1
 800349e:	2300      	movhi	r3, #0
 80034a0:	b2db      	uxtb	r3, r3
 80034a2:	2b00      	cmp	r3, #0
 80034a4:	d001      	beq.n	80034aa <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 80034a6:	2301      	movs	r3, #1
 80034a8:	e0e7      	b.n	800367a <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 80034aa:	68fb      	ldr	r3, [r7, #12]
 80034ac:	4a78      	ldr	r2, [pc, #480]	; (8003690 <HAL_I2C_Init+0x280>)
 80034ae:	fba2 2303 	umull	r2, r3, r2, r3
 80034b2:	0c9b      	lsrs	r3, r3, #18
 80034b4:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 80034b6:	687b      	ldr	r3, [r7, #4]
 80034b8:	681b      	ldr	r3, [r3, #0]
 80034ba:	685b      	ldr	r3, [r3, #4]
 80034bc:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80034c0:	687b      	ldr	r3, [r7, #4]
 80034c2:	681b      	ldr	r3, [r3, #0]
 80034c4:	68ba      	ldr	r2, [r7, #8]
 80034c6:	430a      	orrs	r2, r1
 80034c8:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 80034ca:	687b      	ldr	r3, [r7, #4]
 80034cc:	681b      	ldr	r3, [r3, #0]
 80034ce:	6a1b      	ldr	r3, [r3, #32]
 80034d0:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80034d4:	687b      	ldr	r3, [r7, #4]
 80034d6:	685b      	ldr	r3, [r3, #4]
 80034d8:	4a6a      	ldr	r2, [pc, #424]	; (8003684 <HAL_I2C_Init+0x274>)
 80034da:	4293      	cmp	r3, r2
 80034dc:	d802      	bhi.n	80034e4 <HAL_I2C_Init+0xd4>
 80034de:	68bb      	ldr	r3, [r7, #8]
 80034e0:	3301      	adds	r3, #1
 80034e2:	e009      	b.n	80034f8 <HAL_I2C_Init+0xe8>
 80034e4:	68bb      	ldr	r3, [r7, #8]
 80034e6:	f44f 7296 	mov.w	r2, #300	; 0x12c
 80034ea:	fb02 f303 	mul.w	r3, r2, r3
 80034ee:	4a69      	ldr	r2, [pc, #420]	; (8003694 <HAL_I2C_Init+0x284>)
 80034f0:	fba2 2303 	umull	r2, r3, r2, r3
 80034f4:	099b      	lsrs	r3, r3, #6
 80034f6:	3301      	adds	r3, #1
 80034f8:	687a      	ldr	r2, [r7, #4]
 80034fa:	6812      	ldr	r2, [r2, #0]
 80034fc:	430b      	orrs	r3, r1
 80034fe:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8003500:	687b      	ldr	r3, [r7, #4]
 8003502:	681b      	ldr	r3, [r3, #0]
 8003504:	69db      	ldr	r3, [r3, #28]
 8003506:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 800350a:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 800350e:	687b      	ldr	r3, [r7, #4]
 8003510:	685b      	ldr	r3, [r3, #4]
 8003512:	495c      	ldr	r1, [pc, #368]	; (8003684 <HAL_I2C_Init+0x274>)
 8003514:	428b      	cmp	r3, r1
 8003516:	d819      	bhi.n	800354c <HAL_I2C_Init+0x13c>
 8003518:	68fb      	ldr	r3, [r7, #12]
 800351a:	1e59      	subs	r1, r3, #1
 800351c:	687b      	ldr	r3, [r7, #4]
 800351e:	685b      	ldr	r3, [r3, #4]
 8003520:	005b      	lsls	r3, r3, #1
 8003522:	fbb1 f3f3 	udiv	r3, r1, r3
 8003526:	1c59      	adds	r1, r3, #1
 8003528:	f640 73fc 	movw	r3, #4092	; 0xffc
 800352c:	400b      	ands	r3, r1
 800352e:	2b00      	cmp	r3, #0
 8003530:	d00a      	beq.n	8003548 <HAL_I2C_Init+0x138>
 8003532:	68fb      	ldr	r3, [r7, #12]
 8003534:	1e59      	subs	r1, r3, #1
 8003536:	687b      	ldr	r3, [r7, #4]
 8003538:	685b      	ldr	r3, [r3, #4]
 800353a:	005b      	lsls	r3, r3, #1
 800353c:	fbb1 f3f3 	udiv	r3, r1, r3
 8003540:	3301      	adds	r3, #1
 8003542:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003546:	e051      	b.n	80035ec <HAL_I2C_Init+0x1dc>
 8003548:	2304      	movs	r3, #4
 800354a:	e04f      	b.n	80035ec <HAL_I2C_Init+0x1dc>
 800354c:	687b      	ldr	r3, [r7, #4]
 800354e:	689b      	ldr	r3, [r3, #8]
 8003550:	2b00      	cmp	r3, #0
 8003552:	d111      	bne.n	8003578 <HAL_I2C_Init+0x168>
 8003554:	68fb      	ldr	r3, [r7, #12]
 8003556:	1e58      	subs	r0, r3, #1
 8003558:	687b      	ldr	r3, [r7, #4]
 800355a:	6859      	ldr	r1, [r3, #4]
 800355c:	460b      	mov	r3, r1
 800355e:	005b      	lsls	r3, r3, #1
 8003560:	440b      	add	r3, r1
 8003562:	fbb0 f3f3 	udiv	r3, r0, r3
 8003566:	3301      	adds	r3, #1
 8003568:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800356c:	2b00      	cmp	r3, #0
 800356e:	bf0c      	ite	eq
 8003570:	2301      	moveq	r3, #1
 8003572:	2300      	movne	r3, #0
 8003574:	b2db      	uxtb	r3, r3
 8003576:	e012      	b.n	800359e <HAL_I2C_Init+0x18e>
 8003578:	68fb      	ldr	r3, [r7, #12]
 800357a:	1e58      	subs	r0, r3, #1
 800357c:	687b      	ldr	r3, [r7, #4]
 800357e:	6859      	ldr	r1, [r3, #4]
 8003580:	460b      	mov	r3, r1
 8003582:	009b      	lsls	r3, r3, #2
 8003584:	440b      	add	r3, r1
 8003586:	0099      	lsls	r1, r3, #2
 8003588:	440b      	add	r3, r1
 800358a:	fbb0 f3f3 	udiv	r3, r0, r3
 800358e:	3301      	adds	r3, #1
 8003590:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003594:	2b00      	cmp	r3, #0
 8003596:	bf0c      	ite	eq
 8003598:	2301      	moveq	r3, #1
 800359a:	2300      	movne	r3, #0
 800359c:	b2db      	uxtb	r3, r3
 800359e:	2b00      	cmp	r3, #0
 80035a0:	d001      	beq.n	80035a6 <HAL_I2C_Init+0x196>
 80035a2:	2301      	movs	r3, #1
 80035a4:	e022      	b.n	80035ec <HAL_I2C_Init+0x1dc>
 80035a6:	687b      	ldr	r3, [r7, #4]
 80035a8:	689b      	ldr	r3, [r3, #8]
 80035aa:	2b00      	cmp	r3, #0
 80035ac:	d10e      	bne.n	80035cc <HAL_I2C_Init+0x1bc>
 80035ae:	68fb      	ldr	r3, [r7, #12]
 80035b0:	1e58      	subs	r0, r3, #1
 80035b2:	687b      	ldr	r3, [r7, #4]
 80035b4:	6859      	ldr	r1, [r3, #4]
 80035b6:	460b      	mov	r3, r1
 80035b8:	005b      	lsls	r3, r3, #1
 80035ba:	440b      	add	r3, r1
 80035bc:	fbb0 f3f3 	udiv	r3, r0, r3
 80035c0:	3301      	adds	r3, #1
 80035c2:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80035c6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80035ca:	e00f      	b.n	80035ec <HAL_I2C_Init+0x1dc>
 80035cc:	68fb      	ldr	r3, [r7, #12]
 80035ce:	1e58      	subs	r0, r3, #1
 80035d0:	687b      	ldr	r3, [r7, #4]
 80035d2:	6859      	ldr	r1, [r3, #4]
 80035d4:	460b      	mov	r3, r1
 80035d6:	009b      	lsls	r3, r3, #2
 80035d8:	440b      	add	r3, r1
 80035da:	0099      	lsls	r1, r3, #2
 80035dc:	440b      	add	r3, r1
 80035de:	fbb0 f3f3 	udiv	r3, r0, r3
 80035e2:	3301      	adds	r3, #1
 80035e4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80035e8:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80035ec:	6879      	ldr	r1, [r7, #4]
 80035ee:	6809      	ldr	r1, [r1, #0]
 80035f0:	4313      	orrs	r3, r2
 80035f2:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 80035f4:	687b      	ldr	r3, [r7, #4]
 80035f6:	681b      	ldr	r3, [r3, #0]
 80035f8:	681b      	ldr	r3, [r3, #0]
 80035fa:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 80035fe:	687b      	ldr	r3, [r7, #4]
 8003600:	69da      	ldr	r2, [r3, #28]
 8003602:	687b      	ldr	r3, [r7, #4]
 8003604:	6a1b      	ldr	r3, [r3, #32]
 8003606:	431a      	orrs	r2, r3
 8003608:	687b      	ldr	r3, [r7, #4]
 800360a:	681b      	ldr	r3, [r3, #0]
 800360c:	430a      	orrs	r2, r1
 800360e:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8003610:	687b      	ldr	r3, [r7, #4]
 8003612:	681b      	ldr	r3, [r3, #0]
 8003614:	689b      	ldr	r3, [r3, #8]
 8003616:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 800361a:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800361e:	687a      	ldr	r2, [r7, #4]
 8003620:	6911      	ldr	r1, [r2, #16]
 8003622:	687a      	ldr	r2, [r7, #4]
 8003624:	68d2      	ldr	r2, [r2, #12]
 8003626:	4311      	orrs	r1, r2
 8003628:	687a      	ldr	r2, [r7, #4]
 800362a:	6812      	ldr	r2, [r2, #0]
 800362c:	430b      	orrs	r3, r1
 800362e:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8003630:	687b      	ldr	r3, [r7, #4]
 8003632:	681b      	ldr	r3, [r3, #0]
 8003634:	68db      	ldr	r3, [r3, #12]
 8003636:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 800363a:	687b      	ldr	r3, [r7, #4]
 800363c:	695a      	ldr	r2, [r3, #20]
 800363e:	687b      	ldr	r3, [r7, #4]
 8003640:	699b      	ldr	r3, [r3, #24]
 8003642:	431a      	orrs	r2, r3
 8003644:	687b      	ldr	r3, [r7, #4]
 8003646:	681b      	ldr	r3, [r3, #0]
 8003648:	430a      	orrs	r2, r1
 800364a:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 800364c:	687b      	ldr	r3, [r7, #4]
 800364e:	681b      	ldr	r3, [r3, #0]
 8003650:	681a      	ldr	r2, [r3, #0]
 8003652:	687b      	ldr	r3, [r7, #4]
 8003654:	681b      	ldr	r3, [r3, #0]
 8003656:	f042 0201 	orr.w	r2, r2, #1
 800365a:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800365c:	687b      	ldr	r3, [r7, #4]
 800365e:	2200      	movs	r2, #0
 8003660:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8003662:	687b      	ldr	r3, [r7, #4]
 8003664:	2220      	movs	r2, #32
 8003666:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 800366a:	687b      	ldr	r3, [r7, #4]
 800366c:	2200      	movs	r2, #0
 800366e:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8003670:	687b      	ldr	r3, [r7, #4]
 8003672:	2200      	movs	r2, #0
 8003674:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8003678:	2300      	movs	r3, #0
}
 800367a:	4618      	mov	r0, r3
 800367c:	3710      	adds	r7, #16
 800367e:	46bd      	mov	sp, r7
 8003680:	bd80      	pop	{r7, pc}
 8003682:	bf00      	nop
 8003684:	000186a0 	.word	0x000186a0
 8003688:	001e847f 	.word	0x001e847f
 800368c:	003d08ff 	.word	0x003d08ff
 8003690:	431bde83 	.word	0x431bde83
 8003694:	10624dd3 	.word	0x10624dd3

08003698 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003698:	b580      	push	{r7, lr}
 800369a:	b088      	sub	sp, #32
 800369c:	af02      	add	r7, sp, #8
 800369e:	60f8      	str	r0, [r7, #12]
 80036a0:	607a      	str	r2, [r7, #4]
 80036a2:	461a      	mov	r2, r3
 80036a4:	460b      	mov	r3, r1
 80036a6:	817b      	strh	r3, [r7, #10]
 80036a8:	4613      	mov	r3, r2
 80036aa:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80036ac:	f7fe fee8 	bl	8002480 <HAL_GetTick>
 80036b0:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 80036b2:	68fb      	ldr	r3, [r7, #12]
 80036b4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80036b8:	b2db      	uxtb	r3, r3
 80036ba:	2b20      	cmp	r3, #32
 80036bc:	f040 80e0 	bne.w	8003880 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80036c0:	697b      	ldr	r3, [r7, #20]
 80036c2:	9300      	str	r3, [sp, #0]
 80036c4:	2319      	movs	r3, #25
 80036c6:	2201      	movs	r2, #1
 80036c8:	4970      	ldr	r1, [pc, #448]	; (800388c <HAL_I2C_Master_Transmit+0x1f4>)
 80036ca:	68f8      	ldr	r0, [r7, #12]
 80036cc:	f000 fc92 	bl	8003ff4 <I2C_WaitOnFlagUntilTimeout>
 80036d0:	4603      	mov	r3, r0
 80036d2:	2b00      	cmp	r3, #0
 80036d4:	d001      	beq.n	80036da <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 80036d6:	2302      	movs	r3, #2
 80036d8:	e0d3      	b.n	8003882 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80036da:	68fb      	ldr	r3, [r7, #12]
 80036dc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80036e0:	2b01      	cmp	r3, #1
 80036e2:	d101      	bne.n	80036e8 <HAL_I2C_Master_Transmit+0x50>
 80036e4:	2302      	movs	r3, #2
 80036e6:	e0cc      	b.n	8003882 <HAL_I2C_Master_Transmit+0x1ea>
 80036e8:	68fb      	ldr	r3, [r7, #12]
 80036ea:	2201      	movs	r2, #1
 80036ec:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80036f0:	68fb      	ldr	r3, [r7, #12]
 80036f2:	681b      	ldr	r3, [r3, #0]
 80036f4:	681b      	ldr	r3, [r3, #0]
 80036f6:	f003 0301 	and.w	r3, r3, #1
 80036fa:	2b01      	cmp	r3, #1
 80036fc:	d007      	beq.n	800370e <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80036fe:	68fb      	ldr	r3, [r7, #12]
 8003700:	681b      	ldr	r3, [r3, #0]
 8003702:	681a      	ldr	r2, [r3, #0]
 8003704:	68fb      	ldr	r3, [r7, #12]
 8003706:	681b      	ldr	r3, [r3, #0]
 8003708:	f042 0201 	orr.w	r2, r2, #1
 800370c:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800370e:	68fb      	ldr	r3, [r7, #12]
 8003710:	681b      	ldr	r3, [r3, #0]
 8003712:	681a      	ldr	r2, [r3, #0]
 8003714:	68fb      	ldr	r3, [r7, #12]
 8003716:	681b      	ldr	r3, [r3, #0]
 8003718:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800371c:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 800371e:	68fb      	ldr	r3, [r7, #12]
 8003720:	2221      	movs	r2, #33	; 0x21
 8003722:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8003726:	68fb      	ldr	r3, [r7, #12]
 8003728:	2210      	movs	r2, #16
 800372a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 800372e:	68fb      	ldr	r3, [r7, #12]
 8003730:	2200      	movs	r2, #0
 8003732:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8003734:	68fb      	ldr	r3, [r7, #12]
 8003736:	687a      	ldr	r2, [r7, #4]
 8003738:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 800373a:	68fb      	ldr	r3, [r7, #12]
 800373c:	893a      	ldrh	r2, [r7, #8]
 800373e:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8003740:	68fb      	ldr	r3, [r7, #12]
 8003742:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003744:	b29a      	uxth	r2, r3
 8003746:	68fb      	ldr	r3, [r7, #12]
 8003748:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800374a:	68fb      	ldr	r3, [r7, #12]
 800374c:	4a50      	ldr	r2, [pc, #320]	; (8003890 <HAL_I2C_Master_Transmit+0x1f8>)
 800374e:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8003750:	8979      	ldrh	r1, [r7, #10]
 8003752:	697b      	ldr	r3, [r7, #20]
 8003754:	6a3a      	ldr	r2, [r7, #32]
 8003756:	68f8      	ldr	r0, [r7, #12]
 8003758:	f000 fafc 	bl	8003d54 <I2C_MasterRequestWrite>
 800375c:	4603      	mov	r3, r0
 800375e:	2b00      	cmp	r3, #0
 8003760:	d001      	beq.n	8003766 <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 8003762:	2301      	movs	r3, #1
 8003764:	e08d      	b.n	8003882 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003766:	2300      	movs	r3, #0
 8003768:	613b      	str	r3, [r7, #16]
 800376a:	68fb      	ldr	r3, [r7, #12]
 800376c:	681b      	ldr	r3, [r3, #0]
 800376e:	695b      	ldr	r3, [r3, #20]
 8003770:	613b      	str	r3, [r7, #16]
 8003772:	68fb      	ldr	r3, [r7, #12]
 8003774:	681b      	ldr	r3, [r3, #0]
 8003776:	699b      	ldr	r3, [r3, #24]
 8003778:	613b      	str	r3, [r7, #16]
 800377a:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 800377c:	e066      	b.n	800384c <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800377e:	697a      	ldr	r2, [r7, #20]
 8003780:	6a39      	ldr	r1, [r7, #32]
 8003782:	68f8      	ldr	r0, [r7, #12]
 8003784:	f000 fd0c 	bl	80041a0 <I2C_WaitOnTXEFlagUntilTimeout>
 8003788:	4603      	mov	r3, r0
 800378a:	2b00      	cmp	r3, #0
 800378c:	d00d      	beq.n	80037aa <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800378e:	68fb      	ldr	r3, [r7, #12]
 8003790:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003792:	2b04      	cmp	r3, #4
 8003794:	d107      	bne.n	80037a6 <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003796:	68fb      	ldr	r3, [r7, #12]
 8003798:	681b      	ldr	r3, [r3, #0]
 800379a:	681a      	ldr	r2, [r3, #0]
 800379c:	68fb      	ldr	r3, [r7, #12]
 800379e:	681b      	ldr	r3, [r3, #0]
 80037a0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80037a4:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 80037a6:	2301      	movs	r3, #1
 80037a8:	e06b      	b.n	8003882 <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 80037aa:	68fb      	ldr	r3, [r7, #12]
 80037ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80037ae:	781a      	ldrb	r2, [r3, #0]
 80037b0:	68fb      	ldr	r3, [r7, #12]
 80037b2:	681b      	ldr	r3, [r3, #0]
 80037b4:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80037b6:	68fb      	ldr	r3, [r7, #12]
 80037b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80037ba:	1c5a      	adds	r2, r3, #1
 80037bc:	68fb      	ldr	r3, [r7, #12]
 80037be:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 80037c0:	68fb      	ldr	r3, [r7, #12]
 80037c2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80037c4:	b29b      	uxth	r3, r3
 80037c6:	3b01      	subs	r3, #1
 80037c8:	b29a      	uxth	r2, r3
 80037ca:	68fb      	ldr	r3, [r7, #12]
 80037cc:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 80037ce:	68fb      	ldr	r3, [r7, #12]
 80037d0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80037d2:	3b01      	subs	r3, #1
 80037d4:	b29a      	uxth	r2, r3
 80037d6:	68fb      	ldr	r3, [r7, #12]
 80037d8:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 80037da:	68fb      	ldr	r3, [r7, #12]
 80037dc:	681b      	ldr	r3, [r3, #0]
 80037de:	695b      	ldr	r3, [r3, #20]
 80037e0:	f003 0304 	and.w	r3, r3, #4
 80037e4:	2b04      	cmp	r3, #4
 80037e6:	d11b      	bne.n	8003820 <HAL_I2C_Master_Transmit+0x188>
 80037e8:	68fb      	ldr	r3, [r7, #12]
 80037ea:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80037ec:	2b00      	cmp	r3, #0
 80037ee:	d017      	beq.n	8003820 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 80037f0:	68fb      	ldr	r3, [r7, #12]
 80037f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80037f4:	781a      	ldrb	r2, [r3, #0]
 80037f6:	68fb      	ldr	r3, [r7, #12]
 80037f8:	681b      	ldr	r3, [r3, #0]
 80037fa:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 80037fc:	68fb      	ldr	r3, [r7, #12]
 80037fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003800:	1c5a      	adds	r2, r3, #1
 8003802:	68fb      	ldr	r3, [r7, #12]
 8003804:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferCount--;
 8003806:	68fb      	ldr	r3, [r7, #12]
 8003808:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800380a:	b29b      	uxth	r3, r3
 800380c:	3b01      	subs	r3, #1
 800380e:	b29a      	uxth	r2, r3
 8003810:	68fb      	ldr	r3, [r7, #12]
 8003812:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 8003814:	68fb      	ldr	r3, [r7, #12]
 8003816:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003818:	3b01      	subs	r3, #1
 800381a:	b29a      	uxth	r2, r3
 800381c:	68fb      	ldr	r3, [r7, #12]
 800381e:	851a      	strh	r2, [r3, #40]	; 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003820:	697a      	ldr	r2, [r7, #20]
 8003822:	6a39      	ldr	r1, [r7, #32]
 8003824:	68f8      	ldr	r0, [r7, #12]
 8003826:	f000 fcfc 	bl	8004222 <I2C_WaitOnBTFFlagUntilTimeout>
 800382a:	4603      	mov	r3, r0
 800382c:	2b00      	cmp	r3, #0
 800382e:	d00d      	beq.n	800384c <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003830:	68fb      	ldr	r3, [r7, #12]
 8003832:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003834:	2b04      	cmp	r3, #4
 8003836:	d107      	bne.n	8003848 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003838:	68fb      	ldr	r3, [r7, #12]
 800383a:	681b      	ldr	r3, [r3, #0]
 800383c:	681a      	ldr	r2, [r3, #0]
 800383e:	68fb      	ldr	r3, [r7, #12]
 8003840:	681b      	ldr	r3, [r3, #0]
 8003842:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003846:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8003848:	2301      	movs	r3, #1
 800384a:	e01a      	b.n	8003882 <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 800384c:	68fb      	ldr	r3, [r7, #12]
 800384e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003850:	2b00      	cmp	r3, #0
 8003852:	d194      	bne.n	800377e <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003854:	68fb      	ldr	r3, [r7, #12]
 8003856:	681b      	ldr	r3, [r3, #0]
 8003858:	681a      	ldr	r2, [r3, #0]
 800385a:	68fb      	ldr	r3, [r7, #12]
 800385c:	681b      	ldr	r3, [r3, #0]
 800385e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003862:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003864:	68fb      	ldr	r3, [r7, #12]
 8003866:	2220      	movs	r2, #32
 8003868:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800386c:	68fb      	ldr	r3, [r7, #12]
 800386e:	2200      	movs	r2, #0
 8003870:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003874:	68fb      	ldr	r3, [r7, #12]
 8003876:	2200      	movs	r2, #0
 8003878:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 800387c:	2300      	movs	r3, #0
 800387e:	e000      	b.n	8003882 <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 8003880:	2302      	movs	r3, #2
  }
}
 8003882:	4618      	mov	r0, r3
 8003884:	3718      	adds	r7, #24
 8003886:	46bd      	mov	sp, r7
 8003888:	bd80      	pop	{r7, pc}
 800388a:	bf00      	nop
 800388c:	00100002 	.word	0x00100002
 8003890:	ffff0000 	.word	0xffff0000

08003894 <HAL_I2C_Master_Receive>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003894:	b580      	push	{r7, lr}
 8003896:	b08c      	sub	sp, #48	; 0x30
 8003898:	af02      	add	r7, sp, #8
 800389a:	60f8      	str	r0, [r7, #12]
 800389c:	607a      	str	r2, [r7, #4]
 800389e:	461a      	mov	r2, r3
 80038a0:	460b      	mov	r3, r1
 80038a2:	817b      	strh	r3, [r7, #10]
 80038a4:	4613      	mov	r3, r2
 80038a6:	813b      	strh	r3, [r7, #8]
  __IO uint32_t count = 0U;
 80038a8:	2300      	movs	r3, #0
 80038aa:	623b      	str	r3, [r7, #32]

  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80038ac:	f7fe fde8 	bl	8002480 <HAL_GetTick>
 80038b0:	6278      	str	r0, [r7, #36]	; 0x24

  if (hi2c->State == HAL_I2C_STATE_READY)
 80038b2:	68fb      	ldr	r3, [r7, #12]
 80038b4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80038b8:	b2db      	uxtb	r3, r3
 80038ba:	2b20      	cmp	r3, #32
 80038bc:	f040 823f 	bne.w	8003d3e <HAL_I2C_Master_Receive+0x4aa>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80038c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80038c2:	9300      	str	r3, [sp, #0]
 80038c4:	2319      	movs	r3, #25
 80038c6:	2201      	movs	r2, #1
 80038c8:	497f      	ldr	r1, [pc, #508]	; (8003ac8 <HAL_I2C_Master_Receive+0x234>)
 80038ca:	68f8      	ldr	r0, [r7, #12]
 80038cc:	f000 fb92 	bl	8003ff4 <I2C_WaitOnFlagUntilTimeout>
 80038d0:	4603      	mov	r3, r0
 80038d2:	2b00      	cmp	r3, #0
 80038d4:	d001      	beq.n	80038da <HAL_I2C_Master_Receive+0x46>
    {
      return HAL_BUSY;
 80038d6:	2302      	movs	r3, #2
 80038d8:	e232      	b.n	8003d40 <HAL_I2C_Master_Receive+0x4ac>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80038da:	68fb      	ldr	r3, [r7, #12]
 80038dc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80038e0:	2b01      	cmp	r3, #1
 80038e2:	d101      	bne.n	80038e8 <HAL_I2C_Master_Receive+0x54>
 80038e4:	2302      	movs	r3, #2
 80038e6:	e22b      	b.n	8003d40 <HAL_I2C_Master_Receive+0x4ac>
 80038e8:	68fb      	ldr	r3, [r7, #12]
 80038ea:	2201      	movs	r2, #1
 80038ec:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80038f0:	68fb      	ldr	r3, [r7, #12]
 80038f2:	681b      	ldr	r3, [r3, #0]
 80038f4:	681b      	ldr	r3, [r3, #0]
 80038f6:	f003 0301 	and.w	r3, r3, #1
 80038fa:	2b01      	cmp	r3, #1
 80038fc:	d007      	beq.n	800390e <HAL_I2C_Master_Receive+0x7a>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80038fe:	68fb      	ldr	r3, [r7, #12]
 8003900:	681b      	ldr	r3, [r3, #0]
 8003902:	681a      	ldr	r2, [r3, #0]
 8003904:	68fb      	ldr	r3, [r7, #12]
 8003906:	681b      	ldr	r3, [r3, #0]
 8003908:	f042 0201 	orr.w	r2, r2, #1
 800390c:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800390e:	68fb      	ldr	r3, [r7, #12]
 8003910:	681b      	ldr	r3, [r3, #0]
 8003912:	681a      	ldr	r2, [r3, #0]
 8003914:	68fb      	ldr	r3, [r7, #12]
 8003916:	681b      	ldr	r3, [r3, #0]
 8003918:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800391c:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_RX;
 800391e:	68fb      	ldr	r3, [r7, #12]
 8003920:	2222      	movs	r2, #34	; 0x22
 8003922:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8003926:	68fb      	ldr	r3, [r7, #12]
 8003928:	2210      	movs	r2, #16
 800392a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 800392e:	68fb      	ldr	r3, [r7, #12]
 8003930:	2200      	movs	r2, #0
 8003932:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8003934:	68fb      	ldr	r3, [r7, #12]
 8003936:	687a      	ldr	r2, [r7, #4]
 8003938:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 800393a:	68fb      	ldr	r3, [r7, #12]
 800393c:	893a      	ldrh	r2, [r7, #8]
 800393e:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8003940:	68fb      	ldr	r3, [r7, #12]
 8003942:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003944:	b29a      	uxth	r2, r3
 8003946:	68fb      	ldr	r3, [r7, #12]
 8003948:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800394a:	68fb      	ldr	r3, [r7, #12]
 800394c:	4a5f      	ldr	r2, [pc, #380]	; (8003acc <HAL_I2C_Master_Receive+0x238>)
 800394e:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestRead(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8003950:	8979      	ldrh	r1, [r7, #10]
 8003952:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003954:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003956:	68f8      	ldr	r0, [r7, #12]
 8003958:	f000 fa7e 	bl	8003e58 <I2C_MasterRequestRead>
 800395c:	4603      	mov	r3, r0
 800395e:	2b00      	cmp	r3, #0
 8003960:	d001      	beq.n	8003966 <HAL_I2C_Master_Receive+0xd2>
    {
      return HAL_ERROR;
 8003962:	2301      	movs	r3, #1
 8003964:	e1ec      	b.n	8003d40 <HAL_I2C_Master_Receive+0x4ac>
    }

    if (hi2c->XferSize == 0U)
 8003966:	68fb      	ldr	r3, [r7, #12]
 8003968:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800396a:	2b00      	cmp	r3, #0
 800396c:	d113      	bne.n	8003996 <HAL_I2C_Master_Receive+0x102>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800396e:	2300      	movs	r3, #0
 8003970:	61fb      	str	r3, [r7, #28]
 8003972:	68fb      	ldr	r3, [r7, #12]
 8003974:	681b      	ldr	r3, [r3, #0]
 8003976:	695b      	ldr	r3, [r3, #20]
 8003978:	61fb      	str	r3, [r7, #28]
 800397a:	68fb      	ldr	r3, [r7, #12]
 800397c:	681b      	ldr	r3, [r3, #0]
 800397e:	699b      	ldr	r3, [r3, #24]
 8003980:	61fb      	str	r3, [r7, #28]
 8003982:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003984:	68fb      	ldr	r3, [r7, #12]
 8003986:	681b      	ldr	r3, [r3, #0]
 8003988:	681a      	ldr	r2, [r3, #0]
 800398a:	68fb      	ldr	r3, [r7, #12]
 800398c:	681b      	ldr	r3, [r3, #0]
 800398e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003992:	601a      	str	r2, [r3, #0]
 8003994:	e1c0      	b.n	8003d18 <HAL_I2C_Master_Receive+0x484>
    }
    else if (hi2c->XferSize == 1U)
 8003996:	68fb      	ldr	r3, [r7, #12]
 8003998:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800399a:	2b01      	cmp	r3, #1
 800399c:	d11e      	bne.n	80039dc <HAL_I2C_Master_Receive+0x148>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800399e:	68fb      	ldr	r3, [r7, #12]
 80039a0:	681b      	ldr	r3, [r3, #0]
 80039a2:	681a      	ldr	r2, [r3, #0]
 80039a4:	68fb      	ldr	r3, [r7, #12]
 80039a6:	681b      	ldr	r3, [r3, #0]
 80039a8:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80039ac:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 80039ae:	b672      	cpsid	i
}
 80039b0:	bf00      	nop
      /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
      software sequence must complete before the current byte end of transfer */
      __disable_irq();

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80039b2:	2300      	movs	r3, #0
 80039b4:	61bb      	str	r3, [r7, #24]
 80039b6:	68fb      	ldr	r3, [r7, #12]
 80039b8:	681b      	ldr	r3, [r3, #0]
 80039ba:	695b      	ldr	r3, [r3, #20]
 80039bc:	61bb      	str	r3, [r7, #24]
 80039be:	68fb      	ldr	r3, [r7, #12]
 80039c0:	681b      	ldr	r3, [r3, #0]
 80039c2:	699b      	ldr	r3, [r3, #24]
 80039c4:	61bb      	str	r3, [r7, #24]
 80039c6:	69bb      	ldr	r3, [r7, #24]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80039c8:	68fb      	ldr	r3, [r7, #12]
 80039ca:	681b      	ldr	r3, [r3, #0]
 80039cc:	681a      	ldr	r2, [r3, #0]
 80039ce:	68fb      	ldr	r3, [r7, #12]
 80039d0:	681b      	ldr	r3, [r3, #0]
 80039d2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80039d6:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 80039d8:	b662      	cpsie	i
}
 80039da:	e035      	b.n	8003a48 <HAL_I2C_Master_Receive+0x1b4>

      /* Re-enable IRQs */
      __enable_irq();
    }
    else if (hi2c->XferSize == 2U)
 80039dc:	68fb      	ldr	r3, [r7, #12]
 80039de:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80039e0:	2b02      	cmp	r3, #2
 80039e2:	d11e      	bne.n	8003a22 <HAL_I2C_Master_Receive+0x18e>
    {
      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80039e4:	68fb      	ldr	r3, [r7, #12]
 80039e6:	681b      	ldr	r3, [r3, #0]
 80039e8:	681a      	ldr	r2, [r3, #0]
 80039ea:	68fb      	ldr	r3, [r7, #12]
 80039ec:	681b      	ldr	r3, [r3, #0]
 80039ee:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80039f2:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 80039f4:	b672      	cpsid	i
}
 80039f6:	bf00      	nop
      /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
      software sequence must complete before the current byte end of transfer */
      __disable_irq();

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80039f8:	2300      	movs	r3, #0
 80039fa:	617b      	str	r3, [r7, #20]
 80039fc:	68fb      	ldr	r3, [r7, #12]
 80039fe:	681b      	ldr	r3, [r3, #0]
 8003a00:	695b      	ldr	r3, [r3, #20]
 8003a02:	617b      	str	r3, [r7, #20]
 8003a04:	68fb      	ldr	r3, [r7, #12]
 8003a06:	681b      	ldr	r3, [r3, #0]
 8003a08:	699b      	ldr	r3, [r3, #24]
 8003a0a:	617b      	str	r3, [r7, #20]
 8003a0c:	697b      	ldr	r3, [r7, #20]

      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003a0e:	68fb      	ldr	r3, [r7, #12]
 8003a10:	681b      	ldr	r3, [r3, #0]
 8003a12:	681a      	ldr	r2, [r3, #0]
 8003a14:	68fb      	ldr	r3, [r7, #12]
 8003a16:	681b      	ldr	r3, [r3, #0]
 8003a18:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003a1c:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 8003a1e:	b662      	cpsie	i
}
 8003a20:	e012      	b.n	8003a48 <HAL_I2C_Master_Receive+0x1b4>
      __enable_irq();
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003a22:	68fb      	ldr	r3, [r7, #12]
 8003a24:	681b      	ldr	r3, [r3, #0]
 8003a26:	681a      	ldr	r2, [r3, #0]
 8003a28:	68fb      	ldr	r3, [r7, #12]
 8003a2a:	681b      	ldr	r3, [r3, #0]
 8003a2c:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8003a30:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003a32:	2300      	movs	r3, #0
 8003a34:	613b      	str	r3, [r7, #16]
 8003a36:	68fb      	ldr	r3, [r7, #12]
 8003a38:	681b      	ldr	r3, [r3, #0]
 8003a3a:	695b      	ldr	r3, [r3, #20]
 8003a3c:	613b      	str	r3, [r7, #16]
 8003a3e:	68fb      	ldr	r3, [r7, #12]
 8003a40:	681b      	ldr	r3, [r3, #0]
 8003a42:	699b      	ldr	r3, [r3, #24]
 8003a44:	613b      	str	r3, [r7, #16]
 8003a46:	693b      	ldr	r3, [r7, #16]
    }

    while (hi2c->XferSize > 0U)
 8003a48:	e166      	b.n	8003d18 <HAL_I2C_Master_Receive+0x484>
    {
      if (hi2c->XferSize <= 3U)
 8003a4a:	68fb      	ldr	r3, [r7, #12]
 8003a4c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003a4e:	2b03      	cmp	r3, #3
 8003a50:	f200 811f 	bhi.w	8003c92 <HAL_I2C_Master_Receive+0x3fe>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8003a54:	68fb      	ldr	r3, [r7, #12]
 8003a56:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003a58:	2b01      	cmp	r3, #1
 8003a5a:	d123      	bne.n	8003aa4 <HAL_I2C_Master_Receive+0x210>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003a5c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003a5e:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8003a60:	68f8      	ldr	r0, [r7, #12]
 8003a62:	f000 fc1f 	bl	80042a4 <I2C_WaitOnRXNEFlagUntilTimeout>
 8003a66:	4603      	mov	r3, r0
 8003a68:	2b00      	cmp	r3, #0
 8003a6a:	d001      	beq.n	8003a70 <HAL_I2C_Master_Receive+0x1dc>
          {
            return HAL_ERROR;
 8003a6c:	2301      	movs	r3, #1
 8003a6e:	e167      	b.n	8003d40 <HAL_I2C_Master_Receive+0x4ac>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003a70:	68fb      	ldr	r3, [r7, #12]
 8003a72:	681b      	ldr	r3, [r3, #0]
 8003a74:	691a      	ldr	r2, [r3, #16]
 8003a76:	68fb      	ldr	r3, [r7, #12]
 8003a78:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a7a:	b2d2      	uxtb	r2, r2
 8003a7c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003a7e:	68fb      	ldr	r3, [r7, #12]
 8003a80:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a82:	1c5a      	adds	r2, r3, #1
 8003a84:	68fb      	ldr	r3, [r7, #12]
 8003a86:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003a88:	68fb      	ldr	r3, [r7, #12]
 8003a8a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003a8c:	3b01      	subs	r3, #1
 8003a8e:	b29a      	uxth	r2, r3
 8003a90:	68fb      	ldr	r3, [r7, #12]
 8003a92:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003a94:	68fb      	ldr	r3, [r7, #12]
 8003a96:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003a98:	b29b      	uxth	r3, r3
 8003a9a:	3b01      	subs	r3, #1
 8003a9c:	b29a      	uxth	r2, r3
 8003a9e:	68fb      	ldr	r3, [r7, #12]
 8003aa0:	855a      	strh	r2, [r3, #42]	; 0x2a
 8003aa2:	e139      	b.n	8003d18 <HAL_I2C_Master_Receive+0x484>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8003aa4:	68fb      	ldr	r3, [r7, #12]
 8003aa6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003aa8:	2b02      	cmp	r3, #2
 8003aaa:	d152      	bne.n	8003b52 <HAL_I2C_Master_Receive+0x2be>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8003aac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003aae:	9300      	str	r3, [sp, #0]
 8003ab0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003ab2:	2200      	movs	r2, #0
 8003ab4:	4906      	ldr	r1, [pc, #24]	; (8003ad0 <HAL_I2C_Master_Receive+0x23c>)
 8003ab6:	68f8      	ldr	r0, [r7, #12]
 8003ab8:	f000 fa9c 	bl	8003ff4 <I2C_WaitOnFlagUntilTimeout>
 8003abc:	4603      	mov	r3, r0
 8003abe:	2b00      	cmp	r3, #0
 8003ac0:	d008      	beq.n	8003ad4 <HAL_I2C_Master_Receive+0x240>
          {
            return HAL_ERROR;
 8003ac2:	2301      	movs	r3, #1
 8003ac4:	e13c      	b.n	8003d40 <HAL_I2C_Master_Receive+0x4ac>
 8003ac6:	bf00      	nop
 8003ac8:	00100002 	.word	0x00100002
 8003acc:	ffff0000 	.word	0xffff0000
 8003ad0:	00010004 	.word	0x00010004
  __ASM volatile ("cpsid i" : : : "memory");
 8003ad4:	b672      	cpsid	i
}
 8003ad6:	bf00      	nop
          /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
             software sequence must complete before the current byte end of transfer */
          __disable_irq();

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003ad8:	68fb      	ldr	r3, [r7, #12]
 8003ada:	681b      	ldr	r3, [r3, #0]
 8003adc:	681a      	ldr	r2, [r3, #0]
 8003ade:	68fb      	ldr	r3, [r7, #12]
 8003ae0:	681b      	ldr	r3, [r3, #0]
 8003ae2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003ae6:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003ae8:	68fb      	ldr	r3, [r7, #12]
 8003aea:	681b      	ldr	r3, [r3, #0]
 8003aec:	691a      	ldr	r2, [r3, #16]
 8003aee:	68fb      	ldr	r3, [r7, #12]
 8003af0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003af2:	b2d2      	uxtb	r2, r2
 8003af4:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003af6:	68fb      	ldr	r3, [r7, #12]
 8003af8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003afa:	1c5a      	adds	r2, r3, #1
 8003afc:	68fb      	ldr	r3, [r7, #12]
 8003afe:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003b00:	68fb      	ldr	r3, [r7, #12]
 8003b02:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003b04:	3b01      	subs	r3, #1
 8003b06:	b29a      	uxth	r2, r3
 8003b08:	68fb      	ldr	r3, [r7, #12]
 8003b0a:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003b0c:	68fb      	ldr	r3, [r7, #12]
 8003b0e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003b10:	b29b      	uxth	r3, r3
 8003b12:	3b01      	subs	r3, #1
 8003b14:	b29a      	uxth	r2, r3
 8003b16:	68fb      	ldr	r3, [r7, #12]
 8003b18:	855a      	strh	r2, [r3, #42]	; 0x2a
  __ASM volatile ("cpsie i" : : : "memory");
 8003b1a:	b662      	cpsie	i
}
 8003b1c:	bf00      	nop

          /* Re-enable IRQs */
          __enable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003b1e:	68fb      	ldr	r3, [r7, #12]
 8003b20:	681b      	ldr	r3, [r3, #0]
 8003b22:	691a      	ldr	r2, [r3, #16]
 8003b24:	68fb      	ldr	r3, [r7, #12]
 8003b26:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b28:	b2d2      	uxtb	r2, r2
 8003b2a:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003b2c:	68fb      	ldr	r3, [r7, #12]
 8003b2e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b30:	1c5a      	adds	r2, r3, #1
 8003b32:	68fb      	ldr	r3, [r7, #12]
 8003b34:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003b36:	68fb      	ldr	r3, [r7, #12]
 8003b38:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003b3a:	3b01      	subs	r3, #1
 8003b3c:	b29a      	uxth	r2, r3
 8003b3e:	68fb      	ldr	r3, [r7, #12]
 8003b40:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003b42:	68fb      	ldr	r3, [r7, #12]
 8003b44:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003b46:	b29b      	uxth	r3, r3
 8003b48:	3b01      	subs	r3, #1
 8003b4a:	b29a      	uxth	r2, r3
 8003b4c:	68fb      	ldr	r3, [r7, #12]
 8003b4e:	855a      	strh	r2, [r3, #42]	; 0x2a
 8003b50:	e0e2      	b.n	8003d18 <HAL_I2C_Master_Receive+0x484>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8003b52:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b54:	9300      	str	r3, [sp, #0]
 8003b56:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003b58:	2200      	movs	r2, #0
 8003b5a:	497b      	ldr	r1, [pc, #492]	; (8003d48 <HAL_I2C_Master_Receive+0x4b4>)
 8003b5c:	68f8      	ldr	r0, [r7, #12]
 8003b5e:	f000 fa49 	bl	8003ff4 <I2C_WaitOnFlagUntilTimeout>
 8003b62:	4603      	mov	r3, r0
 8003b64:	2b00      	cmp	r3, #0
 8003b66:	d001      	beq.n	8003b6c <HAL_I2C_Master_Receive+0x2d8>
          {
            return HAL_ERROR;
 8003b68:	2301      	movs	r3, #1
 8003b6a:	e0e9      	b.n	8003d40 <HAL_I2C_Master_Receive+0x4ac>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003b6c:	68fb      	ldr	r3, [r7, #12]
 8003b6e:	681b      	ldr	r3, [r3, #0]
 8003b70:	681a      	ldr	r2, [r3, #0]
 8003b72:	68fb      	ldr	r3, [r7, #12]
 8003b74:	681b      	ldr	r3, [r3, #0]
 8003b76:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003b7a:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 8003b7c:	b672      	cpsid	i
}
 8003b7e:	bf00      	nop
          /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
             software sequence must complete before the current byte end of transfer */
          __disable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003b80:	68fb      	ldr	r3, [r7, #12]
 8003b82:	681b      	ldr	r3, [r3, #0]
 8003b84:	691a      	ldr	r2, [r3, #16]
 8003b86:	68fb      	ldr	r3, [r7, #12]
 8003b88:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b8a:	b2d2      	uxtb	r2, r2
 8003b8c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003b8e:	68fb      	ldr	r3, [r7, #12]
 8003b90:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b92:	1c5a      	adds	r2, r3, #1
 8003b94:	68fb      	ldr	r3, [r7, #12]
 8003b96:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003b98:	68fb      	ldr	r3, [r7, #12]
 8003b9a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003b9c:	3b01      	subs	r3, #1
 8003b9e:	b29a      	uxth	r2, r3
 8003ba0:	68fb      	ldr	r3, [r7, #12]
 8003ba2:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003ba4:	68fb      	ldr	r3, [r7, #12]
 8003ba6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003ba8:	b29b      	uxth	r3, r3
 8003baa:	3b01      	subs	r3, #1
 8003bac:	b29a      	uxth	r2, r3
 8003bae:	68fb      	ldr	r3, [r7, #12]
 8003bb0:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 8003bb2:	4b66      	ldr	r3, [pc, #408]	; (8003d4c <HAL_I2C_Master_Receive+0x4b8>)
 8003bb4:	681b      	ldr	r3, [r3, #0]
 8003bb6:	08db      	lsrs	r3, r3, #3
 8003bb8:	4a65      	ldr	r2, [pc, #404]	; (8003d50 <HAL_I2C_Master_Receive+0x4bc>)
 8003bba:	fba2 2303 	umull	r2, r3, r2, r3
 8003bbe:	0a1a      	lsrs	r2, r3, #8
 8003bc0:	4613      	mov	r3, r2
 8003bc2:	009b      	lsls	r3, r3, #2
 8003bc4:	4413      	add	r3, r2
 8003bc6:	00da      	lsls	r2, r3, #3
 8003bc8:	1ad3      	subs	r3, r2, r3
 8003bca:	623b      	str	r3, [r7, #32]
          do
          {
            count--;
 8003bcc:	6a3b      	ldr	r3, [r7, #32]
 8003bce:	3b01      	subs	r3, #1
 8003bd0:	623b      	str	r3, [r7, #32]
            if (count == 0U)
 8003bd2:	6a3b      	ldr	r3, [r7, #32]
 8003bd4:	2b00      	cmp	r3, #0
 8003bd6:	d118      	bne.n	8003c0a <HAL_I2C_Master_Receive+0x376>
            {
              hi2c->PreviousState       = I2C_STATE_NONE;
 8003bd8:	68fb      	ldr	r3, [r7, #12]
 8003bda:	2200      	movs	r2, #0
 8003bdc:	631a      	str	r2, [r3, #48]	; 0x30
              hi2c->State               = HAL_I2C_STATE_READY;
 8003bde:	68fb      	ldr	r3, [r7, #12]
 8003be0:	2220      	movs	r2, #32
 8003be2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
              hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003be6:	68fb      	ldr	r3, [r7, #12]
 8003be8:	2200      	movs	r2, #0
 8003bea:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
              hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003bee:	68fb      	ldr	r3, [r7, #12]
 8003bf0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003bf2:	f043 0220 	orr.w	r2, r3, #32
 8003bf6:	68fb      	ldr	r3, [r7, #12]
 8003bf8:	641a      	str	r2, [r3, #64]	; 0x40
  __ASM volatile ("cpsie i" : : : "memory");
 8003bfa:	b662      	cpsie	i
}
 8003bfc:	bf00      	nop

              /* Re-enable IRQs */
              __enable_irq();

              /* Process Unlocked */
              __HAL_UNLOCK(hi2c);
 8003bfe:	68fb      	ldr	r3, [r7, #12]
 8003c00:	2200      	movs	r2, #0
 8003c02:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

              return HAL_ERROR;
 8003c06:	2301      	movs	r3, #1
 8003c08:	e09a      	b.n	8003d40 <HAL_I2C_Master_Receive+0x4ac>
            }
          }
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET);
 8003c0a:	68fb      	ldr	r3, [r7, #12]
 8003c0c:	681b      	ldr	r3, [r3, #0]
 8003c0e:	695b      	ldr	r3, [r3, #20]
 8003c10:	f003 0304 	and.w	r3, r3, #4
 8003c14:	2b04      	cmp	r3, #4
 8003c16:	d1d9      	bne.n	8003bcc <HAL_I2C_Master_Receive+0x338>

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003c18:	68fb      	ldr	r3, [r7, #12]
 8003c1a:	681b      	ldr	r3, [r3, #0]
 8003c1c:	681a      	ldr	r2, [r3, #0]
 8003c1e:	68fb      	ldr	r3, [r7, #12]
 8003c20:	681b      	ldr	r3, [r3, #0]
 8003c22:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003c26:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003c28:	68fb      	ldr	r3, [r7, #12]
 8003c2a:	681b      	ldr	r3, [r3, #0]
 8003c2c:	691a      	ldr	r2, [r3, #16]
 8003c2e:	68fb      	ldr	r3, [r7, #12]
 8003c30:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c32:	b2d2      	uxtb	r2, r2
 8003c34:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003c36:	68fb      	ldr	r3, [r7, #12]
 8003c38:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c3a:	1c5a      	adds	r2, r3, #1
 8003c3c:	68fb      	ldr	r3, [r7, #12]
 8003c3e:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003c40:	68fb      	ldr	r3, [r7, #12]
 8003c42:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003c44:	3b01      	subs	r3, #1
 8003c46:	b29a      	uxth	r2, r3
 8003c48:	68fb      	ldr	r3, [r7, #12]
 8003c4a:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003c4c:	68fb      	ldr	r3, [r7, #12]
 8003c4e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003c50:	b29b      	uxth	r3, r3
 8003c52:	3b01      	subs	r3, #1
 8003c54:	b29a      	uxth	r2, r3
 8003c56:	68fb      	ldr	r3, [r7, #12]
 8003c58:	855a      	strh	r2, [r3, #42]	; 0x2a
  __ASM volatile ("cpsie i" : : : "memory");
 8003c5a:	b662      	cpsie	i
}
 8003c5c:	bf00      	nop

          /* Re-enable IRQs */
          __enable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003c5e:	68fb      	ldr	r3, [r7, #12]
 8003c60:	681b      	ldr	r3, [r3, #0]
 8003c62:	691a      	ldr	r2, [r3, #16]
 8003c64:	68fb      	ldr	r3, [r7, #12]
 8003c66:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c68:	b2d2      	uxtb	r2, r2
 8003c6a:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003c6c:	68fb      	ldr	r3, [r7, #12]
 8003c6e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c70:	1c5a      	adds	r2, r3, #1
 8003c72:	68fb      	ldr	r3, [r7, #12]
 8003c74:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003c76:	68fb      	ldr	r3, [r7, #12]
 8003c78:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003c7a:	3b01      	subs	r3, #1
 8003c7c:	b29a      	uxth	r2, r3
 8003c7e:	68fb      	ldr	r3, [r7, #12]
 8003c80:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003c82:	68fb      	ldr	r3, [r7, #12]
 8003c84:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003c86:	b29b      	uxth	r3, r3
 8003c88:	3b01      	subs	r3, #1
 8003c8a:	b29a      	uxth	r2, r3
 8003c8c:	68fb      	ldr	r3, [r7, #12]
 8003c8e:	855a      	strh	r2, [r3, #42]	; 0x2a
 8003c90:	e042      	b.n	8003d18 <HAL_I2C_Master_Receive+0x484>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003c92:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003c94:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8003c96:	68f8      	ldr	r0, [r7, #12]
 8003c98:	f000 fb04 	bl	80042a4 <I2C_WaitOnRXNEFlagUntilTimeout>
 8003c9c:	4603      	mov	r3, r0
 8003c9e:	2b00      	cmp	r3, #0
 8003ca0:	d001      	beq.n	8003ca6 <HAL_I2C_Master_Receive+0x412>
        {
          return HAL_ERROR;
 8003ca2:	2301      	movs	r3, #1
 8003ca4:	e04c      	b.n	8003d40 <HAL_I2C_Master_Receive+0x4ac>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003ca6:	68fb      	ldr	r3, [r7, #12]
 8003ca8:	681b      	ldr	r3, [r3, #0]
 8003caa:	691a      	ldr	r2, [r3, #16]
 8003cac:	68fb      	ldr	r3, [r7, #12]
 8003cae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003cb0:	b2d2      	uxtb	r2, r2
 8003cb2:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8003cb4:	68fb      	ldr	r3, [r7, #12]
 8003cb6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003cb8:	1c5a      	adds	r2, r3, #1
 8003cba:	68fb      	ldr	r3, [r7, #12]
 8003cbc:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8003cbe:	68fb      	ldr	r3, [r7, #12]
 8003cc0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003cc2:	3b01      	subs	r3, #1
 8003cc4:	b29a      	uxth	r2, r3
 8003cc6:	68fb      	ldr	r3, [r7, #12]
 8003cc8:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8003cca:	68fb      	ldr	r3, [r7, #12]
 8003ccc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003cce:	b29b      	uxth	r3, r3
 8003cd0:	3b01      	subs	r3, #1
 8003cd2:	b29a      	uxth	r2, r3
 8003cd4:	68fb      	ldr	r3, [r7, #12]
 8003cd6:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8003cd8:	68fb      	ldr	r3, [r7, #12]
 8003cda:	681b      	ldr	r3, [r3, #0]
 8003cdc:	695b      	ldr	r3, [r3, #20]
 8003cde:	f003 0304 	and.w	r3, r3, #4
 8003ce2:	2b04      	cmp	r3, #4
 8003ce4:	d118      	bne.n	8003d18 <HAL_I2C_Master_Receive+0x484>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003ce6:	68fb      	ldr	r3, [r7, #12]
 8003ce8:	681b      	ldr	r3, [r3, #0]
 8003cea:	691a      	ldr	r2, [r3, #16]
 8003cec:	68fb      	ldr	r3, [r7, #12]
 8003cee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003cf0:	b2d2      	uxtb	r2, r2
 8003cf2:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003cf4:	68fb      	ldr	r3, [r7, #12]
 8003cf6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003cf8:	1c5a      	adds	r2, r3, #1
 8003cfa:	68fb      	ldr	r3, [r7, #12]
 8003cfc:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003cfe:	68fb      	ldr	r3, [r7, #12]
 8003d00:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003d02:	3b01      	subs	r3, #1
 8003d04:	b29a      	uxth	r2, r3
 8003d06:	68fb      	ldr	r3, [r7, #12]
 8003d08:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003d0a:	68fb      	ldr	r3, [r7, #12]
 8003d0c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003d0e:	b29b      	uxth	r3, r3
 8003d10:	3b01      	subs	r3, #1
 8003d12:	b29a      	uxth	r2, r3
 8003d14:	68fb      	ldr	r3, [r7, #12]
 8003d16:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8003d18:	68fb      	ldr	r3, [r7, #12]
 8003d1a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003d1c:	2b00      	cmp	r3, #0
 8003d1e:	f47f ae94 	bne.w	8003a4a <HAL_I2C_Master_Receive+0x1b6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 8003d22:	68fb      	ldr	r3, [r7, #12]
 8003d24:	2220      	movs	r2, #32
 8003d26:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8003d2a:	68fb      	ldr	r3, [r7, #12]
 8003d2c:	2200      	movs	r2, #0
 8003d2e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003d32:	68fb      	ldr	r3, [r7, #12]
 8003d34:	2200      	movs	r2, #0
 8003d36:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8003d3a:	2300      	movs	r3, #0
 8003d3c:	e000      	b.n	8003d40 <HAL_I2C_Master_Receive+0x4ac>
  }
  else
  {
    return HAL_BUSY;
 8003d3e:	2302      	movs	r3, #2
  }
}
 8003d40:	4618      	mov	r0, r3
 8003d42:	3728      	adds	r7, #40	; 0x28
 8003d44:	46bd      	mov	sp, r7
 8003d46:	bd80      	pop	{r7, pc}
 8003d48:	00010004 	.word	0x00010004
 8003d4c:	20000000 	.word	0x20000000
 8003d50:	14f8b589 	.word	0x14f8b589

08003d54 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8003d54:	b580      	push	{r7, lr}
 8003d56:	b088      	sub	sp, #32
 8003d58:	af02      	add	r7, sp, #8
 8003d5a:	60f8      	str	r0, [r7, #12]
 8003d5c:	607a      	str	r2, [r7, #4]
 8003d5e:	603b      	str	r3, [r7, #0]
 8003d60:	460b      	mov	r3, r1
 8003d62:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8003d64:	68fb      	ldr	r3, [r7, #12]
 8003d66:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003d68:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8003d6a:	697b      	ldr	r3, [r7, #20]
 8003d6c:	2b08      	cmp	r3, #8
 8003d6e:	d006      	beq.n	8003d7e <I2C_MasterRequestWrite+0x2a>
 8003d70:	697b      	ldr	r3, [r7, #20]
 8003d72:	2b01      	cmp	r3, #1
 8003d74:	d003      	beq.n	8003d7e <I2C_MasterRequestWrite+0x2a>
 8003d76:	697b      	ldr	r3, [r7, #20]
 8003d78:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8003d7c:	d108      	bne.n	8003d90 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003d7e:	68fb      	ldr	r3, [r7, #12]
 8003d80:	681b      	ldr	r3, [r3, #0]
 8003d82:	681a      	ldr	r2, [r3, #0]
 8003d84:	68fb      	ldr	r3, [r7, #12]
 8003d86:	681b      	ldr	r3, [r3, #0]
 8003d88:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003d8c:	601a      	str	r2, [r3, #0]
 8003d8e:	e00b      	b.n	8003da8 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 8003d90:	68fb      	ldr	r3, [r7, #12]
 8003d92:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003d94:	2b12      	cmp	r3, #18
 8003d96:	d107      	bne.n	8003da8 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003d98:	68fb      	ldr	r3, [r7, #12]
 8003d9a:	681b      	ldr	r3, [r3, #0]
 8003d9c:	681a      	ldr	r2, [r3, #0]
 8003d9e:	68fb      	ldr	r3, [r7, #12]
 8003da0:	681b      	ldr	r3, [r3, #0]
 8003da2:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003da6:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8003da8:	683b      	ldr	r3, [r7, #0]
 8003daa:	9300      	str	r3, [sp, #0]
 8003dac:	687b      	ldr	r3, [r7, #4]
 8003dae:	2200      	movs	r2, #0
 8003db0:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8003db4:	68f8      	ldr	r0, [r7, #12]
 8003db6:	f000 f91d 	bl	8003ff4 <I2C_WaitOnFlagUntilTimeout>
 8003dba:	4603      	mov	r3, r0
 8003dbc:	2b00      	cmp	r3, #0
 8003dbe:	d00d      	beq.n	8003ddc <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8003dc0:	68fb      	ldr	r3, [r7, #12]
 8003dc2:	681b      	ldr	r3, [r3, #0]
 8003dc4:	681b      	ldr	r3, [r3, #0]
 8003dc6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003dca:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003dce:	d103      	bne.n	8003dd8 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8003dd0:	68fb      	ldr	r3, [r7, #12]
 8003dd2:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003dd6:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8003dd8:	2303      	movs	r3, #3
 8003dda:	e035      	b.n	8003e48 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8003ddc:	68fb      	ldr	r3, [r7, #12]
 8003dde:	691b      	ldr	r3, [r3, #16]
 8003de0:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8003de4:	d108      	bne.n	8003df8 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8003de6:	897b      	ldrh	r3, [r7, #10]
 8003de8:	b2db      	uxtb	r3, r3
 8003dea:	461a      	mov	r2, r3
 8003dec:	68fb      	ldr	r3, [r7, #12]
 8003dee:	681b      	ldr	r3, [r3, #0]
 8003df0:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8003df4:	611a      	str	r2, [r3, #16]
 8003df6:	e01b      	b.n	8003e30 <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8003df8:	897b      	ldrh	r3, [r7, #10]
 8003dfa:	11db      	asrs	r3, r3, #7
 8003dfc:	b2db      	uxtb	r3, r3
 8003dfe:	f003 0306 	and.w	r3, r3, #6
 8003e02:	b2db      	uxtb	r3, r3
 8003e04:	f063 030f 	orn	r3, r3, #15
 8003e08:	b2da      	uxtb	r2, r3
 8003e0a:	68fb      	ldr	r3, [r7, #12]
 8003e0c:	681b      	ldr	r3, [r3, #0]
 8003e0e:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8003e10:	683b      	ldr	r3, [r7, #0]
 8003e12:	687a      	ldr	r2, [r7, #4]
 8003e14:	490e      	ldr	r1, [pc, #56]	; (8003e50 <I2C_MasterRequestWrite+0xfc>)
 8003e16:	68f8      	ldr	r0, [r7, #12]
 8003e18:	f000 f943 	bl	80040a2 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003e1c:	4603      	mov	r3, r0
 8003e1e:	2b00      	cmp	r3, #0
 8003e20:	d001      	beq.n	8003e26 <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 8003e22:	2301      	movs	r3, #1
 8003e24:	e010      	b.n	8003e48 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8003e26:	897b      	ldrh	r3, [r7, #10]
 8003e28:	b2da      	uxtb	r2, r3
 8003e2a:	68fb      	ldr	r3, [r7, #12]
 8003e2c:	681b      	ldr	r3, [r3, #0]
 8003e2e:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8003e30:	683b      	ldr	r3, [r7, #0]
 8003e32:	687a      	ldr	r2, [r7, #4]
 8003e34:	4907      	ldr	r1, [pc, #28]	; (8003e54 <I2C_MasterRequestWrite+0x100>)
 8003e36:	68f8      	ldr	r0, [r7, #12]
 8003e38:	f000 f933 	bl	80040a2 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003e3c:	4603      	mov	r3, r0
 8003e3e:	2b00      	cmp	r3, #0
 8003e40:	d001      	beq.n	8003e46 <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 8003e42:	2301      	movs	r3, #1
 8003e44:	e000      	b.n	8003e48 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 8003e46:	2300      	movs	r3, #0
}
 8003e48:	4618      	mov	r0, r3
 8003e4a:	3718      	adds	r7, #24
 8003e4c:	46bd      	mov	sp, r7
 8003e4e:	bd80      	pop	{r7, pc}
 8003e50:	00010008 	.word	0x00010008
 8003e54:	00010002 	.word	0x00010002

08003e58 <I2C_MasterRequestRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8003e58:	b580      	push	{r7, lr}
 8003e5a:	b088      	sub	sp, #32
 8003e5c:	af02      	add	r7, sp, #8
 8003e5e:	60f8      	str	r0, [r7, #12]
 8003e60:	607a      	str	r2, [r7, #4]
 8003e62:	603b      	str	r3, [r7, #0]
 8003e64:	460b      	mov	r3, r1
 8003e66:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8003e68:	68fb      	ldr	r3, [r7, #12]
 8003e6a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003e6c:	617b      	str	r3, [r7, #20]

  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003e6e:	68fb      	ldr	r3, [r7, #12]
 8003e70:	681b      	ldr	r3, [r3, #0]
 8003e72:	681a      	ldr	r2, [r3, #0]
 8003e74:	68fb      	ldr	r3, [r7, #12]
 8003e76:	681b      	ldr	r3, [r3, #0]
 8003e78:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8003e7c:	601a      	str	r2, [r3, #0]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME)  || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8003e7e:	697b      	ldr	r3, [r7, #20]
 8003e80:	2b08      	cmp	r3, #8
 8003e82:	d006      	beq.n	8003e92 <I2C_MasterRequestRead+0x3a>
 8003e84:	697b      	ldr	r3, [r7, #20]
 8003e86:	2b01      	cmp	r3, #1
 8003e88:	d003      	beq.n	8003e92 <I2C_MasterRequestRead+0x3a>
 8003e8a:	697b      	ldr	r3, [r7, #20]
 8003e8c:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8003e90:	d108      	bne.n	8003ea4 <I2C_MasterRequestRead+0x4c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003e92:	68fb      	ldr	r3, [r7, #12]
 8003e94:	681b      	ldr	r3, [r3, #0]
 8003e96:	681a      	ldr	r2, [r3, #0]
 8003e98:	68fb      	ldr	r3, [r7, #12]
 8003e9a:	681b      	ldr	r3, [r3, #0]
 8003e9c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003ea0:	601a      	str	r2, [r3, #0]
 8003ea2:	e00b      	b.n	8003ebc <I2C_MasterRequestRead+0x64>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_TX)
 8003ea4:	68fb      	ldr	r3, [r7, #12]
 8003ea6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003ea8:	2b11      	cmp	r3, #17
 8003eaa:	d107      	bne.n	8003ebc <I2C_MasterRequestRead+0x64>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003eac:	68fb      	ldr	r3, [r7, #12]
 8003eae:	681b      	ldr	r3, [r3, #0]
 8003eb0:	681a      	ldr	r2, [r3, #0]
 8003eb2:	68fb      	ldr	r3, [r7, #12]
 8003eb4:	681b      	ldr	r3, [r3, #0]
 8003eb6:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003eba:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8003ebc:	683b      	ldr	r3, [r7, #0]
 8003ebe:	9300      	str	r3, [sp, #0]
 8003ec0:	687b      	ldr	r3, [r7, #4]
 8003ec2:	2200      	movs	r2, #0
 8003ec4:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8003ec8:	68f8      	ldr	r0, [r7, #12]
 8003eca:	f000 f893 	bl	8003ff4 <I2C_WaitOnFlagUntilTimeout>
 8003ece:	4603      	mov	r3, r0
 8003ed0:	2b00      	cmp	r3, #0
 8003ed2:	d00d      	beq.n	8003ef0 <I2C_MasterRequestRead+0x98>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8003ed4:	68fb      	ldr	r3, [r7, #12]
 8003ed6:	681b      	ldr	r3, [r3, #0]
 8003ed8:	681b      	ldr	r3, [r3, #0]
 8003eda:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003ede:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003ee2:	d103      	bne.n	8003eec <I2C_MasterRequestRead+0x94>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8003ee4:	68fb      	ldr	r3, [r7, #12]
 8003ee6:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003eea:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8003eec:	2303      	movs	r3, #3
 8003eee:	e079      	b.n	8003fe4 <I2C_MasterRequestRead+0x18c>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8003ef0:	68fb      	ldr	r3, [r7, #12]
 8003ef2:	691b      	ldr	r3, [r3, #16]
 8003ef4:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8003ef8:	d108      	bne.n	8003f0c <I2C_MasterRequestRead+0xb4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8003efa:	897b      	ldrh	r3, [r7, #10]
 8003efc:	b2db      	uxtb	r3, r3
 8003efe:	f043 0301 	orr.w	r3, r3, #1
 8003f02:	b2da      	uxtb	r2, r3
 8003f04:	68fb      	ldr	r3, [r7, #12]
 8003f06:	681b      	ldr	r3, [r3, #0]
 8003f08:	611a      	str	r2, [r3, #16]
 8003f0a:	e05f      	b.n	8003fcc <I2C_MasterRequestRead+0x174>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8003f0c:	897b      	ldrh	r3, [r7, #10]
 8003f0e:	11db      	asrs	r3, r3, #7
 8003f10:	b2db      	uxtb	r3, r3
 8003f12:	f003 0306 	and.w	r3, r3, #6
 8003f16:	b2db      	uxtb	r3, r3
 8003f18:	f063 030f 	orn	r3, r3, #15
 8003f1c:	b2da      	uxtb	r2, r3
 8003f1e:	68fb      	ldr	r3, [r7, #12]
 8003f20:	681b      	ldr	r3, [r3, #0]
 8003f22:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8003f24:	683b      	ldr	r3, [r7, #0]
 8003f26:	687a      	ldr	r2, [r7, #4]
 8003f28:	4930      	ldr	r1, [pc, #192]	; (8003fec <I2C_MasterRequestRead+0x194>)
 8003f2a:	68f8      	ldr	r0, [r7, #12]
 8003f2c:	f000 f8b9 	bl	80040a2 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003f30:	4603      	mov	r3, r0
 8003f32:	2b00      	cmp	r3, #0
 8003f34:	d001      	beq.n	8003f3a <I2C_MasterRequestRead+0xe2>
    {
      return HAL_ERROR;
 8003f36:	2301      	movs	r3, #1
 8003f38:	e054      	b.n	8003fe4 <I2C_MasterRequestRead+0x18c>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8003f3a:	897b      	ldrh	r3, [r7, #10]
 8003f3c:	b2da      	uxtb	r2, r3
 8003f3e:	68fb      	ldr	r3, [r7, #12]
 8003f40:	681b      	ldr	r3, [r3, #0]
 8003f42:	611a      	str	r2, [r3, #16]

    /* Wait until ADDR flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8003f44:	683b      	ldr	r3, [r7, #0]
 8003f46:	687a      	ldr	r2, [r7, #4]
 8003f48:	4929      	ldr	r1, [pc, #164]	; (8003ff0 <I2C_MasterRequestRead+0x198>)
 8003f4a:	68f8      	ldr	r0, [r7, #12]
 8003f4c:	f000 f8a9 	bl	80040a2 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003f50:	4603      	mov	r3, r0
 8003f52:	2b00      	cmp	r3, #0
 8003f54:	d001      	beq.n	8003f5a <I2C_MasterRequestRead+0x102>
    {
      return HAL_ERROR;
 8003f56:	2301      	movs	r3, #1
 8003f58:	e044      	b.n	8003fe4 <I2C_MasterRequestRead+0x18c>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003f5a:	2300      	movs	r3, #0
 8003f5c:	613b      	str	r3, [r7, #16]
 8003f5e:	68fb      	ldr	r3, [r7, #12]
 8003f60:	681b      	ldr	r3, [r3, #0]
 8003f62:	695b      	ldr	r3, [r3, #20]
 8003f64:	613b      	str	r3, [r7, #16]
 8003f66:	68fb      	ldr	r3, [r7, #12]
 8003f68:	681b      	ldr	r3, [r3, #0]
 8003f6a:	699b      	ldr	r3, [r3, #24]
 8003f6c:	613b      	str	r3, [r7, #16]
 8003f6e:	693b      	ldr	r3, [r7, #16]

    /* Generate Restart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003f70:	68fb      	ldr	r3, [r7, #12]
 8003f72:	681b      	ldr	r3, [r3, #0]
 8003f74:	681a      	ldr	r2, [r3, #0]
 8003f76:	68fb      	ldr	r3, [r7, #12]
 8003f78:	681b      	ldr	r3, [r3, #0]
 8003f7a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003f7e:	601a      	str	r2, [r3, #0]

    /* Wait until SB flag is set */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8003f80:	683b      	ldr	r3, [r7, #0]
 8003f82:	9300      	str	r3, [sp, #0]
 8003f84:	687b      	ldr	r3, [r7, #4]
 8003f86:	2200      	movs	r2, #0
 8003f88:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8003f8c:	68f8      	ldr	r0, [r7, #12]
 8003f8e:	f000 f831 	bl	8003ff4 <I2C_WaitOnFlagUntilTimeout>
 8003f92:	4603      	mov	r3, r0
 8003f94:	2b00      	cmp	r3, #0
 8003f96:	d00d      	beq.n	8003fb4 <I2C_MasterRequestRead+0x15c>
    {
      if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8003f98:	68fb      	ldr	r3, [r7, #12]
 8003f9a:	681b      	ldr	r3, [r3, #0]
 8003f9c:	681b      	ldr	r3, [r3, #0]
 8003f9e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003fa2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003fa6:	d103      	bne.n	8003fb0 <I2C_MasterRequestRead+0x158>
      {
        hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8003fa8:	68fb      	ldr	r3, [r7, #12]
 8003faa:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003fae:	641a      	str	r2, [r3, #64]	; 0x40
      }
      return HAL_TIMEOUT;
 8003fb0:	2303      	movs	r3, #3
 8003fb2:	e017      	b.n	8003fe4 <I2C_MasterRequestRead+0x18c>
    }

    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_READ(DevAddress);
 8003fb4:	897b      	ldrh	r3, [r7, #10]
 8003fb6:	11db      	asrs	r3, r3, #7
 8003fb8:	b2db      	uxtb	r3, r3
 8003fba:	f003 0306 	and.w	r3, r3, #6
 8003fbe:	b2db      	uxtb	r3, r3
 8003fc0:	f063 030e 	orn	r3, r3, #14
 8003fc4:	b2da      	uxtb	r2, r3
 8003fc6:	68fb      	ldr	r3, [r7, #12]
 8003fc8:	681b      	ldr	r3, [r3, #0]
 8003fca:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8003fcc:	683b      	ldr	r3, [r7, #0]
 8003fce:	687a      	ldr	r2, [r7, #4]
 8003fd0:	4907      	ldr	r1, [pc, #28]	; (8003ff0 <I2C_MasterRequestRead+0x198>)
 8003fd2:	68f8      	ldr	r0, [r7, #12]
 8003fd4:	f000 f865 	bl	80040a2 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003fd8:	4603      	mov	r3, r0
 8003fda:	2b00      	cmp	r3, #0
 8003fdc:	d001      	beq.n	8003fe2 <I2C_MasterRequestRead+0x18a>
  {
    return HAL_ERROR;
 8003fde:	2301      	movs	r3, #1
 8003fe0:	e000      	b.n	8003fe4 <I2C_MasterRequestRead+0x18c>
  }

  return HAL_OK;
 8003fe2:	2300      	movs	r3, #0
}
 8003fe4:	4618      	mov	r0, r3
 8003fe6:	3718      	adds	r7, #24
 8003fe8:	46bd      	mov	sp, r7
 8003fea:	bd80      	pop	{r7, pc}
 8003fec:	00010008 	.word	0x00010008
 8003ff0:	00010002 	.word	0x00010002

08003ff4 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8003ff4:	b580      	push	{r7, lr}
 8003ff6:	b084      	sub	sp, #16
 8003ff8:	af00      	add	r7, sp, #0
 8003ffa:	60f8      	str	r0, [r7, #12]
 8003ffc:	60b9      	str	r1, [r7, #8]
 8003ffe:	603b      	str	r3, [r7, #0]
 8004000:	4613      	mov	r3, r2
 8004002:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8004004:	e025      	b.n	8004052 <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004006:	683b      	ldr	r3, [r7, #0]
 8004008:	f1b3 3fff 	cmp.w	r3, #4294967295
 800400c:	d021      	beq.n	8004052 <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800400e:	f7fe fa37 	bl	8002480 <HAL_GetTick>
 8004012:	4602      	mov	r2, r0
 8004014:	69bb      	ldr	r3, [r7, #24]
 8004016:	1ad3      	subs	r3, r2, r3
 8004018:	683a      	ldr	r2, [r7, #0]
 800401a:	429a      	cmp	r2, r3
 800401c:	d302      	bcc.n	8004024 <I2C_WaitOnFlagUntilTimeout+0x30>
 800401e:	683b      	ldr	r3, [r7, #0]
 8004020:	2b00      	cmp	r3, #0
 8004022:	d116      	bne.n	8004052 <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 8004024:	68fb      	ldr	r3, [r7, #12]
 8004026:	2200      	movs	r2, #0
 8004028:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 800402a:	68fb      	ldr	r3, [r7, #12]
 800402c:	2220      	movs	r2, #32
 800402e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 8004032:	68fb      	ldr	r3, [r7, #12]
 8004034:	2200      	movs	r2, #0
 8004036:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 800403a:	68fb      	ldr	r3, [r7, #12]
 800403c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800403e:	f043 0220 	orr.w	r2, r3, #32
 8004042:	68fb      	ldr	r3, [r7, #12]
 8004044:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004046:	68fb      	ldr	r3, [r7, #12]
 8004048:	2200      	movs	r2, #0
 800404a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800404e:	2301      	movs	r3, #1
 8004050:	e023      	b.n	800409a <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8004052:	68bb      	ldr	r3, [r7, #8]
 8004054:	0c1b      	lsrs	r3, r3, #16
 8004056:	b2db      	uxtb	r3, r3
 8004058:	2b01      	cmp	r3, #1
 800405a:	d10d      	bne.n	8004078 <I2C_WaitOnFlagUntilTimeout+0x84>
 800405c:	68fb      	ldr	r3, [r7, #12]
 800405e:	681b      	ldr	r3, [r3, #0]
 8004060:	695b      	ldr	r3, [r3, #20]
 8004062:	43da      	mvns	r2, r3
 8004064:	68bb      	ldr	r3, [r7, #8]
 8004066:	4013      	ands	r3, r2
 8004068:	b29b      	uxth	r3, r3
 800406a:	2b00      	cmp	r3, #0
 800406c:	bf0c      	ite	eq
 800406e:	2301      	moveq	r3, #1
 8004070:	2300      	movne	r3, #0
 8004072:	b2db      	uxtb	r3, r3
 8004074:	461a      	mov	r2, r3
 8004076:	e00c      	b.n	8004092 <I2C_WaitOnFlagUntilTimeout+0x9e>
 8004078:	68fb      	ldr	r3, [r7, #12]
 800407a:	681b      	ldr	r3, [r3, #0]
 800407c:	699b      	ldr	r3, [r3, #24]
 800407e:	43da      	mvns	r2, r3
 8004080:	68bb      	ldr	r3, [r7, #8]
 8004082:	4013      	ands	r3, r2
 8004084:	b29b      	uxth	r3, r3
 8004086:	2b00      	cmp	r3, #0
 8004088:	bf0c      	ite	eq
 800408a:	2301      	moveq	r3, #1
 800408c:	2300      	movne	r3, #0
 800408e:	b2db      	uxtb	r3, r3
 8004090:	461a      	mov	r2, r3
 8004092:	79fb      	ldrb	r3, [r7, #7]
 8004094:	429a      	cmp	r2, r3
 8004096:	d0b6      	beq.n	8004006 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8004098:	2300      	movs	r3, #0
}
 800409a:	4618      	mov	r0, r3
 800409c:	3710      	adds	r7, #16
 800409e:	46bd      	mov	sp, r7
 80040a0:	bd80      	pop	{r7, pc}

080040a2 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 80040a2:	b580      	push	{r7, lr}
 80040a4:	b084      	sub	sp, #16
 80040a6:	af00      	add	r7, sp, #0
 80040a8:	60f8      	str	r0, [r7, #12]
 80040aa:	60b9      	str	r1, [r7, #8]
 80040ac:	607a      	str	r2, [r7, #4]
 80040ae:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80040b0:	e051      	b.n	8004156 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80040b2:	68fb      	ldr	r3, [r7, #12]
 80040b4:	681b      	ldr	r3, [r3, #0]
 80040b6:	695b      	ldr	r3, [r3, #20]
 80040b8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80040bc:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80040c0:	d123      	bne.n	800410a <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80040c2:	68fb      	ldr	r3, [r7, #12]
 80040c4:	681b      	ldr	r3, [r3, #0]
 80040c6:	681a      	ldr	r2, [r3, #0]
 80040c8:	68fb      	ldr	r3, [r7, #12]
 80040ca:	681b      	ldr	r3, [r3, #0]
 80040cc:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80040d0:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80040d2:	68fb      	ldr	r3, [r7, #12]
 80040d4:	681b      	ldr	r3, [r3, #0]
 80040d6:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80040da:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 80040dc:	68fb      	ldr	r3, [r7, #12]
 80040de:	2200      	movs	r2, #0
 80040e0:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80040e2:	68fb      	ldr	r3, [r7, #12]
 80040e4:	2220      	movs	r2, #32
 80040e6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80040ea:	68fb      	ldr	r3, [r7, #12]
 80040ec:	2200      	movs	r2, #0
 80040ee:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80040f2:	68fb      	ldr	r3, [r7, #12]
 80040f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80040f6:	f043 0204 	orr.w	r2, r3, #4
 80040fa:	68fb      	ldr	r3, [r7, #12]
 80040fc:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80040fe:	68fb      	ldr	r3, [r7, #12]
 8004100:	2200      	movs	r2, #0
 8004102:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8004106:	2301      	movs	r3, #1
 8004108:	e046      	b.n	8004198 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800410a:	687b      	ldr	r3, [r7, #4]
 800410c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004110:	d021      	beq.n	8004156 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004112:	f7fe f9b5 	bl	8002480 <HAL_GetTick>
 8004116:	4602      	mov	r2, r0
 8004118:	683b      	ldr	r3, [r7, #0]
 800411a:	1ad3      	subs	r3, r2, r3
 800411c:	687a      	ldr	r2, [r7, #4]
 800411e:	429a      	cmp	r2, r3
 8004120:	d302      	bcc.n	8004128 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8004122:	687b      	ldr	r3, [r7, #4]
 8004124:	2b00      	cmp	r3, #0
 8004126:	d116      	bne.n	8004156 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8004128:	68fb      	ldr	r3, [r7, #12]
 800412a:	2200      	movs	r2, #0
 800412c:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800412e:	68fb      	ldr	r3, [r7, #12]
 8004130:	2220      	movs	r2, #32
 8004132:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004136:	68fb      	ldr	r3, [r7, #12]
 8004138:	2200      	movs	r2, #0
 800413a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800413e:	68fb      	ldr	r3, [r7, #12]
 8004140:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004142:	f043 0220 	orr.w	r2, r3, #32
 8004146:	68fb      	ldr	r3, [r7, #12]
 8004148:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800414a:	68fb      	ldr	r3, [r7, #12]
 800414c:	2200      	movs	r2, #0
 800414e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8004152:	2301      	movs	r3, #1
 8004154:	e020      	b.n	8004198 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8004156:	68bb      	ldr	r3, [r7, #8]
 8004158:	0c1b      	lsrs	r3, r3, #16
 800415a:	b2db      	uxtb	r3, r3
 800415c:	2b01      	cmp	r3, #1
 800415e:	d10c      	bne.n	800417a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 8004160:	68fb      	ldr	r3, [r7, #12]
 8004162:	681b      	ldr	r3, [r3, #0]
 8004164:	695b      	ldr	r3, [r3, #20]
 8004166:	43da      	mvns	r2, r3
 8004168:	68bb      	ldr	r3, [r7, #8]
 800416a:	4013      	ands	r3, r2
 800416c:	b29b      	uxth	r3, r3
 800416e:	2b00      	cmp	r3, #0
 8004170:	bf14      	ite	ne
 8004172:	2301      	movne	r3, #1
 8004174:	2300      	moveq	r3, #0
 8004176:	b2db      	uxtb	r3, r3
 8004178:	e00b      	b.n	8004192 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 800417a:	68fb      	ldr	r3, [r7, #12]
 800417c:	681b      	ldr	r3, [r3, #0]
 800417e:	699b      	ldr	r3, [r3, #24]
 8004180:	43da      	mvns	r2, r3
 8004182:	68bb      	ldr	r3, [r7, #8]
 8004184:	4013      	ands	r3, r2
 8004186:	b29b      	uxth	r3, r3
 8004188:	2b00      	cmp	r3, #0
 800418a:	bf14      	ite	ne
 800418c:	2301      	movne	r3, #1
 800418e:	2300      	moveq	r3, #0
 8004190:	b2db      	uxtb	r3, r3
 8004192:	2b00      	cmp	r3, #0
 8004194:	d18d      	bne.n	80040b2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 8004196:	2300      	movs	r3, #0
}
 8004198:	4618      	mov	r0, r3
 800419a:	3710      	adds	r7, #16
 800419c:	46bd      	mov	sp, r7
 800419e:	bd80      	pop	{r7, pc}

080041a0 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80041a0:	b580      	push	{r7, lr}
 80041a2:	b084      	sub	sp, #16
 80041a4:	af00      	add	r7, sp, #0
 80041a6:	60f8      	str	r0, [r7, #12]
 80041a8:	60b9      	str	r1, [r7, #8]
 80041aa:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80041ac:	e02d      	b.n	800420a <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80041ae:	68f8      	ldr	r0, [r7, #12]
 80041b0:	f000 f8ce 	bl	8004350 <I2C_IsAcknowledgeFailed>
 80041b4:	4603      	mov	r3, r0
 80041b6:	2b00      	cmp	r3, #0
 80041b8:	d001      	beq.n	80041be <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80041ba:	2301      	movs	r3, #1
 80041bc:	e02d      	b.n	800421a <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80041be:	68bb      	ldr	r3, [r7, #8]
 80041c0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80041c4:	d021      	beq.n	800420a <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80041c6:	f7fe f95b 	bl	8002480 <HAL_GetTick>
 80041ca:	4602      	mov	r2, r0
 80041cc:	687b      	ldr	r3, [r7, #4]
 80041ce:	1ad3      	subs	r3, r2, r3
 80041d0:	68ba      	ldr	r2, [r7, #8]
 80041d2:	429a      	cmp	r2, r3
 80041d4:	d302      	bcc.n	80041dc <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 80041d6:	68bb      	ldr	r3, [r7, #8]
 80041d8:	2b00      	cmp	r3, #0
 80041da:	d116      	bne.n	800420a <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80041dc:	68fb      	ldr	r3, [r7, #12]
 80041de:	2200      	movs	r2, #0
 80041e0:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80041e2:	68fb      	ldr	r3, [r7, #12]
 80041e4:	2220      	movs	r2, #32
 80041e6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80041ea:	68fb      	ldr	r3, [r7, #12]
 80041ec:	2200      	movs	r2, #0
 80041ee:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80041f2:	68fb      	ldr	r3, [r7, #12]
 80041f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80041f6:	f043 0220 	orr.w	r2, r3, #32
 80041fa:	68fb      	ldr	r3, [r7, #12]
 80041fc:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80041fe:	68fb      	ldr	r3, [r7, #12]
 8004200:	2200      	movs	r2, #0
 8004202:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8004206:	2301      	movs	r3, #1
 8004208:	e007      	b.n	800421a <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800420a:	68fb      	ldr	r3, [r7, #12]
 800420c:	681b      	ldr	r3, [r3, #0]
 800420e:	695b      	ldr	r3, [r3, #20]
 8004210:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004214:	2b80      	cmp	r3, #128	; 0x80
 8004216:	d1ca      	bne.n	80041ae <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8004218:	2300      	movs	r3, #0
}
 800421a:	4618      	mov	r0, r3
 800421c:	3710      	adds	r7, #16
 800421e:	46bd      	mov	sp, r7
 8004220:	bd80      	pop	{r7, pc}

08004222 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8004222:	b580      	push	{r7, lr}
 8004224:	b084      	sub	sp, #16
 8004226:	af00      	add	r7, sp, #0
 8004228:	60f8      	str	r0, [r7, #12]
 800422a:	60b9      	str	r1, [r7, #8]
 800422c:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 800422e:	e02d      	b.n	800428c <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8004230:	68f8      	ldr	r0, [r7, #12]
 8004232:	f000 f88d 	bl	8004350 <I2C_IsAcknowledgeFailed>
 8004236:	4603      	mov	r3, r0
 8004238:	2b00      	cmp	r3, #0
 800423a:	d001      	beq.n	8004240 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800423c:	2301      	movs	r3, #1
 800423e:	e02d      	b.n	800429c <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004240:	68bb      	ldr	r3, [r7, #8]
 8004242:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004246:	d021      	beq.n	800428c <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004248:	f7fe f91a 	bl	8002480 <HAL_GetTick>
 800424c:	4602      	mov	r2, r0
 800424e:	687b      	ldr	r3, [r7, #4]
 8004250:	1ad3      	subs	r3, r2, r3
 8004252:	68ba      	ldr	r2, [r7, #8]
 8004254:	429a      	cmp	r2, r3
 8004256:	d302      	bcc.n	800425e <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8004258:	68bb      	ldr	r3, [r7, #8]
 800425a:	2b00      	cmp	r3, #0
 800425c:	d116      	bne.n	800428c <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 800425e:	68fb      	ldr	r3, [r7, #12]
 8004260:	2200      	movs	r2, #0
 8004262:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8004264:	68fb      	ldr	r3, [r7, #12]
 8004266:	2220      	movs	r2, #32
 8004268:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800426c:	68fb      	ldr	r3, [r7, #12]
 800426e:	2200      	movs	r2, #0
 8004270:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004274:	68fb      	ldr	r3, [r7, #12]
 8004276:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004278:	f043 0220 	orr.w	r2, r3, #32
 800427c:	68fb      	ldr	r3, [r7, #12]
 800427e:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004280:	68fb      	ldr	r3, [r7, #12]
 8004282:	2200      	movs	r2, #0
 8004284:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8004288:	2301      	movs	r3, #1
 800428a:	e007      	b.n	800429c <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 800428c:	68fb      	ldr	r3, [r7, #12]
 800428e:	681b      	ldr	r3, [r3, #0]
 8004290:	695b      	ldr	r3, [r3, #20]
 8004292:	f003 0304 	and.w	r3, r3, #4
 8004296:	2b04      	cmp	r3, #4
 8004298:	d1ca      	bne.n	8004230 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 800429a:	2300      	movs	r3, #0
}
 800429c:	4618      	mov	r0, r3
 800429e:	3710      	adds	r7, #16
 80042a0:	46bd      	mov	sp, r7
 80042a2:	bd80      	pop	{r7, pc}

080042a4 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80042a4:	b580      	push	{r7, lr}
 80042a6:	b084      	sub	sp, #16
 80042a8:	af00      	add	r7, sp, #0
 80042aa:	60f8      	str	r0, [r7, #12]
 80042ac:	60b9      	str	r1, [r7, #8]
 80042ae:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 80042b0:	e042      	b.n	8004338 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 80042b2:	68fb      	ldr	r3, [r7, #12]
 80042b4:	681b      	ldr	r3, [r3, #0]
 80042b6:	695b      	ldr	r3, [r3, #20]
 80042b8:	f003 0310 	and.w	r3, r3, #16
 80042bc:	2b10      	cmp	r3, #16
 80042be:	d119      	bne.n	80042f4 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80042c0:	68fb      	ldr	r3, [r7, #12]
 80042c2:	681b      	ldr	r3, [r3, #0]
 80042c4:	f06f 0210 	mvn.w	r2, #16
 80042c8:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 80042ca:	68fb      	ldr	r3, [r7, #12]
 80042cc:	2200      	movs	r2, #0
 80042ce:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80042d0:	68fb      	ldr	r3, [r7, #12]
 80042d2:	2220      	movs	r2, #32
 80042d4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80042d8:	68fb      	ldr	r3, [r7, #12]
 80042da:	2200      	movs	r2, #0
 80042dc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 80042e0:	68fb      	ldr	r3, [r7, #12]
 80042e2:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80042e4:	68fb      	ldr	r3, [r7, #12]
 80042e6:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80042e8:	68fb      	ldr	r3, [r7, #12]
 80042ea:	2200      	movs	r2, #0
 80042ec:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 80042f0:	2301      	movs	r3, #1
 80042f2:	e029      	b.n	8004348 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80042f4:	f7fe f8c4 	bl	8002480 <HAL_GetTick>
 80042f8:	4602      	mov	r2, r0
 80042fa:	687b      	ldr	r3, [r7, #4]
 80042fc:	1ad3      	subs	r3, r2, r3
 80042fe:	68ba      	ldr	r2, [r7, #8]
 8004300:	429a      	cmp	r2, r3
 8004302:	d302      	bcc.n	800430a <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8004304:	68bb      	ldr	r3, [r7, #8]
 8004306:	2b00      	cmp	r3, #0
 8004308:	d116      	bne.n	8004338 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 800430a:	68fb      	ldr	r3, [r7, #12]
 800430c:	2200      	movs	r2, #0
 800430e:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8004310:	68fb      	ldr	r3, [r7, #12]
 8004312:	2220      	movs	r2, #32
 8004314:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004318:	68fb      	ldr	r3, [r7, #12]
 800431a:	2200      	movs	r2, #0
 800431c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004320:	68fb      	ldr	r3, [r7, #12]
 8004322:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004324:	f043 0220 	orr.w	r2, r3, #32
 8004328:	68fb      	ldr	r3, [r7, #12]
 800432a:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800432c:	68fb      	ldr	r3, [r7, #12]
 800432e:	2200      	movs	r2, #0
 8004330:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8004334:	2301      	movs	r3, #1
 8004336:	e007      	b.n	8004348 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8004338:	68fb      	ldr	r3, [r7, #12]
 800433a:	681b      	ldr	r3, [r3, #0]
 800433c:	695b      	ldr	r3, [r3, #20]
 800433e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004342:	2b40      	cmp	r3, #64	; 0x40
 8004344:	d1b5      	bne.n	80042b2 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8004346:	2300      	movs	r3, #0
}
 8004348:	4618      	mov	r0, r3
 800434a:	3710      	adds	r7, #16
 800434c:	46bd      	mov	sp, r7
 800434e:	bd80      	pop	{r7, pc}

08004350 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8004350:	b480      	push	{r7}
 8004352:	b083      	sub	sp, #12
 8004354:	af00      	add	r7, sp, #0
 8004356:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8004358:	687b      	ldr	r3, [r7, #4]
 800435a:	681b      	ldr	r3, [r3, #0]
 800435c:	695b      	ldr	r3, [r3, #20]
 800435e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004362:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004366:	d11b      	bne.n	80043a0 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004368:	687b      	ldr	r3, [r7, #4]
 800436a:	681b      	ldr	r3, [r3, #0]
 800436c:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8004370:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8004372:	687b      	ldr	r3, [r7, #4]
 8004374:	2200      	movs	r2, #0
 8004376:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8004378:	687b      	ldr	r3, [r7, #4]
 800437a:	2220      	movs	r2, #32
 800437c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004380:	687b      	ldr	r3, [r7, #4]
 8004382:	2200      	movs	r2, #0
 8004384:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8004388:	687b      	ldr	r3, [r7, #4]
 800438a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800438c:	f043 0204 	orr.w	r2, r3, #4
 8004390:	687b      	ldr	r3, [r7, #4]
 8004392:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004394:	687b      	ldr	r3, [r7, #4]
 8004396:	2200      	movs	r2, #0
 8004398:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 800439c:	2301      	movs	r3, #1
 800439e:	e000      	b.n	80043a2 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 80043a0:	2300      	movs	r3, #0
}
 80043a2:	4618      	mov	r0, r3
 80043a4:	370c      	adds	r7, #12
 80043a6:	46bd      	mov	sp, r7
 80043a8:	bc80      	pop	{r7}
 80043aa:	4770      	bx	lr

080043ac <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80043ac:	b580      	push	{r7, lr}
 80043ae:	b086      	sub	sp, #24
 80043b0:	af00      	add	r7, sp, #0
 80043b2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80043b4:	687b      	ldr	r3, [r7, #4]
 80043b6:	2b00      	cmp	r3, #0
 80043b8:	d101      	bne.n	80043be <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80043ba:	2301      	movs	r3, #1
 80043bc:	e26c      	b.n	8004898 <HAL_RCC_OscConfig+0x4ec>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80043be:	687b      	ldr	r3, [r7, #4]
 80043c0:	681b      	ldr	r3, [r3, #0]
 80043c2:	f003 0301 	and.w	r3, r3, #1
 80043c6:	2b00      	cmp	r3, #0
 80043c8:	f000 8087 	beq.w	80044da <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80043cc:	4b92      	ldr	r3, [pc, #584]	; (8004618 <HAL_RCC_OscConfig+0x26c>)
 80043ce:	685b      	ldr	r3, [r3, #4]
 80043d0:	f003 030c 	and.w	r3, r3, #12
 80043d4:	2b04      	cmp	r3, #4
 80043d6:	d00c      	beq.n	80043f2 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80043d8:	4b8f      	ldr	r3, [pc, #572]	; (8004618 <HAL_RCC_OscConfig+0x26c>)
 80043da:	685b      	ldr	r3, [r3, #4]
 80043dc:	f003 030c 	and.w	r3, r3, #12
 80043e0:	2b08      	cmp	r3, #8
 80043e2:	d112      	bne.n	800440a <HAL_RCC_OscConfig+0x5e>
 80043e4:	4b8c      	ldr	r3, [pc, #560]	; (8004618 <HAL_RCC_OscConfig+0x26c>)
 80043e6:	685b      	ldr	r3, [r3, #4]
 80043e8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80043ec:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80043f0:	d10b      	bne.n	800440a <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80043f2:	4b89      	ldr	r3, [pc, #548]	; (8004618 <HAL_RCC_OscConfig+0x26c>)
 80043f4:	681b      	ldr	r3, [r3, #0]
 80043f6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80043fa:	2b00      	cmp	r3, #0
 80043fc:	d06c      	beq.n	80044d8 <HAL_RCC_OscConfig+0x12c>
 80043fe:	687b      	ldr	r3, [r7, #4]
 8004400:	685b      	ldr	r3, [r3, #4]
 8004402:	2b00      	cmp	r3, #0
 8004404:	d168      	bne.n	80044d8 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8004406:	2301      	movs	r3, #1
 8004408:	e246      	b.n	8004898 <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800440a:	687b      	ldr	r3, [r7, #4]
 800440c:	685b      	ldr	r3, [r3, #4]
 800440e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004412:	d106      	bne.n	8004422 <HAL_RCC_OscConfig+0x76>
 8004414:	4b80      	ldr	r3, [pc, #512]	; (8004618 <HAL_RCC_OscConfig+0x26c>)
 8004416:	681b      	ldr	r3, [r3, #0]
 8004418:	4a7f      	ldr	r2, [pc, #508]	; (8004618 <HAL_RCC_OscConfig+0x26c>)
 800441a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800441e:	6013      	str	r3, [r2, #0]
 8004420:	e02e      	b.n	8004480 <HAL_RCC_OscConfig+0xd4>
 8004422:	687b      	ldr	r3, [r7, #4]
 8004424:	685b      	ldr	r3, [r3, #4]
 8004426:	2b00      	cmp	r3, #0
 8004428:	d10c      	bne.n	8004444 <HAL_RCC_OscConfig+0x98>
 800442a:	4b7b      	ldr	r3, [pc, #492]	; (8004618 <HAL_RCC_OscConfig+0x26c>)
 800442c:	681b      	ldr	r3, [r3, #0]
 800442e:	4a7a      	ldr	r2, [pc, #488]	; (8004618 <HAL_RCC_OscConfig+0x26c>)
 8004430:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004434:	6013      	str	r3, [r2, #0]
 8004436:	4b78      	ldr	r3, [pc, #480]	; (8004618 <HAL_RCC_OscConfig+0x26c>)
 8004438:	681b      	ldr	r3, [r3, #0]
 800443a:	4a77      	ldr	r2, [pc, #476]	; (8004618 <HAL_RCC_OscConfig+0x26c>)
 800443c:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004440:	6013      	str	r3, [r2, #0]
 8004442:	e01d      	b.n	8004480 <HAL_RCC_OscConfig+0xd4>
 8004444:	687b      	ldr	r3, [r7, #4]
 8004446:	685b      	ldr	r3, [r3, #4]
 8004448:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800444c:	d10c      	bne.n	8004468 <HAL_RCC_OscConfig+0xbc>
 800444e:	4b72      	ldr	r3, [pc, #456]	; (8004618 <HAL_RCC_OscConfig+0x26c>)
 8004450:	681b      	ldr	r3, [r3, #0]
 8004452:	4a71      	ldr	r2, [pc, #452]	; (8004618 <HAL_RCC_OscConfig+0x26c>)
 8004454:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8004458:	6013      	str	r3, [r2, #0]
 800445a:	4b6f      	ldr	r3, [pc, #444]	; (8004618 <HAL_RCC_OscConfig+0x26c>)
 800445c:	681b      	ldr	r3, [r3, #0]
 800445e:	4a6e      	ldr	r2, [pc, #440]	; (8004618 <HAL_RCC_OscConfig+0x26c>)
 8004460:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004464:	6013      	str	r3, [r2, #0]
 8004466:	e00b      	b.n	8004480 <HAL_RCC_OscConfig+0xd4>
 8004468:	4b6b      	ldr	r3, [pc, #428]	; (8004618 <HAL_RCC_OscConfig+0x26c>)
 800446a:	681b      	ldr	r3, [r3, #0]
 800446c:	4a6a      	ldr	r2, [pc, #424]	; (8004618 <HAL_RCC_OscConfig+0x26c>)
 800446e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004472:	6013      	str	r3, [r2, #0]
 8004474:	4b68      	ldr	r3, [pc, #416]	; (8004618 <HAL_RCC_OscConfig+0x26c>)
 8004476:	681b      	ldr	r3, [r3, #0]
 8004478:	4a67      	ldr	r2, [pc, #412]	; (8004618 <HAL_RCC_OscConfig+0x26c>)
 800447a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800447e:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8004480:	687b      	ldr	r3, [r7, #4]
 8004482:	685b      	ldr	r3, [r3, #4]
 8004484:	2b00      	cmp	r3, #0
 8004486:	d013      	beq.n	80044b0 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004488:	f7fd fffa 	bl	8002480 <HAL_GetTick>
 800448c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800448e:	e008      	b.n	80044a2 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004490:	f7fd fff6 	bl	8002480 <HAL_GetTick>
 8004494:	4602      	mov	r2, r0
 8004496:	693b      	ldr	r3, [r7, #16]
 8004498:	1ad3      	subs	r3, r2, r3
 800449a:	2b64      	cmp	r3, #100	; 0x64
 800449c:	d901      	bls.n	80044a2 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 800449e:	2303      	movs	r3, #3
 80044a0:	e1fa      	b.n	8004898 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80044a2:	4b5d      	ldr	r3, [pc, #372]	; (8004618 <HAL_RCC_OscConfig+0x26c>)
 80044a4:	681b      	ldr	r3, [r3, #0]
 80044a6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80044aa:	2b00      	cmp	r3, #0
 80044ac:	d0f0      	beq.n	8004490 <HAL_RCC_OscConfig+0xe4>
 80044ae:	e014      	b.n	80044da <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80044b0:	f7fd ffe6 	bl	8002480 <HAL_GetTick>
 80044b4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80044b6:	e008      	b.n	80044ca <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80044b8:	f7fd ffe2 	bl	8002480 <HAL_GetTick>
 80044bc:	4602      	mov	r2, r0
 80044be:	693b      	ldr	r3, [r7, #16]
 80044c0:	1ad3      	subs	r3, r2, r3
 80044c2:	2b64      	cmp	r3, #100	; 0x64
 80044c4:	d901      	bls.n	80044ca <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 80044c6:	2303      	movs	r3, #3
 80044c8:	e1e6      	b.n	8004898 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80044ca:	4b53      	ldr	r3, [pc, #332]	; (8004618 <HAL_RCC_OscConfig+0x26c>)
 80044cc:	681b      	ldr	r3, [r3, #0]
 80044ce:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80044d2:	2b00      	cmp	r3, #0
 80044d4:	d1f0      	bne.n	80044b8 <HAL_RCC_OscConfig+0x10c>
 80044d6:	e000      	b.n	80044da <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80044d8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80044da:	687b      	ldr	r3, [r7, #4]
 80044dc:	681b      	ldr	r3, [r3, #0]
 80044de:	f003 0302 	and.w	r3, r3, #2
 80044e2:	2b00      	cmp	r3, #0
 80044e4:	d063      	beq.n	80045ae <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80044e6:	4b4c      	ldr	r3, [pc, #304]	; (8004618 <HAL_RCC_OscConfig+0x26c>)
 80044e8:	685b      	ldr	r3, [r3, #4]
 80044ea:	f003 030c 	and.w	r3, r3, #12
 80044ee:	2b00      	cmp	r3, #0
 80044f0:	d00b      	beq.n	800450a <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 80044f2:	4b49      	ldr	r3, [pc, #292]	; (8004618 <HAL_RCC_OscConfig+0x26c>)
 80044f4:	685b      	ldr	r3, [r3, #4]
 80044f6:	f003 030c 	and.w	r3, r3, #12
 80044fa:	2b08      	cmp	r3, #8
 80044fc:	d11c      	bne.n	8004538 <HAL_RCC_OscConfig+0x18c>
 80044fe:	4b46      	ldr	r3, [pc, #280]	; (8004618 <HAL_RCC_OscConfig+0x26c>)
 8004500:	685b      	ldr	r3, [r3, #4]
 8004502:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004506:	2b00      	cmp	r3, #0
 8004508:	d116      	bne.n	8004538 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800450a:	4b43      	ldr	r3, [pc, #268]	; (8004618 <HAL_RCC_OscConfig+0x26c>)
 800450c:	681b      	ldr	r3, [r3, #0]
 800450e:	f003 0302 	and.w	r3, r3, #2
 8004512:	2b00      	cmp	r3, #0
 8004514:	d005      	beq.n	8004522 <HAL_RCC_OscConfig+0x176>
 8004516:	687b      	ldr	r3, [r7, #4]
 8004518:	691b      	ldr	r3, [r3, #16]
 800451a:	2b01      	cmp	r3, #1
 800451c:	d001      	beq.n	8004522 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 800451e:	2301      	movs	r3, #1
 8004520:	e1ba      	b.n	8004898 <HAL_RCC_OscConfig+0x4ec>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004522:	4b3d      	ldr	r3, [pc, #244]	; (8004618 <HAL_RCC_OscConfig+0x26c>)
 8004524:	681b      	ldr	r3, [r3, #0]
 8004526:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800452a:	687b      	ldr	r3, [r7, #4]
 800452c:	695b      	ldr	r3, [r3, #20]
 800452e:	00db      	lsls	r3, r3, #3
 8004530:	4939      	ldr	r1, [pc, #228]	; (8004618 <HAL_RCC_OscConfig+0x26c>)
 8004532:	4313      	orrs	r3, r2
 8004534:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004536:	e03a      	b.n	80045ae <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8004538:	687b      	ldr	r3, [r7, #4]
 800453a:	691b      	ldr	r3, [r3, #16]
 800453c:	2b00      	cmp	r3, #0
 800453e:	d020      	beq.n	8004582 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004540:	4b36      	ldr	r3, [pc, #216]	; (800461c <HAL_RCC_OscConfig+0x270>)
 8004542:	2201      	movs	r2, #1
 8004544:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004546:	f7fd ff9b 	bl	8002480 <HAL_GetTick>
 800454a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800454c:	e008      	b.n	8004560 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800454e:	f7fd ff97 	bl	8002480 <HAL_GetTick>
 8004552:	4602      	mov	r2, r0
 8004554:	693b      	ldr	r3, [r7, #16]
 8004556:	1ad3      	subs	r3, r2, r3
 8004558:	2b02      	cmp	r3, #2
 800455a:	d901      	bls.n	8004560 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 800455c:	2303      	movs	r3, #3
 800455e:	e19b      	b.n	8004898 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004560:	4b2d      	ldr	r3, [pc, #180]	; (8004618 <HAL_RCC_OscConfig+0x26c>)
 8004562:	681b      	ldr	r3, [r3, #0]
 8004564:	f003 0302 	and.w	r3, r3, #2
 8004568:	2b00      	cmp	r3, #0
 800456a:	d0f0      	beq.n	800454e <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800456c:	4b2a      	ldr	r3, [pc, #168]	; (8004618 <HAL_RCC_OscConfig+0x26c>)
 800456e:	681b      	ldr	r3, [r3, #0]
 8004570:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004574:	687b      	ldr	r3, [r7, #4]
 8004576:	695b      	ldr	r3, [r3, #20]
 8004578:	00db      	lsls	r3, r3, #3
 800457a:	4927      	ldr	r1, [pc, #156]	; (8004618 <HAL_RCC_OscConfig+0x26c>)
 800457c:	4313      	orrs	r3, r2
 800457e:	600b      	str	r3, [r1, #0]
 8004580:	e015      	b.n	80045ae <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004582:	4b26      	ldr	r3, [pc, #152]	; (800461c <HAL_RCC_OscConfig+0x270>)
 8004584:	2200      	movs	r2, #0
 8004586:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004588:	f7fd ff7a 	bl	8002480 <HAL_GetTick>
 800458c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800458e:	e008      	b.n	80045a2 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004590:	f7fd ff76 	bl	8002480 <HAL_GetTick>
 8004594:	4602      	mov	r2, r0
 8004596:	693b      	ldr	r3, [r7, #16]
 8004598:	1ad3      	subs	r3, r2, r3
 800459a:	2b02      	cmp	r3, #2
 800459c:	d901      	bls.n	80045a2 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 800459e:	2303      	movs	r3, #3
 80045a0:	e17a      	b.n	8004898 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80045a2:	4b1d      	ldr	r3, [pc, #116]	; (8004618 <HAL_RCC_OscConfig+0x26c>)
 80045a4:	681b      	ldr	r3, [r3, #0]
 80045a6:	f003 0302 	and.w	r3, r3, #2
 80045aa:	2b00      	cmp	r3, #0
 80045ac:	d1f0      	bne.n	8004590 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80045ae:	687b      	ldr	r3, [r7, #4]
 80045b0:	681b      	ldr	r3, [r3, #0]
 80045b2:	f003 0308 	and.w	r3, r3, #8
 80045b6:	2b00      	cmp	r3, #0
 80045b8:	d03a      	beq.n	8004630 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80045ba:	687b      	ldr	r3, [r7, #4]
 80045bc:	699b      	ldr	r3, [r3, #24]
 80045be:	2b00      	cmp	r3, #0
 80045c0:	d019      	beq.n	80045f6 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80045c2:	4b17      	ldr	r3, [pc, #92]	; (8004620 <HAL_RCC_OscConfig+0x274>)
 80045c4:	2201      	movs	r2, #1
 80045c6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80045c8:	f7fd ff5a 	bl	8002480 <HAL_GetTick>
 80045cc:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80045ce:	e008      	b.n	80045e2 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80045d0:	f7fd ff56 	bl	8002480 <HAL_GetTick>
 80045d4:	4602      	mov	r2, r0
 80045d6:	693b      	ldr	r3, [r7, #16]
 80045d8:	1ad3      	subs	r3, r2, r3
 80045da:	2b02      	cmp	r3, #2
 80045dc:	d901      	bls.n	80045e2 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 80045de:	2303      	movs	r3, #3
 80045e0:	e15a      	b.n	8004898 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80045e2:	4b0d      	ldr	r3, [pc, #52]	; (8004618 <HAL_RCC_OscConfig+0x26c>)
 80045e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80045e6:	f003 0302 	and.w	r3, r3, #2
 80045ea:	2b00      	cmp	r3, #0
 80045ec:	d0f0      	beq.n	80045d0 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 80045ee:	2001      	movs	r0, #1
 80045f0:	f000 fad8 	bl	8004ba4 <RCC_Delay>
 80045f4:	e01c      	b.n	8004630 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80045f6:	4b0a      	ldr	r3, [pc, #40]	; (8004620 <HAL_RCC_OscConfig+0x274>)
 80045f8:	2200      	movs	r2, #0
 80045fa:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80045fc:	f7fd ff40 	bl	8002480 <HAL_GetTick>
 8004600:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004602:	e00f      	b.n	8004624 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004604:	f7fd ff3c 	bl	8002480 <HAL_GetTick>
 8004608:	4602      	mov	r2, r0
 800460a:	693b      	ldr	r3, [r7, #16]
 800460c:	1ad3      	subs	r3, r2, r3
 800460e:	2b02      	cmp	r3, #2
 8004610:	d908      	bls.n	8004624 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8004612:	2303      	movs	r3, #3
 8004614:	e140      	b.n	8004898 <HAL_RCC_OscConfig+0x4ec>
 8004616:	bf00      	nop
 8004618:	40021000 	.word	0x40021000
 800461c:	42420000 	.word	0x42420000
 8004620:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004624:	4b9e      	ldr	r3, [pc, #632]	; (80048a0 <HAL_RCC_OscConfig+0x4f4>)
 8004626:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004628:	f003 0302 	and.w	r3, r3, #2
 800462c:	2b00      	cmp	r3, #0
 800462e:	d1e9      	bne.n	8004604 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004630:	687b      	ldr	r3, [r7, #4]
 8004632:	681b      	ldr	r3, [r3, #0]
 8004634:	f003 0304 	and.w	r3, r3, #4
 8004638:	2b00      	cmp	r3, #0
 800463a:	f000 80a6 	beq.w	800478a <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 800463e:	2300      	movs	r3, #0
 8004640:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004642:	4b97      	ldr	r3, [pc, #604]	; (80048a0 <HAL_RCC_OscConfig+0x4f4>)
 8004644:	69db      	ldr	r3, [r3, #28]
 8004646:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800464a:	2b00      	cmp	r3, #0
 800464c:	d10d      	bne.n	800466a <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800464e:	4b94      	ldr	r3, [pc, #592]	; (80048a0 <HAL_RCC_OscConfig+0x4f4>)
 8004650:	69db      	ldr	r3, [r3, #28]
 8004652:	4a93      	ldr	r2, [pc, #588]	; (80048a0 <HAL_RCC_OscConfig+0x4f4>)
 8004654:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004658:	61d3      	str	r3, [r2, #28]
 800465a:	4b91      	ldr	r3, [pc, #580]	; (80048a0 <HAL_RCC_OscConfig+0x4f4>)
 800465c:	69db      	ldr	r3, [r3, #28]
 800465e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004662:	60bb      	str	r3, [r7, #8]
 8004664:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004666:	2301      	movs	r3, #1
 8004668:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800466a:	4b8e      	ldr	r3, [pc, #568]	; (80048a4 <HAL_RCC_OscConfig+0x4f8>)
 800466c:	681b      	ldr	r3, [r3, #0]
 800466e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004672:	2b00      	cmp	r3, #0
 8004674:	d118      	bne.n	80046a8 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8004676:	4b8b      	ldr	r3, [pc, #556]	; (80048a4 <HAL_RCC_OscConfig+0x4f8>)
 8004678:	681b      	ldr	r3, [r3, #0]
 800467a:	4a8a      	ldr	r2, [pc, #552]	; (80048a4 <HAL_RCC_OscConfig+0x4f8>)
 800467c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004680:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004682:	f7fd fefd 	bl	8002480 <HAL_GetTick>
 8004686:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004688:	e008      	b.n	800469c <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800468a:	f7fd fef9 	bl	8002480 <HAL_GetTick>
 800468e:	4602      	mov	r2, r0
 8004690:	693b      	ldr	r3, [r7, #16]
 8004692:	1ad3      	subs	r3, r2, r3
 8004694:	2b64      	cmp	r3, #100	; 0x64
 8004696:	d901      	bls.n	800469c <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8004698:	2303      	movs	r3, #3
 800469a:	e0fd      	b.n	8004898 <HAL_RCC_OscConfig+0x4ec>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800469c:	4b81      	ldr	r3, [pc, #516]	; (80048a4 <HAL_RCC_OscConfig+0x4f8>)
 800469e:	681b      	ldr	r3, [r3, #0]
 80046a0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80046a4:	2b00      	cmp	r3, #0
 80046a6:	d0f0      	beq.n	800468a <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80046a8:	687b      	ldr	r3, [r7, #4]
 80046aa:	68db      	ldr	r3, [r3, #12]
 80046ac:	2b01      	cmp	r3, #1
 80046ae:	d106      	bne.n	80046be <HAL_RCC_OscConfig+0x312>
 80046b0:	4b7b      	ldr	r3, [pc, #492]	; (80048a0 <HAL_RCC_OscConfig+0x4f4>)
 80046b2:	6a1b      	ldr	r3, [r3, #32]
 80046b4:	4a7a      	ldr	r2, [pc, #488]	; (80048a0 <HAL_RCC_OscConfig+0x4f4>)
 80046b6:	f043 0301 	orr.w	r3, r3, #1
 80046ba:	6213      	str	r3, [r2, #32]
 80046bc:	e02d      	b.n	800471a <HAL_RCC_OscConfig+0x36e>
 80046be:	687b      	ldr	r3, [r7, #4]
 80046c0:	68db      	ldr	r3, [r3, #12]
 80046c2:	2b00      	cmp	r3, #0
 80046c4:	d10c      	bne.n	80046e0 <HAL_RCC_OscConfig+0x334>
 80046c6:	4b76      	ldr	r3, [pc, #472]	; (80048a0 <HAL_RCC_OscConfig+0x4f4>)
 80046c8:	6a1b      	ldr	r3, [r3, #32]
 80046ca:	4a75      	ldr	r2, [pc, #468]	; (80048a0 <HAL_RCC_OscConfig+0x4f4>)
 80046cc:	f023 0301 	bic.w	r3, r3, #1
 80046d0:	6213      	str	r3, [r2, #32]
 80046d2:	4b73      	ldr	r3, [pc, #460]	; (80048a0 <HAL_RCC_OscConfig+0x4f4>)
 80046d4:	6a1b      	ldr	r3, [r3, #32]
 80046d6:	4a72      	ldr	r2, [pc, #456]	; (80048a0 <HAL_RCC_OscConfig+0x4f4>)
 80046d8:	f023 0304 	bic.w	r3, r3, #4
 80046dc:	6213      	str	r3, [r2, #32]
 80046de:	e01c      	b.n	800471a <HAL_RCC_OscConfig+0x36e>
 80046e0:	687b      	ldr	r3, [r7, #4]
 80046e2:	68db      	ldr	r3, [r3, #12]
 80046e4:	2b05      	cmp	r3, #5
 80046e6:	d10c      	bne.n	8004702 <HAL_RCC_OscConfig+0x356>
 80046e8:	4b6d      	ldr	r3, [pc, #436]	; (80048a0 <HAL_RCC_OscConfig+0x4f4>)
 80046ea:	6a1b      	ldr	r3, [r3, #32]
 80046ec:	4a6c      	ldr	r2, [pc, #432]	; (80048a0 <HAL_RCC_OscConfig+0x4f4>)
 80046ee:	f043 0304 	orr.w	r3, r3, #4
 80046f2:	6213      	str	r3, [r2, #32]
 80046f4:	4b6a      	ldr	r3, [pc, #424]	; (80048a0 <HAL_RCC_OscConfig+0x4f4>)
 80046f6:	6a1b      	ldr	r3, [r3, #32]
 80046f8:	4a69      	ldr	r2, [pc, #420]	; (80048a0 <HAL_RCC_OscConfig+0x4f4>)
 80046fa:	f043 0301 	orr.w	r3, r3, #1
 80046fe:	6213      	str	r3, [r2, #32]
 8004700:	e00b      	b.n	800471a <HAL_RCC_OscConfig+0x36e>
 8004702:	4b67      	ldr	r3, [pc, #412]	; (80048a0 <HAL_RCC_OscConfig+0x4f4>)
 8004704:	6a1b      	ldr	r3, [r3, #32]
 8004706:	4a66      	ldr	r2, [pc, #408]	; (80048a0 <HAL_RCC_OscConfig+0x4f4>)
 8004708:	f023 0301 	bic.w	r3, r3, #1
 800470c:	6213      	str	r3, [r2, #32]
 800470e:	4b64      	ldr	r3, [pc, #400]	; (80048a0 <HAL_RCC_OscConfig+0x4f4>)
 8004710:	6a1b      	ldr	r3, [r3, #32]
 8004712:	4a63      	ldr	r2, [pc, #396]	; (80048a0 <HAL_RCC_OscConfig+0x4f4>)
 8004714:	f023 0304 	bic.w	r3, r3, #4
 8004718:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800471a:	687b      	ldr	r3, [r7, #4]
 800471c:	68db      	ldr	r3, [r3, #12]
 800471e:	2b00      	cmp	r3, #0
 8004720:	d015      	beq.n	800474e <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004722:	f7fd fead 	bl	8002480 <HAL_GetTick>
 8004726:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004728:	e00a      	b.n	8004740 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800472a:	f7fd fea9 	bl	8002480 <HAL_GetTick>
 800472e:	4602      	mov	r2, r0
 8004730:	693b      	ldr	r3, [r7, #16]
 8004732:	1ad3      	subs	r3, r2, r3
 8004734:	f241 3288 	movw	r2, #5000	; 0x1388
 8004738:	4293      	cmp	r3, r2
 800473a:	d901      	bls.n	8004740 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 800473c:	2303      	movs	r3, #3
 800473e:	e0ab      	b.n	8004898 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004740:	4b57      	ldr	r3, [pc, #348]	; (80048a0 <HAL_RCC_OscConfig+0x4f4>)
 8004742:	6a1b      	ldr	r3, [r3, #32]
 8004744:	f003 0302 	and.w	r3, r3, #2
 8004748:	2b00      	cmp	r3, #0
 800474a:	d0ee      	beq.n	800472a <HAL_RCC_OscConfig+0x37e>
 800474c:	e014      	b.n	8004778 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800474e:	f7fd fe97 	bl	8002480 <HAL_GetTick>
 8004752:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004754:	e00a      	b.n	800476c <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004756:	f7fd fe93 	bl	8002480 <HAL_GetTick>
 800475a:	4602      	mov	r2, r0
 800475c:	693b      	ldr	r3, [r7, #16]
 800475e:	1ad3      	subs	r3, r2, r3
 8004760:	f241 3288 	movw	r2, #5000	; 0x1388
 8004764:	4293      	cmp	r3, r2
 8004766:	d901      	bls.n	800476c <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8004768:	2303      	movs	r3, #3
 800476a:	e095      	b.n	8004898 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800476c:	4b4c      	ldr	r3, [pc, #304]	; (80048a0 <HAL_RCC_OscConfig+0x4f4>)
 800476e:	6a1b      	ldr	r3, [r3, #32]
 8004770:	f003 0302 	and.w	r3, r3, #2
 8004774:	2b00      	cmp	r3, #0
 8004776:	d1ee      	bne.n	8004756 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8004778:	7dfb      	ldrb	r3, [r7, #23]
 800477a:	2b01      	cmp	r3, #1
 800477c:	d105      	bne.n	800478a <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800477e:	4b48      	ldr	r3, [pc, #288]	; (80048a0 <HAL_RCC_OscConfig+0x4f4>)
 8004780:	69db      	ldr	r3, [r3, #28]
 8004782:	4a47      	ldr	r2, [pc, #284]	; (80048a0 <HAL_RCC_OscConfig+0x4f4>)
 8004784:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004788:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800478a:	687b      	ldr	r3, [r7, #4]
 800478c:	69db      	ldr	r3, [r3, #28]
 800478e:	2b00      	cmp	r3, #0
 8004790:	f000 8081 	beq.w	8004896 <HAL_RCC_OscConfig+0x4ea>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8004794:	4b42      	ldr	r3, [pc, #264]	; (80048a0 <HAL_RCC_OscConfig+0x4f4>)
 8004796:	685b      	ldr	r3, [r3, #4]
 8004798:	f003 030c 	and.w	r3, r3, #12
 800479c:	2b08      	cmp	r3, #8
 800479e:	d061      	beq.n	8004864 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80047a0:	687b      	ldr	r3, [r7, #4]
 80047a2:	69db      	ldr	r3, [r3, #28]
 80047a4:	2b02      	cmp	r3, #2
 80047a6:	d146      	bne.n	8004836 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80047a8:	4b3f      	ldr	r3, [pc, #252]	; (80048a8 <HAL_RCC_OscConfig+0x4fc>)
 80047aa:	2200      	movs	r2, #0
 80047ac:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80047ae:	f7fd fe67 	bl	8002480 <HAL_GetTick>
 80047b2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80047b4:	e008      	b.n	80047c8 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80047b6:	f7fd fe63 	bl	8002480 <HAL_GetTick>
 80047ba:	4602      	mov	r2, r0
 80047bc:	693b      	ldr	r3, [r7, #16]
 80047be:	1ad3      	subs	r3, r2, r3
 80047c0:	2b02      	cmp	r3, #2
 80047c2:	d901      	bls.n	80047c8 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 80047c4:	2303      	movs	r3, #3
 80047c6:	e067      	b.n	8004898 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80047c8:	4b35      	ldr	r3, [pc, #212]	; (80048a0 <HAL_RCC_OscConfig+0x4f4>)
 80047ca:	681b      	ldr	r3, [r3, #0]
 80047cc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80047d0:	2b00      	cmp	r3, #0
 80047d2:	d1f0      	bne.n	80047b6 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 80047d4:	687b      	ldr	r3, [r7, #4]
 80047d6:	6a1b      	ldr	r3, [r3, #32]
 80047d8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80047dc:	d108      	bne.n	80047f0 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 80047de:	4b30      	ldr	r3, [pc, #192]	; (80048a0 <HAL_RCC_OscConfig+0x4f4>)
 80047e0:	685b      	ldr	r3, [r3, #4]
 80047e2:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 80047e6:	687b      	ldr	r3, [r7, #4]
 80047e8:	689b      	ldr	r3, [r3, #8]
 80047ea:	492d      	ldr	r1, [pc, #180]	; (80048a0 <HAL_RCC_OscConfig+0x4f4>)
 80047ec:	4313      	orrs	r3, r2
 80047ee:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80047f0:	4b2b      	ldr	r3, [pc, #172]	; (80048a0 <HAL_RCC_OscConfig+0x4f4>)
 80047f2:	685b      	ldr	r3, [r3, #4]
 80047f4:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 80047f8:	687b      	ldr	r3, [r7, #4]
 80047fa:	6a19      	ldr	r1, [r3, #32]
 80047fc:	687b      	ldr	r3, [r7, #4]
 80047fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004800:	430b      	orrs	r3, r1
 8004802:	4927      	ldr	r1, [pc, #156]	; (80048a0 <HAL_RCC_OscConfig+0x4f4>)
 8004804:	4313      	orrs	r3, r2
 8004806:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004808:	4b27      	ldr	r3, [pc, #156]	; (80048a8 <HAL_RCC_OscConfig+0x4fc>)
 800480a:	2201      	movs	r2, #1
 800480c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800480e:	f7fd fe37 	bl	8002480 <HAL_GetTick>
 8004812:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8004814:	e008      	b.n	8004828 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004816:	f7fd fe33 	bl	8002480 <HAL_GetTick>
 800481a:	4602      	mov	r2, r0
 800481c:	693b      	ldr	r3, [r7, #16]
 800481e:	1ad3      	subs	r3, r2, r3
 8004820:	2b02      	cmp	r3, #2
 8004822:	d901      	bls.n	8004828 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8004824:	2303      	movs	r3, #3
 8004826:	e037      	b.n	8004898 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8004828:	4b1d      	ldr	r3, [pc, #116]	; (80048a0 <HAL_RCC_OscConfig+0x4f4>)
 800482a:	681b      	ldr	r3, [r3, #0]
 800482c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004830:	2b00      	cmp	r3, #0
 8004832:	d0f0      	beq.n	8004816 <HAL_RCC_OscConfig+0x46a>
 8004834:	e02f      	b.n	8004896 <HAL_RCC_OscConfig+0x4ea>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004836:	4b1c      	ldr	r3, [pc, #112]	; (80048a8 <HAL_RCC_OscConfig+0x4fc>)
 8004838:	2200      	movs	r2, #0
 800483a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800483c:	f7fd fe20 	bl	8002480 <HAL_GetTick>
 8004840:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004842:	e008      	b.n	8004856 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004844:	f7fd fe1c 	bl	8002480 <HAL_GetTick>
 8004848:	4602      	mov	r2, r0
 800484a:	693b      	ldr	r3, [r7, #16]
 800484c:	1ad3      	subs	r3, r2, r3
 800484e:	2b02      	cmp	r3, #2
 8004850:	d901      	bls.n	8004856 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8004852:	2303      	movs	r3, #3
 8004854:	e020      	b.n	8004898 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004856:	4b12      	ldr	r3, [pc, #72]	; (80048a0 <HAL_RCC_OscConfig+0x4f4>)
 8004858:	681b      	ldr	r3, [r3, #0]
 800485a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800485e:	2b00      	cmp	r3, #0
 8004860:	d1f0      	bne.n	8004844 <HAL_RCC_OscConfig+0x498>
 8004862:	e018      	b.n	8004896 <HAL_RCC_OscConfig+0x4ea>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8004864:	687b      	ldr	r3, [r7, #4]
 8004866:	69db      	ldr	r3, [r3, #28]
 8004868:	2b01      	cmp	r3, #1
 800486a:	d101      	bne.n	8004870 <HAL_RCC_OscConfig+0x4c4>
      {
        return HAL_ERROR;
 800486c:	2301      	movs	r3, #1
 800486e:	e013      	b.n	8004898 <HAL_RCC_OscConfig+0x4ec>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8004870:	4b0b      	ldr	r3, [pc, #44]	; (80048a0 <HAL_RCC_OscConfig+0x4f4>)
 8004872:	685b      	ldr	r3, [r3, #4]
 8004874:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004876:	68fb      	ldr	r3, [r7, #12]
 8004878:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 800487c:	687b      	ldr	r3, [r7, #4]
 800487e:	6a1b      	ldr	r3, [r3, #32]
 8004880:	429a      	cmp	r2, r3
 8004882:	d106      	bne.n	8004892 <HAL_RCC_OscConfig+0x4e6>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8004884:	68fb      	ldr	r3, [r7, #12]
 8004886:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 800488a:	687b      	ldr	r3, [r7, #4]
 800488c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800488e:	429a      	cmp	r2, r3
 8004890:	d001      	beq.n	8004896 <HAL_RCC_OscConfig+0x4ea>
        {
          return HAL_ERROR;
 8004892:	2301      	movs	r3, #1
 8004894:	e000      	b.n	8004898 <HAL_RCC_OscConfig+0x4ec>
        }
      }
    }
  }

  return HAL_OK;
 8004896:	2300      	movs	r3, #0
}
 8004898:	4618      	mov	r0, r3
 800489a:	3718      	adds	r7, #24
 800489c:	46bd      	mov	sp, r7
 800489e:	bd80      	pop	{r7, pc}
 80048a0:	40021000 	.word	0x40021000
 80048a4:	40007000 	.word	0x40007000
 80048a8:	42420060 	.word	0x42420060

080048ac <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80048ac:	b580      	push	{r7, lr}
 80048ae:	b084      	sub	sp, #16
 80048b0:	af00      	add	r7, sp, #0
 80048b2:	6078      	str	r0, [r7, #4]
 80048b4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80048b6:	687b      	ldr	r3, [r7, #4]
 80048b8:	2b00      	cmp	r3, #0
 80048ba:	d101      	bne.n	80048c0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80048bc:	2301      	movs	r3, #1
 80048be:	e0d0      	b.n	8004a62 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80048c0:	4b6a      	ldr	r3, [pc, #424]	; (8004a6c <HAL_RCC_ClockConfig+0x1c0>)
 80048c2:	681b      	ldr	r3, [r3, #0]
 80048c4:	f003 0307 	and.w	r3, r3, #7
 80048c8:	683a      	ldr	r2, [r7, #0]
 80048ca:	429a      	cmp	r2, r3
 80048cc:	d910      	bls.n	80048f0 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80048ce:	4b67      	ldr	r3, [pc, #412]	; (8004a6c <HAL_RCC_ClockConfig+0x1c0>)
 80048d0:	681b      	ldr	r3, [r3, #0]
 80048d2:	f023 0207 	bic.w	r2, r3, #7
 80048d6:	4965      	ldr	r1, [pc, #404]	; (8004a6c <HAL_RCC_ClockConfig+0x1c0>)
 80048d8:	683b      	ldr	r3, [r7, #0]
 80048da:	4313      	orrs	r3, r2
 80048dc:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80048de:	4b63      	ldr	r3, [pc, #396]	; (8004a6c <HAL_RCC_ClockConfig+0x1c0>)
 80048e0:	681b      	ldr	r3, [r3, #0]
 80048e2:	f003 0307 	and.w	r3, r3, #7
 80048e6:	683a      	ldr	r2, [r7, #0]
 80048e8:	429a      	cmp	r2, r3
 80048ea:	d001      	beq.n	80048f0 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 80048ec:	2301      	movs	r3, #1
 80048ee:	e0b8      	b.n	8004a62 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80048f0:	687b      	ldr	r3, [r7, #4]
 80048f2:	681b      	ldr	r3, [r3, #0]
 80048f4:	f003 0302 	and.w	r3, r3, #2
 80048f8:	2b00      	cmp	r3, #0
 80048fa:	d020      	beq.n	800493e <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80048fc:	687b      	ldr	r3, [r7, #4]
 80048fe:	681b      	ldr	r3, [r3, #0]
 8004900:	f003 0304 	and.w	r3, r3, #4
 8004904:	2b00      	cmp	r3, #0
 8004906:	d005      	beq.n	8004914 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8004908:	4b59      	ldr	r3, [pc, #356]	; (8004a70 <HAL_RCC_ClockConfig+0x1c4>)
 800490a:	685b      	ldr	r3, [r3, #4]
 800490c:	4a58      	ldr	r2, [pc, #352]	; (8004a70 <HAL_RCC_ClockConfig+0x1c4>)
 800490e:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8004912:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004914:	687b      	ldr	r3, [r7, #4]
 8004916:	681b      	ldr	r3, [r3, #0]
 8004918:	f003 0308 	and.w	r3, r3, #8
 800491c:	2b00      	cmp	r3, #0
 800491e:	d005      	beq.n	800492c <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8004920:	4b53      	ldr	r3, [pc, #332]	; (8004a70 <HAL_RCC_ClockConfig+0x1c4>)
 8004922:	685b      	ldr	r3, [r3, #4]
 8004924:	4a52      	ldr	r2, [pc, #328]	; (8004a70 <HAL_RCC_ClockConfig+0x1c4>)
 8004926:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 800492a:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800492c:	4b50      	ldr	r3, [pc, #320]	; (8004a70 <HAL_RCC_ClockConfig+0x1c4>)
 800492e:	685b      	ldr	r3, [r3, #4]
 8004930:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004934:	687b      	ldr	r3, [r7, #4]
 8004936:	689b      	ldr	r3, [r3, #8]
 8004938:	494d      	ldr	r1, [pc, #308]	; (8004a70 <HAL_RCC_ClockConfig+0x1c4>)
 800493a:	4313      	orrs	r3, r2
 800493c:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800493e:	687b      	ldr	r3, [r7, #4]
 8004940:	681b      	ldr	r3, [r3, #0]
 8004942:	f003 0301 	and.w	r3, r3, #1
 8004946:	2b00      	cmp	r3, #0
 8004948:	d040      	beq.n	80049cc <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800494a:	687b      	ldr	r3, [r7, #4]
 800494c:	685b      	ldr	r3, [r3, #4]
 800494e:	2b01      	cmp	r3, #1
 8004950:	d107      	bne.n	8004962 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004952:	4b47      	ldr	r3, [pc, #284]	; (8004a70 <HAL_RCC_ClockConfig+0x1c4>)
 8004954:	681b      	ldr	r3, [r3, #0]
 8004956:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800495a:	2b00      	cmp	r3, #0
 800495c:	d115      	bne.n	800498a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800495e:	2301      	movs	r3, #1
 8004960:	e07f      	b.n	8004a62 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8004962:	687b      	ldr	r3, [r7, #4]
 8004964:	685b      	ldr	r3, [r3, #4]
 8004966:	2b02      	cmp	r3, #2
 8004968:	d107      	bne.n	800497a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800496a:	4b41      	ldr	r3, [pc, #260]	; (8004a70 <HAL_RCC_ClockConfig+0x1c4>)
 800496c:	681b      	ldr	r3, [r3, #0]
 800496e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004972:	2b00      	cmp	r3, #0
 8004974:	d109      	bne.n	800498a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004976:	2301      	movs	r3, #1
 8004978:	e073      	b.n	8004a62 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800497a:	4b3d      	ldr	r3, [pc, #244]	; (8004a70 <HAL_RCC_ClockConfig+0x1c4>)
 800497c:	681b      	ldr	r3, [r3, #0]
 800497e:	f003 0302 	and.w	r3, r3, #2
 8004982:	2b00      	cmp	r3, #0
 8004984:	d101      	bne.n	800498a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004986:	2301      	movs	r3, #1
 8004988:	e06b      	b.n	8004a62 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800498a:	4b39      	ldr	r3, [pc, #228]	; (8004a70 <HAL_RCC_ClockConfig+0x1c4>)
 800498c:	685b      	ldr	r3, [r3, #4]
 800498e:	f023 0203 	bic.w	r2, r3, #3
 8004992:	687b      	ldr	r3, [r7, #4]
 8004994:	685b      	ldr	r3, [r3, #4]
 8004996:	4936      	ldr	r1, [pc, #216]	; (8004a70 <HAL_RCC_ClockConfig+0x1c4>)
 8004998:	4313      	orrs	r3, r2
 800499a:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800499c:	f7fd fd70 	bl	8002480 <HAL_GetTick>
 80049a0:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80049a2:	e00a      	b.n	80049ba <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80049a4:	f7fd fd6c 	bl	8002480 <HAL_GetTick>
 80049a8:	4602      	mov	r2, r0
 80049aa:	68fb      	ldr	r3, [r7, #12]
 80049ac:	1ad3      	subs	r3, r2, r3
 80049ae:	f241 3288 	movw	r2, #5000	; 0x1388
 80049b2:	4293      	cmp	r3, r2
 80049b4:	d901      	bls.n	80049ba <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80049b6:	2303      	movs	r3, #3
 80049b8:	e053      	b.n	8004a62 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80049ba:	4b2d      	ldr	r3, [pc, #180]	; (8004a70 <HAL_RCC_ClockConfig+0x1c4>)
 80049bc:	685b      	ldr	r3, [r3, #4]
 80049be:	f003 020c 	and.w	r2, r3, #12
 80049c2:	687b      	ldr	r3, [r7, #4]
 80049c4:	685b      	ldr	r3, [r3, #4]
 80049c6:	009b      	lsls	r3, r3, #2
 80049c8:	429a      	cmp	r2, r3
 80049ca:	d1eb      	bne.n	80049a4 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80049cc:	4b27      	ldr	r3, [pc, #156]	; (8004a6c <HAL_RCC_ClockConfig+0x1c0>)
 80049ce:	681b      	ldr	r3, [r3, #0]
 80049d0:	f003 0307 	and.w	r3, r3, #7
 80049d4:	683a      	ldr	r2, [r7, #0]
 80049d6:	429a      	cmp	r2, r3
 80049d8:	d210      	bcs.n	80049fc <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80049da:	4b24      	ldr	r3, [pc, #144]	; (8004a6c <HAL_RCC_ClockConfig+0x1c0>)
 80049dc:	681b      	ldr	r3, [r3, #0]
 80049de:	f023 0207 	bic.w	r2, r3, #7
 80049e2:	4922      	ldr	r1, [pc, #136]	; (8004a6c <HAL_RCC_ClockConfig+0x1c0>)
 80049e4:	683b      	ldr	r3, [r7, #0]
 80049e6:	4313      	orrs	r3, r2
 80049e8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80049ea:	4b20      	ldr	r3, [pc, #128]	; (8004a6c <HAL_RCC_ClockConfig+0x1c0>)
 80049ec:	681b      	ldr	r3, [r3, #0]
 80049ee:	f003 0307 	and.w	r3, r3, #7
 80049f2:	683a      	ldr	r2, [r7, #0]
 80049f4:	429a      	cmp	r2, r3
 80049f6:	d001      	beq.n	80049fc <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 80049f8:	2301      	movs	r3, #1
 80049fa:	e032      	b.n	8004a62 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80049fc:	687b      	ldr	r3, [r7, #4]
 80049fe:	681b      	ldr	r3, [r3, #0]
 8004a00:	f003 0304 	and.w	r3, r3, #4
 8004a04:	2b00      	cmp	r3, #0
 8004a06:	d008      	beq.n	8004a1a <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004a08:	4b19      	ldr	r3, [pc, #100]	; (8004a70 <HAL_RCC_ClockConfig+0x1c4>)
 8004a0a:	685b      	ldr	r3, [r3, #4]
 8004a0c:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8004a10:	687b      	ldr	r3, [r7, #4]
 8004a12:	68db      	ldr	r3, [r3, #12]
 8004a14:	4916      	ldr	r1, [pc, #88]	; (8004a70 <HAL_RCC_ClockConfig+0x1c4>)
 8004a16:	4313      	orrs	r3, r2
 8004a18:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004a1a:	687b      	ldr	r3, [r7, #4]
 8004a1c:	681b      	ldr	r3, [r3, #0]
 8004a1e:	f003 0308 	and.w	r3, r3, #8
 8004a22:	2b00      	cmp	r3, #0
 8004a24:	d009      	beq.n	8004a3a <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8004a26:	4b12      	ldr	r3, [pc, #72]	; (8004a70 <HAL_RCC_ClockConfig+0x1c4>)
 8004a28:	685b      	ldr	r3, [r3, #4]
 8004a2a:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8004a2e:	687b      	ldr	r3, [r7, #4]
 8004a30:	691b      	ldr	r3, [r3, #16]
 8004a32:	00db      	lsls	r3, r3, #3
 8004a34:	490e      	ldr	r1, [pc, #56]	; (8004a70 <HAL_RCC_ClockConfig+0x1c4>)
 8004a36:	4313      	orrs	r3, r2
 8004a38:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8004a3a:	f000 f821 	bl	8004a80 <HAL_RCC_GetSysClockFreq>
 8004a3e:	4602      	mov	r2, r0
 8004a40:	4b0b      	ldr	r3, [pc, #44]	; (8004a70 <HAL_RCC_ClockConfig+0x1c4>)
 8004a42:	685b      	ldr	r3, [r3, #4]
 8004a44:	091b      	lsrs	r3, r3, #4
 8004a46:	f003 030f 	and.w	r3, r3, #15
 8004a4a:	490a      	ldr	r1, [pc, #40]	; (8004a74 <HAL_RCC_ClockConfig+0x1c8>)
 8004a4c:	5ccb      	ldrb	r3, [r1, r3]
 8004a4e:	fa22 f303 	lsr.w	r3, r2, r3
 8004a52:	4a09      	ldr	r2, [pc, #36]	; (8004a78 <HAL_RCC_ClockConfig+0x1cc>)
 8004a54:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8004a56:	4b09      	ldr	r3, [pc, #36]	; (8004a7c <HAL_RCC_ClockConfig+0x1d0>)
 8004a58:	681b      	ldr	r3, [r3, #0]
 8004a5a:	4618      	mov	r0, r3
 8004a5c:	f7fd fcce 	bl	80023fc <HAL_InitTick>

  return HAL_OK;
 8004a60:	2300      	movs	r3, #0
}
 8004a62:	4618      	mov	r0, r3
 8004a64:	3710      	adds	r7, #16
 8004a66:	46bd      	mov	sp, r7
 8004a68:	bd80      	pop	{r7, pc}
 8004a6a:	bf00      	nop
 8004a6c:	40022000 	.word	0x40022000
 8004a70:	40021000 	.word	0x40021000
 8004a74:	0800a660 	.word	0x0800a660
 8004a78:	20000000 	.word	0x20000000
 8004a7c:	20000004 	.word	0x20000004

08004a80 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004a80:	b490      	push	{r4, r7}
 8004a82:	b08a      	sub	sp, #40	; 0x28
 8004a84:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8004a86:	4b2a      	ldr	r3, [pc, #168]	; (8004b30 <HAL_RCC_GetSysClockFreq+0xb0>)
 8004a88:	1d3c      	adds	r4, r7, #4
 8004a8a:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8004a8c:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8004a90:	f240 2301 	movw	r3, #513	; 0x201
 8004a94:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8004a96:	2300      	movs	r3, #0
 8004a98:	61fb      	str	r3, [r7, #28]
 8004a9a:	2300      	movs	r3, #0
 8004a9c:	61bb      	str	r3, [r7, #24]
 8004a9e:	2300      	movs	r3, #0
 8004aa0:	627b      	str	r3, [r7, #36]	; 0x24
 8004aa2:	2300      	movs	r3, #0
 8004aa4:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8004aa6:	2300      	movs	r3, #0
 8004aa8:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8004aaa:	4b22      	ldr	r3, [pc, #136]	; (8004b34 <HAL_RCC_GetSysClockFreq+0xb4>)
 8004aac:	685b      	ldr	r3, [r3, #4]
 8004aae:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8004ab0:	69fb      	ldr	r3, [r7, #28]
 8004ab2:	f003 030c 	and.w	r3, r3, #12
 8004ab6:	2b04      	cmp	r3, #4
 8004ab8:	d002      	beq.n	8004ac0 <HAL_RCC_GetSysClockFreq+0x40>
 8004aba:	2b08      	cmp	r3, #8
 8004abc:	d003      	beq.n	8004ac6 <HAL_RCC_GetSysClockFreq+0x46>
 8004abe:	e02d      	b.n	8004b1c <HAL_RCC_GetSysClockFreq+0x9c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8004ac0:	4b1d      	ldr	r3, [pc, #116]	; (8004b38 <HAL_RCC_GetSysClockFreq+0xb8>)
 8004ac2:	623b      	str	r3, [r7, #32]
      break;
 8004ac4:	e02d      	b.n	8004b22 <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8004ac6:	69fb      	ldr	r3, [r7, #28]
 8004ac8:	0c9b      	lsrs	r3, r3, #18
 8004aca:	f003 030f 	and.w	r3, r3, #15
 8004ace:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8004ad2:	4413      	add	r3, r2
 8004ad4:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 8004ad8:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8004ada:	69fb      	ldr	r3, [r7, #28]
 8004adc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004ae0:	2b00      	cmp	r3, #0
 8004ae2:	d013      	beq.n	8004b0c <HAL_RCC_GetSysClockFreq+0x8c>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8004ae4:	4b13      	ldr	r3, [pc, #76]	; (8004b34 <HAL_RCC_GetSysClockFreq+0xb4>)
 8004ae6:	685b      	ldr	r3, [r3, #4]
 8004ae8:	0c5b      	lsrs	r3, r3, #17
 8004aea:	f003 0301 	and.w	r3, r3, #1
 8004aee:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8004af2:	4413      	add	r3, r2
 8004af4:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8004af8:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8004afa:	697b      	ldr	r3, [r7, #20]
 8004afc:	4a0e      	ldr	r2, [pc, #56]	; (8004b38 <HAL_RCC_GetSysClockFreq+0xb8>)
 8004afe:	fb02 f203 	mul.w	r2, r2, r3
 8004b02:	69bb      	ldr	r3, [r7, #24]
 8004b04:	fbb2 f3f3 	udiv	r3, r2, r3
 8004b08:	627b      	str	r3, [r7, #36]	; 0x24
 8004b0a:	e004      	b.n	8004b16 <HAL_RCC_GetSysClockFreq+0x96>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8004b0c:	697b      	ldr	r3, [r7, #20]
 8004b0e:	4a0b      	ldr	r2, [pc, #44]	; (8004b3c <HAL_RCC_GetSysClockFreq+0xbc>)
 8004b10:	fb02 f303 	mul.w	r3, r2, r3
 8004b14:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 8004b16:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b18:	623b      	str	r3, [r7, #32]
      break;
 8004b1a:	e002      	b.n	8004b22 <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8004b1c:	4b06      	ldr	r3, [pc, #24]	; (8004b38 <HAL_RCC_GetSysClockFreq+0xb8>)
 8004b1e:	623b      	str	r3, [r7, #32]
      break;
 8004b20:	bf00      	nop
    }
  }
  return sysclockfreq;
 8004b22:	6a3b      	ldr	r3, [r7, #32]
}
 8004b24:	4618      	mov	r0, r3
 8004b26:	3728      	adds	r7, #40	; 0x28
 8004b28:	46bd      	mov	sp, r7
 8004b2a:	bc90      	pop	{r4, r7}
 8004b2c:	4770      	bx	lr
 8004b2e:	bf00      	nop
 8004b30:	0800a640 	.word	0x0800a640
 8004b34:	40021000 	.word	0x40021000
 8004b38:	007a1200 	.word	0x007a1200
 8004b3c:	003d0900 	.word	0x003d0900

08004b40 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004b40:	b480      	push	{r7}
 8004b42:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004b44:	4b02      	ldr	r3, [pc, #8]	; (8004b50 <HAL_RCC_GetHCLKFreq+0x10>)
 8004b46:	681b      	ldr	r3, [r3, #0]
}
 8004b48:	4618      	mov	r0, r3
 8004b4a:	46bd      	mov	sp, r7
 8004b4c:	bc80      	pop	{r7}
 8004b4e:	4770      	bx	lr
 8004b50:	20000000 	.word	0x20000000

08004b54 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004b54:	b580      	push	{r7, lr}
 8004b56:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8004b58:	f7ff fff2 	bl	8004b40 <HAL_RCC_GetHCLKFreq>
 8004b5c:	4602      	mov	r2, r0
 8004b5e:	4b05      	ldr	r3, [pc, #20]	; (8004b74 <HAL_RCC_GetPCLK1Freq+0x20>)
 8004b60:	685b      	ldr	r3, [r3, #4]
 8004b62:	0a1b      	lsrs	r3, r3, #8
 8004b64:	f003 0307 	and.w	r3, r3, #7
 8004b68:	4903      	ldr	r1, [pc, #12]	; (8004b78 <HAL_RCC_GetPCLK1Freq+0x24>)
 8004b6a:	5ccb      	ldrb	r3, [r1, r3]
 8004b6c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004b70:	4618      	mov	r0, r3
 8004b72:	bd80      	pop	{r7, pc}
 8004b74:	40021000 	.word	0x40021000
 8004b78:	0800a670 	.word	0x0800a670

08004b7c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004b7c:	b580      	push	{r7, lr}
 8004b7e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8004b80:	f7ff ffde 	bl	8004b40 <HAL_RCC_GetHCLKFreq>
 8004b84:	4602      	mov	r2, r0
 8004b86:	4b05      	ldr	r3, [pc, #20]	; (8004b9c <HAL_RCC_GetPCLK2Freq+0x20>)
 8004b88:	685b      	ldr	r3, [r3, #4]
 8004b8a:	0adb      	lsrs	r3, r3, #11
 8004b8c:	f003 0307 	and.w	r3, r3, #7
 8004b90:	4903      	ldr	r1, [pc, #12]	; (8004ba0 <HAL_RCC_GetPCLK2Freq+0x24>)
 8004b92:	5ccb      	ldrb	r3, [r1, r3]
 8004b94:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004b98:	4618      	mov	r0, r3
 8004b9a:	bd80      	pop	{r7, pc}
 8004b9c:	40021000 	.word	0x40021000
 8004ba0:	0800a670 	.word	0x0800a670

08004ba4 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8004ba4:	b480      	push	{r7}
 8004ba6:	b085      	sub	sp, #20
 8004ba8:	af00      	add	r7, sp, #0
 8004baa:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8004bac:	4b0a      	ldr	r3, [pc, #40]	; (8004bd8 <RCC_Delay+0x34>)
 8004bae:	681b      	ldr	r3, [r3, #0]
 8004bb0:	4a0a      	ldr	r2, [pc, #40]	; (8004bdc <RCC_Delay+0x38>)
 8004bb2:	fba2 2303 	umull	r2, r3, r2, r3
 8004bb6:	0a5b      	lsrs	r3, r3, #9
 8004bb8:	687a      	ldr	r2, [r7, #4]
 8004bba:	fb02 f303 	mul.w	r3, r2, r3
 8004bbe:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8004bc0:	bf00      	nop
  }
  while (Delay --);
 8004bc2:	68fb      	ldr	r3, [r7, #12]
 8004bc4:	1e5a      	subs	r2, r3, #1
 8004bc6:	60fa      	str	r2, [r7, #12]
 8004bc8:	2b00      	cmp	r3, #0
 8004bca:	d1f9      	bne.n	8004bc0 <RCC_Delay+0x1c>
}
 8004bcc:	bf00      	nop
 8004bce:	bf00      	nop
 8004bd0:	3714      	adds	r7, #20
 8004bd2:	46bd      	mov	sp, r7
 8004bd4:	bc80      	pop	{r7}
 8004bd6:	4770      	bx	lr
 8004bd8:	20000000 	.word	0x20000000
 8004bdc:	10624dd3 	.word	0x10624dd3

08004be0 <HAL_RCCEx_PeriphCLKConfig>:
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8004be0:	b580      	push	{r7, lr}
 8004be2:	b086      	sub	sp, #24
 8004be4:	af00      	add	r7, sp, #0
 8004be6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U, temp_reg = 0U;
 8004be8:	2300      	movs	r3, #0
 8004bea:	613b      	str	r3, [r7, #16]
 8004bec:	2300      	movs	r3, #0
 8004bee:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8004bf0:	687b      	ldr	r3, [r7, #4]
 8004bf2:	681b      	ldr	r3, [r3, #0]
 8004bf4:	f003 0301 	and.w	r3, r3, #1
 8004bf8:	2b00      	cmp	r3, #0
 8004bfa:	d07d      	beq.n	8004cf8 <HAL_RCCEx_PeriphCLKConfig+0x118>
  {
    FlagStatus pwrclkchanged = RESET;
 8004bfc:	2300      	movs	r3, #0
 8004bfe:	75fb      	strb	r3, [r7, #23]
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004c00:	4b4f      	ldr	r3, [pc, #316]	; (8004d40 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004c02:	69db      	ldr	r3, [r3, #28]
 8004c04:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004c08:	2b00      	cmp	r3, #0
 8004c0a:	d10d      	bne.n	8004c28 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004c0c:	4b4c      	ldr	r3, [pc, #304]	; (8004d40 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004c0e:	69db      	ldr	r3, [r3, #28]
 8004c10:	4a4b      	ldr	r2, [pc, #300]	; (8004d40 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004c12:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004c16:	61d3      	str	r3, [r2, #28]
 8004c18:	4b49      	ldr	r3, [pc, #292]	; (8004d40 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004c1a:	69db      	ldr	r3, [r3, #28]
 8004c1c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004c20:	60bb      	str	r3, [r7, #8]
 8004c22:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004c24:	2301      	movs	r3, #1
 8004c26:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004c28:	4b46      	ldr	r3, [pc, #280]	; (8004d44 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8004c2a:	681b      	ldr	r3, [r3, #0]
 8004c2c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004c30:	2b00      	cmp	r3, #0
 8004c32:	d118      	bne.n	8004c66 <HAL_RCCEx_PeriphCLKConfig+0x86>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8004c34:	4b43      	ldr	r3, [pc, #268]	; (8004d44 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8004c36:	681b      	ldr	r3, [r3, #0]
 8004c38:	4a42      	ldr	r2, [pc, #264]	; (8004d44 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8004c3a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004c3e:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004c40:	f7fd fc1e 	bl	8002480 <HAL_GetTick>
 8004c44:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004c46:	e008      	b.n	8004c5a <HAL_RCCEx_PeriphCLKConfig+0x7a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004c48:	f7fd fc1a 	bl	8002480 <HAL_GetTick>
 8004c4c:	4602      	mov	r2, r0
 8004c4e:	693b      	ldr	r3, [r7, #16]
 8004c50:	1ad3      	subs	r3, r2, r3
 8004c52:	2b64      	cmp	r3, #100	; 0x64
 8004c54:	d901      	bls.n	8004c5a <HAL_RCCEx_PeriphCLKConfig+0x7a>
        {
          return HAL_TIMEOUT;
 8004c56:	2303      	movs	r3, #3
 8004c58:	e06d      	b.n	8004d36 <HAL_RCCEx_PeriphCLKConfig+0x156>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004c5a:	4b3a      	ldr	r3, [pc, #232]	; (8004d44 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8004c5c:	681b      	ldr	r3, [r3, #0]
 8004c5e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004c62:	2b00      	cmp	r3, #0
 8004c64:	d0f0      	beq.n	8004c48 <HAL_RCCEx_PeriphCLKConfig+0x68>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8004c66:	4b36      	ldr	r3, [pc, #216]	; (8004d40 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004c68:	6a1b      	ldr	r3, [r3, #32]
 8004c6a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004c6e:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8004c70:	68fb      	ldr	r3, [r7, #12]
 8004c72:	2b00      	cmp	r3, #0
 8004c74:	d02e      	beq.n	8004cd4 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 8004c76:	687b      	ldr	r3, [r7, #4]
 8004c78:	685b      	ldr	r3, [r3, #4]
 8004c7a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004c7e:	68fa      	ldr	r2, [r7, #12]
 8004c80:	429a      	cmp	r2, r3
 8004c82:	d027      	beq.n	8004cd4 <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8004c84:	4b2e      	ldr	r3, [pc, #184]	; (8004d40 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004c86:	6a1b      	ldr	r3, [r3, #32]
 8004c88:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004c8c:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8004c8e:	4b2e      	ldr	r3, [pc, #184]	; (8004d48 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8004c90:	2201      	movs	r2, #1
 8004c92:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8004c94:	4b2c      	ldr	r3, [pc, #176]	; (8004d48 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8004c96:	2200      	movs	r2, #0
 8004c98:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8004c9a:	4a29      	ldr	r2, [pc, #164]	; (8004d40 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004c9c:	68fb      	ldr	r3, [r7, #12]
 8004c9e:	6213      	str	r3, [r2, #32]

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8004ca0:	68fb      	ldr	r3, [r7, #12]
 8004ca2:	f003 0301 	and.w	r3, r3, #1
 8004ca6:	2b00      	cmp	r3, #0
 8004ca8:	d014      	beq.n	8004cd4 <HAL_RCCEx_PeriphCLKConfig+0xf4>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004caa:	f7fd fbe9 	bl	8002480 <HAL_GetTick>
 8004cae:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004cb0:	e00a      	b.n	8004cc8 <HAL_RCCEx_PeriphCLKConfig+0xe8>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004cb2:	f7fd fbe5 	bl	8002480 <HAL_GetTick>
 8004cb6:	4602      	mov	r2, r0
 8004cb8:	693b      	ldr	r3, [r7, #16]
 8004cba:	1ad3      	subs	r3, r2, r3
 8004cbc:	f241 3288 	movw	r2, #5000	; 0x1388
 8004cc0:	4293      	cmp	r3, r2
 8004cc2:	d901      	bls.n	8004cc8 <HAL_RCCEx_PeriphCLKConfig+0xe8>
          {
            return HAL_TIMEOUT;
 8004cc4:	2303      	movs	r3, #3
 8004cc6:	e036      	b.n	8004d36 <HAL_RCCEx_PeriphCLKConfig+0x156>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004cc8:	4b1d      	ldr	r3, [pc, #116]	; (8004d40 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004cca:	6a1b      	ldr	r3, [r3, #32]
 8004ccc:	f003 0302 	and.w	r3, r3, #2
 8004cd0:	2b00      	cmp	r3, #0
 8004cd2:	d0ee      	beq.n	8004cb2 <HAL_RCCEx_PeriphCLKConfig+0xd2>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8004cd4:	4b1a      	ldr	r3, [pc, #104]	; (8004d40 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004cd6:	6a1b      	ldr	r3, [r3, #32]
 8004cd8:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8004cdc:	687b      	ldr	r3, [r7, #4]
 8004cde:	685b      	ldr	r3, [r3, #4]
 8004ce0:	4917      	ldr	r1, [pc, #92]	; (8004d40 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004ce2:	4313      	orrs	r3, r2
 8004ce4:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8004ce6:	7dfb      	ldrb	r3, [r7, #23]
 8004ce8:	2b01      	cmp	r3, #1
 8004cea:	d105      	bne.n	8004cf8 <HAL_RCCEx_PeriphCLKConfig+0x118>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004cec:	4b14      	ldr	r3, [pc, #80]	; (8004d40 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004cee:	69db      	ldr	r3, [r3, #28]
 8004cf0:	4a13      	ldr	r2, [pc, #76]	; (8004d40 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004cf2:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004cf6:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8004cf8:	687b      	ldr	r3, [r7, #4]
 8004cfa:	681b      	ldr	r3, [r3, #0]
 8004cfc:	f003 0302 	and.w	r3, r3, #2
 8004d00:	2b00      	cmp	r3, #0
 8004d02:	d008      	beq.n	8004d16 <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8004d04:	4b0e      	ldr	r3, [pc, #56]	; (8004d40 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004d06:	685b      	ldr	r3, [r3, #4]
 8004d08:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8004d0c:	687b      	ldr	r3, [r7, #4]
 8004d0e:	689b      	ldr	r3, [r3, #8]
 8004d10:	490b      	ldr	r1, [pc, #44]	; (8004d40 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004d12:	4313      	orrs	r3, r2
 8004d14:	604b      	str	r3, [r1, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8004d16:	687b      	ldr	r3, [r7, #4]
 8004d18:	681b      	ldr	r3, [r3, #0]
 8004d1a:	f003 0310 	and.w	r3, r3, #16
 8004d1e:	2b00      	cmp	r3, #0
 8004d20:	d008      	beq.n	8004d34 <HAL_RCCEx_PeriphCLKConfig+0x154>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8004d22:	4b07      	ldr	r3, [pc, #28]	; (8004d40 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004d24:	685b      	ldr	r3, [r3, #4]
 8004d26:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 8004d2a:	687b      	ldr	r3, [r7, #4]
 8004d2c:	68db      	ldr	r3, [r3, #12]
 8004d2e:	4904      	ldr	r1, [pc, #16]	; (8004d40 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004d30:	4313      	orrs	r3, r2
 8004d32:	604b      	str	r3, [r1, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 8004d34:	2300      	movs	r3, #0
}
 8004d36:	4618      	mov	r0, r3
 8004d38:	3718      	adds	r7, #24
 8004d3a:	46bd      	mov	sp, r7
 8004d3c:	bd80      	pop	{r7, pc}
 8004d3e:	bf00      	nop
 8004d40:	40021000 	.word	0x40021000
 8004d44:	40007000 	.word	0x40007000
 8004d48:	42420440 	.word	0x42420440

08004d4c <HAL_RCCEx_GetPeriphCLKFreq>:
  *            @arg @ref RCC_PERIPHCLK_USB  USB peripheral clock
  @endif
  * @retval Frequency in Hz (0: means that no available frequency for the peripheral)
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 8004d4c:	b590      	push	{r4, r7, lr}
 8004d4e:	b08d      	sub	sp, #52	; 0x34
 8004d50:	af00      	add	r7, sp, #0
 8004d52:	6078      	str	r0, [r7, #4]
  uint32_t prediv1 = 0U, pllclk = 0U, pllmul = 0U;
  uint32_t pll2mul = 0U, pll3mul = 0U, prediv2 = 0U;
#endif /* STM32F105xC || STM32F107xC */
#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6) || \
    defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8004d54:	4b5a      	ldr	r3, [pc, #360]	; (8004ec0 <HAL_RCCEx_GetPeriphCLKFreq+0x174>)
 8004d56:	f107 040c 	add.w	r4, r7, #12
 8004d5a:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8004d5c:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8004d60:	f240 2301 	movw	r3, #513	; 0x201
 8004d64:	813b      	strh	r3, [r7, #8]

  uint32_t prediv1 = 0U, pllclk = 0U, pllmul = 0U;
 8004d66:	2300      	movs	r3, #0
 8004d68:	627b      	str	r3, [r7, #36]	; 0x24
 8004d6a:	2300      	movs	r3, #0
 8004d6c:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004d6e:	2300      	movs	r3, #0
 8004d70:	623b      	str	r3, [r7, #32]
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG */
  uint32_t temp_reg = 0U, frequency = 0U;
 8004d72:	2300      	movs	r3, #0
 8004d74:	61fb      	str	r3, [r7, #28]
 8004d76:	2300      	movs	r3, #0
 8004d78:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClk));

  switch (PeriphClk)
 8004d7a:	687b      	ldr	r3, [r7, #4]
 8004d7c:	2b10      	cmp	r3, #16
 8004d7e:	d00a      	beq.n	8004d96 <HAL_RCCEx_GetPeriphCLKFreq+0x4a>
 8004d80:	687b      	ldr	r3, [r7, #4]
 8004d82:	2b10      	cmp	r3, #16
 8004d84:	f200 8091 	bhi.w	8004eaa <HAL_RCCEx_GetPeriphCLKFreq+0x15e>
 8004d88:	687b      	ldr	r3, [r7, #4]
 8004d8a:	2b01      	cmp	r3, #1
 8004d8c:	d04c      	beq.n	8004e28 <HAL_RCCEx_GetPeriphCLKFreq+0xdc>
 8004d8e:	687b      	ldr	r3, [r7, #4]
 8004d90:	2b02      	cmp	r3, #2
 8004d92:	d07c      	beq.n	8004e8e <HAL_RCCEx_GetPeriphCLKFreq+0x142>
      frequency = HAL_RCC_GetPCLK2Freq() / (((__HAL_RCC_GET_ADC_SOURCE() >> RCC_CFGR_ADCPRE_Pos) + 1) * 2);
      break;
    }
    default:
    {
      break;
 8004d94:	e089      	b.n	8004eaa <HAL_RCCEx_GetPeriphCLKFreq+0x15e>
      temp_reg = RCC->CFGR;
 8004d96:	4b4b      	ldr	r3, [pc, #300]	; (8004ec4 <HAL_RCCEx_GetPeriphCLKFreq+0x178>)
 8004d98:	685b      	ldr	r3, [r3, #4]
 8004d9a:	61fb      	str	r3, [r7, #28]
      if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLON))
 8004d9c:	4b49      	ldr	r3, [pc, #292]	; (8004ec4 <HAL_RCCEx_GetPeriphCLKFreq+0x178>)
 8004d9e:	681b      	ldr	r3, [r3, #0]
 8004da0:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004da4:	2b00      	cmp	r3, #0
 8004da6:	f000 8082 	beq.w	8004eae <HAL_RCCEx_GetPeriphCLKFreq+0x162>
        pllmul = aPLLMULFactorTable[(uint32_t)(temp_reg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8004daa:	69fb      	ldr	r3, [r7, #28]
 8004dac:	0c9b      	lsrs	r3, r3, #18
 8004dae:	f003 030f 	and.w	r3, r3, #15
 8004db2:	f107 0230 	add.w	r2, r7, #48	; 0x30
 8004db6:	4413      	add	r3, r2
 8004db8:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 8004dbc:	623b      	str	r3, [r7, #32]
        if ((temp_reg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8004dbe:	69fb      	ldr	r3, [r7, #28]
 8004dc0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004dc4:	2b00      	cmp	r3, #0
 8004dc6:	d018      	beq.n	8004dfa <HAL_RCCEx_GetPeriphCLKFreq+0xae>
          prediv1 = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8004dc8:	4b3e      	ldr	r3, [pc, #248]	; (8004ec4 <HAL_RCCEx_GetPeriphCLKFreq+0x178>)
 8004dca:	685b      	ldr	r3, [r3, #4]
 8004dcc:	0c5b      	lsrs	r3, r3, #17
 8004dce:	f003 0301 	and.w	r3, r3, #1
 8004dd2:	f107 0230 	add.w	r2, r7, #48	; 0x30
 8004dd6:	4413      	add	r3, r2
 8004dd8:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8004ddc:	627b      	str	r3, [r7, #36]	; 0x24
          if ((temp_reg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8004dde:	69fb      	ldr	r3, [r7, #28]
 8004de0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004de4:	2b00      	cmp	r3, #0
 8004de6:	d00d      	beq.n	8004e04 <HAL_RCCEx_GetPeriphCLKFreq+0xb8>
            pllclk = (uint32_t)((HSE_VALUE / prediv1) * pllmul);
 8004de8:	4a37      	ldr	r2, [pc, #220]	; (8004ec8 <HAL_RCCEx_GetPeriphCLKFreq+0x17c>)
 8004dea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004dec:	fbb2 f2f3 	udiv	r2, r2, r3
 8004df0:	6a3b      	ldr	r3, [r7, #32]
 8004df2:	fb02 f303 	mul.w	r3, r2, r3
 8004df6:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004df8:	e004      	b.n	8004e04 <HAL_RCCEx_GetPeriphCLKFreq+0xb8>
          pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8004dfa:	6a3b      	ldr	r3, [r7, #32]
 8004dfc:	4a33      	ldr	r2, [pc, #204]	; (8004ecc <HAL_RCCEx_GetPeriphCLKFreq+0x180>)
 8004dfe:	fb02 f303 	mul.w	r3, r2, r3
 8004e02:	62fb      	str	r3, [r7, #44]	; 0x2c
        if (__HAL_RCC_GET_USB_SOURCE() == RCC_USBCLKSOURCE_PLL)
 8004e04:	4b2f      	ldr	r3, [pc, #188]	; (8004ec4 <HAL_RCCEx_GetPeriphCLKFreq+0x178>)
 8004e06:	685b      	ldr	r3, [r3, #4]
 8004e08:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004e0c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004e10:	d102      	bne.n	8004e18 <HAL_RCCEx_GetPeriphCLKFreq+0xcc>
          frequency = pllclk;
 8004e12:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004e14:	62bb      	str	r3, [r7, #40]	; 0x28
      break;
 8004e16:	e04a      	b.n	8004eae <HAL_RCCEx_GetPeriphCLKFreq+0x162>
          frequency = (pllclk * 2) / 3;
 8004e18:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004e1a:	005b      	lsls	r3, r3, #1
 8004e1c:	4a2c      	ldr	r2, [pc, #176]	; (8004ed0 <HAL_RCCEx_GetPeriphCLKFreq+0x184>)
 8004e1e:	fba2 2303 	umull	r2, r3, r2, r3
 8004e22:	085b      	lsrs	r3, r3, #1
 8004e24:	62bb      	str	r3, [r7, #40]	; 0x28
      break;
 8004e26:	e042      	b.n	8004eae <HAL_RCCEx_GetPeriphCLKFreq+0x162>
      temp_reg = RCC->BDCR;
 8004e28:	4b26      	ldr	r3, [pc, #152]	; (8004ec4 <HAL_RCCEx_GetPeriphCLKFreq+0x178>)
 8004e2a:	6a1b      	ldr	r3, [r3, #32]
 8004e2c:	61fb      	str	r3, [r7, #28]
      if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_LSE) && (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSERDY)))
 8004e2e:	69fb      	ldr	r3, [r7, #28]
 8004e30:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004e34:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004e38:	d108      	bne.n	8004e4c <HAL_RCCEx_GetPeriphCLKFreq+0x100>
 8004e3a:	69fb      	ldr	r3, [r7, #28]
 8004e3c:	f003 0302 	and.w	r3, r3, #2
 8004e40:	2b00      	cmp	r3, #0
 8004e42:	d003      	beq.n	8004e4c <HAL_RCCEx_GetPeriphCLKFreq+0x100>
        frequency = LSE_VALUE;
 8004e44:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004e48:	62bb      	str	r3, [r7, #40]	; 0x28
 8004e4a:	e01f      	b.n	8004e8c <HAL_RCCEx_GetPeriphCLKFreq+0x140>
      else if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_LSI) && (HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSIRDY)))
 8004e4c:	69fb      	ldr	r3, [r7, #28]
 8004e4e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004e52:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004e56:	d109      	bne.n	8004e6c <HAL_RCCEx_GetPeriphCLKFreq+0x120>
 8004e58:	4b1a      	ldr	r3, [pc, #104]	; (8004ec4 <HAL_RCCEx_GetPeriphCLKFreq+0x178>)
 8004e5a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004e5c:	f003 0302 	and.w	r3, r3, #2
 8004e60:	2b00      	cmp	r3, #0
 8004e62:	d003      	beq.n	8004e6c <HAL_RCCEx_GetPeriphCLKFreq+0x120>
        frequency = LSI_VALUE;
 8004e64:	f649 4340 	movw	r3, #40000	; 0x9c40
 8004e68:	62bb      	str	r3, [r7, #40]	; 0x28
 8004e6a:	e00f      	b.n	8004e8c <HAL_RCCEx_GetPeriphCLKFreq+0x140>
      else if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_HSE_DIV128) && (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)))
 8004e6c:	69fb      	ldr	r3, [r7, #28]
 8004e6e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004e72:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004e76:	d11c      	bne.n	8004eb2 <HAL_RCCEx_GetPeriphCLKFreq+0x166>
 8004e78:	4b12      	ldr	r3, [pc, #72]	; (8004ec4 <HAL_RCCEx_GetPeriphCLKFreq+0x178>)
 8004e7a:	681b      	ldr	r3, [r3, #0]
 8004e7c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004e80:	2b00      	cmp	r3, #0
 8004e82:	d016      	beq.n	8004eb2 <HAL_RCCEx_GetPeriphCLKFreq+0x166>
        frequency = HSE_VALUE / 128U;
 8004e84:	f24f 4324 	movw	r3, #62500	; 0xf424
 8004e88:	62bb      	str	r3, [r7, #40]	; 0x28
      break;
 8004e8a:	e012      	b.n	8004eb2 <HAL_RCCEx_GetPeriphCLKFreq+0x166>
 8004e8c:	e011      	b.n	8004eb2 <HAL_RCCEx_GetPeriphCLKFreq+0x166>
      frequency = HAL_RCC_GetPCLK2Freq() / (((__HAL_RCC_GET_ADC_SOURCE() >> RCC_CFGR_ADCPRE_Pos) + 1) * 2);
 8004e8e:	f7ff fe75 	bl	8004b7c <HAL_RCC_GetPCLK2Freq>
 8004e92:	4602      	mov	r2, r0
 8004e94:	4b0b      	ldr	r3, [pc, #44]	; (8004ec4 <HAL_RCCEx_GetPeriphCLKFreq+0x178>)
 8004e96:	685b      	ldr	r3, [r3, #4]
 8004e98:	0b9b      	lsrs	r3, r3, #14
 8004e9a:	f003 0303 	and.w	r3, r3, #3
 8004e9e:	3301      	adds	r3, #1
 8004ea0:	005b      	lsls	r3, r3, #1
 8004ea2:	fbb2 f3f3 	udiv	r3, r2, r3
 8004ea6:	62bb      	str	r3, [r7, #40]	; 0x28
      break;
 8004ea8:	e004      	b.n	8004eb4 <HAL_RCCEx_GetPeriphCLKFreq+0x168>
      break;
 8004eaa:	bf00      	nop
 8004eac:	e002      	b.n	8004eb4 <HAL_RCCEx_GetPeriphCLKFreq+0x168>
      break;
 8004eae:	bf00      	nop
 8004eb0:	e000      	b.n	8004eb4 <HAL_RCCEx_GetPeriphCLKFreq+0x168>
      break;
 8004eb2:	bf00      	nop
    }
  }
  return (frequency);
 8004eb4:	6abb      	ldr	r3, [r7, #40]	; 0x28
}
 8004eb6:	4618      	mov	r0, r3
 8004eb8:	3734      	adds	r7, #52	; 0x34
 8004eba:	46bd      	mov	sp, r7
 8004ebc:	bd90      	pop	{r4, r7, pc}
 8004ebe:	bf00      	nop
 8004ec0:	0800a650 	.word	0x0800a650
 8004ec4:	40021000 	.word	0x40021000
 8004ec8:	007a1200 	.word	0x007a1200
 8004ecc:	003d0900 	.word	0x003d0900
 8004ed0:	aaaaaaab 	.word	0xaaaaaaab

08004ed4 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8004ed4:	b580      	push	{r7, lr}
 8004ed6:	b082      	sub	sp, #8
 8004ed8:	af00      	add	r7, sp, #0
 8004eda:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004edc:	687b      	ldr	r3, [r7, #4]
 8004ede:	2b00      	cmp	r3, #0
 8004ee0:	d101      	bne.n	8004ee6 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8004ee2:	2301      	movs	r3, #1
 8004ee4:	e041      	b.n	8004f6a <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004ee6:	687b      	ldr	r3, [r7, #4]
 8004ee8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004eec:	b2db      	uxtb	r3, r3
 8004eee:	2b00      	cmp	r3, #0
 8004ef0:	d106      	bne.n	8004f00 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004ef2:	687b      	ldr	r3, [r7, #4]
 8004ef4:	2200      	movs	r2, #0
 8004ef6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8004efa:	6878      	ldr	r0, [r7, #4]
 8004efc:	f7fd f8aa 	bl	8002054 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004f00:	687b      	ldr	r3, [r7, #4]
 8004f02:	2202      	movs	r2, #2
 8004f04:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004f08:	687b      	ldr	r3, [r7, #4]
 8004f0a:	681a      	ldr	r2, [r3, #0]
 8004f0c:	687b      	ldr	r3, [r7, #4]
 8004f0e:	3304      	adds	r3, #4
 8004f10:	4619      	mov	r1, r3
 8004f12:	4610      	mov	r0, r2
 8004f14:	f000 f93c 	bl	8005190 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004f18:	687b      	ldr	r3, [r7, #4]
 8004f1a:	2201      	movs	r2, #1
 8004f1c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004f20:	687b      	ldr	r3, [r7, #4]
 8004f22:	2201      	movs	r2, #1
 8004f24:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004f28:	687b      	ldr	r3, [r7, #4]
 8004f2a:	2201      	movs	r2, #1
 8004f2c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004f30:	687b      	ldr	r3, [r7, #4]
 8004f32:	2201      	movs	r2, #1
 8004f34:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004f38:	687b      	ldr	r3, [r7, #4]
 8004f3a:	2201      	movs	r2, #1
 8004f3c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004f40:	687b      	ldr	r3, [r7, #4]
 8004f42:	2201      	movs	r2, #1
 8004f44:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004f48:	687b      	ldr	r3, [r7, #4]
 8004f4a:	2201      	movs	r2, #1
 8004f4c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8004f50:	687b      	ldr	r3, [r7, #4]
 8004f52:	2201      	movs	r2, #1
 8004f54:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004f58:	687b      	ldr	r3, [r7, #4]
 8004f5a:	2201      	movs	r2, #1
 8004f5c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004f60:	687b      	ldr	r3, [r7, #4]
 8004f62:	2201      	movs	r2, #1
 8004f64:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004f68:	2300      	movs	r3, #0
}
 8004f6a:	4618      	mov	r0, r3
 8004f6c:	3708      	adds	r7, #8
 8004f6e:	46bd      	mov	sp, r7
 8004f70:	bd80      	pop	{r7, pc}
	...

08004f74 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8004f74:	b480      	push	{r7}
 8004f76:	b085      	sub	sp, #20
 8004f78:	af00      	add	r7, sp, #0
 8004f7a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8004f7c:	687b      	ldr	r3, [r7, #4]
 8004f7e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004f82:	b2db      	uxtb	r3, r3
 8004f84:	2b01      	cmp	r3, #1
 8004f86:	d001      	beq.n	8004f8c <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8004f88:	2301      	movs	r3, #1
 8004f8a:	e032      	b.n	8004ff2 <HAL_TIM_Base_Start+0x7e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004f8c:	687b      	ldr	r3, [r7, #4]
 8004f8e:	2202      	movs	r2, #2
 8004f90:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004f94:	687b      	ldr	r3, [r7, #4]
 8004f96:	681b      	ldr	r3, [r3, #0]
 8004f98:	4a18      	ldr	r2, [pc, #96]	; (8004ffc <HAL_TIM_Base_Start+0x88>)
 8004f9a:	4293      	cmp	r3, r2
 8004f9c:	d00e      	beq.n	8004fbc <HAL_TIM_Base_Start+0x48>
 8004f9e:	687b      	ldr	r3, [r7, #4]
 8004fa0:	681b      	ldr	r3, [r3, #0]
 8004fa2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004fa6:	d009      	beq.n	8004fbc <HAL_TIM_Base_Start+0x48>
 8004fa8:	687b      	ldr	r3, [r7, #4]
 8004faa:	681b      	ldr	r3, [r3, #0]
 8004fac:	4a14      	ldr	r2, [pc, #80]	; (8005000 <HAL_TIM_Base_Start+0x8c>)
 8004fae:	4293      	cmp	r3, r2
 8004fb0:	d004      	beq.n	8004fbc <HAL_TIM_Base_Start+0x48>
 8004fb2:	687b      	ldr	r3, [r7, #4]
 8004fb4:	681b      	ldr	r3, [r3, #0]
 8004fb6:	4a13      	ldr	r2, [pc, #76]	; (8005004 <HAL_TIM_Base_Start+0x90>)
 8004fb8:	4293      	cmp	r3, r2
 8004fba:	d111      	bne.n	8004fe0 <HAL_TIM_Base_Start+0x6c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004fbc:	687b      	ldr	r3, [r7, #4]
 8004fbe:	681b      	ldr	r3, [r3, #0]
 8004fc0:	689b      	ldr	r3, [r3, #8]
 8004fc2:	f003 0307 	and.w	r3, r3, #7
 8004fc6:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004fc8:	68fb      	ldr	r3, [r7, #12]
 8004fca:	2b06      	cmp	r3, #6
 8004fcc:	d010      	beq.n	8004ff0 <HAL_TIM_Base_Start+0x7c>
    {
      __HAL_TIM_ENABLE(htim);
 8004fce:	687b      	ldr	r3, [r7, #4]
 8004fd0:	681b      	ldr	r3, [r3, #0]
 8004fd2:	681a      	ldr	r2, [r3, #0]
 8004fd4:	687b      	ldr	r3, [r7, #4]
 8004fd6:	681b      	ldr	r3, [r3, #0]
 8004fd8:	f042 0201 	orr.w	r2, r2, #1
 8004fdc:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004fde:	e007      	b.n	8004ff0 <HAL_TIM_Base_Start+0x7c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004fe0:	687b      	ldr	r3, [r7, #4]
 8004fe2:	681b      	ldr	r3, [r3, #0]
 8004fe4:	681a      	ldr	r2, [r3, #0]
 8004fe6:	687b      	ldr	r3, [r7, #4]
 8004fe8:	681b      	ldr	r3, [r3, #0]
 8004fea:	f042 0201 	orr.w	r2, r2, #1
 8004fee:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8004ff0:	2300      	movs	r3, #0
}
 8004ff2:	4618      	mov	r0, r3
 8004ff4:	3714      	adds	r7, #20
 8004ff6:	46bd      	mov	sp, r7
 8004ff8:	bc80      	pop	{r7}
 8004ffa:	4770      	bx	lr
 8004ffc:	40012c00 	.word	0x40012c00
 8005000:	40000400 	.word	0x40000400
 8005004:	40000800 	.word	0x40000800

08005008 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8005008:	b580      	push	{r7, lr}
 800500a:	b084      	sub	sp, #16
 800500c:	af00      	add	r7, sp, #0
 800500e:	6078      	str	r0, [r7, #4]
 8005010:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8005012:	687b      	ldr	r3, [r7, #4]
 8005014:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005018:	2b01      	cmp	r3, #1
 800501a:	d101      	bne.n	8005020 <HAL_TIM_ConfigClockSource+0x18>
 800501c:	2302      	movs	r3, #2
 800501e:	e0b3      	b.n	8005188 <HAL_TIM_ConfigClockSource+0x180>
 8005020:	687b      	ldr	r3, [r7, #4]
 8005022:	2201      	movs	r2, #1
 8005024:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8005028:	687b      	ldr	r3, [r7, #4]
 800502a:	2202      	movs	r2, #2
 800502c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8005030:	687b      	ldr	r3, [r7, #4]
 8005032:	681b      	ldr	r3, [r3, #0]
 8005034:	689b      	ldr	r3, [r3, #8]
 8005036:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8005038:	68fb      	ldr	r3, [r7, #12]
 800503a:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 800503e:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005040:	68fb      	ldr	r3, [r7, #12]
 8005042:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8005046:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8005048:	687b      	ldr	r3, [r7, #4]
 800504a:	681b      	ldr	r3, [r3, #0]
 800504c:	68fa      	ldr	r2, [r7, #12]
 800504e:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8005050:	683b      	ldr	r3, [r7, #0]
 8005052:	681b      	ldr	r3, [r3, #0]
 8005054:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005058:	d03e      	beq.n	80050d8 <HAL_TIM_ConfigClockSource+0xd0>
 800505a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800505e:	f200 8087 	bhi.w	8005170 <HAL_TIM_ConfigClockSource+0x168>
 8005062:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005066:	f000 8085 	beq.w	8005174 <HAL_TIM_ConfigClockSource+0x16c>
 800506a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800506e:	d87f      	bhi.n	8005170 <HAL_TIM_ConfigClockSource+0x168>
 8005070:	2b70      	cmp	r3, #112	; 0x70
 8005072:	d01a      	beq.n	80050aa <HAL_TIM_ConfigClockSource+0xa2>
 8005074:	2b70      	cmp	r3, #112	; 0x70
 8005076:	d87b      	bhi.n	8005170 <HAL_TIM_ConfigClockSource+0x168>
 8005078:	2b60      	cmp	r3, #96	; 0x60
 800507a:	d050      	beq.n	800511e <HAL_TIM_ConfigClockSource+0x116>
 800507c:	2b60      	cmp	r3, #96	; 0x60
 800507e:	d877      	bhi.n	8005170 <HAL_TIM_ConfigClockSource+0x168>
 8005080:	2b50      	cmp	r3, #80	; 0x50
 8005082:	d03c      	beq.n	80050fe <HAL_TIM_ConfigClockSource+0xf6>
 8005084:	2b50      	cmp	r3, #80	; 0x50
 8005086:	d873      	bhi.n	8005170 <HAL_TIM_ConfigClockSource+0x168>
 8005088:	2b40      	cmp	r3, #64	; 0x40
 800508a:	d058      	beq.n	800513e <HAL_TIM_ConfigClockSource+0x136>
 800508c:	2b40      	cmp	r3, #64	; 0x40
 800508e:	d86f      	bhi.n	8005170 <HAL_TIM_ConfigClockSource+0x168>
 8005090:	2b30      	cmp	r3, #48	; 0x30
 8005092:	d064      	beq.n	800515e <HAL_TIM_ConfigClockSource+0x156>
 8005094:	2b30      	cmp	r3, #48	; 0x30
 8005096:	d86b      	bhi.n	8005170 <HAL_TIM_ConfigClockSource+0x168>
 8005098:	2b20      	cmp	r3, #32
 800509a:	d060      	beq.n	800515e <HAL_TIM_ConfigClockSource+0x156>
 800509c:	2b20      	cmp	r3, #32
 800509e:	d867      	bhi.n	8005170 <HAL_TIM_ConfigClockSource+0x168>
 80050a0:	2b00      	cmp	r3, #0
 80050a2:	d05c      	beq.n	800515e <HAL_TIM_ConfigClockSource+0x156>
 80050a4:	2b10      	cmp	r3, #16
 80050a6:	d05a      	beq.n	800515e <HAL_TIM_ConfigClockSource+0x156>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
        break;
      }

    default:
      break;
 80050a8:	e062      	b.n	8005170 <HAL_TIM_ConfigClockSource+0x168>
      TIM_ETR_SetConfig(htim->Instance,
 80050aa:	687b      	ldr	r3, [r7, #4]
 80050ac:	6818      	ldr	r0, [r3, #0]
 80050ae:	683b      	ldr	r3, [r7, #0]
 80050b0:	6899      	ldr	r1, [r3, #8]
 80050b2:	683b      	ldr	r3, [r7, #0]
 80050b4:	685a      	ldr	r2, [r3, #4]
 80050b6:	683b      	ldr	r3, [r7, #0]
 80050b8:	68db      	ldr	r3, [r3, #12]
 80050ba:	f000 f942 	bl	8005342 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 80050be:	687b      	ldr	r3, [r7, #4]
 80050c0:	681b      	ldr	r3, [r3, #0]
 80050c2:	689b      	ldr	r3, [r3, #8]
 80050c4:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80050c6:	68fb      	ldr	r3, [r7, #12]
 80050c8:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 80050cc:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 80050ce:	687b      	ldr	r3, [r7, #4]
 80050d0:	681b      	ldr	r3, [r3, #0]
 80050d2:	68fa      	ldr	r2, [r7, #12]
 80050d4:	609a      	str	r2, [r3, #8]
      break;
 80050d6:	e04e      	b.n	8005176 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_ETR_SetConfig(htim->Instance,
 80050d8:	687b      	ldr	r3, [r7, #4]
 80050da:	6818      	ldr	r0, [r3, #0]
 80050dc:	683b      	ldr	r3, [r7, #0]
 80050de:	6899      	ldr	r1, [r3, #8]
 80050e0:	683b      	ldr	r3, [r7, #0]
 80050e2:	685a      	ldr	r2, [r3, #4]
 80050e4:	683b      	ldr	r3, [r7, #0]
 80050e6:	68db      	ldr	r3, [r3, #12]
 80050e8:	f000 f92b 	bl	8005342 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80050ec:	687b      	ldr	r3, [r7, #4]
 80050ee:	681b      	ldr	r3, [r3, #0]
 80050f0:	689a      	ldr	r2, [r3, #8]
 80050f2:	687b      	ldr	r3, [r7, #4]
 80050f4:	681b      	ldr	r3, [r3, #0]
 80050f6:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80050fa:	609a      	str	r2, [r3, #8]
      break;
 80050fc:	e03b      	b.n	8005176 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 80050fe:	687b      	ldr	r3, [r7, #4]
 8005100:	6818      	ldr	r0, [r3, #0]
 8005102:	683b      	ldr	r3, [r7, #0]
 8005104:	6859      	ldr	r1, [r3, #4]
 8005106:	683b      	ldr	r3, [r7, #0]
 8005108:	68db      	ldr	r3, [r3, #12]
 800510a:	461a      	mov	r2, r3
 800510c:	f000 f8a2 	bl	8005254 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8005110:	687b      	ldr	r3, [r7, #4]
 8005112:	681b      	ldr	r3, [r3, #0]
 8005114:	2150      	movs	r1, #80	; 0x50
 8005116:	4618      	mov	r0, r3
 8005118:	f000 f8f9 	bl	800530e <TIM_ITRx_SetConfig>
      break;
 800511c:	e02b      	b.n	8005176 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI2_ConfigInputStage(htim->Instance,
 800511e:	687b      	ldr	r3, [r7, #4]
 8005120:	6818      	ldr	r0, [r3, #0]
 8005122:	683b      	ldr	r3, [r7, #0]
 8005124:	6859      	ldr	r1, [r3, #4]
 8005126:	683b      	ldr	r3, [r7, #0]
 8005128:	68db      	ldr	r3, [r3, #12]
 800512a:	461a      	mov	r2, r3
 800512c:	f000 f8c0 	bl	80052b0 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8005130:	687b      	ldr	r3, [r7, #4]
 8005132:	681b      	ldr	r3, [r3, #0]
 8005134:	2160      	movs	r1, #96	; 0x60
 8005136:	4618      	mov	r0, r3
 8005138:	f000 f8e9 	bl	800530e <TIM_ITRx_SetConfig>
      break;
 800513c:	e01b      	b.n	8005176 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 800513e:	687b      	ldr	r3, [r7, #4]
 8005140:	6818      	ldr	r0, [r3, #0]
 8005142:	683b      	ldr	r3, [r7, #0]
 8005144:	6859      	ldr	r1, [r3, #4]
 8005146:	683b      	ldr	r3, [r7, #0]
 8005148:	68db      	ldr	r3, [r3, #12]
 800514a:	461a      	mov	r2, r3
 800514c:	f000 f882 	bl	8005254 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8005150:	687b      	ldr	r3, [r7, #4]
 8005152:	681b      	ldr	r3, [r3, #0]
 8005154:	2140      	movs	r1, #64	; 0x40
 8005156:	4618      	mov	r0, r3
 8005158:	f000 f8d9 	bl	800530e <TIM_ITRx_SetConfig>
      break;
 800515c:	e00b      	b.n	8005176 <HAL_TIM_ConfigClockSource+0x16e>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800515e:	687b      	ldr	r3, [r7, #4]
 8005160:	681a      	ldr	r2, [r3, #0]
 8005162:	683b      	ldr	r3, [r7, #0]
 8005164:	681b      	ldr	r3, [r3, #0]
 8005166:	4619      	mov	r1, r3
 8005168:	4610      	mov	r0, r2
 800516a:	f000 f8d0 	bl	800530e <TIM_ITRx_SetConfig>
        break;
 800516e:	e002      	b.n	8005176 <HAL_TIM_ConfigClockSource+0x16e>
      break;
 8005170:	bf00      	nop
 8005172:	e000      	b.n	8005176 <HAL_TIM_ConfigClockSource+0x16e>
      break;
 8005174:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8005176:	687b      	ldr	r3, [r7, #4]
 8005178:	2201      	movs	r2, #1
 800517a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800517e:	687b      	ldr	r3, [r7, #4]
 8005180:	2200      	movs	r2, #0
 8005182:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8005186:	2300      	movs	r3, #0
}
 8005188:	4618      	mov	r0, r3
 800518a:	3710      	adds	r7, #16
 800518c:	46bd      	mov	sp, r7
 800518e:	bd80      	pop	{r7, pc}

08005190 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8005190:	b480      	push	{r7}
 8005192:	b085      	sub	sp, #20
 8005194:	af00      	add	r7, sp, #0
 8005196:	6078      	str	r0, [r7, #4]
 8005198:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800519a:	687b      	ldr	r3, [r7, #4]
 800519c:	681b      	ldr	r3, [r3, #0]
 800519e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80051a0:	687b      	ldr	r3, [r7, #4]
 80051a2:	4a29      	ldr	r2, [pc, #164]	; (8005248 <TIM_Base_SetConfig+0xb8>)
 80051a4:	4293      	cmp	r3, r2
 80051a6:	d00b      	beq.n	80051c0 <TIM_Base_SetConfig+0x30>
 80051a8:	687b      	ldr	r3, [r7, #4]
 80051aa:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80051ae:	d007      	beq.n	80051c0 <TIM_Base_SetConfig+0x30>
 80051b0:	687b      	ldr	r3, [r7, #4]
 80051b2:	4a26      	ldr	r2, [pc, #152]	; (800524c <TIM_Base_SetConfig+0xbc>)
 80051b4:	4293      	cmp	r3, r2
 80051b6:	d003      	beq.n	80051c0 <TIM_Base_SetConfig+0x30>
 80051b8:	687b      	ldr	r3, [r7, #4]
 80051ba:	4a25      	ldr	r2, [pc, #148]	; (8005250 <TIM_Base_SetConfig+0xc0>)
 80051bc:	4293      	cmp	r3, r2
 80051be:	d108      	bne.n	80051d2 <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80051c0:	68fb      	ldr	r3, [r7, #12]
 80051c2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80051c6:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80051c8:	683b      	ldr	r3, [r7, #0]
 80051ca:	685b      	ldr	r3, [r3, #4]
 80051cc:	68fa      	ldr	r2, [r7, #12]
 80051ce:	4313      	orrs	r3, r2
 80051d0:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80051d2:	687b      	ldr	r3, [r7, #4]
 80051d4:	4a1c      	ldr	r2, [pc, #112]	; (8005248 <TIM_Base_SetConfig+0xb8>)
 80051d6:	4293      	cmp	r3, r2
 80051d8:	d00b      	beq.n	80051f2 <TIM_Base_SetConfig+0x62>
 80051da:	687b      	ldr	r3, [r7, #4]
 80051dc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80051e0:	d007      	beq.n	80051f2 <TIM_Base_SetConfig+0x62>
 80051e2:	687b      	ldr	r3, [r7, #4]
 80051e4:	4a19      	ldr	r2, [pc, #100]	; (800524c <TIM_Base_SetConfig+0xbc>)
 80051e6:	4293      	cmp	r3, r2
 80051e8:	d003      	beq.n	80051f2 <TIM_Base_SetConfig+0x62>
 80051ea:	687b      	ldr	r3, [r7, #4]
 80051ec:	4a18      	ldr	r2, [pc, #96]	; (8005250 <TIM_Base_SetConfig+0xc0>)
 80051ee:	4293      	cmp	r3, r2
 80051f0:	d108      	bne.n	8005204 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80051f2:	68fb      	ldr	r3, [r7, #12]
 80051f4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80051f8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80051fa:	683b      	ldr	r3, [r7, #0]
 80051fc:	68db      	ldr	r3, [r3, #12]
 80051fe:	68fa      	ldr	r2, [r7, #12]
 8005200:	4313      	orrs	r3, r2
 8005202:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005204:	68fb      	ldr	r3, [r7, #12]
 8005206:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800520a:	683b      	ldr	r3, [r7, #0]
 800520c:	695b      	ldr	r3, [r3, #20]
 800520e:	4313      	orrs	r3, r2
 8005210:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8005212:	687b      	ldr	r3, [r7, #4]
 8005214:	68fa      	ldr	r2, [r7, #12]
 8005216:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005218:	683b      	ldr	r3, [r7, #0]
 800521a:	689a      	ldr	r2, [r3, #8]
 800521c:	687b      	ldr	r3, [r7, #4]
 800521e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8005220:	683b      	ldr	r3, [r7, #0]
 8005222:	681a      	ldr	r2, [r3, #0]
 8005224:	687b      	ldr	r3, [r7, #4]
 8005226:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8005228:	687b      	ldr	r3, [r7, #4]
 800522a:	4a07      	ldr	r2, [pc, #28]	; (8005248 <TIM_Base_SetConfig+0xb8>)
 800522c:	4293      	cmp	r3, r2
 800522e:	d103      	bne.n	8005238 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8005230:	683b      	ldr	r3, [r7, #0]
 8005232:	691a      	ldr	r2, [r3, #16]
 8005234:	687b      	ldr	r3, [r7, #4]
 8005236:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8005238:	687b      	ldr	r3, [r7, #4]
 800523a:	2201      	movs	r2, #1
 800523c:	615a      	str	r2, [r3, #20]
}
 800523e:	bf00      	nop
 8005240:	3714      	adds	r7, #20
 8005242:	46bd      	mov	sp, r7
 8005244:	bc80      	pop	{r7}
 8005246:	4770      	bx	lr
 8005248:	40012c00 	.word	0x40012c00
 800524c:	40000400 	.word	0x40000400
 8005250:	40000800 	.word	0x40000800

08005254 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005254:	b480      	push	{r7}
 8005256:	b087      	sub	sp, #28
 8005258:	af00      	add	r7, sp, #0
 800525a:	60f8      	str	r0, [r7, #12]
 800525c:	60b9      	str	r1, [r7, #8]
 800525e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8005260:	68fb      	ldr	r3, [r7, #12]
 8005262:	6a1b      	ldr	r3, [r3, #32]
 8005264:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005266:	68fb      	ldr	r3, [r7, #12]
 8005268:	6a1b      	ldr	r3, [r3, #32]
 800526a:	f023 0201 	bic.w	r2, r3, #1
 800526e:	68fb      	ldr	r3, [r7, #12]
 8005270:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005272:	68fb      	ldr	r3, [r7, #12]
 8005274:	699b      	ldr	r3, [r3, #24]
 8005276:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8005278:	693b      	ldr	r3, [r7, #16]
 800527a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800527e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8005280:	687b      	ldr	r3, [r7, #4]
 8005282:	011b      	lsls	r3, r3, #4
 8005284:	693a      	ldr	r2, [r7, #16]
 8005286:	4313      	orrs	r3, r2
 8005288:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800528a:	697b      	ldr	r3, [r7, #20]
 800528c:	f023 030a 	bic.w	r3, r3, #10
 8005290:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8005292:	697a      	ldr	r2, [r7, #20]
 8005294:	68bb      	ldr	r3, [r7, #8]
 8005296:	4313      	orrs	r3, r2
 8005298:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800529a:	68fb      	ldr	r3, [r7, #12]
 800529c:	693a      	ldr	r2, [r7, #16]
 800529e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80052a0:	68fb      	ldr	r3, [r7, #12]
 80052a2:	697a      	ldr	r2, [r7, #20]
 80052a4:	621a      	str	r2, [r3, #32]
}
 80052a6:	bf00      	nop
 80052a8:	371c      	adds	r7, #28
 80052aa:	46bd      	mov	sp, r7
 80052ac:	bc80      	pop	{r7}
 80052ae:	4770      	bx	lr

080052b0 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80052b0:	b480      	push	{r7}
 80052b2:	b087      	sub	sp, #28
 80052b4:	af00      	add	r7, sp, #0
 80052b6:	60f8      	str	r0, [r7, #12]
 80052b8:	60b9      	str	r1, [r7, #8]
 80052ba:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80052bc:	68fb      	ldr	r3, [r7, #12]
 80052be:	6a1b      	ldr	r3, [r3, #32]
 80052c0:	f023 0210 	bic.w	r2, r3, #16
 80052c4:	68fb      	ldr	r3, [r7, #12]
 80052c6:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80052c8:	68fb      	ldr	r3, [r7, #12]
 80052ca:	699b      	ldr	r3, [r3, #24]
 80052cc:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80052ce:	68fb      	ldr	r3, [r7, #12]
 80052d0:	6a1b      	ldr	r3, [r3, #32]
 80052d2:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80052d4:	697b      	ldr	r3, [r7, #20]
 80052d6:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80052da:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80052dc:	687b      	ldr	r3, [r7, #4]
 80052de:	031b      	lsls	r3, r3, #12
 80052e0:	697a      	ldr	r2, [r7, #20]
 80052e2:	4313      	orrs	r3, r2
 80052e4:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80052e6:	693b      	ldr	r3, [r7, #16]
 80052e8:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80052ec:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 80052ee:	68bb      	ldr	r3, [r7, #8]
 80052f0:	011b      	lsls	r3, r3, #4
 80052f2:	693a      	ldr	r2, [r7, #16]
 80052f4:	4313      	orrs	r3, r2
 80052f6:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80052f8:	68fb      	ldr	r3, [r7, #12]
 80052fa:	697a      	ldr	r2, [r7, #20]
 80052fc:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80052fe:	68fb      	ldr	r3, [r7, #12]
 8005300:	693a      	ldr	r2, [r7, #16]
 8005302:	621a      	str	r2, [r3, #32]
}
 8005304:	bf00      	nop
 8005306:	371c      	adds	r7, #28
 8005308:	46bd      	mov	sp, r7
 800530a:	bc80      	pop	{r7}
 800530c:	4770      	bx	lr

0800530e <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800530e:	b480      	push	{r7}
 8005310:	b085      	sub	sp, #20
 8005312:	af00      	add	r7, sp, #0
 8005314:	6078      	str	r0, [r7, #4]
 8005316:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8005318:	687b      	ldr	r3, [r7, #4]
 800531a:	689b      	ldr	r3, [r3, #8]
 800531c:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800531e:	68fb      	ldr	r3, [r7, #12]
 8005320:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005324:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8005326:	683a      	ldr	r2, [r7, #0]
 8005328:	68fb      	ldr	r3, [r7, #12]
 800532a:	4313      	orrs	r3, r2
 800532c:	f043 0307 	orr.w	r3, r3, #7
 8005330:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005332:	687b      	ldr	r3, [r7, #4]
 8005334:	68fa      	ldr	r2, [r7, #12]
 8005336:	609a      	str	r2, [r3, #8]
}
 8005338:	bf00      	nop
 800533a:	3714      	adds	r7, #20
 800533c:	46bd      	mov	sp, r7
 800533e:	bc80      	pop	{r7}
 8005340:	4770      	bx	lr

08005342 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8005342:	b480      	push	{r7}
 8005344:	b087      	sub	sp, #28
 8005346:	af00      	add	r7, sp, #0
 8005348:	60f8      	str	r0, [r7, #12]
 800534a:	60b9      	str	r1, [r7, #8]
 800534c:	607a      	str	r2, [r7, #4]
 800534e:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8005350:	68fb      	ldr	r3, [r7, #12]
 8005352:	689b      	ldr	r3, [r3, #8]
 8005354:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005356:	697b      	ldr	r3, [r7, #20]
 8005358:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800535c:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800535e:	683b      	ldr	r3, [r7, #0]
 8005360:	021a      	lsls	r2, r3, #8
 8005362:	687b      	ldr	r3, [r7, #4]
 8005364:	431a      	orrs	r2, r3
 8005366:	68bb      	ldr	r3, [r7, #8]
 8005368:	4313      	orrs	r3, r2
 800536a:	697a      	ldr	r2, [r7, #20]
 800536c:	4313      	orrs	r3, r2
 800536e:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005370:	68fb      	ldr	r3, [r7, #12]
 8005372:	697a      	ldr	r2, [r7, #20]
 8005374:	609a      	str	r2, [r3, #8]
}
 8005376:	bf00      	nop
 8005378:	371c      	adds	r7, #28
 800537a:	46bd      	mov	sp, r7
 800537c:	bc80      	pop	{r7}
 800537e:	4770      	bx	lr

08005380 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8005380:	b480      	push	{r7}
 8005382:	b085      	sub	sp, #20
 8005384:	af00      	add	r7, sp, #0
 8005386:	6078      	str	r0, [r7, #4]
 8005388:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800538a:	687b      	ldr	r3, [r7, #4]
 800538c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005390:	2b01      	cmp	r3, #1
 8005392:	d101      	bne.n	8005398 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8005394:	2302      	movs	r3, #2
 8005396:	e046      	b.n	8005426 <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 8005398:	687b      	ldr	r3, [r7, #4]
 800539a:	2201      	movs	r2, #1
 800539c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80053a0:	687b      	ldr	r3, [r7, #4]
 80053a2:	2202      	movs	r2, #2
 80053a4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80053a8:	687b      	ldr	r3, [r7, #4]
 80053aa:	681b      	ldr	r3, [r3, #0]
 80053ac:	685b      	ldr	r3, [r3, #4]
 80053ae:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80053b0:	687b      	ldr	r3, [r7, #4]
 80053b2:	681b      	ldr	r3, [r3, #0]
 80053b4:	689b      	ldr	r3, [r3, #8]
 80053b6:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80053b8:	68fb      	ldr	r3, [r7, #12]
 80053ba:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80053be:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80053c0:	683b      	ldr	r3, [r7, #0]
 80053c2:	681b      	ldr	r3, [r3, #0]
 80053c4:	68fa      	ldr	r2, [r7, #12]
 80053c6:	4313      	orrs	r3, r2
 80053c8:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80053ca:	687b      	ldr	r3, [r7, #4]
 80053cc:	681b      	ldr	r3, [r3, #0]
 80053ce:	68fa      	ldr	r2, [r7, #12]
 80053d0:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80053d2:	687b      	ldr	r3, [r7, #4]
 80053d4:	681b      	ldr	r3, [r3, #0]
 80053d6:	4a16      	ldr	r2, [pc, #88]	; (8005430 <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 80053d8:	4293      	cmp	r3, r2
 80053da:	d00e      	beq.n	80053fa <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 80053dc:	687b      	ldr	r3, [r7, #4]
 80053de:	681b      	ldr	r3, [r3, #0]
 80053e0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80053e4:	d009      	beq.n	80053fa <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 80053e6:	687b      	ldr	r3, [r7, #4]
 80053e8:	681b      	ldr	r3, [r3, #0]
 80053ea:	4a12      	ldr	r2, [pc, #72]	; (8005434 <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 80053ec:	4293      	cmp	r3, r2
 80053ee:	d004      	beq.n	80053fa <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 80053f0:	687b      	ldr	r3, [r7, #4]
 80053f2:	681b      	ldr	r3, [r3, #0]
 80053f4:	4a10      	ldr	r2, [pc, #64]	; (8005438 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 80053f6:	4293      	cmp	r3, r2
 80053f8:	d10c      	bne.n	8005414 <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80053fa:	68bb      	ldr	r3, [r7, #8]
 80053fc:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005400:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8005402:	683b      	ldr	r3, [r7, #0]
 8005404:	685b      	ldr	r3, [r3, #4]
 8005406:	68ba      	ldr	r2, [r7, #8]
 8005408:	4313      	orrs	r3, r2
 800540a:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800540c:	687b      	ldr	r3, [r7, #4]
 800540e:	681b      	ldr	r3, [r3, #0]
 8005410:	68ba      	ldr	r2, [r7, #8]
 8005412:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8005414:	687b      	ldr	r3, [r7, #4]
 8005416:	2201      	movs	r2, #1
 8005418:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800541c:	687b      	ldr	r3, [r7, #4]
 800541e:	2200      	movs	r2, #0
 8005420:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8005424:	2300      	movs	r3, #0
}
 8005426:	4618      	mov	r0, r3
 8005428:	3714      	adds	r7, #20
 800542a:	46bd      	mov	sp, r7
 800542c:	bc80      	pop	{r7}
 800542e:	4770      	bx	lr
 8005430:	40012c00 	.word	0x40012c00
 8005434:	40000400 	.word	0x40000400
 8005438:	40000800 	.word	0x40000800

0800543c <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800543c:	b580      	push	{r7, lr}
 800543e:	b082      	sub	sp, #8
 8005440:	af00      	add	r7, sp, #0
 8005442:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8005444:	687b      	ldr	r3, [r7, #4]
 8005446:	2b00      	cmp	r3, #0
 8005448:	d101      	bne.n	800544e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800544a:	2301      	movs	r3, #1
 800544c:	e03f      	b.n	80054ce <HAL_UART_Init+0x92>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 800544e:	687b      	ldr	r3, [r7, #4]
 8005450:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005454:	b2db      	uxtb	r3, r3
 8005456:	2b00      	cmp	r3, #0
 8005458:	d106      	bne.n	8005468 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800545a:	687b      	ldr	r3, [r7, #4]
 800545c:	2200      	movs	r2, #0
 800545e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8005462:	6878      	ldr	r0, [r7, #4]
 8005464:	f7fc fe14 	bl	8002090 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8005468:	687b      	ldr	r3, [r7, #4]
 800546a:	2224      	movs	r2, #36	; 0x24
 800546c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8005470:	687b      	ldr	r3, [r7, #4]
 8005472:	681b      	ldr	r3, [r3, #0]
 8005474:	68da      	ldr	r2, [r3, #12]
 8005476:	687b      	ldr	r3, [r7, #4]
 8005478:	681b      	ldr	r3, [r3, #0]
 800547a:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800547e:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8005480:	6878      	ldr	r0, [r7, #4]
 8005482:	f000 fb49 	bl	8005b18 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8005486:	687b      	ldr	r3, [r7, #4]
 8005488:	681b      	ldr	r3, [r3, #0]
 800548a:	691a      	ldr	r2, [r3, #16]
 800548c:	687b      	ldr	r3, [r7, #4]
 800548e:	681b      	ldr	r3, [r3, #0]
 8005490:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8005494:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8005496:	687b      	ldr	r3, [r7, #4]
 8005498:	681b      	ldr	r3, [r3, #0]
 800549a:	695a      	ldr	r2, [r3, #20]
 800549c:	687b      	ldr	r3, [r7, #4]
 800549e:	681b      	ldr	r3, [r3, #0]
 80054a0:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80054a4:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80054a6:	687b      	ldr	r3, [r7, #4]
 80054a8:	681b      	ldr	r3, [r3, #0]
 80054aa:	68da      	ldr	r2, [r3, #12]
 80054ac:	687b      	ldr	r3, [r7, #4]
 80054ae:	681b      	ldr	r3, [r3, #0]
 80054b0:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80054b4:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80054b6:	687b      	ldr	r3, [r7, #4]
 80054b8:	2200      	movs	r2, #0
 80054ba:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 80054bc:	687b      	ldr	r3, [r7, #4]
 80054be:	2220      	movs	r2, #32
 80054c0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 80054c4:	687b      	ldr	r3, [r7, #4]
 80054c6:	2220      	movs	r2, #32
 80054c8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80054cc:	2300      	movs	r3, #0
}
 80054ce:	4618      	mov	r0, r3
 80054d0:	3708      	adds	r7, #8
 80054d2:	46bd      	mov	sp, r7
 80054d4:	bd80      	pop	{r7, pc}
	...

080054d8 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80054d8:	b580      	push	{r7, lr}
 80054da:	b08a      	sub	sp, #40	; 0x28
 80054dc:	af00      	add	r7, sp, #0
 80054de:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 80054e0:	687b      	ldr	r3, [r7, #4]
 80054e2:	681b      	ldr	r3, [r3, #0]
 80054e4:	681b      	ldr	r3, [r3, #0]
 80054e6:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80054e8:	687b      	ldr	r3, [r7, #4]
 80054ea:	681b      	ldr	r3, [r3, #0]
 80054ec:	68db      	ldr	r3, [r3, #12]
 80054ee:	623b      	str	r3, [r7, #32]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80054f0:	687b      	ldr	r3, [r7, #4]
 80054f2:	681b      	ldr	r3, [r3, #0]
 80054f4:	695b      	ldr	r3, [r3, #20]
 80054f6:	61fb      	str	r3, [r7, #28]
  uint32_t errorflags = 0x00U;
 80054f8:	2300      	movs	r3, #0
 80054fa:	61bb      	str	r3, [r7, #24]
  uint32_t dmarequest = 0x00U;
 80054fc:	2300      	movs	r3, #0
 80054fe:	617b      	str	r3, [r7, #20]

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8005500:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005502:	f003 030f 	and.w	r3, r3, #15
 8005506:	61bb      	str	r3, [r7, #24]
  if (errorflags == RESET)
 8005508:	69bb      	ldr	r3, [r7, #24]
 800550a:	2b00      	cmp	r3, #0
 800550c:	d10d      	bne.n	800552a <HAL_UART_IRQHandler+0x52>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800550e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005510:	f003 0320 	and.w	r3, r3, #32
 8005514:	2b00      	cmp	r3, #0
 8005516:	d008      	beq.n	800552a <HAL_UART_IRQHandler+0x52>
 8005518:	6a3b      	ldr	r3, [r7, #32]
 800551a:	f003 0320 	and.w	r3, r3, #32
 800551e:	2b00      	cmp	r3, #0
 8005520:	d003      	beq.n	800552a <HAL_UART_IRQHandler+0x52>
    {
      UART_Receive_IT(huart);
 8005522:	6878      	ldr	r0, [r7, #4]
 8005524:	f000 fa4f 	bl	80059c6 <UART_Receive_IT>
      return;
 8005528:	e17b      	b.n	8005822 <HAL_UART_IRQHandler+0x34a>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET) || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 800552a:	69bb      	ldr	r3, [r7, #24]
 800552c:	2b00      	cmp	r3, #0
 800552e:	f000 80b1 	beq.w	8005694 <HAL_UART_IRQHandler+0x1bc>
 8005532:	69fb      	ldr	r3, [r7, #28]
 8005534:	f003 0301 	and.w	r3, r3, #1
 8005538:	2b00      	cmp	r3, #0
 800553a:	d105      	bne.n	8005548 <HAL_UART_IRQHandler+0x70>
 800553c:	6a3b      	ldr	r3, [r7, #32]
 800553e:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8005542:	2b00      	cmp	r3, #0
 8005544:	f000 80a6 	beq.w	8005694 <HAL_UART_IRQHandler+0x1bc>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8005548:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800554a:	f003 0301 	and.w	r3, r3, #1
 800554e:	2b00      	cmp	r3, #0
 8005550:	d00a      	beq.n	8005568 <HAL_UART_IRQHandler+0x90>
 8005552:	6a3b      	ldr	r3, [r7, #32]
 8005554:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005558:	2b00      	cmp	r3, #0
 800555a:	d005      	beq.n	8005568 <HAL_UART_IRQHandler+0x90>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800555c:	687b      	ldr	r3, [r7, #4]
 800555e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005560:	f043 0201 	orr.w	r2, r3, #1
 8005564:	687b      	ldr	r3, [r7, #4]
 8005566:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8005568:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800556a:	f003 0304 	and.w	r3, r3, #4
 800556e:	2b00      	cmp	r3, #0
 8005570:	d00a      	beq.n	8005588 <HAL_UART_IRQHandler+0xb0>
 8005572:	69fb      	ldr	r3, [r7, #28]
 8005574:	f003 0301 	and.w	r3, r3, #1
 8005578:	2b00      	cmp	r3, #0
 800557a:	d005      	beq.n	8005588 <HAL_UART_IRQHandler+0xb0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800557c:	687b      	ldr	r3, [r7, #4]
 800557e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005580:	f043 0202 	orr.w	r2, r3, #2
 8005584:	687b      	ldr	r3, [r7, #4]
 8005586:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8005588:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800558a:	f003 0302 	and.w	r3, r3, #2
 800558e:	2b00      	cmp	r3, #0
 8005590:	d00a      	beq.n	80055a8 <HAL_UART_IRQHandler+0xd0>
 8005592:	69fb      	ldr	r3, [r7, #28]
 8005594:	f003 0301 	and.w	r3, r3, #1
 8005598:	2b00      	cmp	r3, #0
 800559a:	d005      	beq.n	80055a8 <HAL_UART_IRQHandler+0xd0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800559c:	687b      	ldr	r3, [r7, #4]
 800559e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80055a0:	f043 0204 	orr.w	r2, r3, #4
 80055a4:	687b      	ldr	r3, [r7, #4]
 80055a6:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET) || ((cr3its & USART_CR3_EIE) != RESET)))
 80055a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80055aa:	f003 0308 	and.w	r3, r3, #8
 80055ae:	2b00      	cmp	r3, #0
 80055b0:	d00f      	beq.n	80055d2 <HAL_UART_IRQHandler+0xfa>
 80055b2:	6a3b      	ldr	r3, [r7, #32]
 80055b4:	f003 0320 	and.w	r3, r3, #32
 80055b8:	2b00      	cmp	r3, #0
 80055ba:	d104      	bne.n	80055c6 <HAL_UART_IRQHandler+0xee>
 80055bc:	69fb      	ldr	r3, [r7, #28]
 80055be:	f003 0301 	and.w	r3, r3, #1
 80055c2:	2b00      	cmp	r3, #0
 80055c4:	d005      	beq.n	80055d2 <HAL_UART_IRQHandler+0xfa>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80055c6:	687b      	ldr	r3, [r7, #4]
 80055c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80055ca:	f043 0208 	orr.w	r2, r3, #8
 80055ce:	687b      	ldr	r3, [r7, #4]
 80055d0:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80055d2:	687b      	ldr	r3, [r7, #4]
 80055d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80055d6:	2b00      	cmp	r3, #0
 80055d8:	f000 811e 	beq.w	8005818 <HAL_UART_IRQHandler+0x340>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80055dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80055de:	f003 0320 	and.w	r3, r3, #32
 80055e2:	2b00      	cmp	r3, #0
 80055e4:	d007      	beq.n	80055f6 <HAL_UART_IRQHandler+0x11e>
 80055e6:	6a3b      	ldr	r3, [r7, #32]
 80055e8:	f003 0320 	and.w	r3, r3, #32
 80055ec:	2b00      	cmp	r3, #0
 80055ee:	d002      	beq.n	80055f6 <HAL_UART_IRQHandler+0x11e>
      {
        UART_Receive_IT(huart);
 80055f0:	6878      	ldr	r0, [r7, #4]
 80055f2:	f000 f9e8 	bl	80059c6 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 80055f6:	687b      	ldr	r3, [r7, #4]
 80055f8:	681b      	ldr	r3, [r3, #0]
 80055fa:	695b      	ldr	r3, [r3, #20]
 80055fc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005600:	2b00      	cmp	r3, #0
 8005602:	bf14      	ite	ne
 8005604:	2301      	movne	r3, #1
 8005606:	2300      	moveq	r3, #0
 8005608:	b2db      	uxtb	r3, r3
 800560a:	617b      	str	r3, [r7, #20]
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 800560c:	687b      	ldr	r3, [r7, #4]
 800560e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005610:	f003 0308 	and.w	r3, r3, #8
 8005614:	2b00      	cmp	r3, #0
 8005616:	d102      	bne.n	800561e <HAL_UART_IRQHandler+0x146>
 8005618:	697b      	ldr	r3, [r7, #20]
 800561a:	2b00      	cmp	r3, #0
 800561c:	d031      	beq.n	8005682 <HAL_UART_IRQHandler+0x1aa>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800561e:	6878      	ldr	r0, [r7, #4]
 8005620:	f000 f92a 	bl	8005878 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005624:	687b      	ldr	r3, [r7, #4]
 8005626:	681b      	ldr	r3, [r3, #0]
 8005628:	695b      	ldr	r3, [r3, #20]
 800562a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800562e:	2b00      	cmp	r3, #0
 8005630:	d023      	beq.n	800567a <HAL_UART_IRQHandler+0x1a2>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005632:	687b      	ldr	r3, [r7, #4]
 8005634:	681b      	ldr	r3, [r3, #0]
 8005636:	695a      	ldr	r2, [r3, #20]
 8005638:	687b      	ldr	r3, [r7, #4]
 800563a:	681b      	ldr	r3, [r3, #0]
 800563c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005640:	615a      	str	r2, [r3, #20]

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8005642:	687b      	ldr	r3, [r7, #4]
 8005644:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005646:	2b00      	cmp	r3, #0
 8005648:	d013      	beq.n	8005672 <HAL_UART_IRQHandler+0x19a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800564a:	687b      	ldr	r3, [r7, #4]
 800564c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800564e:	4a76      	ldr	r2, [pc, #472]	; (8005828 <HAL_UART_IRQHandler+0x350>)
 8005650:	635a      	str	r2, [r3, #52]	; 0x34
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8005652:	687b      	ldr	r3, [r7, #4]
 8005654:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005656:	4618      	mov	r0, r3
 8005658:	f7fd fce0 	bl	800301c <HAL_DMA_Abort_IT>
 800565c:	4603      	mov	r3, r0
 800565e:	2b00      	cmp	r3, #0
 8005660:	d016      	beq.n	8005690 <HAL_UART_IRQHandler+0x1b8>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8005662:	687b      	ldr	r3, [r7, #4]
 8005664:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005666:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005668:	687a      	ldr	r2, [r7, #4]
 800566a:	6b92      	ldr	r2, [r2, #56]	; 0x38
 800566c:	4610      	mov	r0, r2
 800566e:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005670:	e00e      	b.n	8005690 <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8005672:	6878      	ldr	r0, [r7, #4]
 8005674:	f000 f8ec 	bl	8005850 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005678:	e00a      	b.n	8005690 <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800567a:	6878      	ldr	r0, [r7, #4]
 800567c:	f000 f8e8 	bl	8005850 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005680:	e006      	b.n	8005690 <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8005682:	6878      	ldr	r0, [r7, #4]
 8005684:	f000 f8e4 	bl	8005850 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005688:	687b      	ldr	r3, [r7, #4]
 800568a:	2200      	movs	r2, #0
 800568c:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 800568e:	e0c3      	b.n	8005818 <HAL_UART_IRQHandler+0x340>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005690:	bf00      	nop
    return;
 8005692:	e0c1      	b.n	8005818 <HAL_UART_IRQHandler+0x340>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if (  (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005694:	687b      	ldr	r3, [r7, #4]
 8005696:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005698:	2b01      	cmp	r3, #1
 800569a:	f040 80a1 	bne.w	80057e0 <HAL_UART_IRQHandler+0x308>
      &&((isrflags & USART_SR_IDLE) != 0U)
 800569e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80056a0:	f003 0310 	and.w	r3, r3, #16
 80056a4:	2b00      	cmp	r3, #0
 80056a6:	f000 809b 	beq.w	80057e0 <HAL_UART_IRQHandler+0x308>
      &&((cr1its & USART_SR_IDLE) != 0U))
 80056aa:	6a3b      	ldr	r3, [r7, #32]
 80056ac:	f003 0310 	and.w	r3, r3, #16
 80056b0:	2b00      	cmp	r3, #0
 80056b2:	f000 8095 	beq.w	80057e0 <HAL_UART_IRQHandler+0x308>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 80056b6:	2300      	movs	r3, #0
 80056b8:	60fb      	str	r3, [r7, #12]
 80056ba:	687b      	ldr	r3, [r7, #4]
 80056bc:	681b      	ldr	r3, [r3, #0]
 80056be:	681b      	ldr	r3, [r3, #0]
 80056c0:	60fb      	str	r3, [r7, #12]
 80056c2:	687b      	ldr	r3, [r7, #4]
 80056c4:	681b      	ldr	r3, [r3, #0]
 80056c6:	685b      	ldr	r3, [r3, #4]
 80056c8:	60fb      	str	r3, [r7, #12]
 80056ca:	68fb      	ldr	r3, [r7, #12]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80056cc:	687b      	ldr	r3, [r7, #4]
 80056ce:	681b      	ldr	r3, [r3, #0]
 80056d0:	695b      	ldr	r3, [r3, #20]
 80056d2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80056d6:	2b00      	cmp	r3, #0
 80056d8:	d04e      	beq.n	8005778 <HAL_UART_IRQHandler+0x2a0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 80056da:	687b      	ldr	r3, [r7, #4]
 80056dc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80056de:	681b      	ldr	r3, [r3, #0]
 80056e0:	685b      	ldr	r3, [r3, #4]
 80056e2:	823b      	strh	r3, [r7, #16]
      if (  (nb_remaining_rx_data > 0U)
 80056e4:	8a3b      	ldrh	r3, [r7, #16]
 80056e6:	2b00      	cmp	r3, #0
 80056e8:	f000 8098 	beq.w	800581c <HAL_UART_IRQHandler+0x344>
          &&(nb_remaining_rx_data < huart->RxXferSize))
 80056ec:	687b      	ldr	r3, [r7, #4]
 80056ee:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 80056f0:	8a3a      	ldrh	r2, [r7, #16]
 80056f2:	429a      	cmp	r2, r3
 80056f4:	f080 8092 	bcs.w	800581c <HAL_UART_IRQHandler+0x344>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 80056f8:	687b      	ldr	r3, [r7, #4]
 80056fa:	8a3a      	ldrh	r2, [r7, #16]
 80056fc:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 80056fe:	687b      	ldr	r3, [r7, #4]
 8005700:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005702:	699b      	ldr	r3, [r3, #24]
 8005704:	2b20      	cmp	r3, #32
 8005706:	d02b      	beq.n	8005760 <HAL_UART_IRQHandler+0x288>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8005708:	687b      	ldr	r3, [r7, #4]
 800570a:	681b      	ldr	r3, [r3, #0]
 800570c:	68da      	ldr	r2, [r3, #12]
 800570e:	687b      	ldr	r3, [r7, #4]
 8005710:	681b      	ldr	r3, [r3, #0]
 8005712:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8005716:	60da      	str	r2, [r3, #12]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005718:	687b      	ldr	r3, [r7, #4]
 800571a:	681b      	ldr	r3, [r3, #0]
 800571c:	695a      	ldr	r2, [r3, #20]
 800571e:	687b      	ldr	r3, [r7, #4]
 8005720:	681b      	ldr	r3, [r3, #0]
 8005722:	f022 0201 	bic.w	r2, r2, #1
 8005726:	615a      	str	r2, [r3, #20]

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005728:	687b      	ldr	r3, [r7, #4]
 800572a:	681b      	ldr	r3, [r3, #0]
 800572c:	695a      	ldr	r2, [r3, #20]
 800572e:	687b      	ldr	r3, [r7, #4]
 8005730:	681b      	ldr	r3, [r3, #0]
 8005732:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005736:	615a      	str	r2, [r3, #20]

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8005738:	687b      	ldr	r3, [r7, #4]
 800573a:	2220      	movs	r2, #32
 800573c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005740:	687b      	ldr	r3, [r7, #4]
 8005742:	2200      	movs	r2, #0
 8005744:	631a      	str	r2, [r3, #48]	; 0x30

          CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005746:	687b      	ldr	r3, [r7, #4]
 8005748:	681b      	ldr	r3, [r3, #0]
 800574a:	68da      	ldr	r2, [r3, #12]
 800574c:	687b      	ldr	r3, [r7, #4]
 800574e:	681b      	ldr	r3, [r3, #0]
 8005750:	f022 0210 	bic.w	r2, r2, #16
 8005754:	60da      	str	r2, [r3, #12]

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8005756:	687b      	ldr	r3, [r7, #4]
 8005758:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800575a:	4618      	mov	r0, r3
 800575c:	f7fd fc23 	bl	8002fa6 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8005760:	687b      	ldr	r3, [r7, #4]
 8005762:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8005764:	687b      	ldr	r3, [r7, #4]
 8005766:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8005768:	b29b      	uxth	r3, r3
 800576a:	1ad3      	subs	r3, r2, r3
 800576c:	b29b      	uxth	r3, r3
 800576e:	4619      	mov	r1, r3
 8005770:	6878      	ldr	r0, [r7, #4]
 8005772:	f000 f876 	bl	8005862 <HAL_UARTEx_RxEventCallback>
#endif
      }
      return;
 8005776:	e051      	b.n	800581c <HAL_UART_IRQHandler+0x344>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8005778:	687b      	ldr	r3, [r7, #4]
 800577a:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 800577c:	687b      	ldr	r3, [r7, #4]
 800577e:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8005780:	b29b      	uxth	r3, r3
 8005782:	1ad3      	subs	r3, r2, r3
 8005784:	827b      	strh	r3, [r7, #18]
      if (  (huart->RxXferCount > 0U)
 8005786:	687b      	ldr	r3, [r7, #4]
 8005788:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800578a:	b29b      	uxth	r3, r3
 800578c:	2b00      	cmp	r3, #0
 800578e:	d047      	beq.n	8005820 <HAL_UART_IRQHandler+0x348>
          &&(nb_rx_data > 0U) )
 8005790:	8a7b      	ldrh	r3, [r7, #18]
 8005792:	2b00      	cmp	r3, #0
 8005794:	d044      	beq.n	8005820 <HAL_UART_IRQHandler+0x348>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005796:	687b      	ldr	r3, [r7, #4]
 8005798:	681b      	ldr	r3, [r3, #0]
 800579a:	68da      	ldr	r2, [r3, #12]
 800579c:	687b      	ldr	r3, [r7, #4]
 800579e:	681b      	ldr	r3, [r3, #0]
 80057a0:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 80057a4:	60da      	str	r2, [r3, #12]

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80057a6:	687b      	ldr	r3, [r7, #4]
 80057a8:	681b      	ldr	r3, [r3, #0]
 80057aa:	695a      	ldr	r2, [r3, #20]
 80057ac:	687b      	ldr	r3, [r7, #4]
 80057ae:	681b      	ldr	r3, [r3, #0]
 80057b0:	f022 0201 	bic.w	r2, r2, #1
 80057b4:	615a      	str	r2, [r3, #20]

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80057b6:	687b      	ldr	r3, [r7, #4]
 80057b8:	2220      	movs	r2, #32
 80057ba:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80057be:	687b      	ldr	r3, [r7, #4]
 80057c0:	2200      	movs	r2, #0
 80057c2:	631a      	str	r2, [r3, #48]	; 0x30

        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80057c4:	687b      	ldr	r3, [r7, #4]
 80057c6:	681b      	ldr	r3, [r3, #0]
 80057c8:	68da      	ldr	r2, [r3, #12]
 80057ca:	687b      	ldr	r3, [r7, #4]
 80057cc:	681b      	ldr	r3, [r3, #0]
 80057ce:	f022 0210 	bic.w	r2, r2, #16
 80057d2:	60da      	str	r2, [r3, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 80057d4:	8a7b      	ldrh	r3, [r7, #18]
 80057d6:	4619      	mov	r1, r3
 80057d8:	6878      	ldr	r0, [r7, #4]
 80057da:	f000 f842 	bl	8005862 <HAL_UARTEx_RxEventCallback>
#endif
      }
      return;
 80057de:	e01f      	b.n	8005820 <HAL_UART_IRQHandler+0x348>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 80057e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80057e2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80057e6:	2b00      	cmp	r3, #0
 80057e8:	d008      	beq.n	80057fc <HAL_UART_IRQHandler+0x324>
 80057ea:	6a3b      	ldr	r3, [r7, #32]
 80057ec:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80057f0:	2b00      	cmp	r3, #0
 80057f2:	d003      	beq.n	80057fc <HAL_UART_IRQHandler+0x324>
  {
    UART_Transmit_IT(huart);
 80057f4:	6878      	ldr	r0, [r7, #4]
 80057f6:	f000 f87f 	bl	80058f8 <UART_Transmit_IT>
    return;
 80057fa:	e012      	b.n	8005822 <HAL_UART_IRQHandler+0x34a>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 80057fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80057fe:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005802:	2b00      	cmp	r3, #0
 8005804:	d00d      	beq.n	8005822 <HAL_UART_IRQHandler+0x34a>
 8005806:	6a3b      	ldr	r3, [r7, #32]
 8005808:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800580c:	2b00      	cmp	r3, #0
 800580e:	d008      	beq.n	8005822 <HAL_UART_IRQHandler+0x34a>
  {
    UART_EndTransmit_IT(huart);
 8005810:	6878      	ldr	r0, [r7, #4]
 8005812:	f000 f8c0 	bl	8005996 <UART_EndTransmit_IT>
    return;
 8005816:	e004      	b.n	8005822 <HAL_UART_IRQHandler+0x34a>
    return;
 8005818:	bf00      	nop
 800581a:	e002      	b.n	8005822 <HAL_UART_IRQHandler+0x34a>
      return;
 800581c:	bf00      	nop
 800581e:	e000      	b.n	8005822 <HAL_UART_IRQHandler+0x34a>
      return;
 8005820:	bf00      	nop
  }
}
 8005822:	3728      	adds	r7, #40	; 0x28
 8005824:	46bd      	mov	sp, r7
 8005826:	bd80      	pop	{r7, pc}
 8005828:	080058d1 	.word	0x080058d1

0800582c <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 800582c:	b480      	push	{r7}
 800582e:	b083      	sub	sp, #12
 8005830:	af00      	add	r7, sp, #0
 8005832:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8005834:	bf00      	nop
 8005836:	370c      	adds	r7, #12
 8005838:	46bd      	mov	sp, r7
 800583a:	bc80      	pop	{r7}
 800583c:	4770      	bx	lr

0800583e <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 800583e:	b480      	push	{r7}
 8005840:	b083      	sub	sp, #12
 8005842:	af00      	add	r7, sp, #0
 8005844:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 8005846:	bf00      	nop
 8005848:	370c      	adds	r7, #12
 800584a:	46bd      	mov	sp, r7
 800584c:	bc80      	pop	{r7}
 800584e:	4770      	bx	lr

08005850 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8005850:	b480      	push	{r7}
 8005852:	b083      	sub	sp, #12
 8005854:	af00      	add	r7, sp, #0
 8005856:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8005858:	bf00      	nop
 800585a:	370c      	adds	r7, #12
 800585c:	46bd      	mov	sp, r7
 800585e:	bc80      	pop	{r7}
 8005860:	4770      	bx	lr

08005862 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8005862:	b480      	push	{r7}
 8005864:	b083      	sub	sp, #12
 8005866:	af00      	add	r7, sp, #0
 8005868:	6078      	str	r0, [r7, #4]
 800586a:	460b      	mov	r3, r1
 800586c:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 800586e:	bf00      	nop
 8005870:	370c      	adds	r7, #12
 8005872:	46bd      	mov	sp, r7
 8005874:	bc80      	pop	{r7}
 8005876:	4770      	bx	lr

08005878 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8005878:	b480      	push	{r7}
 800587a:	b083      	sub	sp, #12
 800587c:	af00      	add	r7, sp, #0
 800587e:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005880:	687b      	ldr	r3, [r7, #4]
 8005882:	681b      	ldr	r3, [r3, #0]
 8005884:	68da      	ldr	r2, [r3, #12]
 8005886:	687b      	ldr	r3, [r7, #4]
 8005888:	681b      	ldr	r3, [r3, #0]
 800588a:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 800588e:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005890:	687b      	ldr	r3, [r7, #4]
 8005892:	681b      	ldr	r3, [r3, #0]
 8005894:	695a      	ldr	r2, [r3, #20]
 8005896:	687b      	ldr	r3, [r7, #4]
 8005898:	681b      	ldr	r3, [r3, #0]
 800589a:	f022 0201 	bic.w	r2, r2, #1
 800589e:	615a      	str	r2, [r3, #20]

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80058a0:	687b      	ldr	r3, [r7, #4]
 80058a2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80058a4:	2b01      	cmp	r3, #1
 80058a6:	d107      	bne.n	80058b8 <UART_EndRxTransfer+0x40>
  {
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80058a8:	687b      	ldr	r3, [r7, #4]
 80058aa:	681b      	ldr	r3, [r3, #0]
 80058ac:	68da      	ldr	r2, [r3, #12]
 80058ae:	687b      	ldr	r3, [r7, #4]
 80058b0:	681b      	ldr	r3, [r3, #0]
 80058b2:	f022 0210 	bic.w	r2, r2, #16
 80058b6:	60da      	str	r2, [r3, #12]
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80058b8:	687b      	ldr	r3, [r7, #4]
 80058ba:	2220      	movs	r2, #32
 80058bc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80058c0:	687b      	ldr	r3, [r7, #4]
 80058c2:	2200      	movs	r2, #0
 80058c4:	631a      	str	r2, [r3, #48]	; 0x30
}
 80058c6:	bf00      	nop
 80058c8:	370c      	adds	r7, #12
 80058ca:	46bd      	mov	sp, r7
 80058cc:	bc80      	pop	{r7}
 80058ce:	4770      	bx	lr

080058d0 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80058d0:	b580      	push	{r7, lr}
 80058d2:	b084      	sub	sp, #16
 80058d4:	af00      	add	r7, sp, #0
 80058d6:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80058d8:	687b      	ldr	r3, [r7, #4]
 80058da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80058dc:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 80058de:	68fb      	ldr	r3, [r7, #12]
 80058e0:	2200      	movs	r2, #0
 80058e2:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 80058e4:	68fb      	ldr	r3, [r7, #12]
 80058e6:	2200      	movs	r2, #0
 80058e8:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80058ea:	68f8      	ldr	r0, [r7, #12]
 80058ec:	f7ff ffb0 	bl	8005850 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80058f0:	bf00      	nop
 80058f2:	3710      	adds	r7, #16
 80058f4:	46bd      	mov	sp, r7
 80058f6:	bd80      	pop	{r7, pc}

080058f8 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 80058f8:	b480      	push	{r7}
 80058fa:	b085      	sub	sp, #20
 80058fc:	af00      	add	r7, sp, #0
 80058fe:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8005900:	687b      	ldr	r3, [r7, #4]
 8005902:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005906:	b2db      	uxtb	r3, r3
 8005908:	2b21      	cmp	r3, #33	; 0x21
 800590a:	d13e      	bne.n	800598a <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800590c:	687b      	ldr	r3, [r7, #4]
 800590e:	689b      	ldr	r3, [r3, #8]
 8005910:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005914:	d114      	bne.n	8005940 <UART_Transmit_IT+0x48>
 8005916:	687b      	ldr	r3, [r7, #4]
 8005918:	691b      	ldr	r3, [r3, #16]
 800591a:	2b00      	cmp	r3, #0
 800591c:	d110      	bne.n	8005940 <UART_Transmit_IT+0x48>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 800591e:	687b      	ldr	r3, [r7, #4]
 8005920:	6a1b      	ldr	r3, [r3, #32]
 8005922:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8005924:	68fb      	ldr	r3, [r7, #12]
 8005926:	881b      	ldrh	r3, [r3, #0]
 8005928:	461a      	mov	r2, r3
 800592a:	687b      	ldr	r3, [r7, #4]
 800592c:	681b      	ldr	r3, [r3, #0]
 800592e:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8005932:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8005934:	687b      	ldr	r3, [r7, #4]
 8005936:	6a1b      	ldr	r3, [r3, #32]
 8005938:	1c9a      	adds	r2, r3, #2
 800593a:	687b      	ldr	r3, [r7, #4]
 800593c:	621a      	str	r2, [r3, #32]
 800593e:	e008      	b.n	8005952 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8005940:	687b      	ldr	r3, [r7, #4]
 8005942:	6a1b      	ldr	r3, [r3, #32]
 8005944:	1c59      	adds	r1, r3, #1
 8005946:	687a      	ldr	r2, [r7, #4]
 8005948:	6211      	str	r1, [r2, #32]
 800594a:	781a      	ldrb	r2, [r3, #0]
 800594c:	687b      	ldr	r3, [r7, #4]
 800594e:	681b      	ldr	r3, [r3, #0]
 8005950:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8005952:	687b      	ldr	r3, [r7, #4]
 8005954:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8005956:	b29b      	uxth	r3, r3
 8005958:	3b01      	subs	r3, #1
 800595a:	b29b      	uxth	r3, r3
 800595c:	687a      	ldr	r2, [r7, #4]
 800595e:	4619      	mov	r1, r3
 8005960:	84d1      	strh	r1, [r2, #38]	; 0x26
 8005962:	2b00      	cmp	r3, #0
 8005964:	d10f      	bne.n	8005986 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8005966:	687b      	ldr	r3, [r7, #4]
 8005968:	681b      	ldr	r3, [r3, #0]
 800596a:	68da      	ldr	r2, [r3, #12]
 800596c:	687b      	ldr	r3, [r7, #4]
 800596e:	681b      	ldr	r3, [r3, #0]
 8005970:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8005974:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8005976:	687b      	ldr	r3, [r7, #4]
 8005978:	681b      	ldr	r3, [r3, #0]
 800597a:	68da      	ldr	r2, [r3, #12]
 800597c:	687b      	ldr	r3, [r7, #4]
 800597e:	681b      	ldr	r3, [r3, #0]
 8005980:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8005984:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8005986:	2300      	movs	r3, #0
 8005988:	e000      	b.n	800598c <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 800598a:	2302      	movs	r3, #2
  }
}
 800598c:	4618      	mov	r0, r3
 800598e:	3714      	adds	r7, #20
 8005990:	46bd      	mov	sp, r7
 8005992:	bc80      	pop	{r7}
 8005994:	4770      	bx	lr

08005996 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8005996:	b580      	push	{r7, lr}
 8005998:	b082      	sub	sp, #8
 800599a:	af00      	add	r7, sp, #0
 800599c:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 800599e:	687b      	ldr	r3, [r7, #4]
 80059a0:	681b      	ldr	r3, [r3, #0]
 80059a2:	68da      	ldr	r2, [r3, #12]
 80059a4:	687b      	ldr	r3, [r7, #4]
 80059a6:	681b      	ldr	r3, [r3, #0]
 80059a8:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80059ac:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80059ae:	687b      	ldr	r3, [r7, #4]
 80059b0:	2220      	movs	r2, #32
 80059b2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80059b6:	6878      	ldr	r0, [r7, #4]
 80059b8:	f7ff ff38 	bl	800582c <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 80059bc:	2300      	movs	r3, #0
}
 80059be:	4618      	mov	r0, r3
 80059c0:	3708      	adds	r7, #8
 80059c2:	46bd      	mov	sp, r7
 80059c4:	bd80      	pop	{r7, pc}

080059c6 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 80059c6:	b580      	push	{r7, lr}
 80059c8:	b086      	sub	sp, #24
 80059ca:	af00      	add	r7, sp, #0
 80059cc:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80059ce:	687b      	ldr	r3, [r7, #4]
 80059d0:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80059d4:	b2db      	uxtb	r3, r3
 80059d6:	2b22      	cmp	r3, #34	; 0x22
 80059d8:	f040 8099 	bne.w	8005b0e <UART_Receive_IT+0x148>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80059dc:	687b      	ldr	r3, [r7, #4]
 80059de:	689b      	ldr	r3, [r3, #8]
 80059e0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80059e4:	d117      	bne.n	8005a16 <UART_Receive_IT+0x50>
 80059e6:	687b      	ldr	r3, [r7, #4]
 80059e8:	691b      	ldr	r3, [r3, #16]
 80059ea:	2b00      	cmp	r3, #0
 80059ec:	d113      	bne.n	8005a16 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 80059ee:	2300      	movs	r3, #0
 80059f0:	617b      	str	r3, [r7, #20]
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 80059f2:	687b      	ldr	r3, [r7, #4]
 80059f4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80059f6:	613b      	str	r3, [r7, #16]
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 80059f8:	687b      	ldr	r3, [r7, #4]
 80059fa:	681b      	ldr	r3, [r3, #0]
 80059fc:	685b      	ldr	r3, [r3, #4]
 80059fe:	b29b      	uxth	r3, r3
 8005a00:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005a04:	b29a      	uxth	r2, r3
 8005a06:	693b      	ldr	r3, [r7, #16]
 8005a08:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8005a0a:	687b      	ldr	r3, [r7, #4]
 8005a0c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005a0e:	1c9a      	adds	r2, r3, #2
 8005a10:	687b      	ldr	r3, [r7, #4]
 8005a12:	629a      	str	r2, [r3, #40]	; 0x28
 8005a14:	e026      	b.n	8005a64 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8005a16:	687b      	ldr	r3, [r7, #4]
 8005a18:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005a1a:	617b      	str	r3, [r7, #20]
      pdata16bits  = NULL;
 8005a1c:	2300      	movs	r3, #0
 8005a1e:	613b      	str	r3, [r7, #16]

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8005a20:	687b      	ldr	r3, [r7, #4]
 8005a22:	689b      	ldr	r3, [r3, #8]
 8005a24:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005a28:	d007      	beq.n	8005a3a <UART_Receive_IT+0x74>
 8005a2a:	687b      	ldr	r3, [r7, #4]
 8005a2c:	689b      	ldr	r3, [r3, #8]
 8005a2e:	2b00      	cmp	r3, #0
 8005a30:	d10a      	bne.n	8005a48 <UART_Receive_IT+0x82>
 8005a32:	687b      	ldr	r3, [r7, #4]
 8005a34:	691b      	ldr	r3, [r3, #16]
 8005a36:	2b00      	cmp	r3, #0
 8005a38:	d106      	bne.n	8005a48 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8005a3a:	687b      	ldr	r3, [r7, #4]
 8005a3c:	681b      	ldr	r3, [r3, #0]
 8005a3e:	685b      	ldr	r3, [r3, #4]
 8005a40:	b2da      	uxtb	r2, r3
 8005a42:	697b      	ldr	r3, [r7, #20]
 8005a44:	701a      	strb	r2, [r3, #0]
 8005a46:	e008      	b.n	8005a5a <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8005a48:	687b      	ldr	r3, [r7, #4]
 8005a4a:	681b      	ldr	r3, [r3, #0]
 8005a4c:	685b      	ldr	r3, [r3, #4]
 8005a4e:	b2db      	uxtb	r3, r3
 8005a50:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005a54:	b2da      	uxtb	r2, r3
 8005a56:	697b      	ldr	r3, [r7, #20]
 8005a58:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8005a5a:	687b      	ldr	r3, [r7, #4]
 8005a5c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005a5e:	1c5a      	adds	r2, r3, #1
 8005a60:	687b      	ldr	r3, [r7, #4]
 8005a62:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 8005a64:	687b      	ldr	r3, [r7, #4]
 8005a66:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8005a68:	b29b      	uxth	r3, r3
 8005a6a:	3b01      	subs	r3, #1
 8005a6c:	b29b      	uxth	r3, r3
 8005a6e:	687a      	ldr	r2, [r7, #4]
 8005a70:	4619      	mov	r1, r3
 8005a72:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8005a74:	2b00      	cmp	r3, #0
 8005a76:	d148      	bne.n	8005b0a <UART_Receive_IT+0x144>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8005a78:	687b      	ldr	r3, [r7, #4]
 8005a7a:	681b      	ldr	r3, [r3, #0]
 8005a7c:	68da      	ldr	r2, [r3, #12]
 8005a7e:	687b      	ldr	r3, [r7, #4]
 8005a80:	681b      	ldr	r3, [r3, #0]
 8005a82:	f022 0220 	bic.w	r2, r2, #32
 8005a86:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8005a88:	687b      	ldr	r3, [r7, #4]
 8005a8a:	681b      	ldr	r3, [r3, #0]
 8005a8c:	68da      	ldr	r2, [r3, #12]
 8005a8e:	687b      	ldr	r3, [r7, #4]
 8005a90:	681b      	ldr	r3, [r3, #0]
 8005a92:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8005a96:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8005a98:	687b      	ldr	r3, [r7, #4]
 8005a9a:	681b      	ldr	r3, [r3, #0]
 8005a9c:	695a      	ldr	r2, [r3, #20]
 8005a9e:	687b      	ldr	r3, [r7, #4]
 8005aa0:	681b      	ldr	r3, [r3, #0]
 8005aa2:	f022 0201 	bic.w	r2, r2, #1
 8005aa6:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8005aa8:	687b      	ldr	r3, [r7, #4]
 8005aaa:	2220      	movs	r2, #32
 8005aac:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005ab0:	687b      	ldr	r3, [r7, #4]
 8005ab2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005ab4:	2b01      	cmp	r3, #1
 8005ab6:	d123      	bne.n	8005b00 <UART_Receive_IT+0x13a>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005ab8:	687b      	ldr	r3, [r7, #4]
 8005aba:	2200      	movs	r2, #0
 8005abc:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005abe:	687b      	ldr	r3, [r7, #4]
 8005ac0:	681b      	ldr	r3, [r3, #0]
 8005ac2:	68da      	ldr	r2, [r3, #12]
 8005ac4:	687b      	ldr	r3, [r7, #4]
 8005ac6:	681b      	ldr	r3, [r3, #0]
 8005ac8:	f022 0210 	bic.w	r2, r2, #16
 8005acc:	60da      	str	r2, [r3, #12]

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8005ace:	687b      	ldr	r3, [r7, #4]
 8005ad0:	681b      	ldr	r3, [r3, #0]
 8005ad2:	681b      	ldr	r3, [r3, #0]
 8005ad4:	f003 0310 	and.w	r3, r3, #16
 8005ad8:	2b10      	cmp	r3, #16
 8005ada:	d10a      	bne.n	8005af2 <UART_Receive_IT+0x12c>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8005adc:	2300      	movs	r3, #0
 8005ade:	60fb      	str	r3, [r7, #12]
 8005ae0:	687b      	ldr	r3, [r7, #4]
 8005ae2:	681b      	ldr	r3, [r3, #0]
 8005ae4:	681b      	ldr	r3, [r3, #0]
 8005ae6:	60fb      	str	r3, [r7, #12]
 8005ae8:	687b      	ldr	r3, [r7, #4]
 8005aea:	681b      	ldr	r3, [r3, #0]
 8005aec:	685b      	ldr	r3, [r3, #4]
 8005aee:	60fb      	str	r3, [r7, #12]
 8005af0:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8005af2:	687b      	ldr	r3, [r7, #4]
 8005af4:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8005af6:	4619      	mov	r1, r3
 8005af8:	6878      	ldr	r0, [r7, #4]
 8005afa:	f7ff feb2 	bl	8005862 <HAL_UARTEx_RxEventCallback>
 8005afe:	e002      	b.n	8005b06 <UART_Receive_IT+0x140>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)		  
       /*Call registered Rx complete callback*/
       huart->RxCpltCallback(huart);
#else
       /*Call legacy weak Rx complete callback*/
       HAL_UART_RxCpltCallback(huart);
 8005b00:	6878      	ldr	r0, [r7, #4]
 8005b02:	f7ff fe9c 	bl	800583e <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8005b06:	2300      	movs	r3, #0
 8005b08:	e002      	b.n	8005b10 <UART_Receive_IT+0x14a>
    }
    return HAL_OK;
 8005b0a:	2300      	movs	r3, #0
 8005b0c:	e000      	b.n	8005b10 <UART_Receive_IT+0x14a>
  }
  else
  {
    return HAL_BUSY;
 8005b0e:	2302      	movs	r3, #2
  }
}
 8005b10:	4618      	mov	r0, r3
 8005b12:	3718      	adds	r7, #24
 8005b14:	46bd      	mov	sp, r7
 8005b16:	bd80      	pop	{r7, pc}

08005b18 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005b18:	b580      	push	{r7, lr}
 8005b1a:	b084      	sub	sp, #16
 8005b1c:	af00      	add	r7, sp, #0
 8005b1e:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005b20:	687b      	ldr	r3, [r7, #4]
 8005b22:	681b      	ldr	r3, [r3, #0]
 8005b24:	691b      	ldr	r3, [r3, #16]
 8005b26:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8005b2a:	687b      	ldr	r3, [r7, #4]
 8005b2c:	68da      	ldr	r2, [r3, #12]
 8005b2e:	687b      	ldr	r3, [r7, #4]
 8005b30:	681b      	ldr	r3, [r3, #0]
 8005b32:	430a      	orrs	r2, r1
 8005b34:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8005b36:	687b      	ldr	r3, [r7, #4]
 8005b38:	689a      	ldr	r2, [r3, #8]
 8005b3a:	687b      	ldr	r3, [r7, #4]
 8005b3c:	691b      	ldr	r3, [r3, #16]
 8005b3e:	431a      	orrs	r2, r3
 8005b40:	687b      	ldr	r3, [r7, #4]
 8005b42:	695b      	ldr	r3, [r3, #20]
 8005b44:	4313      	orrs	r3, r2
 8005b46:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 8005b48:	687b      	ldr	r3, [r7, #4]
 8005b4a:	681b      	ldr	r3, [r3, #0]
 8005b4c:	68db      	ldr	r3, [r3, #12]
 8005b4e:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 8005b52:	f023 030c 	bic.w	r3, r3, #12
 8005b56:	687a      	ldr	r2, [r7, #4]
 8005b58:	6812      	ldr	r2, [r2, #0]
 8005b5a:	68b9      	ldr	r1, [r7, #8]
 8005b5c:	430b      	orrs	r3, r1
 8005b5e:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8005b60:	687b      	ldr	r3, [r7, #4]
 8005b62:	681b      	ldr	r3, [r3, #0]
 8005b64:	695b      	ldr	r3, [r3, #20]
 8005b66:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8005b6a:	687b      	ldr	r3, [r7, #4]
 8005b6c:	699a      	ldr	r2, [r3, #24]
 8005b6e:	687b      	ldr	r3, [r7, #4]
 8005b70:	681b      	ldr	r3, [r3, #0]
 8005b72:	430a      	orrs	r2, r1
 8005b74:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 8005b76:	687b      	ldr	r3, [r7, #4]
 8005b78:	681b      	ldr	r3, [r3, #0]
 8005b7a:	4a2c      	ldr	r2, [pc, #176]	; (8005c2c <UART_SetConfig+0x114>)
 8005b7c:	4293      	cmp	r3, r2
 8005b7e:	d103      	bne.n	8005b88 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8005b80:	f7fe fffc 	bl	8004b7c <HAL_RCC_GetPCLK2Freq>
 8005b84:	60f8      	str	r0, [r7, #12]
 8005b86:	e002      	b.n	8005b8e <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8005b88:	f7fe ffe4 	bl	8004b54 <HAL_RCC_GetPCLK1Freq>
 8005b8c:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8005b8e:	68fa      	ldr	r2, [r7, #12]
 8005b90:	4613      	mov	r3, r2
 8005b92:	009b      	lsls	r3, r3, #2
 8005b94:	4413      	add	r3, r2
 8005b96:	009a      	lsls	r2, r3, #2
 8005b98:	441a      	add	r2, r3
 8005b9a:	687b      	ldr	r3, [r7, #4]
 8005b9c:	685b      	ldr	r3, [r3, #4]
 8005b9e:	009b      	lsls	r3, r3, #2
 8005ba0:	fbb2 f3f3 	udiv	r3, r2, r3
 8005ba4:	4a22      	ldr	r2, [pc, #136]	; (8005c30 <UART_SetConfig+0x118>)
 8005ba6:	fba2 2303 	umull	r2, r3, r2, r3
 8005baa:	095b      	lsrs	r3, r3, #5
 8005bac:	0119      	lsls	r1, r3, #4
 8005bae:	68fa      	ldr	r2, [r7, #12]
 8005bb0:	4613      	mov	r3, r2
 8005bb2:	009b      	lsls	r3, r3, #2
 8005bb4:	4413      	add	r3, r2
 8005bb6:	009a      	lsls	r2, r3, #2
 8005bb8:	441a      	add	r2, r3
 8005bba:	687b      	ldr	r3, [r7, #4]
 8005bbc:	685b      	ldr	r3, [r3, #4]
 8005bbe:	009b      	lsls	r3, r3, #2
 8005bc0:	fbb2 f2f3 	udiv	r2, r2, r3
 8005bc4:	4b1a      	ldr	r3, [pc, #104]	; (8005c30 <UART_SetConfig+0x118>)
 8005bc6:	fba3 0302 	umull	r0, r3, r3, r2
 8005bca:	095b      	lsrs	r3, r3, #5
 8005bcc:	2064      	movs	r0, #100	; 0x64
 8005bce:	fb00 f303 	mul.w	r3, r0, r3
 8005bd2:	1ad3      	subs	r3, r2, r3
 8005bd4:	011b      	lsls	r3, r3, #4
 8005bd6:	3332      	adds	r3, #50	; 0x32
 8005bd8:	4a15      	ldr	r2, [pc, #84]	; (8005c30 <UART_SetConfig+0x118>)
 8005bda:	fba2 2303 	umull	r2, r3, r2, r3
 8005bde:	095b      	lsrs	r3, r3, #5
 8005be0:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8005be4:	4419      	add	r1, r3
 8005be6:	68fa      	ldr	r2, [r7, #12]
 8005be8:	4613      	mov	r3, r2
 8005bea:	009b      	lsls	r3, r3, #2
 8005bec:	4413      	add	r3, r2
 8005bee:	009a      	lsls	r2, r3, #2
 8005bf0:	441a      	add	r2, r3
 8005bf2:	687b      	ldr	r3, [r7, #4]
 8005bf4:	685b      	ldr	r3, [r3, #4]
 8005bf6:	009b      	lsls	r3, r3, #2
 8005bf8:	fbb2 f2f3 	udiv	r2, r2, r3
 8005bfc:	4b0c      	ldr	r3, [pc, #48]	; (8005c30 <UART_SetConfig+0x118>)
 8005bfe:	fba3 0302 	umull	r0, r3, r3, r2
 8005c02:	095b      	lsrs	r3, r3, #5
 8005c04:	2064      	movs	r0, #100	; 0x64
 8005c06:	fb00 f303 	mul.w	r3, r0, r3
 8005c0a:	1ad3      	subs	r3, r2, r3
 8005c0c:	011b      	lsls	r3, r3, #4
 8005c0e:	3332      	adds	r3, #50	; 0x32
 8005c10:	4a07      	ldr	r2, [pc, #28]	; (8005c30 <UART_SetConfig+0x118>)
 8005c12:	fba2 2303 	umull	r2, r3, r2, r3
 8005c16:	095b      	lsrs	r3, r3, #5
 8005c18:	f003 020f 	and.w	r2, r3, #15
 8005c1c:	687b      	ldr	r3, [r7, #4]
 8005c1e:	681b      	ldr	r3, [r3, #0]
 8005c20:	440a      	add	r2, r1
 8005c22:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 8005c24:	bf00      	nop
 8005c26:	3710      	adds	r7, #16
 8005c28:	46bd      	mov	sp, r7
 8005c2a:	bd80      	pop	{r7, pc}
 8005c2c:	40013800 	.word	0x40013800
 8005c30:	51eb851f 	.word	0x51eb851f

08005c34 <__errno>:
 8005c34:	4b01      	ldr	r3, [pc, #4]	; (8005c3c <__errno+0x8>)
 8005c36:	6818      	ldr	r0, [r3, #0]
 8005c38:	4770      	bx	lr
 8005c3a:	bf00      	nop
 8005c3c:	2000000c 	.word	0x2000000c

08005c40 <__libc_init_array>:
 8005c40:	b570      	push	{r4, r5, r6, lr}
 8005c42:	2600      	movs	r6, #0
 8005c44:	4d0c      	ldr	r5, [pc, #48]	; (8005c78 <__libc_init_array+0x38>)
 8005c46:	4c0d      	ldr	r4, [pc, #52]	; (8005c7c <__libc_init_array+0x3c>)
 8005c48:	1b64      	subs	r4, r4, r5
 8005c4a:	10a4      	asrs	r4, r4, #2
 8005c4c:	42a6      	cmp	r6, r4
 8005c4e:	d109      	bne.n	8005c64 <__libc_init_array+0x24>
 8005c50:	f004 fc38 	bl	800a4c4 <_init>
 8005c54:	2600      	movs	r6, #0
 8005c56:	4d0a      	ldr	r5, [pc, #40]	; (8005c80 <__libc_init_array+0x40>)
 8005c58:	4c0a      	ldr	r4, [pc, #40]	; (8005c84 <__libc_init_array+0x44>)
 8005c5a:	1b64      	subs	r4, r4, r5
 8005c5c:	10a4      	asrs	r4, r4, #2
 8005c5e:	42a6      	cmp	r6, r4
 8005c60:	d105      	bne.n	8005c6e <__libc_init_array+0x2e>
 8005c62:	bd70      	pop	{r4, r5, r6, pc}
 8005c64:	f855 3b04 	ldr.w	r3, [r5], #4
 8005c68:	4798      	blx	r3
 8005c6a:	3601      	adds	r6, #1
 8005c6c:	e7ee      	b.n	8005c4c <__libc_init_array+0xc>
 8005c6e:	f855 3b04 	ldr.w	r3, [r5], #4
 8005c72:	4798      	blx	r3
 8005c74:	3601      	adds	r6, #1
 8005c76:	e7f2      	b.n	8005c5e <__libc_init_array+0x1e>
 8005c78:	0800ab2c 	.word	0x0800ab2c
 8005c7c:	0800ab2c 	.word	0x0800ab2c
 8005c80:	0800ab2c 	.word	0x0800ab2c
 8005c84:	0800ab30 	.word	0x0800ab30

08005c88 <memset>:
 8005c88:	4603      	mov	r3, r0
 8005c8a:	4402      	add	r2, r0
 8005c8c:	4293      	cmp	r3, r2
 8005c8e:	d100      	bne.n	8005c92 <memset+0xa>
 8005c90:	4770      	bx	lr
 8005c92:	f803 1b01 	strb.w	r1, [r3], #1
 8005c96:	e7f9      	b.n	8005c8c <memset+0x4>

08005c98 <__cvt>:
 8005c98:	2b00      	cmp	r3, #0
 8005c9a:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005c9e:	461f      	mov	r7, r3
 8005ca0:	bfbb      	ittet	lt
 8005ca2:	f103 4300 	addlt.w	r3, r3, #2147483648	; 0x80000000
 8005ca6:	461f      	movlt	r7, r3
 8005ca8:	2300      	movge	r3, #0
 8005caa:	232d      	movlt	r3, #45	; 0x2d
 8005cac:	b088      	sub	sp, #32
 8005cae:	4614      	mov	r4, r2
 8005cb0:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8005cb2:	9d10      	ldr	r5, [sp, #64]	; 0x40
 8005cb4:	7013      	strb	r3, [r2, #0]
 8005cb6:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8005cb8:	f8dd a04c 	ldr.w	sl, [sp, #76]	; 0x4c
 8005cbc:	f023 0820 	bic.w	r8, r3, #32
 8005cc0:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8005cc4:	d005      	beq.n	8005cd2 <__cvt+0x3a>
 8005cc6:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 8005cca:	d100      	bne.n	8005cce <__cvt+0x36>
 8005ccc:	3501      	adds	r5, #1
 8005cce:	2302      	movs	r3, #2
 8005cd0:	e000      	b.n	8005cd4 <__cvt+0x3c>
 8005cd2:	2303      	movs	r3, #3
 8005cd4:	aa07      	add	r2, sp, #28
 8005cd6:	9204      	str	r2, [sp, #16]
 8005cd8:	aa06      	add	r2, sp, #24
 8005cda:	e9cd a202 	strd	sl, r2, [sp, #8]
 8005cde:	e9cd 3500 	strd	r3, r5, [sp]
 8005ce2:	4622      	mov	r2, r4
 8005ce4:	463b      	mov	r3, r7
 8005ce6:	f001 fdaf 	bl	8007848 <_dtoa_r>
 8005cea:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 8005cee:	4606      	mov	r6, r0
 8005cf0:	d102      	bne.n	8005cf8 <__cvt+0x60>
 8005cf2:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8005cf4:	07db      	lsls	r3, r3, #31
 8005cf6:	d522      	bpl.n	8005d3e <__cvt+0xa6>
 8005cf8:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8005cfc:	eb06 0905 	add.w	r9, r6, r5
 8005d00:	d110      	bne.n	8005d24 <__cvt+0x8c>
 8005d02:	7833      	ldrb	r3, [r6, #0]
 8005d04:	2b30      	cmp	r3, #48	; 0x30
 8005d06:	d10a      	bne.n	8005d1e <__cvt+0x86>
 8005d08:	2200      	movs	r2, #0
 8005d0a:	2300      	movs	r3, #0
 8005d0c:	4620      	mov	r0, r4
 8005d0e:	4639      	mov	r1, r7
 8005d10:	f7fa fe4a 	bl	80009a8 <__aeabi_dcmpeq>
 8005d14:	b918      	cbnz	r0, 8005d1e <__cvt+0x86>
 8005d16:	f1c5 0501 	rsb	r5, r5, #1
 8005d1a:	f8ca 5000 	str.w	r5, [sl]
 8005d1e:	f8da 3000 	ldr.w	r3, [sl]
 8005d22:	4499      	add	r9, r3
 8005d24:	2200      	movs	r2, #0
 8005d26:	2300      	movs	r3, #0
 8005d28:	4620      	mov	r0, r4
 8005d2a:	4639      	mov	r1, r7
 8005d2c:	f7fa fe3c 	bl	80009a8 <__aeabi_dcmpeq>
 8005d30:	b108      	cbz	r0, 8005d36 <__cvt+0x9e>
 8005d32:	f8cd 901c 	str.w	r9, [sp, #28]
 8005d36:	2230      	movs	r2, #48	; 0x30
 8005d38:	9b07      	ldr	r3, [sp, #28]
 8005d3a:	454b      	cmp	r3, r9
 8005d3c:	d307      	bcc.n	8005d4e <__cvt+0xb6>
 8005d3e:	4630      	mov	r0, r6
 8005d40:	9b07      	ldr	r3, [sp, #28]
 8005d42:	9a15      	ldr	r2, [sp, #84]	; 0x54
 8005d44:	1b9b      	subs	r3, r3, r6
 8005d46:	6013      	str	r3, [r2, #0]
 8005d48:	b008      	add	sp, #32
 8005d4a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005d4e:	1c59      	adds	r1, r3, #1
 8005d50:	9107      	str	r1, [sp, #28]
 8005d52:	701a      	strb	r2, [r3, #0]
 8005d54:	e7f0      	b.n	8005d38 <__cvt+0xa0>

08005d56 <__exponent>:
 8005d56:	4603      	mov	r3, r0
 8005d58:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8005d5a:	2900      	cmp	r1, #0
 8005d5c:	f803 2b02 	strb.w	r2, [r3], #2
 8005d60:	bfb6      	itet	lt
 8005d62:	222d      	movlt	r2, #45	; 0x2d
 8005d64:	222b      	movge	r2, #43	; 0x2b
 8005d66:	4249      	neglt	r1, r1
 8005d68:	2909      	cmp	r1, #9
 8005d6a:	7042      	strb	r2, [r0, #1]
 8005d6c:	dd2b      	ble.n	8005dc6 <__exponent+0x70>
 8005d6e:	f10d 0407 	add.w	r4, sp, #7
 8005d72:	46a4      	mov	ip, r4
 8005d74:	270a      	movs	r7, #10
 8005d76:	fb91 f6f7 	sdiv	r6, r1, r7
 8005d7a:	460a      	mov	r2, r1
 8005d7c:	46a6      	mov	lr, r4
 8005d7e:	fb07 1516 	mls	r5, r7, r6, r1
 8005d82:	2a63      	cmp	r2, #99	; 0x63
 8005d84:	f105 0530 	add.w	r5, r5, #48	; 0x30
 8005d88:	4631      	mov	r1, r6
 8005d8a:	f104 34ff 	add.w	r4, r4, #4294967295
 8005d8e:	f80e 5c01 	strb.w	r5, [lr, #-1]
 8005d92:	dcf0      	bgt.n	8005d76 <__exponent+0x20>
 8005d94:	3130      	adds	r1, #48	; 0x30
 8005d96:	f1ae 0502 	sub.w	r5, lr, #2
 8005d9a:	f804 1c01 	strb.w	r1, [r4, #-1]
 8005d9e:	4629      	mov	r1, r5
 8005da0:	1c44      	adds	r4, r0, #1
 8005da2:	4561      	cmp	r1, ip
 8005da4:	d30a      	bcc.n	8005dbc <__exponent+0x66>
 8005da6:	f10d 0209 	add.w	r2, sp, #9
 8005daa:	eba2 020e 	sub.w	r2, r2, lr
 8005dae:	4565      	cmp	r5, ip
 8005db0:	bf88      	it	hi
 8005db2:	2200      	movhi	r2, #0
 8005db4:	4413      	add	r3, r2
 8005db6:	1a18      	subs	r0, r3, r0
 8005db8:	b003      	add	sp, #12
 8005dba:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005dbc:	f811 2b01 	ldrb.w	r2, [r1], #1
 8005dc0:	f804 2f01 	strb.w	r2, [r4, #1]!
 8005dc4:	e7ed      	b.n	8005da2 <__exponent+0x4c>
 8005dc6:	2330      	movs	r3, #48	; 0x30
 8005dc8:	3130      	adds	r1, #48	; 0x30
 8005dca:	7083      	strb	r3, [r0, #2]
 8005dcc:	70c1      	strb	r1, [r0, #3]
 8005dce:	1d03      	adds	r3, r0, #4
 8005dd0:	e7f1      	b.n	8005db6 <__exponent+0x60>
	...

08005dd4 <_printf_float>:
 8005dd4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005dd8:	b091      	sub	sp, #68	; 0x44
 8005dda:	460c      	mov	r4, r1
 8005ddc:	f8dd 8068 	ldr.w	r8, [sp, #104]	; 0x68
 8005de0:	4616      	mov	r6, r2
 8005de2:	461f      	mov	r7, r3
 8005de4:	4605      	mov	r5, r0
 8005de6:	f002 fe83 	bl	8008af0 <_localeconv_r>
 8005dea:	6803      	ldr	r3, [r0, #0]
 8005dec:	4618      	mov	r0, r3
 8005dee:	9309      	str	r3, [sp, #36]	; 0x24
 8005df0:	f7fa f9ae 	bl	8000150 <strlen>
 8005df4:	2300      	movs	r3, #0
 8005df6:	930e      	str	r3, [sp, #56]	; 0x38
 8005df8:	f8d8 3000 	ldr.w	r3, [r8]
 8005dfc:	900a      	str	r0, [sp, #40]	; 0x28
 8005dfe:	3307      	adds	r3, #7
 8005e00:	f023 0307 	bic.w	r3, r3, #7
 8005e04:	f103 0208 	add.w	r2, r3, #8
 8005e08:	f894 9018 	ldrb.w	r9, [r4, #24]
 8005e0c:	f8d4 b000 	ldr.w	fp, [r4]
 8005e10:	f8c8 2000 	str.w	r2, [r8]
 8005e14:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005e18:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 8005e1c:	e9d4 8a12 	ldrd	r8, sl, [r4, #72]	; 0x48
 8005e20:	f02a 4300 	bic.w	r3, sl, #2147483648	; 0x80000000
 8005e24:	930b      	str	r3, [sp, #44]	; 0x2c
 8005e26:	f04f 32ff 	mov.w	r2, #4294967295
 8005e2a:	4640      	mov	r0, r8
 8005e2c:	4b9c      	ldr	r3, [pc, #624]	; (80060a0 <_printf_float+0x2cc>)
 8005e2e:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8005e30:	f7fa fdec 	bl	8000a0c <__aeabi_dcmpun>
 8005e34:	bb70      	cbnz	r0, 8005e94 <_printf_float+0xc0>
 8005e36:	f04f 32ff 	mov.w	r2, #4294967295
 8005e3a:	4640      	mov	r0, r8
 8005e3c:	4b98      	ldr	r3, [pc, #608]	; (80060a0 <_printf_float+0x2cc>)
 8005e3e:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8005e40:	f7fa fdc6 	bl	80009d0 <__aeabi_dcmple>
 8005e44:	bb30      	cbnz	r0, 8005e94 <_printf_float+0xc0>
 8005e46:	2200      	movs	r2, #0
 8005e48:	2300      	movs	r3, #0
 8005e4a:	4640      	mov	r0, r8
 8005e4c:	4651      	mov	r1, sl
 8005e4e:	f7fa fdb5 	bl	80009bc <__aeabi_dcmplt>
 8005e52:	b110      	cbz	r0, 8005e5a <_printf_float+0x86>
 8005e54:	232d      	movs	r3, #45	; 0x2d
 8005e56:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005e5a:	4b92      	ldr	r3, [pc, #584]	; (80060a4 <_printf_float+0x2d0>)
 8005e5c:	4892      	ldr	r0, [pc, #584]	; (80060a8 <_printf_float+0x2d4>)
 8005e5e:	f1b9 0f47 	cmp.w	r9, #71	; 0x47
 8005e62:	bf94      	ite	ls
 8005e64:	4698      	movls	r8, r3
 8005e66:	4680      	movhi	r8, r0
 8005e68:	2303      	movs	r3, #3
 8005e6a:	f04f 0a00 	mov.w	sl, #0
 8005e6e:	6123      	str	r3, [r4, #16]
 8005e70:	f02b 0304 	bic.w	r3, fp, #4
 8005e74:	6023      	str	r3, [r4, #0]
 8005e76:	4633      	mov	r3, r6
 8005e78:	4621      	mov	r1, r4
 8005e7a:	4628      	mov	r0, r5
 8005e7c:	9700      	str	r7, [sp, #0]
 8005e7e:	aa0f      	add	r2, sp, #60	; 0x3c
 8005e80:	f000 f9d4 	bl	800622c <_printf_common>
 8005e84:	3001      	adds	r0, #1
 8005e86:	f040 8090 	bne.w	8005faa <_printf_float+0x1d6>
 8005e8a:	f04f 30ff 	mov.w	r0, #4294967295
 8005e8e:	b011      	add	sp, #68	; 0x44
 8005e90:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005e94:	4642      	mov	r2, r8
 8005e96:	4653      	mov	r3, sl
 8005e98:	4640      	mov	r0, r8
 8005e9a:	4651      	mov	r1, sl
 8005e9c:	f7fa fdb6 	bl	8000a0c <__aeabi_dcmpun>
 8005ea0:	b148      	cbz	r0, 8005eb6 <_printf_float+0xe2>
 8005ea2:	f1ba 0f00 	cmp.w	sl, #0
 8005ea6:	bfb8      	it	lt
 8005ea8:	232d      	movlt	r3, #45	; 0x2d
 8005eaa:	4880      	ldr	r0, [pc, #512]	; (80060ac <_printf_float+0x2d8>)
 8005eac:	bfb8      	it	lt
 8005eae:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 8005eb2:	4b7f      	ldr	r3, [pc, #508]	; (80060b0 <_printf_float+0x2dc>)
 8005eb4:	e7d3      	b.n	8005e5e <_printf_float+0x8a>
 8005eb6:	6863      	ldr	r3, [r4, #4]
 8005eb8:	f009 01df 	and.w	r1, r9, #223	; 0xdf
 8005ebc:	1c5a      	adds	r2, r3, #1
 8005ebe:	d142      	bne.n	8005f46 <_printf_float+0x172>
 8005ec0:	2306      	movs	r3, #6
 8005ec2:	6063      	str	r3, [r4, #4]
 8005ec4:	2200      	movs	r2, #0
 8005ec6:	9206      	str	r2, [sp, #24]
 8005ec8:	aa0e      	add	r2, sp, #56	; 0x38
 8005eca:	e9cd 9204 	strd	r9, r2, [sp, #16]
 8005ece:	aa0d      	add	r2, sp, #52	; 0x34
 8005ed0:	f44b 6380 	orr.w	r3, fp, #1024	; 0x400
 8005ed4:	9203      	str	r2, [sp, #12]
 8005ed6:	f10d 0233 	add.w	r2, sp, #51	; 0x33
 8005eda:	e9cd 3201 	strd	r3, r2, [sp, #4]
 8005ede:	6023      	str	r3, [r4, #0]
 8005ee0:	6863      	ldr	r3, [r4, #4]
 8005ee2:	4642      	mov	r2, r8
 8005ee4:	9300      	str	r3, [sp, #0]
 8005ee6:	4628      	mov	r0, r5
 8005ee8:	4653      	mov	r3, sl
 8005eea:	910b      	str	r1, [sp, #44]	; 0x2c
 8005eec:	f7ff fed4 	bl	8005c98 <__cvt>
 8005ef0:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8005ef2:	4680      	mov	r8, r0
 8005ef4:	2947      	cmp	r1, #71	; 0x47
 8005ef6:	990d      	ldr	r1, [sp, #52]	; 0x34
 8005ef8:	d108      	bne.n	8005f0c <_printf_float+0x138>
 8005efa:	1cc8      	adds	r0, r1, #3
 8005efc:	db02      	blt.n	8005f04 <_printf_float+0x130>
 8005efe:	6863      	ldr	r3, [r4, #4]
 8005f00:	4299      	cmp	r1, r3
 8005f02:	dd40      	ble.n	8005f86 <_printf_float+0x1b2>
 8005f04:	f1a9 0902 	sub.w	r9, r9, #2
 8005f08:	fa5f f989 	uxtb.w	r9, r9
 8005f0c:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 8005f10:	d81f      	bhi.n	8005f52 <_printf_float+0x17e>
 8005f12:	464a      	mov	r2, r9
 8005f14:	3901      	subs	r1, #1
 8005f16:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8005f1a:	910d      	str	r1, [sp, #52]	; 0x34
 8005f1c:	f7ff ff1b 	bl	8005d56 <__exponent>
 8005f20:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8005f22:	4682      	mov	sl, r0
 8005f24:	1813      	adds	r3, r2, r0
 8005f26:	2a01      	cmp	r2, #1
 8005f28:	6123      	str	r3, [r4, #16]
 8005f2a:	dc02      	bgt.n	8005f32 <_printf_float+0x15e>
 8005f2c:	6822      	ldr	r2, [r4, #0]
 8005f2e:	07d2      	lsls	r2, r2, #31
 8005f30:	d501      	bpl.n	8005f36 <_printf_float+0x162>
 8005f32:	3301      	adds	r3, #1
 8005f34:	6123      	str	r3, [r4, #16]
 8005f36:	f89d 3033 	ldrb.w	r3, [sp, #51]	; 0x33
 8005f3a:	2b00      	cmp	r3, #0
 8005f3c:	d09b      	beq.n	8005e76 <_printf_float+0xa2>
 8005f3e:	232d      	movs	r3, #45	; 0x2d
 8005f40:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005f44:	e797      	b.n	8005e76 <_printf_float+0xa2>
 8005f46:	2947      	cmp	r1, #71	; 0x47
 8005f48:	d1bc      	bne.n	8005ec4 <_printf_float+0xf0>
 8005f4a:	2b00      	cmp	r3, #0
 8005f4c:	d1ba      	bne.n	8005ec4 <_printf_float+0xf0>
 8005f4e:	2301      	movs	r3, #1
 8005f50:	e7b7      	b.n	8005ec2 <_printf_float+0xee>
 8005f52:	f1b9 0f66 	cmp.w	r9, #102	; 0x66
 8005f56:	d118      	bne.n	8005f8a <_printf_float+0x1b6>
 8005f58:	2900      	cmp	r1, #0
 8005f5a:	6863      	ldr	r3, [r4, #4]
 8005f5c:	dd0b      	ble.n	8005f76 <_printf_float+0x1a2>
 8005f5e:	6121      	str	r1, [r4, #16]
 8005f60:	b913      	cbnz	r3, 8005f68 <_printf_float+0x194>
 8005f62:	6822      	ldr	r2, [r4, #0]
 8005f64:	07d0      	lsls	r0, r2, #31
 8005f66:	d502      	bpl.n	8005f6e <_printf_float+0x19a>
 8005f68:	3301      	adds	r3, #1
 8005f6a:	440b      	add	r3, r1
 8005f6c:	6123      	str	r3, [r4, #16]
 8005f6e:	f04f 0a00 	mov.w	sl, #0
 8005f72:	65a1      	str	r1, [r4, #88]	; 0x58
 8005f74:	e7df      	b.n	8005f36 <_printf_float+0x162>
 8005f76:	b913      	cbnz	r3, 8005f7e <_printf_float+0x1aa>
 8005f78:	6822      	ldr	r2, [r4, #0]
 8005f7a:	07d2      	lsls	r2, r2, #31
 8005f7c:	d501      	bpl.n	8005f82 <_printf_float+0x1ae>
 8005f7e:	3302      	adds	r3, #2
 8005f80:	e7f4      	b.n	8005f6c <_printf_float+0x198>
 8005f82:	2301      	movs	r3, #1
 8005f84:	e7f2      	b.n	8005f6c <_printf_float+0x198>
 8005f86:	f04f 0967 	mov.w	r9, #103	; 0x67
 8005f8a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8005f8c:	4299      	cmp	r1, r3
 8005f8e:	db05      	blt.n	8005f9c <_printf_float+0x1c8>
 8005f90:	6823      	ldr	r3, [r4, #0]
 8005f92:	6121      	str	r1, [r4, #16]
 8005f94:	07d8      	lsls	r0, r3, #31
 8005f96:	d5ea      	bpl.n	8005f6e <_printf_float+0x19a>
 8005f98:	1c4b      	adds	r3, r1, #1
 8005f9a:	e7e7      	b.n	8005f6c <_printf_float+0x198>
 8005f9c:	2900      	cmp	r1, #0
 8005f9e:	bfcc      	ite	gt
 8005fa0:	2201      	movgt	r2, #1
 8005fa2:	f1c1 0202 	rsble	r2, r1, #2
 8005fa6:	4413      	add	r3, r2
 8005fa8:	e7e0      	b.n	8005f6c <_printf_float+0x198>
 8005faa:	6823      	ldr	r3, [r4, #0]
 8005fac:	055a      	lsls	r2, r3, #21
 8005fae:	d407      	bmi.n	8005fc0 <_printf_float+0x1ec>
 8005fb0:	6923      	ldr	r3, [r4, #16]
 8005fb2:	4642      	mov	r2, r8
 8005fb4:	4631      	mov	r1, r6
 8005fb6:	4628      	mov	r0, r5
 8005fb8:	47b8      	blx	r7
 8005fba:	3001      	adds	r0, #1
 8005fbc:	d12b      	bne.n	8006016 <_printf_float+0x242>
 8005fbe:	e764      	b.n	8005e8a <_printf_float+0xb6>
 8005fc0:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 8005fc4:	f240 80dd 	bls.w	8006182 <_printf_float+0x3ae>
 8005fc8:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8005fcc:	2200      	movs	r2, #0
 8005fce:	2300      	movs	r3, #0
 8005fd0:	f7fa fcea 	bl	80009a8 <__aeabi_dcmpeq>
 8005fd4:	2800      	cmp	r0, #0
 8005fd6:	d033      	beq.n	8006040 <_printf_float+0x26c>
 8005fd8:	2301      	movs	r3, #1
 8005fda:	4631      	mov	r1, r6
 8005fdc:	4628      	mov	r0, r5
 8005fde:	4a35      	ldr	r2, [pc, #212]	; (80060b4 <_printf_float+0x2e0>)
 8005fe0:	47b8      	blx	r7
 8005fe2:	3001      	adds	r0, #1
 8005fe4:	f43f af51 	beq.w	8005e8a <_printf_float+0xb6>
 8005fe8:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 8005fec:	429a      	cmp	r2, r3
 8005fee:	db02      	blt.n	8005ff6 <_printf_float+0x222>
 8005ff0:	6823      	ldr	r3, [r4, #0]
 8005ff2:	07d8      	lsls	r0, r3, #31
 8005ff4:	d50f      	bpl.n	8006016 <_printf_float+0x242>
 8005ff6:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8005ffa:	4631      	mov	r1, r6
 8005ffc:	4628      	mov	r0, r5
 8005ffe:	47b8      	blx	r7
 8006000:	3001      	adds	r0, #1
 8006002:	f43f af42 	beq.w	8005e8a <_printf_float+0xb6>
 8006006:	f04f 0800 	mov.w	r8, #0
 800600a:	f104 091a 	add.w	r9, r4, #26
 800600e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8006010:	3b01      	subs	r3, #1
 8006012:	4543      	cmp	r3, r8
 8006014:	dc09      	bgt.n	800602a <_printf_float+0x256>
 8006016:	6823      	ldr	r3, [r4, #0]
 8006018:	079b      	lsls	r3, r3, #30
 800601a:	f100 8102 	bmi.w	8006222 <_printf_float+0x44e>
 800601e:	68e0      	ldr	r0, [r4, #12]
 8006020:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8006022:	4298      	cmp	r0, r3
 8006024:	bfb8      	it	lt
 8006026:	4618      	movlt	r0, r3
 8006028:	e731      	b.n	8005e8e <_printf_float+0xba>
 800602a:	2301      	movs	r3, #1
 800602c:	464a      	mov	r2, r9
 800602e:	4631      	mov	r1, r6
 8006030:	4628      	mov	r0, r5
 8006032:	47b8      	blx	r7
 8006034:	3001      	adds	r0, #1
 8006036:	f43f af28 	beq.w	8005e8a <_printf_float+0xb6>
 800603a:	f108 0801 	add.w	r8, r8, #1
 800603e:	e7e6      	b.n	800600e <_printf_float+0x23a>
 8006040:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8006042:	2b00      	cmp	r3, #0
 8006044:	dc38      	bgt.n	80060b8 <_printf_float+0x2e4>
 8006046:	2301      	movs	r3, #1
 8006048:	4631      	mov	r1, r6
 800604a:	4628      	mov	r0, r5
 800604c:	4a19      	ldr	r2, [pc, #100]	; (80060b4 <_printf_float+0x2e0>)
 800604e:	47b8      	blx	r7
 8006050:	3001      	adds	r0, #1
 8006052:	f43f af1a 	beq.w	8005e8a <_printf_float+0xb6>
 8006056:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 800605a:	4313      	orrs	r3, r2
 800605c:	d102      	bne.n	8006064 <_printf_float+0x290>
 800605e:	6823      	ldr	r3, [r4, #0]
 8006060:	07d9      	lsls	r1, r3, #31
 8006062:	d5d8      	bpl.n	8006016 <_printf_float+0x242>
 8006064:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8006068:	4631      	mov	r1, r6
 800606a:	4628      	mov	r0, r5
 800606c:	47b8      	blx	r7
 800606e:	3001      	adds	r0, #1
 8006070:	f43f af0b 	beq.w	8005e8a <_printf_float+0xb6>
 8006074:	f04f 0900 	mov.w	r9, #0
 8006078:	f104 0a1a 	add.w	sl, r4, #26
 800607c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800607e:	425b      	negs	r3, r3
 8006080:	454b      	cmp	r3, r9
 8006082:	dc01      	bgt.n	8006088 <_printf_float+0x2b4>
 8006084:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8006086:	e794      	b.n	8005fb2 <_printf_float+0x1de>
 8006088:	2301      	movs	r3, #1
 800608a:	4652      	mov	r2, sl
 800608c:	4631      	mov	r1, r6
 800608e:	4628      	mov	r0, r5
 8006090:	47b8      	blx	r7
 8006092:	3001      	adds	r0, #1
 8006094:	f43f aef9 	beq.w	8005e8a <_printf_float+0xb6>
 8006098:	f109 0901 	add.w	r9, r9, #1
 800609c:	e7ee      	b.n	800607c <_printf_float+0x2a8>
 800609e:	bf00      	nop
 80060a0:	7fefffff 	.word	0x7fefffff
 80060a4:	0800a67c 	.word	0x0800a67c
 80060a8:	0800a680 	.word	0x0800a680
 80060ac:	0800a688 	.word	0x0800a688
 80060b0:	0800a684 	.word	0x0800a684
 80060b4:	0800a68c 	.word	0x0800a68c
 80060b8:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80060ba:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80060bc:	429a      	cmp	r2, r3
 80060be:	bfa8      	it	ge
 80060c0:	461a      	movge	r2, r3
 80060c2:	2a00      	cmp	r2, #0
 80060c4:	4691      	mov	r9, r2
 80060c6:	dc37      	bgt.n	8006138 <_printf_float+0x364>
 80060c8:	f04f 0b00 	mov.w	fp, #0
 80060cc:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80060d0:	f104 021a 	add.w	r2, r4, #26
 80060d4:	f8d4 a058 	ldr.w	sl, [r4, #88]	; 0x58
 80060d8:	ebaa 0309 	sub.w	r3, sl, r9
 80060dc:	455b      	cmp	r3, fp
 80060de:	dc33      	bgt.n	8006148 <_printf_float+0x374>
 80060e0:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 80060e4:	429a      	cmp	r2, r3
 80060e6:	db3b      	blt.n	8006160 <_printf_float+0x38c>
 80060e8:	6823      	ldr	r3, [r4, #0]
 80060ea:	07da      	lsls	r2, r3, #31
 80060ec:	d438      	bmi.n	8006160 <_printf_float+0x38c>
 80060ee:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80060f0:	990d      	ldr	r1, [sp, #52]	; 0x34
 80060f2:	eba2 030a 	sub.w	r3, r2, sl
 80060f6:	eba2 0901 	sub.w	r9, r2, r1
 80060fa:	4599      	cmp	r9, r3
 80060fc:	bfa8      	it	ge
 80060fe:	4699      	movge	r9, r3
 8006100:	f1b9 0f00 	cmp.w	r9, #0
 8006104:	dc34      	bgt.n	8006170 <_printf_float+0x39c>
 8006106:	f04f 0800 	mov.w	r8, #0
 800610a:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800610e:	f104 0a1a 	add.w	sl, r4, #26
 8006112:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 8006116:	1a9b      	subs	r3, r3, r2
 8006118:	eba3 0309 	sub.w	r3, r3, r9
 800611c:	4543      	cmp	r3, r8
 800611e:	f77f af7a 	ble.w	8006016 <_printf_float+0x242>
 8006122:	2301      	movs	r3, #1
 8006124:	4652      	mov	r2, sl
 8006126:	4631      	mov	r1, r6
 8006128:	4628      	mov	r0, r5
 800612a:	47b8      	blx	r7
 800612c:	3001      	adds	r0, #1
 800612e:	f43f aeac 	beq.w	8005e8a <_printf_float+0xb6>
 8006132:	f108 0801 	add.w	r8, r8, #1
 8006136:	e7ec      	b.n	8006112 <_printf_float+0x33e>
 8006138:	4613      	mov	r3, r2
 800613a:	4631      	mov	r1, r6
 800613c:	4642      	mov	r2, r8
 800613e:	4628      	mov	r0, r5
 8006140:	47b8      	blx	r7
 8006142:	3001      	adds	r0, #1
 8006144:	d1c0      	bne.n	80060c8 <_printf_float+0x2f4>
 8006146:	e6a0      	b.n	8005e8a <_printf_float+0xb6>
 8006148:	2301      	movs	r3, #1
 800614a:	4631      	mov	r1, r6
 800614c:	4628      	mov	r0, r5
 800614e:	920b      	str	r2, [sp, #44]	; 0x2c
 8006150:	47b8      	blx	r7
 8006152:	3001      	adds	r0, #1
 8006154:	f43f ae99 	beq.w	8005e8a <_printf_float+0xb6>
 8006158:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800615a:	f10b 0b01 	add.w	fp, fp, #1
 800615e:	e7b9      	b.n	80060d4 <_printf_float+0x300>
 8006160:	4631      	mov	r1, r6
 8006162:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8006166:	4628      	mov	r0, r5
 8006168:	47b8      	blx	r7
 800616a:	3001      	adds	r0, #1
 800616c:	d1bf      	bne.n	80060ee <_printf_float+0x31a>
 800616e:	e68c      	b.n	8005e8a <_printf_float+0xb6>
 8006170:	464b      	mov	r3, r9
 8006172:	4631      	mov	r1, r6
 8006174:	4628      	mov	r0, r5
 8006176:	eb08 020a 	add.w	r2, r8, sl
 800617a:	47b8      	blx	r7
 800617c:	3001      	adds	r0, #1
 800617e:	d1c2      	bne.n	8006106 <_printf_float+0x332>
 8006180:	e683      	b.n	8005e8a <_printf_float+0xb6>
 8006182:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8006184:	2a01      	cmp	r2, #1
 8006186:	dc01      	bgt.n	800618c <_printf_float+0x3b8>
 8006188:	07db      	lsls	r3, r3, #31
 800618a:	d537      	bpl.n	80061fc <_printf_float+0x428>
 800618c:	2301      	movs	r3, #1
 800618e:	4642      	mov	r2, r8
 8006190:	4631      	mov	r1, r6
 8006192:	4628      	mov	r0, r5
 8006194:	47b8      	blx	r7
 8006196:	3001      	adds	r0, #1
 8006198:	f43f ae77 	beq.w	8005e8a <_printf_float+0xb6>
 800619c:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80061a0:	4631      	mov	r1, r6
 80061a2:	4628      	mov	r0, r5
 80061a4:	47b8      	blx	r7
 80061a6:	3001      	adds	r0, #1
 80061a8:	f43f ae6f 	beq.w	8005e8a <_printf_float+0xb6>
 80061ac:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 80061b0:	2200      	movs	r2, #0
 80061b2:	2300      	movs	r3, #0
 80061b4:	f7fa fbf8 	bl	80009a8 <__aeabi_dcmpeq>
 80061b8:	b9d8      	cbnz	r0, 80061f2 <_printf_float+0x41e>
 80061ba:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80061bc:	f108 0201 	add.w	r2, r8, #1
 80061c0:	3b01      	subs	r3, #1
 80061c2:	4631      	mov	r1, r6
 80061c4:	4628      	mov	r0, r5
 80061c6:	47b8      	blx	r7
 80061c8:	3001      	adds	r0, #1
 80061ca:	d10e      	bne.n	80061ea <_printf_float+0x416>
 80061cc:	e65d      	b.n	8005e8a <_printf_float+0xb6>
 80061ce:	2301      	movs	r3, #1
 80061d0:	464a      	mov	r2, r9
 80061d2:	4631      	mov	r1, r6
 80061d4:	4628      	mov	r0, r5
 80061d6:	47b8      	blx	r7
 80061d8:	3001      	adds	r0, #1
 80061da:	f43f ae56 	beq.w	8005e8a <_printf_float+0xb6>
 80061de:	f108 0801 	add.w	r8, r8, #1
 80061e2:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80061e4:	3b01      	subs	r3, #1
 80061e6:	4543      	cmp	r3, r8
 80061e8:	dcf1      	bgt.n	80061ce <_printf_float+0x3fa>
 80061ea:	4653      	mov	r3, sl
 80061ec:	f104 0250 	add.w	r2, r4, #80	; 0x50
 80061f0:	e6e0      	b.n	8005fb4 <_printf_float+0x1e0>
 80061f2:	f04f 0800 	mov.w	r8, #0
 80061f6:	f104 091a 	add.w	r9, r4, #26
 80061fa:	e7f2      	b.n	80061e2 <_printf_float+0x40e>
 80061fc:	2301      	movs	r3, #1
 80061fe:	4642      	mov	r2, r8
 8006200:	e7df      	b.n	80061c2 <_printf_float+0x3ee>
 8006202:	2301      	movs	r3, #1
 8006204:	464a      	mov	r2, r9
 8006206:	4631      	mov	r1, r6
 8006208:	4628      	mov	r0, r5
 800620a:	47b8      	blx	r7
 800620c:	3001      	adds	r0, #1
 800620e:	f43f ae3c 	beq.w	8005e8a <_printf_float+0xb6>
 8006212:	f108 0801 	add.w	r8, r8, #1
 8006216:	68e3      	ldr	r3, [r4, #12]
 8006218:	990f      	ldr	r1, [sp, #60]	; 0x3c
 800621a:	1a5b      	subs	r3, r3, r1
 800621c:	4543      	cmp	r3, r8
 800621e:	dcf0      	bgt.n	8006202 <_printf_float+0x42e>
 8006220:	e6fd      	b.n	800601e <_printf_float+0x24a>
 8006222:	f04f 0800 	mov.w	r8, #0
 8006226:	f104 0919 	add.w	r9, r4, #25
 800622a:	e7f4      	b.n	8006216 <_printf_float+0x442>

0800622c <_printf_common>:
 800622c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006230:	4616      	mov	r6, r2
 8006232:	4699      	mov	r9, r3
 8006234:	688a      	ldr	r2, [r1, #8]
 8006236:	690b      	ldr	r3, [r1, #16]
 8006238:	4607      	mov	r7, r0
 800623a:	4293      	cmp	r3, r2
 800623c:	bfb8      	it	lt
 800623e:	4613      	movlt	r3, r2
 8006240:	6033      	str	r3, [r6, #0]
 8006242:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8006246:	460c      	mov	r4, r1
 8006248:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800624c:	b10a      	cbz	r2, 8006252 <_printf_common+0x26>
 800624e:	3301      	adds	r3, #1
 8006250:	6033      	str	r3, [r6, #0]
 8006252:	6823      	ldr	r3, [r4, #0]
 8006254:	0699      	lsls	r1, r3, #26
 8006256:	bf42      	ittt	mi
 8006258:	6833      	ldrmi	r3, [r6, #0]
 800625a:	3302      	addmi	r3, #2
 800625c:	6033      	strmi	r3, [r6, #0]
 800625e:	6825      	ldr	r5, [r4, #0]
 8006260:	f015 0506 	ands.w	r5, r5, #6
 8006264:	d106      	bne.n	8006274 <_printf_common+0x48>
 8006266:	f104 0a19 	add.w	sl, r4, #25
 800626a:	68e3      	ldr	r3, [r4, #12]
 800626c:	6832      	ldr	r2, [r6, #0]
 800626e:	1a9b      	subs	r3, r3, r2
 8006270:	42ab      	cmp	r3, r5
 8006272:	dc28      	bgt.n	80062c6 <_printf_common+0x9a>
 8006274:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8006278:	1e13      	subs	r3, r2, #0
 800627a:	6822      	ldr	r2, [r4, #0]
 800627c:	bf18      	it	ne
 800627e:	2301      	movne	r3, #1
 8006280:	0692      	lsls	r2, r2, #26
 8006282:	d42d      	bmi.n	80062e0 <_printf_common+0xb4>
 8006284:	4649      	mov	r1, r9
 8006286:	4638      	mov	r0, r7
 8006288:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800628c:	47c0      	blx	r8
 800628e:	3001      	adds	r0, #1
 8006290:	d020      	beq.n	80062d4 <_printf_common+0xa8>
 8006292:	6823      	ldr	r3, [r4, #0]
 8006294:	68e5      	ldr	r5, [r4, #12]
 8006296:	f003 0306 	and.w	r3, r3, #6
 800629a:	2b04      	cmp	r3, #4
 800629c:	bf18      	it	ne
 800629e:	2500      	movne	r5, #0
 80062a0:	6832      	ldr	r2, [r6, #0]
 80062a2:	f04f 0600 	mov.w	r6, #0
 80062a6:	68a3      	ldr	r3, [r4, #8]
 80062a8:	bf08      	it	eq
 80062aa:	1aad      	subeq	r5, r5, r2
 80062ac:	6922      	ldr	r2, [r4, #16]
 80062ae:	bf08      	it	eq
 80062b0:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80062b4:	4293      	cmp	r3, r2
 80062b6:	bfc4      	itt	gt
 80062b8:	1a9b      	subgt	r3, r3, r2
 80062ba:	18ed      	addgt	r5, r5, r3
 80062bc:	341a      	adds	r4, #26
 80062be:	42b5      	cmp	r5, r6
 80062c0:	d11a      	bne.n	80062f8 <_printf_common+0xcc>
 80062c2:	2000      	movs	r0, #0
 80062c4:	e008      	b.n	80062d8 <_printf_common+0xac>
 80062c6:	2301      	movs	r3, #1
 80062c8:	4652      	mov	r2, sl
 80062ca:	4649      	mov	r1, r9
 80062cc:	4638      	mov	r0, r7
 80062ce:	47c0      	blx	r8
 80062d0:	3001      	adds	r0, #1
 80062d2:	d103      	bne.n	80062dc <_printf_common+0xb0>
 80062d4:	f04f 30ff 	mov.w	r0, #4294967295
 80062d8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80062dc:	3501      	adds	r5, #1
 80062de:	e7c4      	b.n	800626a <_printf_common+0x3e>
 80062e0:	2030      	movs	r0, #48	; 0x30
 80062e2:	18e1      	adds	r1, r4, r3
 80062e4:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80062e8:	1c5a      	adds	r2, r3, #1
 80062ea:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80062ee:	4422      	add	r2, r4
 80062f0:	3302      	adds	r3, #2
 80062f2:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80062f6:	e7c5      	b.n	8006284 <_printf_common+0x58>
 80062f8:	2301      	movs	r3, #1
 80062fa:	4622      	mov	r2, r4
 80062fc:	4649      	mov	r1, r9
 80062fe:	4638      	mov	r0, r7
 8006300:	47c0      	blx	r8
 8006302:	3001      	adds	r0, #1
 8006304:	d0e6      	beq.n	80062d4 <_printf_common+0xa8>
 8006306:	3601      	adds	r6, #1
 8006308:	e7d9      	b.n	80062be <_printf_common+0x92>
	...

0800630c <_printf_i>:
 800630c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8006310:	460c      	mov	r4, r1
 8006312:	7e27      	ldrb	r7, [r4, #24]
 8006314:	4691      	mov	r9, r2
 8006316:	2f78      	cmp	r7, #120	; 0x78
 8006318:	4680      	mov	r8, r0
 800631a:	469a      	mov	sl, r3
 800631c:	990c      	ldr	r1, [sp, #48]	; 0x30
 800631e:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8006322:	d807      	bhi.n	8006334 <_printf_i+0x28>
 8006324:	2f62      	cmp	r7, #98	; 0x62
 8006326:	d80a      	bhi.n	800633e <_printf_i+0x32>
 8006328:	2f00      	cmp	r7, #0
 800632a:	f000 80d9 	beq.w	80064e0 <_printf_i+0x1d4>
 800632e:	2f58      	cmp	r7, #88	; 0x58
 8006330:	f000 80a4 	beq.w	800647c <_printf_i+0x170>
 8006334:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8006338:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800633c:	e03a      	b.n	80063b4 <_printf_i+0xa8>
 800633e:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8006342:	2b15      	cmp	r3, #21
 8006344:	d8f6      	bhi.n	8006334 <_printf_i+0x28>
 8006346:	a001      	add	r0, pc, #4	; (adr r0, 800634c <_printf_i+0x40>)
 8006348:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 800634c:	080063a5 	.word	0x080063a5
 8006350:	080063b9 	.word	0x080063b9
 8006354:	08006335 	.word	0x08006335
 8006358:	08006335 	.word	0x08006335
 800635c:	08006335 	.word	0x08006335
 8006360:	08006335 	.word	0x08006335
 8006364:	080063b9 	.word	0x080063b9
 8006368:	08006335 	.word	0x08006335
 800636c:	08006335 	.word	0x08006335
 8006370:	08006335 	.word	0x08006335
 8006374:	08006335 	.word	0x08006335
 8006378:	080064c7 	.word	0x080064c7
 800637c:	080063e9 	.word	0x080063e9
 8006380:	080064a9 	.word	0x080064a9
 8006384:	08006335 	.word	0x08006335
 8006388:	08006335 	.word	0x08006335
 800638c:	080064e9 	.word	0x080064e9
 8006390:	08006335 	.word	0x08006335
 8006394:	080063e9 	.word	0x080063e9
 8006398:	08006335 	.word	0x08006335
 800639c:	08006335 	.word	0x08006335
 80063a0:	080064b1 	.word	0x080064b1
 80063a4:	680b      	ldr	r3, [r1, #0]
 80063a6:	f104 0642 	add.w	r6, r4, #66	; 0x42
 80063aa:	1d1a      	adds	r2, r3, #4
 80063ac:	681b      	ldr	r3, [r3, #0]
 80063ae:	600a      	str	r2, [r1, #0]
 80063b0:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80063b4:	2301      	movs	r3, #1
 80063b6:	e0a4      	b.n	8006502 <_printf_i+0x1f6>
 80063b8:	6825      	ldr	r5, [r4, #0]
 80063ba:	6808      	ldr	r0, [r1, #0]
 80063bc:	062e      	lsls	r6, r5, #24
 80063be:	f100 0304 	add.w	r3, r0, #4
 80063c2:	d50a      	bpl.n	80063da <_printf_i+0xce>
 80063c4:	6805      	ldr	r5, [r0, #0]
 80063c6:	600b      	str	r3, [r1, #0]
 80063c8:	2d00      	cmp	r5, #0
 80063ca:	da03      	bge.n	80063d4 <_printf_i+0xc8>
 80063cc:	232d      	movs	r3, #45	; 0x2d
 80063ce:	426d      	negs	r5, r5
 80063d0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80063d4:	230a      	movs	r3, #10
 80063d6:	485e      	ldr	r0, [pc, #376]	; (8006550 <_printf_i+0x244>)
 80063d8:	e019      	b.n	800640e <_printf_i+0x102>
 80063da:	f015 0f40 	tst.w	r5, #64	; 0x40
 80063de:	6805      	ldr	r5, [r0, #0]
 80063e0:	600b      	str	r3, [r1, #0]
 80063e2:	bf18      	it	ne
 80063e4:	b22d      	sxthne	r5, r5
 80063e6:	e7ef      	b.n	80063c8 <_printf_i+0xbc>
 80063e8:	680b      	ldr	r3, [r1, #0]
 80063ea:	6825      	ldr	r5, [r4, #0]
 80063ec:	1d18      	adds	r0, r3, #4
 80063ee:	6008      	str	r0, [r1, #0]
 80063f0:	0628      	lsls	r0, r5, #24
 80063f2:	d501      	bpl.n	80063f8 <_printf_i+0xec>
 80063f4:	681d      	ldr	r5, [r3, #0]
 80063f6:	e002      	b.n	80063fe <_printf_i+0xf2>
 80063f8:	0669      	lsls	r1, r5, #25
 80063fa:	d5fb      	bpl.n	80063f4 <_printf_i+0xe8>
 80063fc:	881d      	ldrh	r5, [r3, #0]
 80063fe:	2f6f      	cmp	r7, #111	; 0x6f
 8006400:	bf0c      	ite	eq
 8006402:	2308      	moveq	r3, #8
 8006404:	230a      	movne	r3, #10
 8006406:	4852      	ldr	r0, [pc, #328]	; (8006550 <_printf_i+0x244>)
 8006408:	2100      	movs	r1, #0
 800640a:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800640e:	6866      	ldr	r6, [r4, #4]
 8006410:	2e00      	cmp	r6, #0
 8006412:	bfa8      	it	ge
 8006414:	6821      	ldrge	r1, [r4, #0]
 8006416:	60a6      	str	r6, [r4, #8]
 8006418:	bfa4      	itt	ge
 800641a:	f021 0104 	bicge.w	r1, r1, #4
 800641e:	6021      	strge	r1, [r4, #0]
 8006420:	b90d      	cbnz	r5, 8006426 <_printf_i+0x11a>
 8006422:	2e00      	cmp	r6, #0
 8006424:	d04d      	beq.n	80064c2 <_printf_i+0x1b6>
 8006426:	4616      	mov	r6, r2
 8006428:	fbb5 f1f3 	udiv	r1, r5, r3
 800642c:	fb03 5711 	mls	r7, r3, r1, r5
 8006430:	5dc7      	ldrb	r7, [r0, r7]
 8006432:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8006436:	462f      	mov	r7, r5
 8006438:	42bb      	cmp	r3, r7
 800643a:	460d      	mov	r5, r1
 800643c:	d9f4      	bls.n	8006428 <_printf_i+0x11c>
 800643e:	2b08      	cmp	r3, #8
 8006440:	d10b      	bne.n	800645a <_printf_i+0x14e>
 8006442:	6823      	ldr	r3, [r4, #0]
 8006444:	07df      	lsls	r7, r3, #31
 8006446:	d508      	bpl.n	800645a <_printf_i+0x14e>
 8006448:	6923      	ldr	r3, [r4, #16]
 800644a:	6861      	ldr	r1, [r4, #4]
 800644c:	4299      	cmp	r1, r3
 800644e:	bfde      	ittt	le
 8006450:	2330      	movle	r3, #48	; 0x30
 8006452:	f806 3c01 	strble.w	r3, [r6, #-1]
 8006456:	f106 36ff 	addle.w	r6, r6, #4294967295
 800645a:	1b92      	subs	r2, r2, r6
 800645c:	6122      	str	r2, [r4, #16]
 800645e:	464b      	mov	r3, r9
 8006460:	4621      	mov	r1, r4
 8006462:	4640      	mov	r0, r8
 8006464:	f8cd a000 	str.w	sl, [sp]
 8006468:	aa03      	add	r2, sp, #12
 800646a:	f7ff fedf 	bl	800622c <_printf_common>
 800646e:	3001      	adds	r0, #1
 8006470:	d14c      	bne.n	800650c <_printf_i+0x200>
 8006472:	f04f 30ff 	mov.w	r0, #4294967295
 8006476:	b004      	add	sp, #16
 8006478:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800647c:	4834      	ldr	r0, [pc, #208]	; (8006550 <_printf_i+0x244>)
 800647e:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8006482:	680e      	ldr	r6, [r1, #0]
 8006484:	6823      	ldr	r3, [r4, #0]
 8006486:	f856 5b04 	ldr.w	r5, [r6], #4
 800648a:	061f      	lsls	r7, r3, #24
 800648c:	600e      	str	r6, [r1, #0]
 800648e:	d514      	bpl.n	80064ba <_printf_i+0x1ae>
 8006490:	07d9      	lsls	r1, r3, #31
 8006492:	bf44      	itt	mi
 8006494:	f043 0320 	orrmi.w	r3, r3, #32
 8006498:	6023      	strmi	r3, [r4, #0]
 800649a:	b91d      	cbnz	r5, 80064a4 <_printf_i+0x198>
 800649c:	6823      	ldr	r3, [r4, #0]
 800649e:	f023 0320 	bic.w	r3, r3, #32
 80064a2:	6023      	str	r3, [r4, #0]
 80064a4:	2310      	movs	r3, #16
 80064a6:	e7af      	b.n	8006408 <_printf_i+0xfc>
 80064a8:	6823      	ldr	r3, [r4, #0]
 80064aa:	f043 0320 	orr.w	r3, r3, #32
 80064ae:	6023      	str	r3, [r4, #0]
 80064b0:	2378      	movs	r3, #120	; 0x78
 80064b2:	4828      	ldr	r0, [pc, #160]	; (8006554 <_printf_i+0x248>)
 80064b4:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 80064b8:	e7e3      	b.n	8006482 <_printf_i+0x176>
 80064ba:	065e      	lsls	r6, r3, #25
 80064bc:	bf48      	it	mi
 80064be:	b2ad      	uxthmi	r5, r5
 80064c0:	e7e6      	b.n	8006490 <_printf_i+0x184>
 80064c2:	4616      	mov	r6, r2
 80064c4:	e7bb      	b.n	800643e <_printf_i+0x132>
 80064c6:	680b      	ldr	r3, [r1, #0]
 80064c8:	6826      	ldr	r6, [r4, #0]
 80064ca:	1d1d      	adds	r5, r3, #4
 80064cc:	6960      	ldr	r0, [r4, #20]
 80064ce:	600d      	str	r5, [r1, #0]
 80064d0:	0635      	lsls	r5, r6, #24
 80064d2:	681b      	ldr	r3, [r3, #0]
 80064d4:	d501      	bpl.n	80064da <_printf_i+0x1ce>
 80064d6:	6018      	str	r0, [r3, #0]
 80064d8:	e002      	b.n	80064e0 <_printf_i+0x1d4>
 80064da:	0671      	lsls	r1, r6, #25
 80064dc:	d5fb      	bpl.n	80064d6 <_printf_i+0x1ca>
 80064de:	8018      	strh	r0, [r3, #0]
 80064e0:	2300      	movs	r3, #0
 80064e2:	4616      	mov	r6, r2
 80064e4:	6123      	str	r3, [r4, #16]
 80064e6:	e7ba      	b.n	800645e <_printf_i+0x152>
 80064e8:	680b      	ldr	r3, [r1, #0]
 80064ea:	1d1a      	adds	r2, r3, #4
 80064ec:	600a      	str	r2, [r1, #0]
 80064ee:	681e      	ldr	r6, [r3, #0]
 80064f0:	2100      	movs	r1, #0
 80064f2:	4630      	mov	r0, r6
 80064f4:	6862      	ldr	r2, [r4, #4]
 80064f6:	f002 fb19 	bl	8008b2c <memchr>
 80064fa:	b108      	cbz	r0, 8006500 <_printf_i+0x1f4>
 80064fc:	1b80      	subs	r0, r0, r6
 80064fe:	6060      	str	r0, [r4, #4]
 8006500:	6863      	ldr	r3, [r4, #4]
 8006502:	6123      	str	r3, [r4, #16]
 8006504:	2300      	movs	r3, #0
 8006506:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800650a:	e7a8      	b.n	800645e <_printf_i+0x152>
 800650c:	4632      	mov	r2, r6
 800650e:	4649      	mov	r1, r9
 8006510:	4640      	mov	r0, r8
 8006512:	6923      	ldr	r3, [r4, #16]
 8006514:	47d0      	blx	sl
 8006516:	3001      	adds	r0, #1
 8006518:	d0ab      	beq.n	8006472 <_printf_i+0x166>
 800651a:	6823      	ldr	r3, [r4, #0]
 800651c:	079b      	lsls	r3, r3, #30
 800651e:	d413      	bmi.n	8006548 <_printf_i+0x23c>
 8006520:	68e0      	ldr	r0, [r4, #12]
 8006522:	9b03      	ldr	r3, [sp, #12]
 8006524:	4298      	cmp	r0, r3
 8006526:	bfb8      	it	lt
 8006528:	4618      	movlt	r0, r3
 800652a:	e7a4      	b.n	8006476 <_printf_i+0x16a>
 800652c:	2301      	movs	r3, #1
 800652e:	4632      	mov	r2, r6
 8006530:	4649      	mov	r1, r9
 8006532:	4640      	mov	r0, r8
 8006534:	47d0      	blx	sl
 8006536:	3001      	adds	r0, #1
 8006538:	d09b      	beq.n	8006472 <_printf_i+0x166>
 800653a:	3501      	adds	r5, #1
 800653c:	68e3      	ldr	r3, [r4, #12]
 800653e:	9903      	ldr	r1, [sp, #12]
 8006540:	1a5b      	subs	r3, r3, r1
 8006542:	42ab      	cmp	r3, r5
 8006544:	dcf2      	bgt.n	800652c <_printf_i+0x220>
 8006546:	e7eb      	b.n	8006520 <_printf_i+0x214>
 8006548:	2500      	movs	r5, #0
 800654a:	f104 0619 	add.w	r6, r4, #25
 800654e:	e7f5      	b.n	800653c <_printf_i+0x230>
 8006550:	0800a68e 	.word	0x0800a68e
 8006554:	0800a69f 	.word	0x0800a69f

08006558 <_scanf_float>:
 8006558:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800655c:	b087      	sub	sp, #28
 800655e:	9303      	str	r3, [sp, #12]
 8006560:	688b      	ldr	r3, [r1, #8]
 8006562:	4617      	mov	r7, r2
 8006564:	1e5a      	subs	r2, r3, #1
 8006566:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 800656a:	bf85      	ittet	hi
 800656c:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 8006570:	195b      	addhi	r3, r3, r5
 8006572:	2300      	movls	r3, #0
 8006574:	9302      	strhi	r3, [sp, #8]
 8006576:	bf88      	it	hi
 8006578:	f240 135d 	movwhi	r3, #349	; 0x15d
 800657c:	468b      	mov	fp, r1
 800657e:	f04f 0500 	mov.w	r5, #0
 8006582:	bf8c      	ite	hi
 8006584:	608b      	strhi	r3, [r1, #8]
 8006586:	9302      	strls	r3, [sp, #8]
 8006588:	680b      	ldr	r3, [r1, #0]
 800658a:	4680      	mov	r8, r0
 800658c:	f443 63f0 	orr.w	r3, r3, #1920	; 0x780
 8006590:	f84b 3b1c 	str.w	r3, [fp], #28
 8006594:	460c      	mov	r4, r1
 8006596:	465e      	mov	r6, fp
 8006598:	46aa      	mov	sl, r5
 800659a:	46a9      	mov	r9, r5
 800659c:	e9cd 5504 	strd	r5, r5, [sp, #16]
 80065a0:	9501      	str	r5, [sp, #4]
 80065a2:	68a2      	ldr	r2, [r4, #8]
 80065a4:	b152      	cbz	r2, 80065bc <_scanf_float+0x64>
 80065a6:	683b      	ldr	r3, [r7, #0]
 80065a8:	781b      	ldrb	r3, [r3, #0]
 80065aa:	2b4e      	cmp	r3, #78	; 0x4e
 80065ac:	d864      	bhi.n	8006678 <_scanf_float+0x120>
 80065ae:	2b40      	cmp	r3, #64	; 0x40
 80065b0:	d83c      	bhi.n	800662c <_scanf_float+0xd4>
 80065b2:	f1a3 012b 	sub.w	r1, r3, #43	; 0x2b
 80065b6:	b2c8      	uxtb	r0, r1
 80065b8:	280e      	cmp	r0, #14
 80065ba:	d93a      	bls.n	8006632 <_scanf_float+0xda>
 80065bc:	f1b9 0f00 	cmp.w	r9, #0
 80065c0:	d003      	beq.n	80065ca <_scanf_float+0x72>
 80065c2:	6823      	ldr	r3, [r4, #0]
 80065c4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80065c8:	6023      	str	r3, [r4, #0]
 80065ca:	f10a 3aff 	add.w	sl, sl, #4294967295
 80065ce:	f1ba 0f01 	cmp.w	sl, #1
 80065d2:	f200 8113 	bhi.w	80067fc <_scanf_float+0x2a4>
 80065d6:	455e      	cmp	r6, fp
 80065d8:	f200 8105 	bhi.w	80067e6 <_scanf_float+0x28e>
 80065dc:	2501      	movs	r5, #1
 80065de:	4628      	mov	r0, r5
 80065e0:	b007      	add	sp, #28
 80065e2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80065e6:	f1a3 0261 	sub.w	r2, r3, #97	; 0x61
 80065ea:	2a0d      	cmp	r2, #13
 80065ec:	d8e6      	bhi.n	80065bc <_scanf_float+0x64>
 80065ee:	a101      	add	r1, pc, #4	; (adr r1, 80065f4 <_scanf_float+0x9c>)
 80065f0:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 80065f4:	08006733 	.word	0x08006733
 80065f8:	080065bd 	.word	0x080065bd
 80065fc:	080065bd 	.word	0x080065bd
 8006600:	080065bd 	.word	0x080065bd
 8006604:	08006793 	.word	0x08006793
 8006608:	0800676b 	.word	0x0800676b
 800660c:	080065bd 	.word	0x080065bd
 8006610:	080065bd 	.word	0x080065bd
 8006614:	08006741 	.word	0x08006741
 8006618:	080065bd 	.word	0x080065bd
 800661c:	080065bd 	.word	0x080065bd
 8006620:	080065bd 	.word	0x080065bd
 8006624:	080065bd 	.word	0x080065bd
 8006628:	080066f9 	.word	0x080066f9
 800662c:	f1a3 0241 	sub.w	r2, r3, #65	; 0x41
 8006630:	e7db      	b.n	80065ea <_scanf_float+0x92>
 8006632:	290e      	cmp	r1, #14
 8006634:	d8c2      	bhi.n	80065bc <_scanf_float+0x64>
 8006636:	a001      	add	r0, pc, #4	; (adr r0, 800663c <_scanf_float+0xe4>)
 8006638:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 800663c:	080066eb 	.word	0x080066eb
 8006640:	080065bd 	.word	0x080065bd
 8006644:	080066eb 	.word	0x080066eb
 8006648:	0800677f 	.word	0x0800677f
 800664c:	080065bd 	.word	0x080065bd
 8006650:	08006699 	.word	0x08006699
 8006654:	080066d5 	.word	0x080066d5
 8006658:	080066d5 	.word	0x080066d5
 800665c:	080066d5 	.word	0x080066d5
 8006660:	080066d5 	.word	0x080066d5
 8006664:	080066d5 	.word	0x080066d5
 8006668:	080066d5 	.word	0x080066d5
 800666c:	080066d5 	.word	0x080066d5
 8006670:	080066d5 	.word	0x080066d5
 8006674:	080066d5 	.word	0x080066d5
 8006678:	2b6e      	cmp	r3, #110	; 0x6e
 800667a:	d809      	bhi.n	8006690 <_scanf_float+0x138>
 800667c:	2b60      	cmp	r3, #96	; 0x60
 800667e:	d8b2      	bhi.n	80065e6 <_scanf_float+0x8e>
 8006680:	2b54      	cmp	r3, #84	; 0x54
 8006682:	d077      	beq.n	8006774 <_scanf_float+0x21c>
 8006684:	2b59      	cmp	r3, #89	; 0x59
 8006686:	d199      	bne.n	80065bc <_scanf_float+0x64>
 8006688:	2d07      	cmp	r5, #7
 800668a:	d197      	bne.n	80065bc <_scanf_float+0x64>
 800668c:	2508      	movs	r5, #8
 800668e:	e029      	b.n	80066e4 <_scanf_float+0x18c>
 8006690:	2b74      	cmp	r3, #116	; 0x74
 8006692:	d06f      	beq.n	8006774 <_scanf_float+0x21c>
 8006694:	2b79      	cmp	r3, #121	; 0x79
 8006696:	e7f6      	b.n	8006686 <_scanf_float+0x12e>
 8006698:	6821      	ldr	r1, [r4, #0]
 800669a:	05c8      	lsls	r0, r1, #23
 800669c:	d51a      	bpl.n	80066d4 <_scanf_float+0x17c>
 800669e:	9b02      	ldr	r3, [sp, #8]
 80066a0:	f021 0180 	bic.w	r1, r1, #128	; 0x80
 80066a4:	6021      	str	r1, [r4, #0]
 80066a6:	f109 0901 	add.w	r9, r9, #1
 80066aa:	b11b      	cbz	r3, 80066b4 <_scanf_float+0x15c>
 80066ac:	3b01      	subs	r3, #1
 80066ae:	3201      	adds	r2, #1
 80066b0:	9302      	str	r3, [sp, #8]
 80066b2:	60a2      	str	r2, [r4, #8]
 80066b4:	68a3      	ldr	r3, [r4, #8]
 80066b6:	3b01      	subs	r3, #1
 80066b8:	60a3      	str	r3, [r4, #8]
 80066ba:	6923      	ldr	r3, [r4, #16]
 80066bc:	3301      	adds	r3, #1
 80066be:	6123      	str	r3, [r4, #16]
 80066c0:	687b      	ldr	r3, [r7, #4]
 80066c2:	3b01      	subs	r3, #1
 80066c4:	2b00      	cmp	r3, #0
 80066c6:	607b      	str	r3, [r7, #4]
 80066c8:	f340 8084 	ble.w	80067d4 <_scanf_float+0x27c>
 80066cc:	683b      	ldr	r3, [r7, #0]
 80066ce:	3301      	adds	r3, #1
 80066d0:	603b      	str	r3, [r7, #0]
 80066d2:	e766      	b.n	80065a2 <_scanf_float+0x4a>
 80066d4:	eb1a 0f05 	cmn.w	sl, r5
 80066d8:	f47f af70 	bne.w	80065bc <_scanf_float+0x64>
 80066dc:	6822      	ldr	r2, [r4, #0]
 80066de:	f422 72c0 	bic.w	r2, r2, #384	; 0x180
 80066e2:	6022      	str	r2, [r4, #0]
 80066e4:	f806 3b01 	strb.w	r3, [r6], #1
 80066e8:	e7e4      	b.n	80066b4 <_scanf_float+0x15c>
 80066ea:	6822      	ldr	r2, [r4, #0]
 80066ec:	0610      	lsls	r0, r2, #24
 80066ee:	f57f af65 	bpl.w	80065bc <_scanf_float+0x64>
 80066f2:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80066f6:	e7f4      	b.n	80066e2 <_scanf_float+0x18a>
 80066f8:	f1ba 0f00 	cmp.w	sl, #0
 80066fc:	d10e      	bne.n	800671c <_scanf_float+0x1c4>
 80066fe:	f1b9 0f00 	cmp.w	r9, #0
 8006702:	d10e      	bne.n	8006722 <_scanf_float+0x1ca>
 8006704:	6822      	ldr	r2, [r4, #0]
 8006706:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 800670a:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 800670e:	d108      	bne.n	8006722 <_scanf_float+0x1ca>
 8006710:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 8006714:	f04f 0a01 	mov.w	sl, #1
 8006718:	6022      	str	r2, [r4, #0]
 800671a:	e7e3      	b.n	80066e4 <_scanf_float+0x18c>
 800671c:	f1ba 0f02 	cmp.w	sl, #2
 8006720:	d055      	beq.n	80067ce <_scanf_float+0x276>
 8006722:	2d01      	cmp	r5, #1
 8006724:	d002      	beq.n	800672c <_scanf_float+0x1d4>
 8006726:	2d04      	cmp	r5, #4
 8006728:	f47f af48 	bne.w	80065bc <_scanf_float+0x64>
 800672c:	3501      	adds	r5, #1
 800672e:	b2ed      	uxtb	r5, r5
 8006730:	e7d8      	b.n	80066e4 <_scanf_float+0x18c>
 8006732:	f1ba 0f01 	cmp.w	sl, #1
 8006736:	f47f af41 	bne.w	80065bc <_scanf_float+0x64>
 800673a:	f04f 0a02 	mov.w	sl, #2
 800673e:	e7d1      	b.n	80066e4 <_scanf_float+0x18c>
 8006740:	b97d      	cbnz	r5, 8006762 <_scanf_float+0x20a>
 8006742:	f1b9 0f00 	cmp.w	r9, #0
 8006746:	f47f af3c 	bne.w	80065c2 <_scanf_float+0x6a>
 800674a:	6822      	ldr	r2, [r4, #0]
 800674c:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 8006750:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 8006754:	f47f af39 	bne.w	80065ca <_scanf_float+0x72>
 8006758:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 800675c:	2501      	movs	r5, #1
 800675e:	6022      	str	r2, [r4, #0]
 8006760:	e7c0      	b.n	80066e4 <_scanf_float+0x18c>
 8006762:	2d03      	cmp	r5, #3
 8006764:	d0e2      	beq.n	800672c <_scanf_float+0x1d4>
 8006766:	2d05      	cmp	r5, #5
 8006768:	e7de      	b.n	8006728 <_scanf_float+0x1d0>
 800676a:	2d02      	cmp	r5, #2
 800676c:	f47f af26 	bne.w	80065bc <_scanf_float+0x64>
 8006770:	2503      	movs	r5, #3
 8006772:	e7b7      	b.n	80066e4 <_scanf_float+0x18c>
 8006774:	2d06      	cmp	r5, #6
 8006776:	f47f af21 	bne.w	80065bc <_scanf_float+0x64>
 800677a:	2507      	movs	r5, #7
 800677c:	e7b2      	b.n	80066e4 <_scanf_float+0x18c>
 800677e:	6822      	ldr	r2, [r4, #0]
 8006780:	0591      	lsls	r1, r2, #22
 8006782:	f57f af1b 	bpl.w	80065bc <_scanf_float+0x64>
 8006786:	f422 7220 	bic.w	r2, r2, #640	; 0x280
 800678a:	6022      	str	r2, [r4, #0]
 800678c:	f8cd 9004 	str.w	r9, [sp, #4]
 8006790:	e7a8      	b.n	80066e4 <_scanf_float+0x18c>
 8006792:	6822      	ldr	r2, [r4, #0]
 8006794:	f402 61a0 	and.w	r1, r2, #1280	; 0x500
 8006798:	f5b1 6f80 	cmp.w	r1, #1024	; 0x400
 800679c:	d006      	beq.n	80067ac <_scanf_float+0x254>
 800679e:	0550      	lsls	r0, r2, #21
 80067a0:	f57f af0c 	bpl.w	80065bc <_scanf_float+0x64>
 80067a4:	f1b9 0f00 	cmp.w	r9, #0
 80067a8:	f43f af0f 	beq.w	80065ca <_scanf_float+0x72>
 80067ac:	0591      	lsls	r1, r2, #22
 80067ae:	bf58      	it	pl
 80067b0:	9901      	ldrpl	r1, [sp, #4]
 80067b2:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 80067b6:	bf58      	it	pl
 80067b8:	eba9 0101 	subpl.w	r1, r9, r1
 80067bc:	f442 72c0 	orr.w	r2, r2, #384	; 0x180
 80067c0:	f04f 0900 	mov.w	r9, #0
 80067c4:	bf58      	it	pl
 80067c6:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 80067ca:	6022      	str	r2, [r4, #0]
 80067cc:	e78a      	b.n	80066e4 <_scanf_float+0x18c>
 80067ce:	f04f 0a03 	mov.w	sl, #3
 80067d2:	e787      	b.n	80066e4 <_scanf_float+0x18c>
 80067d4:	4639      	mov	r1, r7
 80067d6:	4640      	mov	r0, r8
 80067d8:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 80067dc:	4798      	blx	r3
 80067de:	2800      	cmp	r0, #0
 80067e0:	f43f aedf 	beq.w	80065a2 <_scanf_float+0x4a>
 80067e4:	e6ea      	b.n	80065bc <_scanf_float+0x64>
 80067e6:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 80067ea:	463a      	mov	r2, r7
 80067ec:	4640      	mov	r0, r8
 80067ee:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 80067f2:	4798      	blx	r3
 80067f4:	6923      	ldr	r3, [r4, #16]
 80067f6:	3b01      	subs	r3, #1
 80067f8:	6123      	str	r3, [r4, #16]
 80067fa:	e6ec      	b.n	80065d6 <_scanf_float+0x7e>
 80067fc:	1e6b      	subs	r3, r5, #1
 80067fe:	2b06      	cmp	r3, #6
 8006800:	d825      	bhi.n	800684e <_scanf_float+0x2f6>
 8006802:	2d02      	cmp	r5, #2
 8006804:	d836      	bhi.n	8006874 <_scanf_float+0x31c>
 8006806:	455e      	cmp	r6, fp
 8006808:	f67f aee8 	bls.w	80065dc <_scanf_float+0x84>
 800680c:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8006810:	463a      	mov	r2, r7
 8006812:	4640      	mov	r0, r8
 8006814:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8006818:	4798      	blx	r3
 800681a:	6923      	ldr	r3, [r4, #16]
 800681c:	3b01      	subs	r3, #1
 800681e:	6123      	str	r3, [r4, #16]
 8006820:	e7f1      	b.n	8006806 <_scanf_float+0x2ae>
 8006822:	9802      	ldr	r0, [sp, #8]
 8006824:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8006828:	f810 1d01 	ldrb.w	r1, [r0, #-1]!
 800682c:	463a      	mov	r2, r7
 800682e:	9002      	str	r0, [sp, #8]
 8006830:	4640      	mov	r0, r8
 8006832:	4798      	blx	r3
 8006834:	6923      	ldr	r3, [r4, #16]
 8006836:	3b01      	subs	r3, #1
 8006838:	6123      	str	r3, [r4, #16]
 800683a:	f10a 3aff 	add.w	sl, sl, #4294967295
 800683e:	fa5f fa8a 	uxtb.w	sl, sl
 8006842:	f1ba 0f02 	cmp.w	sl, #2
 8006846:	d1ec      	bne.n	8006822 <_scanf_float+0x2ca>
 8006848:	3d03      	subs	r5, #3
 800684a:	b2ed      	uxtb	r5, r5
 800684c:	1b76      	subs	r6, r6, r5
 800684e:	6823      	ldr	r3, [r4, #0]
 8006850:	05da      	lsls	r2, r3, #23
 8006852:	d52f      	bpl.n	80068b4 <_scanf_float+0x35c>
 8006854:	055b      	lsls	r3, r3, #21
 8006856:	d510      	bpl.n	800687a <_scanf_float+0x322>
 8006858:	455e      	cmp	r6, fp
 800685a:	f67f aebf 	bls.w	80065dc <_scanf_float+0x84>
 800685e:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8006862:	463a      	mov	r2, r7
 8006864:	4640      	mov	r0, r8
 8006866:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800686a:	4798      	blx	r3
 800686c:	6923      	ldr	r3, [r4, #16]
 800686e:	3b01      	subs	r3, #1
 8006870:	6123      	str	r3, [r4, #16]
 8006872:	e7f1      	b.n	8006858 <_scanf_float+0x300>
 8006874:	46aa      	mov	sl, r5
 8006876:	9602      	str	r6, [sp, #8]
 8006878:	e7df      	b.n	800683a <_scanf_float+0x2e2>
 800687a:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 800687e:	6923      	ldr	r3, [r4, #16]
 8006880:	2965      	cmp	r1, #101	; 0x65
 8006882:	f103 33ff 	add.w	r3, r3, #4294967295
 8006886:	f106 35ff 	add.w	r5, r6, #4294967295
 800688a:	6123      	str	r3, [r4, #16]
 800688c:	d00c      	beq.n	80068a8 <_scanf_float+0x350>
 800688e:	2945      	cmp	r1, #69	; 0x45
 8006890:	d00a      	beq.n	80068a8 <_scanf_float+0x350>
 8006892:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8006896:	463a      	mov	r2, r7
 8006898:	4640      	mov	r0, r8
 800689a:	4798      	blx	r3
 800689c:	6923      	ldr	r3, [r4, #16]
 800689e:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 80068a2:	3b01      	subs	r3, #1
 80068a4:	1eb5      	subs	r5, r6, #2
 80068a6:	6123      	str	r3, [r4, #16]
 80068a8:	463a      	mov	r2, r7
 80068aa:	4640      	mov	r0, r8
 80068ac:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 80068b0:	4798      	blx	r3
 80068b2:	462e      	mov	r6, r5
 80068b4:	6825      	ldr	r5, [r4, #0]
 80068b6:	f015 0510 	ands.w	r5, r5, #16
 80068ba:	d159      	bne.n	8006970 <_scanf_float+0x418>
 80068bc:	7035      	strb	r5, [r6, #0]
 80068be:	6823      	ldr	r3, [r4, #0]
 80068c0:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80068c4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80068c8:	d11c      	bne.n	8006904 <_scanf_float+0x3ac>
 80068ca:	9b01      	ldr	r3, [sp, #4]
 80068cc:	454b      	cmp	r3, r9
 80068ce:	eba3 0209 	sub.w	r2, r3, r9
 80068d2:	d124      	bne.n	800691e <_scanf_float+0x3c6>
 80068d4:	2200      	movs	r2, #0
 80068d6:	4659      	mov	r1, fp
 80068d8:	4640      	mov	r0, r8
 80068da:	f000 fe99 	bl	8007610 <_strtod_r>
 80068de:	f8d4 c000 	ldr.w	ip, [r4]
 80068e2:	9b03      	ldr	r3, [sp, #12]
 80068e4:	f01c 0f02 	tst.w	ip, #2
 80068e8:	4606      	mov	r6, r0
 80068ea:	460f      	mov	r7, r1
 80068ec:	681b      	ldr	r3, [r3, #0]
 80068ee:	d021      	beq.n	8006934 <_scanf_float+0x3dc>
 80068f0:	9903      	ldr	r1, [sp, #12]
 80068f2:	1d1a      	adds	r2, r3, #4
 80068f4:	600a      	str	r2, [r1, #0]
 80068f6:	681b      	ldr	r3, [r3, #0]
 80068f8:	e9c3 6700 	strd	r6, r7, [r3]
 80068fc:	68e3      	ldr	r3, [r4, #12]
 80068fe:	3301      	adds	r3, #1
 8006900:	60e3      	str	r3, [r4, #12]
 8006902:	e66c      	b.n	80065de <_scanf_float+0x86>
 8006904:	9b04      	ldr	r3, [sp, #16]
 8006906:	2b00      	cmp	r3, #0
 8006908:	d0e4      	beq.n	80068d4 <_scanf_float+0x37c>
 800690a:	9905      	ldr	r1, [sp, #20]
 800690c:	230a      	movs	r3, #10
 800690e:	462a      	mov	r2, r5
 8006910:	4640      	mov	r0, r8
 8006912:	3101      	adds	r1, #1
 8006914:	f000 ff08 	bl	8007728 <_strtol_r>
 8006918:	9b04      	ldr	r3, [sp, #16]
 800691a:	9e05      	ldr	r6, [sp, #20]
 800691c:	1ac2      	subs	r2, r0, r3
 800691e:	f204 136f 	addw	r3, r4, #367	; 0x16f
 8006922:	429e      	cmp	r6, r3
 8006924:	bf28      	it	cs
 8006926:	f504 76b7 	addcs.w	r6, r4, #366	; 0x16e
 800692a:	4630      	mov	r0, r6
 800692c:	4911      	ldr	r1, [pc, #68]	; (8006974 <_scanf_float+0x41c>)
 800692e:	f000 f829 	bl	8006984 <siprintf>
 8006932:	e7cf      	b.n	80068d4 <_scanf_float+0x37c>
 8006934:	f01c 0f04 	tst.w	ip, #4
 8006938:	f103 0e04 	add.w	lr, r3, #4
 800693c:	d003      	beq.n	8006946 <_scanf_float+0x3ee>
 800693e:	9903      	ldr	r1, [sp, #12]
 8006940:	f8c1 e000 	str.w	lr, [r1]
 8006944:	e7d7      	b.n	80068f6 <_scanf_float+0x39e>
 8006946:	9a03      	ldr	r2, [sp, #12]
 8006948:	f8c2 e000 	str.w	lr, [r2]
 800694c:	f8d3 8000 	ldr.w	r8, [r3]
 8006950:	4602      	mov	r2, r0
 8006952:	460b      	mov	r3, r1
 8006954:	f7fa f85a 	bl	8000a0c <__aeabi_dcmpun>
 8006958:	b128      	cbz	r0, 8006966 <_scanf_float+0x40e>
 800695a:	4807      	ldr	r0, [pc, #28]	; (8006978 <_scanf_float+0x420>)
 800695c:	f000 f80e 	bl	800697c <nanf>
 8006960:	f8c8 0000 	str.w	r0, [r8]
 8006964:	e7ca      	b.n	80068fc <_scanf_float+0x3a4>
 8006966:	4630      	mov	r0, r6
 8006968:	4639      	mov	r1, r7
 800696a:	f7fa f8ad 	bl	8000ac8 <__aeabi_d2f>
 800696e:	e7f7      	b.n	8006960 <_scanf_float+0x408>
 8006970:	2500      	movs	r5, #0
 8006972:	e634      	b.n	80065de <_scanf_float+0x86>
 8006974:	0800a6b0 	.word	0x0800a6b0
 8006978:	0800aac8 	.word	0x0800aac8

0800697c <nanf>:
 800697c:	4800      	ldr	r0, [pc, #0]	; (8006980 <nanf+0x4>)
 800697e:	4770      	bx	lr
 8006980:	7fc00000 	.word	0x7fc00000

08006984 <siprintf>:
 8006984:	b40e      	push	{r1, r2, r3}
 8006986:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800698a:	b500      	push	{lr}
 800698c:	b09c      	sub	sp, #112	; 0x70
 800698e:	ab1d      	add	r3, sp, #116	; 0x74
 8006990:	9002      	str	r0, [sp, #8]
 8006992:	9006      	str	r0, [sp, #24]
 8006994:	9107      	str	r1, [sp, #28]
 8006996:	9104      	str	r1, [sp, #16]
 8006998:	4808      	ldr	r0, [pc, #32]	; (80069bc <siprintf+0x38>)
 800699a:	4909      	ldr	r1, [pc, #36]	; (80069c0 <siprintf+0x3c>)
 800699c:	f853 2b04 	ldr.w	r2, [r3], #4
 80069a0:	9105      	str	r1, [sp, #20]
 80069a2:	6800      	ldr	r0, [r0, #0]
 80069a4:	a902      	add	r1, sp, #8
 80069a6:	9301      	str	r3, [sp, #4]
 80069a8:	f002 fea4 	bl	80096f4 <_svfiprintf_r>
 80069ac:	2200      	movs	r2, #0
 80069ae:	9b02      	ldr	r3, [sp, #8]
 80069b0:	701a      	strb	r2, [r3, #0]
 80069b2:	b01c      	add	sp, #112	; 0x70
 80069b4:	f85d eb04 	ldr.w	lr, [sp], #4
 80069b8:	b003      	add	sp, #12
 80069ba:	4770      	bx	lr
 80069bc:	2000000c 	.word	0x2000000c
 80069c0:	ffff0208 	.word	0xffff0208

080069c4 <strcat>:
 80069c4:	4602      	mov	r2, r0
 80069c6:	b510      	push	{r4, lr}
 80069c8:	7814      	ldrb	r4, [r2, #0]
 80069ca:	4613      	mov	r3, r2
 80069cc:	3201      	adds	r2, #1
 80069ce:	2c00      	cmp	r4, #0
 80069d0:	d1fa      	bne.n	80069c8 <strcat+0x4>
 80069d2:	3b01      	subs	r3, #1
 80069d4:	f811 2b01 	ldrb.w	r2, [r1], #1
 80069d8:	f803 2f01 	strb.w	r2, [r3, #1]!
 80069dc:	2a00      	cmp	r2, #0
 80069de:	d1f9      	bne.n	80069d4 <strcat+0x10>
 80069e0:	bd10      	pop	{r4, pc}

080069e2 <sulp>:
 80069e2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80069e6:	460f      	mov	r7, r1
 80069e8:	4690      	mov	r8, r2
 80069ea:	f002 fc2b 	bl	8009244 <__ulp>
 80069ee:	4604      	mov	r4, r0
 80069f0:	460d      	mov	r5, r1
 80069f2:	f1b8 0f00 	cmp.w	r8, #0
 80069f6:	d011      	beq.n	8006a1c <sulp+0x3a>
 80069f8:	f3c7 530a 	ubfx	r3, r7, #20, #11
 80069fc:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 8006a00:	2b00      	cmp	r3, #0
 8006a02:	dd0b      	ble.n	8006a1c <sulp+0x3a>
 8006a04:	2400      	movs	r4, #0
 8006a06:	051b      	lsls	r3, r3, #20
 8006a08:	f103 557f 	add.w	r5, r3, #1069547520	; 0x3fc00000
 8006a0c:	f505 1540 	add.w	r5, r5, #3145728	; 0x300000
 8006a10:	4622      	mov	r2, r4
 8006a12:	462b      	mov	r3, r5
 8006a14:	f7f9 fd60 	bl	80004d8 <__aeabi_dmul>
 8006a18:	4604      	mov	r4, r0
 8006a1a:	460d      	mov	r5, r1
 8006a1c:	4620      	mov	r0, r4
 8006a1e:	4629      	mov	r1, r5
 8006a20:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006a24:	0000      	movs	r0, r0
	...

08006a28 <_strtod_l>:
 8006a28:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006a2c:	469b      	mov	fp, r3
 8006a2e:	2300      	movs	r3, #0
 8006a30:	b0a1      	sub	sp, #132	; 0x84
 8006a32:	931c      	str	r3, [sp, #112]	; 0x70
 8006a34:	4ba1      	ldr	r3, [pc, #644]	; (8006cbc <_strtod_l+0x294>)
 8006a36:	4682      	mov	sl, r0
 8006a38:	681f      	ldr	r7, [r3, #0]
 8006a3a:	460e      	mov	r6, r1
 8006a3c:	4638      	mov	r0, r7
 8006a3e:	9217      	str	r2, [sp, #92]	; 0x5c
 8006a40:	f7f9 fb86 	bl	8000150 <strlen>
 8006a44:	f04f 0800 	mov.w	r8, #0
 8006a48:	4604      	mov	r4, r0
 8006a4a:	f04f 0900 	mov.w	r9, #0
 8006a4e:	961b      	str	r6, [sp, #108]	; 0x6c
 8006a50:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8006a52:	781a      	ldrb	r2, [r3, #0]
 8006a54:	2a2b      	cmp	r2, #43	; 0x2b
 8006a56:	d04c      	beq.n	8006af2 <_strtod_l+0xca>
 8006a58:	d83a      	bhi.n	8006ad0 <_strtod_l+0xa8>
 8006a5a:	2a0d      	cmp	r2, #13
 8006a5c:	d833      	bhi.n	8006ac6 <_strtod_l+0x9e>
 8006a5e:	2a08      	cmp	r2, #8
 8006a60:	d833      	bhi.n	8006aca <_strtod_l+0xa2>
 8006a62:	2a00      	cmp	r2, #0
 8006a64:	d03d      	beq.n	8006ae2 <_strtod_l+0xba>
 8006a66:	2300      	movs	r3, #0
 8006a68:	930c      	str	r3, [sp, #48]	; 0x30
 8006a6a:	9d1b      	ldr	r5, [sp, #108]	; 0x6c
 8006a6c:	782b      	ldrb	r3, [r5, #0]
 8006a6e:	2b30      	cmp	r3, #48	; 0x30
 8006a70:	f040 80af 	bne.w	8006bd2 <_strtod_l+0x1aa>
 8006a74:	786b      	ldrb	r3, [r5, #1]
 8006a76:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 8006a7a:	2b58      	cmp	r3, #88	; 0x58
 8006a7c:	d16c      	bne.n	8006b58 <_strtod_l+0x130>
 8006a7e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8006a80:	4650      	mov	r0, sl
 8006a82:	9301      	str	r3, [sp, #4]
 8006a84:	ab1c      	add	r3, sp, #112	; 0x70
 8006a86:	9300      	str	r3, [sp, #0]
 8006a88:	4a8d      	ldr	r2, [pc, #564]	; (8006cc0 <_strtod_l+0x298>)
 8006a8a:	f8cd b008 	str.w	fp, [sp, #8]
 8006a8e:	ab1d      	add	r3, sp, #116	; 0x74
 8006a90:	a91b      	add	r1, sp, #108	; 0x6c
 8006a92:	f001 fd2f 	bl	80084f4 <__gethex>
 8006a96:	f010 0607 	ands.w	r6, r0, #7
 8006a9a:	4604      	mov	r4, r0
 8006a9c:	d005      	beq.n	8006aaa <_strtod_l+0x82>
 8006a9e:	2e06      	cmp	r6, #6
 8006aa0:	d129      	bne.n	8006af6 <_strtod_l+0xce>
 8006aa2:	2300      	movs	r3, #0
 8006aa4:	3501      	adds	r5, #1
 8006aa6:	951b      	str	r5, [sp, #108]	; 0x6c
 8006aa8:	930c      	str	r3, [sp, #48]	; 0x30
 8006aaa:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8006aac:	2b00      	cmp	r3, #0
 8006aae:	f040 8596 	bne.w	80075de <_strtod_l+0xbb6>
 8006ab2:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8006ab4:	b1d3      	cbz	r3, 8006aec <_strtod_l+0xc4>
 8006ab6:	4642      	mov	r2, r8
 8006ab8:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 8006abc:	4610      	mov	r0, r2
 8006abe:	4619      	mov	r1, r3
 8006ac0:	b021      	add	sp, #132	; 0x84
 8006ac2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006ac6:	2a20      	cmp	r2, #32
 8006ac8:	d1cd      	bne.n	8006a66 <_strtod_l+0x3e>
 8006aca:	3301      	adds	r3, #1
 8006acc:	931b      	str	r3, [sp, #108]	; 0x6c
 8006ace:	e7bf      	b.n	8006a50 <_strtod_l+0x28>
 8006ad0:	2a2d      	cmp	r2, #45	; 0x2d
 8006ad2:	d1c8      	bne.n	8006a66 <_strtod_l+0x3e>
 8006ad4:	2201      	movs	r2, #1
 8006ad6:	920c      	str	r2, [sp, #48]	; 0x30
 8006ad8:	1c5a      	adds	r2, r3, #1
 8006ada:	921b      	str	r2, [sp, #108]	; 0x6c
 8006adc:	785b      	ldrb	r3, [r3, #1]
 8006ade:	2b00      	cmp	r3, #0
 8006ae0:	d1c3      	bne.n	8006a6a <_strtod_l+0x42>
 8006ae2:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8006ae4:	961b      	str	r6, [sp, #108]	; 0x6c
 8006ae6:	2b00      	cmp	r3, #0
 8006ae8:	f040 8577 	bne.w	80075da <_strtod_l+0xbb2>
 8006aec:	4642      	mov	r2, r8
 8006aee:	464b      	mov	r3, r9
 8006af0:	e7e4      	b.n	8006abc <_strtod_l+0x94>
 8006af2:	2200      	movs	r2, #0
 8006af4:	e7ef      	b.n	8006ad6 <_strtod_l+0xae>
 8006af6:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 8006af8:	b13a      	cbz	r2, 8006b0a <_strtod_l+0xe2>
 8006afa:	2135      	movs	r1, #53	; 0x35
 8006afc:	a81e      	add	r0, sp, #120	; 0x78
 8006afe:	f002 fca5 	bl	800944c <__copybits>
 8006b02:	4650      	mov	r0, sl
 8006b04:	991c      	ldr	r1, [sp, #112]	; 0x70
 8006b06:	f002 f86d 	bl	8008be4 <_Bfree>
 8006b0a:	3e01      	subs	r6, #1
 8006b0c:	2e05      	cmp	r6, #5
 8006b0e:	d807      	bhi.n	8006b20 <_strtod_l+0xf8>
 8006b10:	e8df f006 	tbb	[pc, r6]
 8006b14:	1d180b0e 	.word	0x1d180b0e
 8006b18:	030e      	.short	0x030e
 8006b1a:	f04f 0900 	mov.w	r9, #0
 8006b1e:	46c8      	mov	r8, r9
 8006b20:	0721      	lsls	r1, r4, #28
 8006b22:	d5c2      	bpl.n	8006aaa <_strtod_l+0x82>
 8006b24:	f049 4900 	orr.w	r9, r9, #2147483648	; 0x80000000
 8006b28:	e7bf      	b.n	8006aaa <_strtod_l+0x82>
 8006b2a:	e9dd 891e 	ldrd	r8, r9, [sp, #120]	; 0x78
 8006b2e:	e7f7      	b.n	8006b20 <_strtod_l+0xf8>
 8006b30:	9a1d      	ldr	r2, [sp, #116]	; 0x74
 8006b32:	e9dd 831e 	ldrd	r8, r3, [sp, #120]	; 0x78
 8006b36:	f202 4233 	addw	r2, r2, #1075	; 0x433
 8006b3a:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 8006b3e:	ea43 5902 	orr.w	r9, r3, r2, lsl #20
 8006b42:	e7ed      	b.n	8006b20 <_strtod_l+0xf8>
 8006b44:	f04f 0800 	mov.w	r8, #0
 8006b48:	f8df 9178 	ldr.w	r9, [pc, #376]	; 8006cc4 <_strtod_l+0x29c>
 8006b4c:	e7e8      	b.n	8006b20 <_strtod_l+0xf8>
 8006b4e:	f06f 4900 	mvn.w	r9, #2147483648	; 0x80000000
 8006b52:	f04f 38ff 	mov.w	r8, #4294967295
 8006b56:	e7e3      	b.n	8006b20 <_strtod_l+0xf8>
 8006b58:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8006b5a:	1c5a      	adds	r2, r3, #1
 8006b5c:	921b      	str	r2, [sp, #108]	; 0x6c
 8006b5e:	785b      	ldrb	r3, [r3, #1]
 8006b60:	2b30      	cmp	r3, #48	; 0x30
 8006b62:	d0f9      	beq.n	8006b58 <_strtod_l+0x130>
 8006b64:	2b00      	cmp	r3, #0
 8006b66:	d0a0      	beq.n	8006aaa <_strtod_l+0x82>
 8006b68:	2301      	movs	r3, #1
 8006b6a:	9307      	str	r3, [sp, #28]
 8006b6c:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8006b6e:	220a      	movs	r2, #10
 8006b70:	9308      	str	r3, [sp, #32]
 8006b72:	2300      	movs	r3, #0
 8006b74:	469b      	mov	fp, r3
 8006b76:	e9cd 3305 	strd	r3, r3, [sp, #20]
 8006b7a:	981b      	ldr	r0, [sp, #108]	; 0x6c
 8006b7c:	7805      	ldrb	r5, [r0, #0]
 8006b7e:	f1a5 0330 	sub.w	r3, r5, #48	; 0x30
 8006b82:	b2d9      	uxtb	r1, r3
 8006b84:	2909      	cmp	r1, #9
 8006b86:	d926      	bls.n	8006bd6 <_strtod_l+0x1ae>
 8006b88:	4622      	mov	r2, r4
 8006b8a:	4639      	mov	r1, r7
 8006b8c:	f002 fec8 	bl	8009920 <strncmp>
 8006b90:	2800      	cmp	r0, #0
 8006b92:	d032      	beq.n	8006bfa <_strtod_l+0x1d2>
 8006b94:	2000      	movs	r0, #0
 8006b96:	462b      	mov	r3, r5
 8006b98:	465c      	mov	r4, fp
 8006b9a:	4602      	mov	r2, r0
 8006b9c:	9004      	str	r0, [sp, #16]
 8006b9e:	2b65      	cmp	r3, #101	; 0x65
 8006ba0:	d001      	beq.n	8006ba6 <_strtod_l+0x17e>
 8006ba2:	2b45      	cmp	r3, #69	; 0x45
 8006ba4:	d113      	bne.n	8006bce <_strtod_l+0x1a6>
 8006ba6:	b91c      	cbnz	r4, 8006bb0 <_strtod_l+0x188>
 8006ba8:	9b07      	ldr	r3, [sp, #28]
 8006baa:	4303      	orrs	r3, r0
 8006bac:	d099      	beq.n	8006ae2 <_strtod_l+0xba>
 8006bae:	2400      	movs	r4, #0
 8006bb0:	9e1b      	ldr	r6, [sp, #108]	; 0x6c
 8006bb2:	1c73      	adds	r3, r6, #1
 8006bb4:	931b      	str	r3, [sp, #108]	; 0x6c
 8006bb6:	7873      	ldrb	r3, [r6, #1]
 8006bb8:	2b2b      	cmp	r3, #43	; 0x2b
 8006bba:	d078      	beq.n	8006cae <_strtod_l+0x286>
 8006bbc:	2b2d      	cmp	r3, #45	; 0x2d
 8006bbe:	d07b      	beq.n	8006cb8 <_strtod_l+0x290>
 8006bc0:	2700      	movs	r7, #0
 8006bc2:	f1a3 0130 	sub.w	r1, r3, #48	; 0x30
 8006bc6:	2909      	cmp	r1, #9
 8006bc8:	f240 8082 	bls.w	8006cd0 <_strtod_l+0x2a8>
 8006bcc:	961b      	str	r6, [sp, #108]	; 0x6c
 8006bce:	2500      	movs	r5, #0
 8006bd0:	e09e      	b.n	8006d10 <_strtod_l+0x2e8>
 8006bd2:	2300      	movs	r3, #0
 8006bd4:	e7c9      	b.n	8006b6a <_strtod_l+0x142>
 8006bd6:	f1bb 0f08 	cmp.w	fp, #8
 8006bda:	bfd5      	itete	le
 8006bdc:	9906      	ldrle	r1, [sp, #24]
 8006bde:	9905      	ldrgt	r1, [sp, #20]
 8006be0:	fb02 3301 	mlale	r3, r2, r1, r3
 8006be4:	fb02 3301 	mlagt	r3, r2, r1, r3
 8006be8:	f100 0001 	add.w	r0, r0, #1
 8006bec:	bfd4      	ite	le
 8006bee:	9306      	strle	r3, [sp, #24]
 8006bf0:	9305      	strgt	r3, [sp, #20]
 8006bf2:	f10b 0b01 	add.w	fp, fp, #1
 8006bf6:	901b      	str	r0, [sp, #108]	; 0x6c
 8006bf8:	e7bf      	b.n	8006b7a <_strtod_l+0x152>
 8006bfa:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8006bfc:	191a      	adds	r2, r3, r4
 8006bfe:	921b      	str	r2, [sp, #108]	; 0x6c
 8006c00:	5d1b      	ldrb	r3, [r3, r4]
 8006c02:	f1bb 0f00 	cmp.w	fp, #0
 8006c06:	d036      	beq.n	8006c76 <_strtod_l+0x24e>
 8006c08:	465c      	mov	r4, fp
 8006c0a:	9004      	str	r0, [sp, #16]
 8006c0c:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
 8006c10:	2a09      	cmp	r2, #9
 8006c12:	d912      	bls.n	8006c3a <_strtod_l+0x212>
 8006c14:	2201      	movs	r2, #1
 8006c16:	e7c2      	b.n	8006b9e <_strtod_l+0x176>
 8006c18:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8006c1a:	3001      	adds	r0, #1
 8006c1c:	1c5a      	adds	r2, r3, #1
 8006c1e:	921b      	str	r2, [sp, #108]	; 0x6c
 8006c20:	785b      	ldrb	r3, [r3, #1]
 8006c22:	2b30      	cmp	r3, #48	; 0x30
 8006c24:	d0f8      	beq.n	8006c18 <_strtod_l+0x1f0>
 8006c26:	f1a3 0231 	sub.w	r2, r3, #49	; 0x31
 8006c2a:	2a08      	cmp	r2, #8
 8006c2c:	f200 84dc 	bhi.w	80075e8 <_strtod_l+0xbc0>
 8006c30:	9004      	str	r0, [sp, #16]
 8006c32:	2000      	movs	r0, #0
 8006c34:	4604      	mov	r4, r0
 8006c36:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
 8006c38:	9208      	str	r2, [sp, #32]
 8006c3a:	3b30      	subs	r3, #48	; 0x30
 8006c3c:	f100 0201 	add.w	r2, r0, #1
 8006c40:	d013      	beq.n	8006c6a <_strtod_l+0x242>
 8006c42:	9904      	ldr	r1, [sp, #16]
 8006c44:	1905      	adds	r5, r0, r4
 8006c46:	4411      	add	r1, r2
 8006c48:	9104      	str	r1, [sp, #16]
 8006c4a:	4622      	mov	r2, r4
 8006c4c:	210a      	movs	r1, #10
 8006c4e:	42aa      	cmp	r2, r5
 8006c50:	d113      	bne.n	8006c7a <_strtod_l+0x252>
 8006c52:	1822      	adds	r2, r4, r0
 8006c54:	2a08      	cmp	r2, #8
 8006c56:	f104 0401 	add.w	r4, r4, #1
 8006c5a:	4404      	add	r4, r0
 8006c5c:	dc1b      	bgt.n	8006c96 <_strtod_l+0x26e>
 8006c5e:	220a      	movs	r2, #10
 8006c60:	9906      	ldr	r1, [sp, #24]
 8006c62:	fb02 3301 	mla	r3, r2, r1, r3
 8006c66:	9306      	str	r3, [sp, #24]
 8006c68:	2200      	movs	r2, #0
 8006c6a:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8006c6c:	4610      	mov	r0, r2
 8006c6e:	1c59      	adds	r1, r3, #1
 8006c70:	911b      	str	r1, [sp, #108]	; 0x6c
 8006c72:	785b      	ldrb	r3, [r3, #1]
 8006c74:	e7ca      	b.n	8006c0c <_strtod_l+0x1e4>
 8006c76:	4658      	mov	r0, fp
 8006c78:	e7d3      	b.n	8006c22 <_strtod_l+0x1fa>
 8006c7a:	2a08      	cmp	r2, #8
 8006c7c:	dc04      	bgt.n	8006c88 <_strtod_l+0x260>
 8006c7e:	9f06      	ldr	r7, [sp, #24]
 8006c80:	434f      	muls	r7, r1
 8006c82:	9706      	str	r7, [sp, #24]
 8006c84:	3201      	adds	r2, #1
 8006c86:	e7e2      	b.n	8006c4e <_strtod_l+0x226>
 8006c88:	1c57      	adds	r7, r2, #1
 8006c8a:	2f10      	cmp	r7, #16
 8006c8c:	bfde      	ittt	le
 8006c8e:	9f05      	ldrle	r7, [sp, #20]
 8006c90:	434f      	mulle	r7, r1
 8006c92:	9705      	strle	r7, [sp, #20]
 8006c94:	e7f6      	b.n	8006c84 <_strtod_l+0x25c>
 8006c96:	2c10      	cmp	r4, #16
 8006c98:	bfdf      	itttt	le
 8006c9a:	220a      	movle	r2, #10
 8006c9c:	9905      	ldrle	r1, [sp, #20]
 8006c9e:	fb02 3301 	mlale	r3, r2, r1, r3
 8006ca2:	9305      	strle	r3, [sp, #20]
 8006ca4:	e7e0      	b.n	8006c68 <_strtod_l+0x240>
 8006ca6:	2300      	movs	r3, #0
 8006ca8:	2201      	movs	r2, #1
 8006caa:	9304      	str	r3, [sp, #16]
 8006cac:	e77c      	b.n	8006ba8 <_strtod_l+0x180>
 8006cae:	2700      	movs	r7, #0
 8006cb0:	1cb3      	adds	r3, r6, #2
 8006cb2:	931b      	str	r3, [sp, #108]	; 0x6c
 8006cb4:	78b3      	ldrb	r3, [r6, #2]
 8006cb6:	e784      	b.n	8006bc2 <_strtod_l+0x19a>
 8006cb8:	2701      	movs	r7, #1
 8006cba:	e7f9      	b.n	8006cb0 <_strtod_l+0x288>
 8006cbc:	0800a908 	.word	0x0800a908
 8006cc0:	0800a6b8 	.word	0x0800a6b8
 8006cc4:	7ff00000 	.word	0x7ff00000
 8006cc8:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8006cca:	1c59      	adds	r1, r3, #1
 8006ccc:	911b      	str	r1, [sp, #108]	; 0x6c
 8006cce:	785b      	ldrb	r3, [r3, #1]
 8006cd0:	2b30      	cmp	r3, #48	; 0x30
 8006cd2:	d0f9      	beq.n	8006cc8 <_strtod_l+0x2a0>
 8006cd4:	f1a3 0131 	sub.w	r1, r3, #49	; 0x31
 8006cd8:	2908      	cmp	r1, #8
 8006cda:	f63f af78 	bhi.w	8006bce <_strtod_l+0x1a6>
 8006cde:	f04f 0e0a 	mov.w	lr, #10
 8006ce2:	f1a3 0c30 	sub.w	ip, r3, #48	; 0x30
 8006ce6:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8006ce8:	9309      	str	r3, [sp, #36]	; 0x24
 8006cea:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8006cec:	1c59      	adds	r1, r3, #1
 8006cee:	911b      	str	r1, [sp, #108]	; 0x6c
 8006cf0:	785b      	ldrb	r3, [r3, #1]
 8006cf2:	f1a3 0530 	sub.w	r5, r3, #48	; 0x30
 8006cf6:	2d09      	cmp	r5, #9
 8006cf8:	d935      	bls.n	8006d66 <_strtod_l+0x33e>
 8006cfa:	9d09      	ldr	r5, [sp, #36]	; 0x24
 8006cfc:	1b49      	subs	r1, r1, r5
 8006cfe:	2908      	cmp	r1, #8
 8006d00:	f644 651f 	movw	r5, #19999	; 0x4e1f
 8006d04:	dc02      	bgt.n	8006d0c <_strtod_l+0x2e4>
 8006d06:	4565      	cmp	r5, ip
 8006d08:	bfa8      	it	ge
 8006d0a:	4665      	movge	r5, ip
 8006d0c:	b107      	cbz	r7, 8006d10 <_strtod_l+0x2e8>
 8006d0e:	426d      	negs	r5, r5
 8006d10:	2c00      	cmp	r4, #0
 8006d12:	d14c      	bne.n	8006dae <_strtod_l+0x386>
 8006d14:	9907      	ldr	r1, [sp, #28]
 8006d16:	4301      	orrs	r1, r0
 8006d18:	f47f aec7 	bne.w	8006aaa <_strtod_l+0x82>
 8006d1c:	2a00      	cmp	r2, #0
 8006d1e:	f47f aee0 	bne.w	8006ae2 <_strtod_l+0xba>
 8006d22:	2b69      	cmp	r3, #105	; 0x69
 8006d24:	d026      	beq.n	8006d74 <_strtod_l+0x34c>
 8006d26:	dc23      	bgt.n	8006d70 <_strtod_l+0x348>
 8006d28:	2b49      	cmp	r3, #73	; 0x49
 8006d2a:	d023      	beq.n	8006d74 <_strtod_l+0x34c>
 8006d2c:	2b4e      	cmp	r3, #78	; 0x4e
 8006d2e:	f47f aed8 	bne.w	8006ae2 <_strtod_l+0xba>
 8006d32:	499c      	ldr	r1, [pc, #624]	; (8006fa4 <_strtod_l+0x57c>)
 8006d34:	a81b      	add	r0, sp, #108	; 0x6c
 8006d36:	f001 fe2b 	bl	8008990 <__match>
 8006d3a:	2800      	cmp	r0, #0
 8006d3c:	f43f aed1 	beq.w	8006ae2 <_strtod_l+0xba>
 8006d40:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8006d42:	781b      	ldrb	r3, [r3, #0]
 8006d44:	2b28      	cmp	r3, #40	; 0x28
 8006d46:	d12c      	bne.n	8006da2 <_strtod_l+0x37a>
 8006d48:	4997      	ldr	r1, [pc, #604]	; (8006fa8 <_strtod_l+0x580>)
 8006d4a:	aa1e      	add	r2, sp, #120	; 0x78
 8006d4c:	a81b      	add	r0, sp, #108	; 0x6c
 8006d4e:	f001 fe33 	bl	80089b8 <__hexnan>
 8006d52:	2805      	cmp	r0, #5
 8006d54:	d125      	bne.n	8006da2 <_strtod_l+0x37a>
 8006d56:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 8006d58:	f8dd 8078 	ldr.w	r8, [sp, #120]	; 0x78
 8006d5c:	f043 49ff 	orr.w	r9, r3, #2139095040	; 0x7f800000
 8006d60:	f449 09e0 	orr.w	r9, r9, #7340032	; 0x700000
 8006d64:	e6a1      	b.n	8006aaa <_strtod_l+0x82>
 8006d66:	fb0e 3c0c 	mla	ip, lr, ip, r3
 8006d6a:	f1ac 0c30 	sub.w	ip, ip, #48	; 0x30
 8006d6e:	e7bc      	b.n	8006cea <_strtod_l+0x2c2>
 8006d70:	2b6e      	cmp	r3, #110	; 0x6e
 8006d72:	e7dc      	b.n	8006d2e <_strtod_l+0x306>
 8006d74:	498d      	ldr	r1, [pc, #564]	; (8006fac <_strtod_l+0x584>)
 8006d76:	a81b      	add	r0, sp, #108	; 0x6c
 8006d78:	f001 fe0a 	bl	8008990 <__match>
 8006d7c:	2800      	cmp	r0, #0
 8006d7e:	f43f aeb0 	beq.w	8006ae2 <_strtod_l+0xba>
 8006d82:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8006d84:	498a      	ldr	r1, [pc, #552]	; (8006fb0 <_strtod_l+0x588>)
 8006d86:	3b01      	subs	r3, #1
 8006d88:	a81b      	add	r0, sp, #108	; 0x6c
 8006d8a:	931b      	str	r3, [sp, #108]	; 0x6c
 8006d8c:	f001 fe00 	bl	8008990 <__match>
 8006d90:	b910      	cbnz	r0, 8006d98 <_strtod_l+0x370>
 8006d92:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8006d94:	3301      	adds	r3, #1
 8006d96:	931b      	str	r3, [sp, #108]	; 0x6c
 8006d98:	f04f 0800 	mov.w	r8, #0
 8006d9c:	f8df 9220 	ldr.w	r9, [pc, #544]	; 8006fc0 <_strtod_l+0x598>
 8006da0:	e683      	b.n	8006aaa <_strtod_l+0x82>
 8006da2:	4884      	ldr	r0, [pc, #528]	; (8006fb4 <_strtod_l+0x58c>)
 8006da4:	f002 fda6 	bl	80098f4 <nan>
 8006da8:	4680      	mov	r8, r0
 8006daa:	4689      	mov	r9, r1
 8006dac:	e67d      	b.n	8006aaa <_strtod_l+0x82>
 8006dae:	9b04      	ldr	r3, [sp, #16]
 8006db0:	f1bb 0f00 	cmp.w	fp, #0
 8006db4:	bf08      	it	eq
 8006db6:	46a3      	moveq	fp, r4
 8006db8:	1aeb      	subs	r3, r5, r3
 8006dba:	2c10      	cmp	r4, #16
 8006dbc:	9806      	ldr	r0, [sp, #24]
 8006dbe:	4626      	mov	r6, r4
 8006dc0:	9307      	str	r3, [sp, #28]
 8006dc2:	bfa8      	it	ge
 8006dc4:	2610      	movge	r6, #16
 8006dc6:	f7f9 fb0d 	bl	80003e4 <__aeabi_ui2d>
 8006dca:	2c09      	cmp	r4, #9
 8006dcc:	4680      	mov	r8, r0
 8006dce:	4689      	mov	r9, r1
 8006dd0:	dd13      	ble.n	8006dfa <_strtod_l+0x3d2>
 8006dd2:	4b79      	ldr	r3, [pc, #484]	; (8006fb8 <_strtod_l+0x590>)
 8006dd4:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 8006dd8:	e953 2312 	ldrd	r2, r3, [r3, #-72]	; 0x48
 8006ddc:	f7f9 fb7c 	bl	80004d8 <__aeabi_dmul>
 8006de0:	4680      	mov	r8, r0
 8006de2:	9805      	ldr	r0, [sp, #20]
 8006de4:	4689      	mov	r9, r1
 8006de6:	f7f9 fafd 	bl	80003e4 <__aeabi_ui2d>
 8006dea:	4602      	mov	r2, r0
 8006dec:	460b      	mov	r3, r1
 8006dee:	4640      	mov	r0, r8
 8006df0:	4649      	mov	r1, r9
 8006df2:	f7f9 f9bb 	bl	800016c <__adddf3>
 8006df6:	4680      	mov	r8, r0
 8006df8:	4689      	mov	r9, r1
 8006dfa:	2c0f      	cmp	r4, #15
 8006dfc:	dc36      	bgt.n	8006e6c <_strtod_l+0x444>
 8006dfe:	9b07      	ldr	r3, [sp, #28]
 8006e00:	2b00      	cmp	r3, #0
 8006e02:	f43f ae52 	beq.w	8006aaa <_strtod_l+0x82>
 8006e06:	dd22      	ble.n	8006e4e <_strtod_l+0x426>
 8006e08:	2b16      	cmp	r3, #22
 8006e0a:	dc09      	bgt.n	8006e20 <_strtod_l+0x3f8>
 8006e0c:	4c6a      	ldr	r4, [pc, #424]	; (8006fb8 <_strtod_l+0x590>)
 8006e0e:	4642      	mov	r2, r8
 8006e10:	eb04 04c3 	add.w	r4, r4, r3, lsl #3
 8006e14:	464b      	mov	r3, r9
 8006e16:	e9d4 0100 	ldrd	r0, r1, [r4]
 8006e1a:	f7f9 fb5d 	bl	80004d8 <__aeabi_dmul>
 8006e1e:	e7c3      	b.n	8006da8 <_strtod_l+0x380>
 8006e20:	9a07      	ldr	r2, [sp, #28]
 8006e22:	f1c4 0325 	rsb	r3, r4, #37	; 0x25
 8006e26:	4293      	cmp	r3, r2
 8006e28:	db20      	blt.n	8006e6c <_strtod_l+0x444>
 8006e2a:	4d63      	ldr	r5, [pc, #396]	; (8006fb8 <_strtod_l+0x590>)
 8006e2c:	f1c4 040f 	rsb	r4, r4, #15
 8006e30:	eb05 01c4 	add.w	r1, r5, r4, lsl #3
 8006e34:	4642      	mov	r2, r8
 8006e36:	e9d1 0100 	ldrd	r0, r1, [r1]
 8006e3a:	464b      	mov	r3, r9
 8006e3c:	f7f9 fb4c 	bl	80004d8 <__aeabi_dmul>
 8006e40:	9b07      	ldr	r3, [sp, #28]
 8006e42:	1b1c      	subs	r4, r3, r4
 8006e44:	eb05 05c4 	add.w	r5, r5, r4, lsl #3
 8006e48:	e9d5 2300 	ldrd	r2, r3, [r5]
 8006e4c:	e7e5      	b.n	8006e1a <_strtod_l+0x3f2>
 8006e4e:	9b07      	ldr	r3, [sp, #28]
 8006e50:	3316      	adds	r3, #22
 8006e52:	db0b      	blt.n	8006e6c <_strtod_l+0x444>
 8006e54:	9b04      	ldr	r3, [sp, #16]
 8006e56:	4a58      	ldr	r2, [pc, #352]	; (8006fb8 <_strtod_l+0x590>)
 8006e58:	1b5d      	subs	r5, r3, r5
 8006e5a:	eb02 05c5 	add.w	r5, r2, r5, lsl #3
 8006e5e:	4640      	mov	r0, r8
 8006e60:	e9d5 2300 	ldrd	r2, r3, [r5]
 8006e64:	4649      	mov	r1, r9
 8006e66:	f7f9 fc61 	bl	800072c <__aeabi_ddiv>
 8006e6a:	e79d      	b.n	8006da8 <_strtod_l+0x380>
 8006e6c:	9b07      	ldr	r3, [sp, #28]
 8006e6e:	1ba6      	subs	r6, r4, r6
 8006e70:	441e      	add	r6, r3
 8006e72:	2e00      	cmp	r6, #0
 8006e74:	dd71      	ble.n	8006f5a <_strtod_l+0x532>
 8006e76:	f016 030f 	ands.w	r3, r6, #15
 8006e7a:	d00a      	beq.n	8006e92 <_strtod_l+0x46a>
 8006e7c:	494e      	ldr	r1, [pc, #312]	; (8006fb8 <_strtod_l+0x590>)
 8006e7e:	4642      	mov	r2, r8
 8006e80:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 8006e84:	e9d1 0100 	ldrd	r0, r1, [r1]
 8006e88:	464b      	mov	r3, r9
 8006e8a:	f7f9 fb25 	bl	80004d8 <__aeabi_dmul>
 8006e8e:	4680      	mov	r8, r0
 8006e90:	4689      	mov	r9, r1
 8006e92:	f036 060f 	bics.w	r6, r6, #15
 8006e96:	d050      	beq.n	8006f3a <_strtod_l+0x512>
 8006e98:	f5b6 7f9a 	cmp.w	r6, #308	; 0x134
 8006e9c:	dd27      	ble.n	8006eee <_strtod_l+0x4c6>
 8006e9e:	f04f 0b00 	mov.w	fp, #0
 8006ea2:	f8cd b010 	str.w	fp, [sp, #16]
 8006ea6:	f8cd b020 	str.w	fp, [sp, #32]
 8006eaa:	f8cd b018 	str.w	fp, [sp, #24]
 8006eae:	2322      	movs	r3, #34	; 0x22
 8006eb0:	f04f 0800 	mov.w	r8, #0
 8006eb4:	f8df 9108 	ldr.w	r9, [pc, #264]	; 8006fc0 <_strtod_l+0x598>
 8006eb8:	f8ca 3000 	str.w	r3, [sl]
 8006ebc:	9b08      	ldr	r3, [sp, #32]
 8006ebe:	2b00      	cmp	r3, #0
 8006ec0:	f43f adf3 	beq.w	8006aaa <_strtod_l+0x82>
 8006ec4:	4650      	mov	r0, sl
 8006ec6:	991c      	ldr	r1, [sp, #112]	; 0x70
 8006ec8:	f001 fe8c 	bl	8008be4 <_Bfree>
 8006ecc:	4650      	mov	r0, sl
 8006ece:	9906      	ldr	r1, [sp, #24]
 8006ed0:	f001 fe88 	bl	8008be4 <_Bfree>
 8006ed4:	4650      	mov	r0, sl
 8006ed6:	9904      	ldr	r1, [sp, #16]
 8006ed8:	f001 fe84 	bl	8008be4 <_Bfree>
 8006edc:	4650      	mov	r0, sl
 8006ede:	9908      	ldr	r1, [sp, #32]
 8006ee0:	f001 fe80 	bl	8008be4 <_Bfree>
 8006ee4:	4659      	mov	r1, fp
 8006ee6:	4650      	mov	r0, sl
 8006ee8:	f001 fe7c 	bl	8008be4 <_Bfree>
 8006eec:	e5dd      	b.n	8006aaa <_strtod_l+0x82>
 8006eee:	2300      	movs	r3, #0
 8006ef0:	4640      	mov	r0, r8
 8006ef2:	4649      	mov	r1, r9
 8006ef4:	461f      	mov	r7, r3
 8006ef6:	1136      	asrs	r6, r6, #4
 8006ef8:	2e01      	cmp	r6, #1
 8006efa:	dc21      	bgt.n	8006f40 <_strtod_l+0x518>
 8006efc:	b10b      	cbz	r3, 8006f02 <_strtod_l+0x4da>
 8006efe:	4680      	mov	r8, r0
 8006f00:	4689      	mov	r9, r1
 8006f02:	4b2e      	ldr	r3, [pc, #184]	; (8006fbc <_strtod_l+0x594>)
 8006f04:	f1a9 7954 	sub.w	r9, r9, #55574528	; 0x3500000
 8006f08:	eb03 07c7 	add.w	r7, r3, r7, lsl #3
 8006f0c:	4642      	mov	r2, r8
 8006f0e:	e9d7 0100 	ldrd	r0, r1, [r7]
 8006f12:	464b      	mov	r3, r9
 8006f14:	f7f9 fae0 	bl	80004d8 <__aeabi_dmul>
 8006f18:	4b29      	ldr	r3, [pc, #164]	; (8006fc0 <_strtod_l+0x598>)
 8006f1a:	460a      	mov	r2, r1
 8006f1c:	400b      	ands	r3, r1
 8006f1e:	4929      	ldr	r1, [pc, #164]	; (8006fc4 <_strtod_l+0x59c>)
 8006f20:	4680      	mov	r8, r0
 8006f22:	428b      	cmp	r3, r1
 8006f24:	d8bb      	bhi.n	8006e9e <_strtod_l+0x476>
 8006f26:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
 8006f2a:	428b      	cmp	r3, r1
 8006f2c:	bf86      	itte	hi
 8006f2e:	f04f 38ff 	movhi.w	r8, #4294967295
 8006f32:	f8df 9094 	ldrhi.w	r9, [pc, #148]	; 8006fc8 <_strtod_l+0x5a0>
 8006f36:	f102 7954 	addls.w	r9, r2, #55574528	; 0x3500000
 8006f3a:	2300      	movs	r3, #0
 8006f3c:	9305      	str	r3, [sp, #20]
 8006f3e:	e07e      	b.n	800703e <_strtod_l+0x616>
 8006f40:	07f2      	lsls	r2, r6, #31
 8006f42:	d507      	bpl.n	8006f54 <_strtod_l+0x52c>
 8006f44:	4b1d      	ldr	r3, [pc, #116]	; (8006fbc <_strtod_l+0x594>)
 8006f46:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 8006f4a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006f4e:	f7f9 fac3 	bl	80004d8 <__aeabi_dmul>
 8006f52:	2301      	movs	r3, #1
 8006f54:	3701      	adds	r7, #1
 8006f56:	1076      	asrs	r6, r6, #1
 8006f58:	e7ce      	b.n	8006ef8 <_strtod_l+0x4d0>
 8006f5a:	d0ee      	beq.n	8006f3a <_strtod_l+0x512>
 8006f5c:	4276      	negs	r6, r6
 8006f5e:	f016 020f 	ands.w	r2, r6, #15
 8006f62:	d00a      	beq.n	8006f7a <_strtod_l+0x552>
 8006f64:	4b14      	ldr	r3, [pc, #80]	; (8006fb8 <_strtod_l+0x590>)
 8006f66:	4640      	mov	r0, r8
 8006f68:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8006f6c:	4649      	mov	r1, r9
 8006f6e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006f72:	f7f9 fbdb 	bl	800072c <__aeabi_ddiv>
 8006f76:	4680      	mov	r8, r0
 8006f78:	4689      	mov	r9, r1
 8006f7a:	1136      	asrs	r6, r6, #4
 8006f7c:	d0dd      	beq.n	8006f3a <_strtod_l+0x512>
 8006f7e:	2e1f      	cmp	r6, #31
 8006f80:	dd24      	ble.n	8006fcc <_strtod_l+0x5a4>
 8006f82:	f04f 0b00 	mov.w	fp, #0
 8006f86:	f8cd b010 	str.w	fp, [sp, #16]
 8006f8a:	f8cd b020 	str.w	fp, [sp, #32]
 8006f8e:	f8cd b018 	str.w	fp, [sp, #24]
 8006f92:	2322      	movs	r3, #34	; 0x22
 8006f94:	f04f 0800 	mov.w	r8, #0
 8006f98:	f04f 0900 	mov.w	r9, #0
 8006f9c:	f8ca 3000 	str.w	r3, [sl]
 8006fa0:	e78c      	b.n	8006ebc <_strtod_l+0x494>
 8006fa2:	bf00      	nop
 8006fa4:	0800a689 	.word	0x0800a689
 8006fa8:	0800a6cc 	.word	0x0800a6cc
 8006fac:	0800a681 	.word	0x0800a681
 8006fb0:	0800a80c 	.word	0x0800a80c
 8006fb4:	0800aac8 	.word	0x0800aac8
 8006fb8:	0800a9a8 	.word	0x0800a9a8
 8006fbc:	0800a980 	.word	0x0800a980
 8006fc0:	7ff00000 	.word	0x7ff00000
 8006fc4:	7ca00000 	.word	0x7ca00000
 8006fc8:	7fefffff 	.word	0x7fefffff
 8006fcc:	f016 0310 	ands.w	r3, r6, #16
 8006fd0:	bf18      	it	ne
 8006fd2:	236a      	movne	r3, #106	; 0x6a
 8006fd4:	4640      	mov	r0, r8
 8006fd6:	9305      	str	r3, [sp, #20]
 8006fd8:	4649      	mov	r1, r9
 8006fda:	2300      	movs	r3, #0
 8006fdc:	4fb2      	ldr	r7, [pc, #712]	; (80072a8 <_strtod_l+0x880>)
 8006fde:	07f2      	lsls	r2, r6, #31
 8006fe0:	d504      	bpl.n	8006fec <_strtod_l+0x5c4>
 8006fe2:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006fe6:	f7f9 fa77 	bl	80004d8 <__aeabi_dmul>
 8006fea:	2301      	movs	r3, #1
 8006fec:	1076      	asrs	r6, r6, #1
 8006fee:	f107 0708 	add.w	r7, r7, #8
 8006ff2:	d1f4      	bne.n	8006fde <_strtod_l+0x5b6>
 8006ff4:	b10b      	cbz	r3, 8006ffa <_strtod_l+0x5d2>
 8006ff6:	4680      	mov	r8, r0
 8006ff8:	4689      	mov	r9, r1
 8006ffa:	9b05      	ldr	r3, [sp, #20]
 8006ffc:	b1bb      	cbz	r3, 800702e <_strtod_l+0x606>
 8006ffe:	f3c9 530a 	ubfx	r3, r9, #20, #11
 8007002:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 8007006:	2b00      	cmp	r3, #0
 8007008:	4649      	mov	r1, r9
 800700a:	dd10      	ble.n	800702e <_strtod_l+0x606>
 800700c:	2b1f      	cmp	r3, #31
 800700e:	f340 812b 	ble.w	8007268 <_strtod_l+0x840>
 8007012:	2b34      	cmp	r3, #52	; 0x34
 8007014:	bfd8      	it	le
 8007016:	f04f 32ff 	movle.w	r2, #4294967295
 800701a:	f04f 0800 	mov.w	r8, #0
 800701e:	bfcf      	iteee	gt
 8007020:	f04f 795c 	movgt.w	r9, #57671680	; 0x3700000
 8007024:	3b20      	suble	r3, #32
 8007026:	fa02 f303 	lslle.w	r3, r2, r3
 800702a:	ea03 0901 	andle.w	r9, r3, r1
 800702e:	2200      	movs	r2, #0
 8007030:	2300      	movs	r3, #0
 8007032:	4640      	mov	r0, r8
 8007034:	4649      	mov	r1, r9
 8007036:	f7f9 fcb7 	bl	80009a8 <__aeabi_dcmpeq>
 800703a:	2800      	cmp	r0, #0
 800703c:	d1a1      	bne.n	8006f82 <_strtod_l+0x55a>
 800703e:	9b06      	ldr	r3, [sp, #24]
 8007040:	465a      	mov	r2, fp
 8007042:	9300      	str	r3, [sp, #0]
 8007044:	4650      	mov	r0, sl
 8007046:	4623      	mov	r3, r4
 8007048:	9908      	ldr	r1, [sp, #32]
 800704a:	f001 fe37 	bl	8008cbc <__s2b>
 800704e:	9008      	str	r0, [sp, #32]
 8007050:	2800      	cmp	r0, #0
 8007052:	f43f af24 	beq.w	8006e9e <_strtod_l+0x476>
 8007056:	9b04      	ldr	r3, [sp, #16]
 8007058:	f04f 0b00 	mov.w	fp, #0
 800705c:	1b5d      	subs	r5, r3, r5
 800705e:	9b07      	ldr	r3, [sp, #28]
 8007060:	f8cd b010 	str.w	fp, [sp, #16]
 8007064:	2b00      	cmp	r3, #0
 8007066:	bfb4      	ite	lt
 8007068:	462b      	movlt	r3, r5
 800706a:	2300      	movge	r3, #0
 800706c:	930e      	str	r3, [sp, #56]	; 0x38
 800706e:	9b07      	ldr	r3, [sp, #28]
 8007070:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8007074:	9316      	str	r3, [sp, #88]	; 0x58
 8007076:	9b08      	ldr	r3, [sp, #32]
 8007078:	4650      	mov	r0, sl
 800707a:	6859      	ldr	r1, [r3, #4]
 800707c:	f001 fd72 	bl	8008b64 <_Balloc>
 8007080:	9006      	str	r0, [sp, #24]
 8007082:	2800      	cmp	r0, #0
 8007084:	f43f af13 	beq.w	8006eae <_strtod_l+0x486>
 8007088:	9b08      	ldr	r3, [sp, #32]
 800708a:	300c      	adds	r0, #12
 800708c:	691a      	ldr	r2, [r3, #16]
 800708e:	f103 010c 	add.w	r1, r3, #12
 8007092:	3202      	adds	r2, #2
 8007094:	0092      	lsls	r2, r2, #2
 8007096:	f001 fd57 	bl	8008b48 <memcpy>
 800709a:	ab1e      	add	r3, sp, #120	; 0x78
 800709c:	9301      	str	r3, [sp, #4]
 800709e:	ab1d      	add	r3, sp, #116	; 0x74
 80070a0:	9300      	str	r3, [sp, #0]
 80070a2:	4642      	mov	r2, r8
 80070a4:	464b      	mov	r3, r9
 80070a6:	4650      	mov	r0, sl
 80070a8:	e9cd 890a 	strd	r8, r9, [sp, #40]	; 0x28
 80070ac:	f002 f944 	bl	8009338 <__d2b>
 80070b0:	901c      	str	r0, [sp, #112]	; 0x70
 80070b2:	2800      	cmp	r0, #0
 80070b4:	f43f aefb 	beq.w	8006eae <_strtod_l+0x486>
 80070b8:	2101      	movs	r1, #1
 80070ba:	4650      	mov	r0, sl
 80070bc:	f001 fe96 	bl	8008dec <__i2b>
 80070c0:	4603      	mov	r3, r0
 80070c2:	9004      	str	r0, [sp, #16]
 80070c4:	2800      	cmp	r0, #0
 80070c6:	f43f aef2 	beq.w	8006eae <_strtod_l+0x486>
 80070ca:	9d1d      	ldr	r5, [sp, #116]	; 0x74
 80070cc:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 80070ce:	2d00      	cmp	r5, #0
 80070d0:	bfab      	itete	ge
 80070d2:	9b0e      	ldrge	r3, [sp, #56]	; 0x38
 80070d4:	9b16      	ldrlt	r3, [sp, #88]	; 0x58
 80070d6:	18ee      	addge	r6, r5, r3
 80070d8:	1b5c      	sublt	r4, r3, r5
 80070da:	9b05      	ldr	r3, [sp, #20]
 80070dc:	bfa8      	it	ge
 80070de:	9c16      	ldrge	r4, [sp, #88]	; 0x58
 80070e0:	eba5 0503 	sub.w	r5, r5, r3
 80070e4:	4415      	add	r5, r2
 80070e6:	4b71      	ldr	r3, [pc, #452]	; (80072ac <_strtod_l+0x884>)
 80070e8:	f105 35ff 	add.w	r5, r5, #4294967295
 80070ec:	bfb8      	it	lt
 80070ee:	9e0e      	ldrlt	r6, [sp, #56]	; 0x38
 80070f0:	429d      	cmp	r5, r3
 80070f2:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 80070f6:	f280 80c9 	bge.w	800728c <_strtod_l+0x864>
 80070fa:	1b5b      	subs	r3, r3, r5
 80070fc:	2b1f      	cmp	r3, #31
 80070fe:	f04f 0701 	mov.w	r7, #1
 8007102:	eba2 0203 	sub.w	r2, r2, r3
 8007106:	f300 80b6 	bgt.w	8007276 <_strtod_l+0x84e>
 800710a:	2500      	movs	r5, #0
 800710c:	fa07 f303 	lsl.w	r3, r7, r3
 8007110:	930f      	str	r3, [sp, #60]	; 0x3c
 8007112:	18b7      	adds	r7, r6, r2
 8007114:	9b05      	ldr	r3, [sp, #20]
 8007116:	42be      	cmp	r6, r7
 8007118:	4414      	add	r4, r2
 800711a:	441c      	add	r4, r3
 800711c:	4633      	mov	r3, r6
 800711e:	bfa8      	it	ge
 8007120:	463b      	movge	r3, r7
 8007122:	42a3      	cmp	r3, r4
 8007124:	bfa8      	it	ge
 8007126:	4623      	movge	r3, r4
 8007128:	2b00      	cmp	r3, #0
 800712a:	bfc2      	ittt	gt
 800712c:	1aff      	subgt	r7, r7, r3
 800712e:	1ae4      	subgt	r4, r4, r3
 8007130:	1af6      	subgt	r6, r6, r3
 8007132:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8007134:	2b00      	cmp	r3, #0
 8007136:	dd17      	ble.n	8007168 <_strtod_l+0x740>
 8007138:	461a      	mov	r2, r3
 800713a:	4650      	mov	r0, sl
 800713c:	9904      	ldr	r1, [sp, #16]
 800713e:	f001 ff0f 	bl	8008f60 <__pow5mult>
 8007142:	9004      	str	r0, [sp, #16]
 8007144:	2800      	cmp	r0, #0
 8007146:	f43f aeb2 	beq.w	8006eae <_strtod_l+0x486>
 800714a:	4601      	mov	r1, r0
 800714c:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 800714e:	4650      	mov	r0, sl
 8007150:	f001 fe62 	bl	8008e18 <__multiply>
 8007154:	9009      	str	r0, [sp, #36]	; 0x24
 8007156:	2800      	cmp	r0, #0
 8007158:	f43f aea9 	beq.w	8006eae <_strtod_l+0x486>
 800715c:	4650      	mov	r0, sl
 800715e:	991c      	ldr	r1, [sp, #112]	; 0x70
 8007160:	f001 fd40 	bl	8008be4 <_Bfree>
 8007164:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007166:	931c      	str	r3, [sp, #112]	; 0x70
 8007168:	2f00      	cmp	r7, #0
 800716a:	f300 8093 	bgt.w	8007294 <_strtod_l+0x86c>
 800716e:	9b07      	ldr	r3, [sp, #28]
 8007170:	2b00      	cmp	r3, #0
 8007172:	dd08      	ble.n	8007186 <_strtod_l+0x75e>
 8007174:	4650      	mov	r0, sl
 8007176:	9a16      	ldr	r2, [sp, #88]	; 0x58
 8007178:	9906      	ldr	r1, [sp, #24]
 800717a:	f001 fef1 	bl	8008f60 <__pow5mult>
 800717e:	9006      	str	r0, [sp, #24]
 8007180:	2800      	cmp	r0, #0
 8007182:	f43f ae94 	beq.w	8006eae <_strtod_l+0x486>
 8007186:	2c00      	cmp	r4, #0
 8007188:	dd08      	ble.n	800719c <_strtod_l+0x774>
 800718a:	4622      	mov	r2, r4
 800718c:	4650      	mov	r0, sl
 800718e:	9906      	ldr	r1, [sp, #24]
 8007190:	f001 ff40 	bl	8009014 <__lshift>
 8007194:	9006      	str	r0, [sp, #24]
 8007196:	2800      	cmp	r0, #0
 8007198:	f43f ae89 	beq.w	8006eae <_strtod_l+0x486>
 800719c:	2e00      	cmp	r6, #0
 800719e:	dd08      	ble.n	80071b2 <_strtod_l+0x78a>
 80071a0:	4632      	mov	r2, r6
 80071a2:	4650      	mov	r0, sl
 80071a4:	9904      	ldr	r1, [sp, #16]
 80071a6:	f001 ff35 	bl	8009014 <__lshift>
 80071aa:	9004      	str	r0, [sp, #16]
 80071ac:	2800      	cmp	r0, #0
 80071ae:	f43f ae7e 	beq.w	8006eae <_strtod_l+0x486>
 80071b2:	4650      	mov	r0, sl
 80071b4:	9a06      	ldr	r2, [sp, #24]
 80071b6:	991c      	ldr	r1, [sp, #112]	; 0x70
 80071b8:	f001 ffb4 	bl	8009124 <__mdiff>
 80071bc:	4683      	mov	fp, r0
 80071be:	2800      	cmp	r0, #0
 80071c0:	f43f ae75 	beq.w	8006eae <_strtod_l+0x486>
 80071c4:	2400      	movs	r4, #0
 80071c6:	68c3      	ldr	r3, [r0, #12]
 80071c8:	9904      	ldr	r1, [sp, #16]
 80071ca:	60c4      	str	r4, [r0, #12]
 80071cc:	930d      	str	r3, [sp, #52]	; 0x34
 80071ce:	f001 ff8d 	bl	80090ec <__mcmp>
 80071d2:	42a0      	cmp	r0, r4
 80071d4:	da70      	bge.n	80072b8 <_strtod_l+0x890>
 80071d6:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80071d8:	ea53 0308 	orrs.w	r3, r3, r8
 80071dc:	f040 8096 	bne.w	800730c <_strtod_l+0x8e4>
 80071e0:	f3c9 0313 	ubfx	r3, r9, #0, #20
 80071e4:	2b00      	cmp	r3, #0
 80071e6:	f040 8091 	bne.w	800730c <_strtod_l+0x8e4>
 80071ea:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 80071ee:	0d1b      	lsrs	r3, r3, #20
 80071f0:	051b      	lsls	r3, r3, #20
 80071f2:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 80071f6:	f240 8089 	bls.w	800730c <_strtod_l+0x8e4>
 80071fa:	f8db 3014 	ldr.w	r3, [fp, #20]
 80071fe:	b923      	cbnz	r3, 800720a <_strtod_l+0x7e2>
 8007200:	f8db 3010 	ldr.w	r3, [fp, #16]
 8007204:	2b01      	cmp	r3, #1
 8007206:	f340 8081 	ble.w	800730c <_strtod_l+0x8e4>
 800720a:	4659      	mov	r1, fp
 800720c:	2201      	movs	r2, #1
 800720e:	4650      	mov	r0, sl
 8007210:	f001 ff00 	bl	8009014 <__lshift>
 8007214:	9904      	ldr	r1, [sp, #16]
 8007216:	4683      	mov	fp, r0
 8007218:	f001 ff68 	bl	80090ec <__mcmp>
 800721c:	2800      	cmp	r0, #0
 800721e:	dd75      	ble.n	800730c <_strtod_l+0x8e4>
 8007220:	9905      	ldr	r1, [sp, #20]
 8007222:	464b      	mov	r3, r9
 8007224:	4a22      	ldr	r2, [pc, #136]	; (80072b0 <_strtod_l+0x888>)
 8007226:	2900      	cmp	r1, #0
 8007228:	f000 8091 	beq.w	800734e <_strtod_l+0x926>
 800722c:	ea02 0109 	and.w	r1, r2, r9
 8007230:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
 8007234:	f300 808b 	bgt.w	800734e <_strtod_l+0x926>
 8007238:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
 800723c:	f77f aea9 	ble.w	8006f92 <_strtod_l+0x56a>
 8007240:	2300      	movs	r3, #0
 8007242:	4a1c      	ldr	r2, [pc, #112]	; (80072b4 <_strtod_l+0x88c>)
 8007244:	4640      	mov	r0, r8
 8007246:	e9cd 3214 	strd	r3, r2, [sp, #80]	; 0x50
 800724a:	4649      	mov	r1, r9
 800724c:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	; 0x50
 8007250:	f7f9 f942 	bl	80004d8 <__aeabi_dmul>
 8007254:	460b      	mov	r3, r1
 8007256:	4303      	orrs	r3, r0
 8007258:	bf08      	it	eq
 800725a:	2322      	moveq	r3, #34	; 0x22
 800725c:	4680      	mov	r8, r0
 800725e:	4689      	mov	r9, r1
 8007260:	bf08      	it	eq
 8007262:	f8ca 3000 	streq.w	r3, [sl]
 8007266:	e62d      	b.n	8006ec4 <_strtod_l+0x49c>
 8007268:	f04f 32ff 	mov.w	r2, #4294967295
 800726c:	fa02 f303 	lsl.w	r3, r2, r3
 8007270:	ea03 0808 	and.w	r8, r3, r8
 8007274:	e6db      	b.n	800702e <_strtod_l+0x606>
 8007276:	f1c5 457f 	rsb	r5, r5, #4278190080	; 0xff000000
 800727a:	f505 057f 	add.w	r5, r5, #16711680	; 0xff0000
 800727e:	f505 457b 	add.w	r5, r5, #64256	; 0xfb00
 8007282:	35e2      	adds	r5, #226	; 0xe2
 8007284:	fa07 f505 	lsl.w	r5, r7, r5
 8007288:	970f      	str	r7, [sp, #60]	; 0x3c
 800728a:	e742      	b.n	8007112 <_strtod_l+0x6ea>
 800728c:	2301      	movs	r3, #1
 800728e:	2500      	movs	r5, #0
 8007290:	930f      	str	r3, [sp, #60]	; 0x3c
 8007292:	e73e      	b.n	8007112 <_strtod_l+0x6ea>
 8007294:	463a      	mov	r2, r7
 8007296:	4650      	mov	r0, sl
 8007298:	991c      	ldr	r1, [sp, #112]	; 0x70
 800729a:	f001 febb 	bl	8009014 <__lshift>
 800729e:	901c      	str	r0, [sp, #112]	; 0x70
 80072a0:	2800      	cmp	r0, #0
 80072a2:	f47f af64 	bne.w	800716e <_strtod_l+0x746>
 80072a6:	e602      	b.n	8006eae <_strtod_l+0x486>
 80072a8:	0800a6e0 	.word	0x0800a6e0
 80072ac:	fffffc02 	.word	0xfffffc02
 80072b0:	7ff00000 	.word	0x7ff00000
 80072b4:	39500000 	.word	0x39500000
 80072b8:	f8cd 9024 	str.w	r9, [sp, #36]	; 0x24
 80072bc:	d166      	bne.n	800738c <_strtod_l+0x964>
 80072be:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 80072c0:	f3c9 0313 	ubfx	r3, r9, #0, #20
 80072c4:	b35a      	cbz	r2, 800731e <_strtod_l+0x8f6>
 80072c6:	4a9c      	ldr	r2, [pc, #624]	; (8007538 <_strtod_l+0xb10>)
 80072c8:	4293      	cmp	r3, r2
 80072ca:	d12c      	bne.n	8007326 <_strtod_l+0x8fe>
 80072cc:	9b05      	ldr	r3, [sp, #20]
 80072ce:	4640      	mov	r0, r8
 80072d0:	b303      	cbz	r3, 8007314 <_strtod_l+0x8ec>
 80072d2:	464b      	mov	r3, r9
 80072d4:	4a99      	ldr	r2, [pc, #612]	; (800753c <_strtod_l+0xb14>)
 80072d6:	f04f 31ff 	mov.w	r1, #4294967295
 80072da:	401a      	ands	r2, r3
 80072dc:	f1b2 6fd4 	cmp.w	r2, #111149056	; 0x6a00000
 80072e0:	d81b      	bhi.n	800731a <_strtod_l+0x8f2>
 80072e2:	0d12      	lsrs	r2, r2, #20
 80072e4:	f1c2 036b 	rsb	r3, r2, #107	; 0x6b
 80072e8:	fa01 f303 	lsl.w	r3, r1, r3
 80072ec:	4298      	cmp	r0, r3
 80072ee:	d11a      	bne.n	8007326 <_strtod_l+0x8fe>
 80072f0:	4b93      	ldr	r3, [pc, #588]	; (8007540 <_strtod_l+0xb18>)
 80072f2:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80072f4:	429a      	cmp	r2, r3
 80072f6:	d102      	bne.n	80072fe <_strtod_l+0x8d6>
 80072f8:	3001      	adds	r0, #1
 80072fa:	f43f add8 	beq.w	8006eae <_strtod_l+0x486>
 80072fe:	f04f 0800 	mov.w	r8, #0
 8007302:	4b8e      	ldr	r3, [pc, #568]	; (800753c <_strtod_l+0xb14>)
 8007304:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8007306:	401a      	ands	r2, r3
 8007308:	f502 1980 	add.w	r9, r2, #1048576	; 0x100000
 800730c:	9b05      	ldr	r3, [sp, #20]
 800730e:	2b00      	cmp	r3, #0
 8007310:	d196      	bne.n	8007240 <_strtod_l+0x818>
 8007312:	e5d7      	b.n	8006ec4 <_strtod_l+0x49c>
 8007314:	f04f 33ff 	mov.w	r3, #4294967295
 8007318:	e7e8      	b.n	80072ec <_strtod_l+0x8c4>
 800731a:	460b      	mov	r3, r1
 800731c:	e7e6      	b.n	80072ec <_strtod_l+0x8c4>
 800731e:	ea53 0308 	orrs.w	r3, r3, r8
 8007322:	f43f af7d 	beq.w	8007220 <_strtod_l+0x7f8>
 8007326:	b1e5      	cbz	r5, 8007362 <_strtod_l+0x93a>
 8007328:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800732a:	421d      	tst	r5, r3
 800732c:	d0ee      	beq.n	800730c <_strtod_l+0x8e4>
 800732e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8007330:	4640      	mov	r0, r8
 8007332:	4649      	mov	r1, r9
 8007334:	9a05      	ldr	r2, [sp, #20]
 8007336:	b1c3      	cbz	r3, 800736a <_strtod_l+0x942>
 8007338:	f7ff fb53 	bl	80069e2 <sulp>
 800733c:	4602      	mov	r2, r0
 800733e:	460b      	mov	r3, r1
 8007340:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8007344:	f7f8 ff12 	bl	800016c <__adddf3>
 8007348:	4680      	mov	r8, r0
 800734a:	4689      	mov	r9, r1
 800734c:	e7de      	b.n	800730c <_strtod_l+0x8e4>
 800734e:	4013      	ands	r3, r2
 8007350:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 8007354:	ea6f 5913 	mvn.w	r9, r3, lsr #20
 8007358:	f04f 38ff 	mov.w	r8, #4294967295
 800735c:	ea6f 5909 	mvn.w	r9, r9, lsl #20
 8007360:	e7d4      	b.n	800730c <_strtod_l+0x8e4>
 8007362:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8007364:	ea13 0f08 	tst.w	r3, r8
 8007368:	e7e0      	b.n	800732c <_strtod_l+0x904>
 800736a:	f7ff fb3a 	bl	80069e2 <sulp>
 800736e:	4602      	mov	r2, r0
 8007370:	460b      	mov	r3, r1
 8007372:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8007376:	f7f8 fef7 	bl	8000168 <__aeabi_dsub>
 800737a:	2200      	movs	r2, #0
 800737c:	2300      	movs	r3, #0
 800737e:	4680      	mov	r8, r0
 8007380:	4689      	mov	r9, r1
 8007382:	f7f9 fb11 	bl	80009a8 <__aeabi_dcmpeq>
 8007386:	2800      	cmp	r0, #0
 8007388:	d0c0      	beq.n	800730c <_strtod_l+0x8e4>
 800738a:	e602      	b.n	8006f92 <_strtod_l+0x56a>
 800738c:	4658      	mov	r0, fp
 800738e:	9904      	ldr	r1, [sp, #16]
 8007390:	f002 f82e 	bl	80093f0 <__ratio>
 8007394:	2200      	movs	r2, #0
 8007396:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800739a:	4606      	mov	r6, r0
 800739c:	460f      	mov	r7, r1
 800739e:	f7f9 fb17 	bl	80009d0 <__aeabi_dcmple>
 80073a2:	2800      	cmp	r0, #0
 80073a4:	d075      	beq.n	8007492 <_strtod_l+0xa6a>
 80073a6:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80073a8:	2b00      	cmp	r3, #0
 80073aa:	d047      	beq.n	800743c <_strtod_l+0xa14>
 80073ac:	2600      	movs	r6, #0
 80073ae:	4f65      	ldr	r7, [pc, #404]	; (8007544 <_strtod_l+0xb1c>)
 80073b0:	4d64      	ldr	r5, [pc, #400]	; (8007544 <_strtod_l+0xb1c>)
 80073b2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80073b4:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80073b8:	0d1b      	lsrs	r3, r3, #20
 80073ba:	051b      	lsls	r3, r3, #20
 80073bc:	930f      	str	r3, [sp, #60]	; 0x3c
 80073be:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 80073c0:	4b61      	ldr	r3, [pc, #388]	; (8007548 <_strtod_l+0xb20>)
 80073c2:	429a      	cmp	r2, r3
 80073c4:	f040 80c8 	bne.w	8007558 <_strtod_l+0xb30>
 80073c8:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 80073cc:	e9cd 2314 	strd	r2, r3, [sp, #80]	; 0x50
 80073d0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80073d2:	4640      	mov	r0, r8
 80073d4:	f1a3 7954 	sub.w	r9, r3, #55574528	; 0x3500000
 80073d8:	4649      	mov	r1, r9
 80073da:	f001 ff33 	bl	8009244 <__ulp>
 80073de:	4602      	mov	r2, r0
 80073e0:	460b      	mov	r3, r1
 80073e2:	4630      	mov	r0, r6
 80073e4:	4639      	mov	r1, r7
 80073e6:	f7f9 f877 	bl	80004d8 <__aeabi_dmul>
 80073ea:	4642      	mov	r2, r8
 80073ec:	464b      	mov	r3, r9
 80073ee:	f7f8 febd 	bl	800016c <__adddf3>
 80073f2:	460b      	mov	r3, r1
 80073f4:	4951      	ldr	r1, [pc, #324]	; (800753c <_strtod_l+0xb14>)
 80073f6:	4a55      	ldr	r2, [pc, #340]	; (800754c <_strtod_l+0xb24>)
 80073f8:	4019      	ands	r1, r3
 80073fa:	4291      	cmp	r1, r2
 80073fc:	4680      	mov	r8, r0
 80073fe:	d95e      	bls.n	80074be <_strtod_l+0xa96>
 8007400:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8007402:	f102 7254 	add.w	r2, r2, #55574528	; 0x3500000
 8007406:	4293      	cmp	r3, r2
 8007408:	d103      	bne.n	8007412 <_strtod_l+0x9ea>
 800740a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800740c:	3301      	adds	r3, #1
 800740e:	f43f ad4e 	beq.w	8006eae <_strtod_l+0x486>
 8007412:	f04f 38ff 	mov.w	r8, #4294967295
 8007416:	f8df 9128 	ldr.w	r9, [pc, #296]	; 8007540 <_strtod_l+0xb18>
 800741a:	4650      	mov	r0, sl
 800741c:	991c      	ldr	r1, [sp, #112]	; 0x70
 800741e:	f001 fbe1 	bl	8008be4 <_Bfree>
 8007422:	4650      	mov	r0, sl
 8007424:	9906      	ldr	r1, [sp, #24]
 8007426:	f001 fbdd 	bl	8008be4 <_Bfree>
 800742a:	4650      	mov	r0, sl
 800742c:	9904      	ldr	r1, [sp, #16]
 800742e:	f001 fbd9 	bl	8008be4 <_Bfree>
 8007432:	4659      	mov	r1, fp
 8007434:	4650      	mov	r0, sl
 8007436:	f001 fbd5 	bl	8008be4 <_Bfree>
 800743a:	e61c      	b.n	8007076 <_strtod_l+0x64e>
 800743c:	f1b8 0f00 	cmp.w	r8, #0
 8007440:	d119      	bne.n	8007476 <_strtod_l+0xa4e>
 8007442:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007444:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8007448:	b9e3      	cbnz	r3, 8007484 <_strtod_l+0xa5c>
 800744a:	2200      	movs	r2, #0
 800744c:	4630      	mov	r0, r6
 800744e:	4639      	mov	r1, r7
 8007450:	4b3c      	ldr	r3, [pc, #240]	; (8007544 <_strtod_l+0xb1c>)
 8007452:	f7f9 fab3 	bl	80009bc <__aeabi_dcmplt>
 8007456:	b9c8      	cbnz	r0, 800748c <_strtod_l+0xa64>
 8007458:	2200      	movs	r2, #0
 800745a:	4630      	mov	r0, r6
 800745c:	4639      	mov	r1, r7
 800745e:	4b3c      	ldr	r3, [pc, #240]	; (8007550 <_strtod_l+0xb28>)
 8007460:	f7f9 f83a 	bl	80004d8 <__aeabi_dmul>
 8007464:	4604      	mov	r4, r0
 8007466:	460d      	mov	r5, r1
 8007468:	f105 4300 	add.w	r3, r5, #2147483648	; 0x80000000
 800746c:	9418      	str	r4, [sp, #96]	; 0x60
 800746e:	9319      	str	r3, [sp, #100]	; 0x64
 8007470:	e9dd 6718 	ldrd	r6, r7, [sp, #96]	; 0x60
 8007474:	e79d      	b.n	80073b2 <_strtod_l+0x98a>
 8007476:	f1b8 0f01 	cmp.w	r8, #1
 800747a:	d103      	bne.n	8007484 <_strtod_l+0xa5c>
 800747c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800747e:	2b00      	cmp	r3, #0
 8007480:	f43f ad87 	beq.w	8006f92 <_strtod_l+0x56a>
 8007484:	2600      	movs	r6, #0
 8007486:	2400      	movs	r4, #0
 8007488:	4f32      	ldr	r7, [pc, #200]	; (8007554 <_strtod_l+0xb2c>)
 800748a:	e791      	b.n	80073b0 <_strtod_l+0x988>
 800748c:	9c0d      	ldr	r4, [sp, #52]	; 0x34
 800748e:	4d30      	ldr	r5, [pc, #192]	; (8007550 <_strtod_l+0xb28>)
 8007490:	e7ea      	b.n	8007468 <_strtod_l+0xa40>
 8007492:	4b2f      	ldr	r3, [pc, #188]	; (8007550 <_strtod_l+0xb28>)
 8007494:	2200      	movs	r2, #0
 8007496:	4630      	mov	r0, r6
 8007498:	4639      	mov	r1, r7
 800749a:	f7f9 f81d 	bl	80004d8 <__aeabi_dmul>
 800749e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80074a0:	4604      	mov	r4, r0
 80074a2:	460d      	mov	r5, r1
 80074a4:	b933      	cbnz	r3, 80074b4 <_strtod_l+0xa8c>
 80074a6:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 80074aa:	9010      	str	r0, [sp, #64]	; 0x40
 80074ac:	9311      	str	r3, [sp, #68]	; 0x44
 80074ae:	e9dd 6710 	ldrd	r6, r7, [sp, #64]	; 0x40
 80074b2:	e77e      	b.n	80073b2 <_strtod_l+0x98a>
 80074b4:	4602      	mov	r2, r0
 80074b6:	460b      	mov	r3, r1
 80074b8:	e9cd 2310 	strd	r2, r3, [sp, #64]	; 0x40
 80074bc:	e7f7      	b.n	80074ae <_strtod_l+0xa86>
 80074be:	f103 7954 	add.w	r9, r3, #55574528	; 0x3500000
 80074c2:	9b05      	ldr	r3, [sp, #20]
 80074c4:	2b00      	cmp	r3, #0
 80074c6:	d1a8      	bne.n	800741a <_strtod_l+0x9f2>
 80074c8:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 80074cc:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 80074ce:	0d1b      	lsrs	r3, r3, #20
 80074d0:	051b      	lsls	r3, r3, #20
 80074d2:	429a      	cmp	r2, r3
 80074d4:	d1a1      	bne.n	800741a <_strtod_l+0x9f2>
 80074d6:	4620      	mov	r0, r4
 80074d8:	4629      	mov	r1, r5
 80074da:	f7f9 fdc3 	bl	8001064 <__aeabi_d2lz>
 80074de:	f7f8 ffcd 	bl	800047c <__aeabi_l2d>
 80074e2:	4602      	mov	r2, r0
 80074e4:	460b      	mov	r3, r1
 80074e6:	4620      	mov	r0, r4
 80074e8:	4629      	mov	r1, r5
 80074ea:	f7f8 fe3d 	bl	8000168 <__aeabi_dsub>
 80074ee:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 80074f0:	f3c9 0313 	ubfx	r3, r9, #0, #20
 80074f4:	ea43 0308 	orr.w	r3, r3, r8
 80074f8:	4313      	orrs	r3, r2
 80074fa:	4604      	mov	r4, r0
 80074fc:	460d      	mov	r5, r1
 80074fe:	d066      	beq.n	80075ce <_strtod_l+0xba6>
 8007500:	a309      	add	r3, pc, #36	; (adr r3, 8007528 <_strtod_l+0xb00>)
 8007502:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007506:	f7f9 fa59 	bl	80009bc <__aeabi_dcmplt>
 800750a:	2800      	cmp	r0, #0
 800750c:	f47f acda 	bne.w	8006ec4 <_strtod_l+0x49c>
 8007510:	a307      	add	r3, pc, #28	; (adr r3, 8007530 <_strtod_l+0xb08>)
 8007512:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007516:	4620      	mov	r0, r4
 8007518:	4629      	mov	r1, r5
 800751a:	f7f9 fa6d 	bl	80009f8 <__aeabi_dcmpgt>
 800751e:	2800      	cmp	r0, #0
 8007520:	f43f af7b 	beq.w	800741a <_strtod_l+0x9f2>
 8007524:	e4ce      	b.n	8006ec4 <_strtod_l+0x49c>
 8007526:	bf00      	nop
 8007528:	94a03595 	.word	0x94a03595
 800752c:	3fdfffff 	.word	0x3fdfffff
 8007530:	35afe535 	.word	0x35afe535
 8007534:	3fe00000 	.word	0x3fe00000
 8007538:	000fffff 	.word	0x000fffff
 800753c:	7ff00000 	.word	0x7ff00000
 8007540:	7fefffff 	.word	0x7fefffff
 8007544:	3ff00000 	.word	0x3ff00000
 8007548:	7fe00000 	.word	0x7fe00000
 800754c:	7c9fffff 	.word	0x7c9fffff
 8007550:	3fe00000 	.word	0x3fe00000
 8007554:	bff00000 	.word	0xbff00000
 8007558:	9b05      	ldr	r3, [sp, #20]
 800755a:	b313      	cbz	r3, 80075a2 <_strtod_l+0xb7a>
 800755c:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800755e:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 8007562:	d81e      	bhi.n	80075a2 <_strtod_l+0xb7a>
 8007564:	a326      	add	r3, pc, #152	; (adr r3, 8007600 <_strtod_l+0xbd8>)
 8007566:	e9d3 2300 	ldrd	r2, r3, [r3]
 800756a:	4620      	mov	r0, r4
 800756c:	4629      	mov	r1, r5
 800756e:	f7f9 fa2f 	bl	80009d0 <__aeabi_dcmple>
 8007572:	b190      	cbz	r0, 800759a <_strtod_l+0xb72>
 8007574:	4629      	mov	r1, r5
 8007576:	4620      	mov	r0, r4
 8007578:	f7f9 fa86 	bl	8000a88 <__aeabi_d2uiz>
 800757c:	2801      	cmp	r0, #1
 800757e:	bf38      	it	cc
 8007580:	2001      	movcc	r0, #1
 8007582:	f7f8 ff2f 	bl	80003e4 <__aeabi_ui2d>
 8007586:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8007588:	4604      	mov	r4, r0
 800758a:	460d      	mov	r5, r1
 800758c:	b9d3      	cbnz	r3, 80075c4 <_strtod_l+0xb9c>
 800758e:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8007592:	9012      	str	r0, [sp, #72]	; 0x48
 8007594:	9313      	str	r3, [sp, #76]	; 0x4c
 8007596:	e9dd 6712 	ldrd	r6, r7, [sp, #72]	; 0x48
 800759a:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800759c:	f107 63d6 	add.w	r3, r7, #112197632	; 0x6b00000
 80075a0:	1a9f      	subs	r7, r3, r2
 80075a2:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 80075a6:	f001 fe4d 	bl	8009244 <__ulp>
 80075aa:	4602      	mov	r2, r0
 80075ac:	460b      	mov	r3, r1
 80075ae:	4630      	mov	r0, r6
 80075b0:	4639      	mov	r1, r7
 80075b2:	f7f8 ff91 	bl	80004d8 <__aeabi_dmul>
 80075b6:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 80075ba:	f7f8 fdd7 	bl	800016c <__adddf3>
 80075be:	4680      	mov	r8, r0
 80075c0:	4689      	mov	r9, r1
 80075c2:	e77e      	b.n	80074c2 <_strtod_l+0xa9a>
 80075c4:	4602      	mov	r2, r0
 80075c6:	460b      	mov	r3, r1
 80075c8:	e9cd 2312 	strd	r2, r3, [sp, #72]	; 0x48
 80075cc:	e7e3      	b.n	8007596 <_strtod_l+0xb6e>
 80075ce:	a30e      	add	r3, pc, #56	; (adr r3, 8007608 <_strtod_l+0xbe0>)
 80075d0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80075d4:	f7f9 f9f2 	bl	80009bc <__aeabi_dcmplt>
 80075d8:	e7a1      	b.n	800751e <_strtod_l+0xaf6>
 80075da:	2300      	movs	r3, #0
 80075dc:	930c      	str	r3, [sp, #48]	; 0x30
 80075de:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 80075e0:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 80075e2:	6013      	str	r3, [r2, #0]
 80075e4:	f7ff ba65 	b.w	8006ab2 <_strtod_l+0x8a>
 80075e8:	2b65      	cmp	r3, #101	; 0x65
 80075ea:	f43f ab5c 	beq.w	8006ca6 <_strtod_l+0x27e>
 80075ee:	2b45      	cmp	r3, #69	; 0x45
 80075f0:	f43f ab59 	beq.w	8006ca6 <_strtod_l+0x27e>
 80075f4:	2201      	movs	r2, #1
 80075f6:	f7ff bb8d 	b.w	8006d14 <_strtod_l+0x2ec>
 80075fa:	bf00      	nop
 80075fc:	f3af 8000 	nop.w
 8007600:	ffc00000 	.word	0xffc00000
 8007604:	41dfffff 	.word	0x41dfffff
 8007608:	94a03595 	.word	0x94a03595
 800760c:	3fcfffff 	.word	0x3fcfffff

08007610 <_strtod_r>:
 8007610:	4b01      	ldr	r3, [pc, #4]	; (8007618 <_strtod_r+0x8>)
 8007612:	f7ff ba09 	b.w	8006a28 <_strtod_l>
 8007616:	bf00      	nop
 8007618:	20000074 	.word	0x20000074

0800761c <_strtol_l.isra.0>:
 800761c:	2b01      	cmp	r3, #1
 800761e:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007622:	4686      	mov	lr, r0
 8007624:	d001      	beq.n	800762a <_strtol_l.isra.0+0xe>
 8007626:	2b24      	cmp	r3, #36	; 0x24
 8007628:	d906      	bls.n	8007638 <_strtol_l.isra.0+0x1c>
 800762a:	f7fe fb03 	bl	8005c34 <__errno>
 800762e:	2316      	movs	r3, #22
 8007630:	6003      	str	r3, [r0, #0]
 8007632:	2000      	movs	r0, #0
 8007634:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007638:	468c      	mov	ip, r1
 800763a:	4e3a      	ldr	r6, [pc, #232]	; (8007724 <_strtol_l.isra.0+0x108>)
 800763c:	4660      	mov	r0, ip
 800763e:	f81c 4b01 	ldrb.w	r4, [ip], #1
 8007642:	5da5      	ldrb	r5, [r4, r6]
 8007644:	f015 0508 	ands.w	r5, r5, #8
 8007648:	d1f8      	bne.n	800763c <_strtol_l.isra.0+0x20>
 800764a:	2c2d      	cmp	r4, #45	; 0x2d
 800764c:	d133      	bne.n	80076b6 <_strtol_l.isra.0+0x9a>
 800764e:	f04f 0801 	mov.w	r8, #1
 8007652:	f89c 4000 	ldrb.w	r4, [ip]
 8007656:	f100 0c02 	add.w	ip, r0, #2
 800765a:	2b00      	cmp	r3, #0
 800765c:	d05d      	beq.n	800771a <_strtol_l.isra.0+0xfe>
 800765e:	2b10      	cmp	r3, #16
 8007660:	d10c      	bne.n	800767c <_strtol_l.isra.0+0x60>
 8007662:	2c30      	cmp	r4, #48	; 0x30
 8007664:	d10a      	bne.n	800767c <_strtol_l.isra.0+0x60>
 8007666:	f89c 0000 	ldrb.w	r0, [ip]
 800766a:	f000 00df 	and.w	r0, r0, #223	; 0xdf
 800766e:	2858      	cmp	r0, #88	; 0x58
 8007670:	d14e      	bne.n	8007710 <_strtol_l.isra.0+0xf4>
 8007672:	2310      	movs	r3, #16
 8007674:	f89c 4001 	ldrb.w	r4, [ip, #1]
 8007678:	f10c 0c02 	add.w	ip, ip, #2
 800767c:	2500      	movs	r5, #0
 800767e:	f108 4700 	add.w	r7, r8, #2147483648	; 0x80000000
 8007682:	3f01      	subs	r7, #1
 8007684:	fbb7 f9f3 	udiv	r9, r7, r3
 8007688:	4628      	mov	r0, r5
 800768a:	fb03 7a19 	mls	sl, r3, r9, r7
 800768e:	f1a4 0630 	sub.w	r6, r4, #48	; 0x30
 8007692:	2e09      	cmp	r6, #9
 8007694:	d818      	bhi.n	80076c8 <_strtol_l.isra.0+0xac>
 8007696:	4634      	mov	r4, r6
 8007698:	42a3      	cmp	r3, r4
 800769a:	dd24      	ble.n	80076e6 <_strtol_l.isra.0+0xca>
 800769c:	2d00      	cmp	r5, #0
 800769e:	db1f      	blt.n	80076e0 <_strtol_l.isra.0+0xc4>
 80076a0:	4581      	cmp	r9, r0
 80076a2:	d31d      	bcc.n	80076e0 <_strtol_l.isra.0+0xc4>
 80076a4:	d101      	bne.n	80076aa <_strtol_l.isra.0+0x8e>
 80076a6:	45a2      	cmp	sl, r4
 80076a8:	db1a      	blt.n	80076e0 <_strtol_l.isra.0+0xc4>
 80076aa:	2501      	movs	r5, #1
 80076ac:	fb00 4003 	mla	r0, r0, r3, r4
 80076b0:	f81c 4b01 	ldrb.w	r4, [ip], #1
 80076b4:	e7eb      	b.n	800768e <_strtol_l.isra.0+0x72>
 80076b6:	2c2b      	cmp	r4, #43	; 0x2b
 80076b8:	bf08      	it	eq
 80076ba:	f89c 4000 	ldrbeq.w	r4, [ip]
 80076be:	46a8      	mov	r8, r5
 80076c0:	bf08      	it	eq
 80076c2:	f100 0c02 	addeq.w	ip, r0, #2
 80076c6:	e7c8      	b.n	800765a <_strtol_l.isra.0+0x3e>
 80076c8:	f1a4 0641 	sub.w	r6, r4, #65	; 0x41
 80076cc:	2e19      	cmp	r6, #25
 80076ce:	d801      	bhi.n	80076d4 <_strtol_l.isra.0+0xb8>
 80076d0:	3c37      	subs	r4, #55	; 0x37
 80076d2:	e7e1      	b.n	8007698 <_strtol_l.isra.0+0x7c>
 80076d4:	f1a4 0661 	sub.w	r6, r4, #97	; 0x61
 80076d8:	2e19      	cmp	r6, #25
 80076da:	d804      	bhi.n	80076e6 <_strtol_l.isra.0+0xca>
 80076dc:	3c57      	subs	r4, #87	; 0x57
 80076de:	e7db      	b.n	8007698 <_strtol_l.isra.0+0x7c>
 80076e0:	f04f 35ff 	mov.w	r5, #4294967295
 80076e4:	e7e4      	b.n	80076b0 <_strtol_l.isra.0+0x94>
 80076e6:	2d00      	cmp	r5, #0
 80076e8:	da08      	bge.n	80076fc <_strtol_l.isra.0+0xe0>
 80076ea:	2322      	movs	r3, #34	; 0x22
 80076ec:	4638      	mov	r0, r7
 80076ee:	f8ce 3000 	str.w	r3, [lr]
 80076f2:	2a00      	cmp	r2, #0
 80076f4:	d09e      	beq.n	8007634 <_strtol_l.isra.0+0x18>
 80076f6:	f10c 31ff 	add.w	r1, ip, #4294967295
 80076fa:	e007      	b.n	800770c <_strtol_l.isra.0+0xf0>
 80076fc:	f1b8 0f00 	cmp.w	r8, #0
 8007700:	d000      	beq.n	8007704 <_strtol_l.isra.0+0xe8>
 8007702:	4240      	negs	r0, r0
 8007704:	2a00      	cmp	r2, #0
 8007706:	d095      	beq.n	8007634 <_strtol_l.isra.0+0x18>
 8007708:	2d00      	cmp	r5, #0
 800770a:	d1f4      	bne.n	80076f6 <_strtol_l.isra.0+0xda>
 800770c:	6011      	str	r1, [r2, #0]
 800770e:	e791      	b.n	8007634 <_strtol_l.isra.0+0x18>
 8007710:	2430      	movs	r4, #48	; 0x30
 8007712:	2b00      	cmp	r3, #0
 8007714:	d1b2      	bne.n	800767c <_strtol_l.isra.0+0x60>
 8007716:	2308      	movs	r3, #8
 8007718:	e7b0      	b.n	800767c <_strtol_l.isra.0+0x60>
 800771a:	2c30      	cmp	r4, #48	; 0x30
 800771c:	d0a3      	beq.n	8007666 <_strtol_l.isra.0+0x4a>
 800771e:	230a      	movs	r3, #10
 8007720:	e7ac      	b.n	800767c <_strtol_l.isra.0+0x60>
 8007722:	bf00      	nop
 8007724:	0800a709 	.word	0x0800a709

08007728 <_strtol_r>:
 8007728:	f7ff bf78 	b.w	800761c <_strtol_l.isra.0>

0800772c <quorem>:
 800772c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007730:	6903      	ldr	r3, [r0, #16]
 8007732:	690c      	ldr	r4, [r1, #16]
 8007734:	4607      	mov	r7, r0
 8007736:	42a3      	cmp	r3, r4
 8007738:	f2c0 8083 	blt.w	8007842 <quorem+0x116>
 800773c:	3c01      	subs	r4, #1
 800773e:	f100 0514 	add.w	r5, r0, #20
 8007742:	f101 0814 	add.w	r8, r1, #20
 8007746:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800774a:	9301      	str	r3, [sp, #4]
 800774c:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8007750:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8007754:	3301      	adds	r3, #1
 8007756:	429a      	cmp	r2, r3
 8007758:	fbb2 f6f3 	udiv	r6, r2, r3
 800775c:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 8007760:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8007764:	d332      	bcc.n	80077cc <quorem+0xa0>
 8007766:	f04f 0e00 	mov.w	lr, #0
 800776a:	4640      	mov	r0, r8
 800776c:	46ac      	mov	ip, r5
 800776e:	46f2      	mov	sl, lr
 8007770:	f850 2b04 	ldr.w	r2, [r0], #4
 8007774:	b293      	uxth	r3, r2
 8007776:	fb06 e303 	mla	r3, r6, r3, lr
 800777a:	0c12      	lsrs	r2, r2, #16
 800777c:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 8007780:	fb06 e202 	mla	r2, r6, r2, lr
 8007784:	b29b      	uxth	r3, r3
 8007786:	ebaa 0303 	sub.w	r3, sl, r3
 800778a:	f8dc a000 	ldr.w	sl, [ip]
 800778e:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8007792:	fa1f fa8a 	uxth.w	sl, sl
 8007796:	4453      	add	r3, sl
 8007798:	fa1f fa82 	uxth.w	sl, r2
 800779c:	f8dc 2000 	ldr.w	r2, [ip]
 80077a0:	4581      	cmp	r9, r0
 80077a2:	ebca 4212 	rsb	r2, sl, r2, lsr #16
 80077a6:	eb02 4223 	add.w	r2, r2, r3, asr #16
 80077aa:	b29b      	uxth	r3, r3
 80077ac:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80077b0:	ea4f 4a22 	mov.w	sl, r2, asr #16
 80077b4:	f84c 3b04 	str.w	r3, [ip], #4
 80077b8:	d2da      	bcs.n	8007770 <quorem+0x44>
 80077ba:	f855 300b 	ldr.w	r3, [r5, fp]
 80077be:	b92b      	cbnz	r3, 80077cc <quorem+0xa0>
 80077c0:	9b01      	ldr	r3, [sp, #4]
 80077c2:	3b04      	subs	r3, #4
 80077c4:	429d      	cmp	r5, r3
 80077c6:	461a      	mov	r2, r3
 80077c8:	d32f      	bcc.n	800782a <quorem+0xfe>
 80077ca:	613c      	str	r4, [r7, #16]
 80077cc:	4638      	mov	r0, r7
 80077ce:	f001 fc8d 	bl	80090ec <__mcmp>
 80077d2:	2800      	cmp	r0, #0
 80077d4:	db25      	blt.n	8007822 <quorem+0xf6>
 80077d6:	4628      	mov	r0, r5
 80077d8:	f04f 0c00 	mov.w	ip, #0
 80077dc:	3601      	adds	r6, #1
 80077de:	f858 1b04 	ldr.w	r1, [r8], #4
 80077e2:	f8d0 e000 	ldr.w	lr, [r0]
 80077e6:	b28b      	uxth	r3, r1
 80077e8:	ebac 0303 	sub.w	r3, ip, r3
 80077ec:	fa1f f28e 	uxth.w	r2, lr
 80077f0:	4413      	add	r3, r2
 80077f2:	0c0a      	lsrs	r2, r1, #16
 80077f4:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 80077f8:	eb02 4223 	add.w	r2, r2, r3, asr #16
 80077fc:	b29b      	uxth	r3, r3
 80077fe:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8007802:	45c1      	cmp	r9, r8
 8007804:	ea4f 4c22 	mov.w	ip, r2, asr #16
 8007808:	f840 3b04 	str.w	r3, [r0], #4
 800780c:	d2e7      	bcs.n	80077de <quorem+0xb2>
 800780e:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8007812:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8007816:	b922      	cbnz	r2, 8007822 <quorem+0xf6>
 8007818:	3b04      	subs	r3, #4
 800781a:	429d      	cmp	r5, r3
 800781c:	461a      	mov	r2, r3
 800781e:	d30a      	bcc.n	8007836 <quorem+0x10a>
 8007820:	613c      	str	r4, [r7, #16]
 8007822:	4630      	mov	r0, r6
 8007824:	b003      	add	sp, #12
 8007826:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800782a:	6812      	ldr	r2, [r2, #0]
 800782c:	3b04      	subs	r3, #4
 800782e:	2a00      	cmp	r2, #0
 8007830:	d1cb      	bne.n	80077ca <quorem+0x9e>
 8007832:	3c01      	subs	r4, #1
 8007834:	e7c6      	b.n	80077c4 <quorem+0x98>
 8007836:	6812      	ldr	r2, [r2, #0]
 8007838:	3b04      	subs	r3, #4
 800783a:	2a00      	cmp	r2, #0
 800783c:	d1f0      	bne.n	8007820 <quorem+0xf4>
 800783e:	3c01      	subs	r4, #1
 8007840:	e7eb      	b.n	800781a <quorem+0xee>
 8007842:	2000      	movs	r0, #0
 8007844:	e7ee      	b.n	8007824 <quorem+0xf8>
	...

08007848 <_dtoa_r>:
 8007848:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800784c:	4616      	mov	r6, r2
 800784e:	461f      	mov	r7, r3
 8007850:	6a44      	ldr	r4, [r0, #36]	; 0x24
 8007852:	b099      	sub	sp, #100	; 0x64
 8007854:	4605      	mov	r5, r0
 8007856:	e9cd 6704 	strd	r6, r7, [sp, #16]
 800785a:	f8dd 8094 	ldr.w	r8, [sp, #148]	; 0x94
 800785e:	b974      	cbnz	r4, 800787e <_dtoa_r+0x36>
 8007860:	2010      	movs	r0, #16
 8007862:	f001 f949 	bl	8008af8 <malloc>
 8007866:	4602      	mov	r2, r0
 8007868:	6268      	str	r0, [r5, #36]	; 0x24
 800786a:	b920      	cbnz	r0, 8007876 <_dtoa_r+0x2e>
 800786c:	21ea      	movs	r1, #234	; 0xea
 800786e:	4bae      	ldr	r3, [pc, #696]	; (8007b28 <_dtoa_r+0x2e0>)
 8007870:	48ae      	ldr	r0, [pc, #696]	; (8007b2c <_dtoa_r+0x2e4>)
 8007872:	f002 f875 	bl	8009960 <__assert_func>
 8007876:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800787a:	6004      	str	r4, [r0, #0]
 800787c:	60c4      	str	r4, [r0, #12]
 800787e:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8007880:	6819      	ldr	r1, [r3, #0]
 8007882:	b151      	cbz	r1, 800789a <_dtoa_r+0x52>
 8007884:	685a      	ldr	r2, [r3, #4]
 8007886:	2301      	movs	r3, #1
 8007888:	4093      	lsls	r3, r2
 800788a:	604a      	str	r2, [r1, #4]
 800788c:	608b      	str	r3, [r1, #8]
 800788e:	4628      	mov	r0, r5
 8007890:	f001 f9a8 	bl	8008be4 <_Bfree>
 8007894:	2200      	movs	r2, #0
 8007896:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8007898:	601a      	str	r2, [r3, #0]
 800789a:	1e3b      	subs	r3, r7, #0
 800789c:	bfaf      	iteee	ge
 800789e:	2300      	movge	r3, #0
 80078a0:	2201      	movlt	r2, #1
 80078a2:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 80078a6:	9305      	strlt	r3, [sp, #20]
 80078a8:	bfa8      	it	ge
 80078aa:	f8c8 3000 	strge.w	r3, [r8]
 80078ae:	f8dd 9014 	ldr.w	r9, [sp, #20]
 80078b2:	4b9f      	ldr	r3, [pc, #636]	; (8007b30 <_dtoa_r+0x2e8>)
 80078b4:	bfb8      	it	lt
 80078b6:	f8c8 2000 	strlt.w	r2, [r8]
 80078ba:	ea33 0309 	bics.w	r3, r3, r9
 80078be:	d119      	bne.n	80078f4 <_dtoa_r+0xac>
 80078c0:	f242 730f 	movw	r3, #9999	; 0x270f
 80078c4:	9a24      	ldr	r2, [sp, #144]	; 0x90
 80078c6:	6013      	str	r3, [r2, #0]
 80078c8:	f3c9 0313 	ubfx	r3, r9, #0, #20
 80078cc:	4333      	orrs	r3, r6
 80078ce:	f000 8580 	beq.w	80083d2 <_dtoa_r+0xb8a>
 80078d2:	9b26      	ldr	r3, [sp, #152]	; 0x98
 80078d4:	b953      	cbnz	r3, 80078ec <_dtoa_r+0xa4>
 80078d6:	4b97      	ldr	r3, [pc, #604]	; (8007b34 <_dtoa_r+0x2ec>)
 80078d8:	e022      	b.n	8007920 <_dtoa_r+0xd8>
 80078da:	4b97      	ldr	r3, [pc, #604]	; (8007b38 <_dtoa_r+0x2f0>)
 80078dc:	9308      	str	r3, [sp, #32]
 80078de:	3308      	adds	r3, #8
 80078e0:	9a26      	ldr	r2, [sp, #152]	; 0x98
 80078e2:	6013      	str	r3, [r2, #0]
 80078e4:	9808      	ldr	r0, [sp, #32]
 80078e6:	b019      	add	sp, #100	; 0x64
 80078e8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80078ec:	4b91      	ldr	r3, [pc, #580]	; (8007b34 <_dtoa_r+0x2ec>)
 80078ee:	9308      	str	r3, [sp, #32]
 80078f0:	3303      	adds	r3, #3
 80078f2:	e7f5      	b.n	80078e0 <_dtoa_r+0x98>
 80078f4:	e9dd 3404 	ldrd	r3, r4, [sp, #16]
 80078f8:	e9cd 340c 	strd	r3, r4, [sp, #48]	; 0x30
 80078fc:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8007900:	2200      	movs	r2, #0
 8007902:	2300      	movs	r3, #0
 8007904:	f7f9 f850 	bl	80009a8 <__aeabi_dcmpeq>
 8007908:	4680      	mov	r8, r0
 800790a:	b158      	cbz	r0, 8007924 <_dtoa_r+0xdc>
 800790c:	2301      	movs	r3, #1
 800790e:	9a24      	ldr	r2, [sp, #144]	; 0x90
 8007910:	6013      	str	r3, [r2, #0]
 8007912:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8007914:	2b00      	cmp	r3, #0
 8007916:	f000 8559 	beq.w	80083cc <_dtoa_r+0xb84>
 800791a:	4888      	ldr	r0, [pc, #544]	; (8007b3c <_dtoa_r+0x2f4>)
 800791c:	6018      	str	r0, [r3, #0]
 800791e:	1e43      	subs	r3, r0, #1
 8007920:	9308      	str	r3, [sp, #32]
 8007922:	e7df      	b.n	80078e4 <_dtoa_r+0x9c>
 8007924:	ab16      	add	r3, sp, #88	; 0x58
 8007926:	9301      	str	r3, [sp, #4]
 8007928:	ab17      	add	r3, sp, #92	; 0x5c
 800792a:	9300      	str	r3, [sp, #0]
 800792c:	4628      	mov	r0, r5
 800792e:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 8007932:	f001 fd01 	bl	8009338 <__d2b>
 8007936:	f3c9 540a 	ubfx	r4, r9, #20, #11
 800793a:	4682      	mov	sl, r0
 800793c:	2c00      	cmp	r4, #0
 800793e:	d07e      	beq.n	8007a3e <_dtoa_r+0x1f6>
 8007940:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8007944:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8007946:	f2a4 34ff 	subw	r4, r4, #1023	; 0x3ff
 800794a:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800794e:	f043 517f 	orr.w	r1, r3, #1069547520	; 0x3fc00000
 8007952:	f441 1140 	orr.w	r1, r1, #3145728	; 0x300000
 8007956:	f8cd 804c 	str.w	r8, [sp, #76]	; 0x4c
 800795a:	2200      	movs	r2, #0
 800795c:	4b78      	ldr	r3, [pc, #480]	; (8007b40 <_dtoa_r+0x2f8>)
 800795e:	f7f8 fc03 	bl	8000168 <__aeabi_dsub>
 8007962:	a36b      	add	r3, pc, #428	; (adr r3, 8007b10 <_dtoa_r+0x2c8>)
 8007964:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007968:	f7f8 fdb6 	bl	80004d8 <__aeabi_dmul>
 800796c:	a36a      	add	r3, pc, #424	; (adr r3, 8007b18 <_dtoa_r+0x2d0>)
 800796e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007972:	f7f8 fbfb 	bl	800016c <__adddf3>
 8007976:	4606      	mov	r6, r0
 8007978:	4620      	mov	r0, r4
 800797a:	460f      	mov	r7, r1
 800797c:	f7f8 fd42 	bl	8000404 <__aeabi_i2d>
 8007980:	a367      	add	r3, pc, #412	; (adr r3, 8007b20 <_dtoa_r+0x2d8>)
 8007982:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007986:	f7f8 fda7 	bl	80004d8 <__aeabi_dmul>
 800798a:	4602      	mov	r2, r0
 800798c:	460b      	mov	r3, r1
 800798e:	4630      	mov	r0, r6
 8007990:	4639      	mov	r1, r7
 8007992:	f7f8 fbeb 	bl	800016c <__adddf3>
 8007996:	4606      	mov	r6, r0
 8007998:	460f      	mov	r7, r1
 800799a:	f7f9 f84d 	bl	8000a38 <__aeabi_d2iz>
 800799e:	2200      	movs	r2, #0
 80079a0:	4681      	mov	r9, r0
 80079a2:	2300      	movs	r3, #0
 80079a4:	4630      	mov	r0, r6
 80079a6:	4639      	mov	r1, r7
 80079a8:	f7f9 f808 	bl	80009bc <__aeabi_dcmplt>
 80079ac:	b148      	cbz	r0, 80079c2 <_dtoa_r+0x17a>
 80079ae:	4648      	mov	r0, r9
 80079b0:	f7f8 fd28 	bl	8000404 <__aeabi_i2d>
 80079b4:	4632      	mov	r2, r6
 80079b6:	463b      	mov	r3, r7
 80079b8:	f7f8 fff6 	bl	80009a8 <__aeabi_dcmpeq>
 80079bc:	b908      	cbnz	r0, 80079c2 <_dtoa_r+0x17a>
 80079be:	f109 39ff 	add.w	r9, r9, #4294967295
 80079c2:	f1b9 0f16 	cmp.w	r9, #22
 80079c6:	d857      	bhi.n	8007a78 <_dtoa_r+0x230>
 80079c8:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 80079cc:	4b5d      	ldr	r3, [pc, #372]	; (8007b44 <_dtoa_r+0x2fc>)
 80079ce:	eb03 03c9 	add.w	r3, r3, r9, lsl #3
 80079d2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80079d6:	f7f8 fff1 	bl	80009bc <__aeabi_dcmplt>
 80079da:	2800      	cmp	r0, #0
 80079dc:	d04e      	beq.n	8007a7c <_dtoa_r+0x234>
 80079de:	2300      	movs	r3, #0
 80079e0:	f109 39ff 	add.w	r9, r9, #4294967295
 80079e4:	930f      	str	r3, [sp, #60]	; 0x3c
 80079e6:	9b16      	ldr	r3, [sp, #88]	; 0x58
 80079e8:	1b1c      	subs	r4, r3, r4
 80079ea:	1e63      	subs	r3, r4, #1
 80079ec:	9309      	str	r3, [sp, #36]	; 0x24
 80079ee:	bf49      	itett	mi
 80079f0:	f1c4 0301 	rsbmi	r3, r4, #1
 80079f4:	2300      	movpl	r3, #0
 80079f6:	9306      	strmi	r3, [sp, #24]
 80079f8:	2300      	movmi	r3, #0
 80079fa:	bf54      	ite	pl
 80079fc:	9306      	strpl	r3, [sp, #24]
 80079fe:	9309      	strmi	r3, [sp, #36]	; 0x24
 8007a00:	f1b9 0f00 	cmp.w	r9, #0
 8007a04:	db3c      	blt.n	8007a80 <_dtoa_r+0x238>
 8007a06:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007a08:	f8cd 9038 	str.w	r9, [sp, #56]	; 0x38
 8007a0c:	444b      	add	r3, r9
 8007a0e:	9309      	str	r3, [sp, #36]	; 0x24
 8007a10:	2300      	movs	r3, #0
 8007a12:	930a      	str	r3, [sp, #40]	; 0x28
 8007a14:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8007a16:	2b09      	cmp	r3, #9
 8007a18:	d86c      	bhi.n	8007af4 <_dtoa_r+0x2ac>
 8007a1a:	2b05      	cmp	r3, #5
 8007a1c:	bfc4      	itt	gt
 8007a1e:	3b04      	subgt	r3, #4
 8007a20:	9322      	strgt	r3, [sp, #136]	; 0x88
 8007a22:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8007a24:	bfc8      	it	gt
 8007a26:	2400      	movgt	r4, #0
 8007a28:	f1a3 0302 	sub.w	r3, r3, #2
 8007a2c:	bfd8      	it	le
 8007a2e:	2401      	movle	r4, #1
 8007a30:	2b03      	cmp	r3, #3
 8007a32:	f200 808b 	bhi.w	8007b4c <_dtoa_r+0x304>
 8007a36:	e8df f003 	tbb	[pc, r3]
 8007a3a:	4f2d      	.short	0x4f2d
 8007a3c:	5b4d      	.short	0x5b4d
 8007a3e:	e9dd 4316 	ldrd	r4, r3, [sp, #88]	; 0x58
 8007a42:	441c      	add	r4, r3
 8007a44:	f204 4332 	addw	r3, r4, #1074	; 0x432
 8007a48:	2b20      	cmp	r3, #32
 8007a4a:	bfc3      	ittte	gt
 8007a4c:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 8007a50:	f204 4012 	addwgt	r0, r4, #1042	; 0x412
 8007a54:	fa09 f303 	lslgt.w	r3, r9, r3
 8007a58:	f1c3 0320 	rsble	r3, r3, #32
 8007a5c:	bfc6      	itte	gt
 8007a5e:	fa26 f000 	lsrgt.w	r0, r6, r0
 8007a62:	4318      	orrgt	r0, r3
 8007a64:	fa06 f003 	lslle.w	r0, r6, r3
 8007a68:	f7f8 fcbc 	bl	80003e4 <__aeabi_ui2d>
 8007a6c:	2301      	movs	r3, #1
 8007a6e:	f1a1 71f8 	sub.w	r1, r1, #32505856	; 0x1f00000
 8007a72:	3c01      	subs	r4, #1
 8007a74:	9313      	str	r3, [sp, #76]	; 0x4c
 8007a76:	e770      	b.n	800795a <_dtoa_r+0x112>
 8007a78:	2301      	movs	r3, #1
 8007a7a:	e7b3      	b.n	80079e4 <_dtoa_r+0x19c>
 8007a7c:	900f      	str	r0, [sp, #60]	; 0x3c
 8007a7e:	e7b2      	b.n	80079e6 <_dtoa_r+0x19e>
 8007a80:	9b06      	ldr	r3, [sp, #24]
 8007a82:	eba3 0309 	sub.w	r3, r3, r9
 8007a86:	9306      	str	r3, [sp, #24]
 8007a88:	f1c9 0300 	rsb	r3, r9, #0
 8007a8c:	930a      	str	r3, [sp, #40]	; 0x28
 8007a8e:	2300      	movs	r3, #0
 8007a90:	930e      	str	r3, [sp, #56]	; 0x38
 8007a92:	e7bf      	b.n	8007a14 <_dtoa_r+0x1cc>
 8007a94:	2300      	movs	r3, #0
 8007a96:	930b      	str	r3, [sp, #44]	; 0x2c
 8007a98:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8007a9a:	2b00      	cmp	r3, #0
 8007a9c:	dc59      	bgt.n	8007b52 <_dtoa_r+0x30a>
 8007a9e:	f04f 0b01 	mov.w	fp, #1
 8007aa2:	465b      	mov	r3, fp
 8007aa4:	f8cd b008 	str.w	fp, [sp, #8]
 8007aa8:	f8cd b08c 	str.w	fp, [sp, #140]	; 0x8c
 8007aac:	2200      	movs	r2, #0
 8007aae:	6a68      	ldr	r0, [r5, #36]	; 0x24
 8007ab0:	6042      	str	r2, [r0, #4]
 8007ab2:	2204      	movs	r2, #4
 8007ab4:	f102 0614 	add.w	r6, r2, #20
 8007ab8:	429e      	cmp	r6, r3
 8007aba:	6841      	ldr	r1, [r0, #4]
 8007abc:	d94f      	bls.n	8007b5e <_dtoa_r+0x316>
 8007abe:	4628      	mov	r0, r5
 8007ac0:	f001 f850 	bl	8008b64 <_Balloc>
 8007ac4:	9008      	str	r0, [sp, #32]
 8007ac6:	2800      	cmp	r0, #0
 8007ac8:	d14d      	bne.n	8007b66 <_dtoa_r+0x31e>
 8007aca:	4602      	mov	r2, r0
 8007acc:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 8007ad0:	4b1d      	ldr	r3, [pc, #116]	; (8007b48 <_dtoa_r+0x300>)
 8007ad2:	e6cd      	b.n	8007870 <_dtoa_r+0x28>
 8007ad4:	2301      	movs	r3, #1
 8007ad6:	e7de      	b.n	8007a96 <_dtoa_r+0x24e>
 8007ad8:	2300      	movs	r3, #0
 8007ada:	930b      	str	r3, [sp, #44]	; 0x2c
 8007adc:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8007ade:	eb09 0b03 	add.w	fp, r9, r3
 8007ae2:	f10b 0301 	add.w	r3, fp, #1
 8007ae6:	2b01      	cmp	r3, #1
 8007ae8:	9302      	str	r3, [sp, #8]
 8007aea:	bfb8      	it	lt
 8007aec:	2301      	movlt	r3, #1
 8007aee:	e7dd      	b.n	8007aac <_dtoa_r+0x264>
 8007af0:	2301      	movs	r3, #1
 8007af2:	e7f2      	b.n	8007ada <_dtoa_r+0x292>
 8007af4:	2401      	movs	r4, #1
 8007af6:	2300      	movs	r3, #0
 8007af8:	940b      	str	r4, [sp, #44]	; 0x2c
 8007afa:	9322      	str	r3, [sp, #136]	; 0x88
 8007afc:	f04f 3bff 	mov.w	fp, #4294967295
 8007b00:	2200      	movs	r2, #0
 8007b02:	2312      	movs	r3, #18
 8007b04:	f8cd b008 	str.w	fp, [sp, #8]
 8007b08:	9223      	str	r2, [sp, #140]	; 0x8c
 8007b0a:	e7cf      	b.n	8007aac <_dtoa_r+0x264>
 8007b0c:	f3af 8000 	nop.w
 8007b10:	636f4361 	.word	0x636f4361
 8007b14:	3fd287a7 	.word	0x3fd287a7
 8007b18:	8b60c8b3 	.word	0x8b60c8b3
 8007b1c:	3fc68a28 	.word	0x3fc68a28
 8007b20:	509f79fb 	.word	0x509f79fb
 8007b24:	3fd34413 	.word	0x3fd34413
 8007b28:	0800a816 	.word	0x0800a816
 8007b2c:	0800a82d 	.word	0x0800a82d
 8007b30:	7ff00000 	.word	0x7ff00000
 8007b34:	0800a812 	.word	0x0800a812
 8007b38:	0800a809 	.word	0x0800a809
 8007b3c:	0800a68d 	.word	0x0800a68d
 8007b40:	3ff80000 	.word	0x3ff80000
 8007b44:	0800a9a8 	.word	0x0800a9a8
 8007b48:	0800a88c 	.word	0x0800a88c
 8007b4c:	2301      	movs	r3, #1
 8007b4e:	930b      	str	r3, [sp, #44]	; 0x2c
 8007b50:	e7d4      	b.n	8007afc <_dtoa_r+0x2b4>
 8007b52:	f8dd b08c 	ldr.w	fp, [sp, #140]	; 0x8c
 8007b56:	465b      	mov	r3, fp
 8007b58:	f8cd b008 	str.w	fp, [sp, #8]
 8007b5c:	e7a6      	b.n	8007aac <_dtoa_r+0x264>
 8007b5e:	3101      	adds	r1, #1
 8007b60:	6041      	str	r1, [r0, #4]
 8007b62:	0052      	lsls	r2, r2, #1
 8007b64:	e7a6      	b.n	8007ab4 <_dtoa_r+0x26c>
 8007b66:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8007b68:	9a08      	ldr	r2, [sp, #32]
 8007b6a:	601a      	str	r2, [r3, #0]
 8007b6c:	9b02      	ldr	r3, [sp, #8]
 8007b6e:	2b0e      	cmp	r3, #14
 8007b70:	f200 80a8 	bhi.w	8007cc4 <_dtoa_r+0x47c>
 8007b74:	2c00      	cmp	r4, #0
 8007b76:	f000 80a5 	beq.w	8007cc4 <_dtoa_r+0x47c>
 8007b7a:	f1b9 0f00 	cmp.w	r9, #0
 8007b7e:	dd34      	ble.n	8007bea <_dtoa_r+0x3a2>
 8007b80:	4a9a      	ldr	r2, [pc, #616]	; (8007dec <_dtoa_r+0x5a4>)
 8007b82:	f009 030f 	and.w	r3, r9, #15
 8007b86:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 8007b8a:	f419 7f80 	tst.w	r9, #256	; 0x100
 8007b8e:	e9d3 3400 	ldrd	r3, r4, [r3]
 8007b92:	e9cd 3410 	strd	r3, r4, [sp, #64]	; 0x40
 8007b96:	ea4f 1429 	mov.w	r4, r9, asr #4
 8007b9a:	d016      	beq.n	8007bca <_dtoa_r+0x382>
 8007b9c:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8007ba0:	4b93      	ldr	r3, [pc, #588]	; (8007df0 <_dtoa_r+0x5a8>)
 8007ba2:	2703      	movs	r7, #3
 8007ba4:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8007ba8:	f7f8 fdc0 	bl	800072c <__aeabi_ddiv>
 8007bac:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8007bb0:	f004 040f 	and.w	r4, r4, #15
 8007bb4:	4e8e      	ldr	r6, [pc, #568]	; (8007df0 <_dtoa_r+0x5a8>)
 8007bb6:	b954      	cbnz	r4, 8007bce <_dtoa_r+0x386>
 8007bb8:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8007bbc:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8007bc0:	f7f8 fdb4 	bl	800072c <__aeabi_ddiv>
 8007bc4:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8007bc8:	e029      	b.n	8007c1e <_dtoa_r+0x3d6>
 8007bca:	2702      	movs	r7, #2
 8007bcc:	e7f2      	b.n	8007bb4 <_dtoa_r+0x36c>
 8007bce:	07e1      	lsls	r1, r4, #31
 8007bd0:	d508      	bpl.n	8007be4 <_dtoa_r+0x39c>
 8007bd2:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8007bd6:	e9d6 2300 	ldrd	r2, r3, [r6]
 8007bda:	f7f8 fc7d 	bl	80004d8 <__aeabi_dmul>
 8007bde:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 8007be2:	3701      	adds	r7, #1
 8007be4:	1064      	asrs	r4, r4, #1
 8007be6:	3608      	adds	r6, #8
 8007be8:	e7e5      	b.n	8007bb6 <_dtoa_r+0x36e>
 8007bea:	f000 80a5 	beq.w	8007d38 <_dtoa_r+0x4f0>
 8007bee:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8007bf2:	f1c9 0400 	rsb	r4, r9, #0
 8007bf6:	4b7d      	ldr	r3, [pc, #500]	; (8007dec <_dtoa_r+0x5a4>)
 8007bf8:	f004 020f 	and.w	r2, r4, #15
 8007bfc:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8007c00:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007c04:	f7f8 fc68 	bl	80004d8 <__aeabi_dmul>
 8007c08:	2702      	movs	r7, #2
 8007c0a:	2300      	movs	r3, #0
 8007c0c:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8007c10:	4e77      	ldr	r6, [pc, #476]	; (8007df0 <_dtoa_r+0x5a8>)
 8007c12:	1124      	asrs	r4, r4, #4
 8007c14:	2c00      	cmp	r4, #0
 8007c16:	f040 8084 	bne.w	8007d22 <_dtoa_r+0x4da>
 8007c1a:	2b00      	cmp	r3, #0
 8007c1c:	d1d2      	bne.n	8007bc4 <_dtoa_r+0x37c>
 8007c1e:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8007c20:	2b00      	cmp	r3, #0
 8007c22:	f000 808b 	beq.w	8007d3c <_dtoa_r+0x4f4>
 8007c26:	e9dd 3404 	ldrd	r3, r4, [sp, #16]
 8007c2a:	e9cd 3410 	strd	r3, r4, [sp, #64]	; 0x40
 8007c2e:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8007c32:	2200      	movs	r2, #0
 8007c34:	4b6f      	ldr	r3, [pc, #444]	; (8007df4 <_dtoa_r+0x5ac>)
 8007c36:	f7f8 fec1 	bl	80009bc <__aeabi_dcmplt>
 8007c3a:	2800      	cmp	r0, #0
 8007c3c:	d07e      	beq.n	8007d3c <_dtoa_r+0x4f4>
 8007c3e:	9b02      	ldr	r3, [sp, #8]
 8007c40:	2b00      	cmp	r3, #0
 8007c42:	d07b      	beq.n	8007d3c <_dtoa_r+0x4f4>
 8007c44:	f1bb 0f00 	cmp.w	fp, #0
 8007c48:	dd38      	ble.n	8007cbc <_dtoa_r+0x474>
 8007c4a:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8007c4e:	2200      	movs	r2, #0
 8007c50:	4b69      	ldr	r3, [pc, #420]	; (8007df8 <_dtoa_r+0x5b0>)
 8007c52:	f7f8 fc41 	bl	80004d8 <__aeabi_dmul>
 8007c56:	465c      	mov	r4, fp
 8007c58:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8007c5c:	f109 38ff 	add.w	r8, r9, #4294967295
 8007c60:	3701      	adds	r7, #1
 8007c62:	4638      	mov	r0, r7
 8007c64:	f7f8 fbce 	bl	8000404 <__aeabi_i2d>
 8007c68:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8007c6c:	f7f8 fc34 	bl	80004d8 <__aeabi_dmul>
 8007c70:	2200      	movs	r2, #0
 8007c72:	4b62      	ldr	r3, [pc, #392]	; (8007dfc <_dtoa_r+0x5b4>)
 8007c74:	f7f8 fa7a 	bl	800016c <__adddf3>
 8007c78:	f1a1 7650 	sub.w	r6, r1, #54525952	; 0x3400000
 8007c7c:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 8007c80:	9611      	str	r6, [sp, #68]	; 0x44
 8007c82:	2c00      	cmp	r4, #0
 8007c84:	d15d      	bne.n	8007d42 <_dtoa_r+0x4fa>
 8007c86:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8007c8a:	2200      	movs	r2, #0
 8007c8c:	4b5c      	ldr	r3, [pc, #368]	; (8007e00 <_dtoa_r+0x5b8>)
 8007c8e:	f7f8 fa6b 	bl	8000168 <__aeabi_dsub>
 8007c92:	4602      	mov	r2, r0
 8007c94:	460b      	mov	r3, r1
 8007c96:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8007c9a:	4633      	mov	r3, r6
 8007c9c:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8007c9e:	f7f8 feab 	bl	80009f8 <__aeabi_dcmpgt>
 8007ca2:	2800      	cmp	r0, #0
 8007ca4:	f040 829e 	bne.w	80081e4 <_dtoa_r+0x99c>
 8007ca8:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8007cac:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8007cae:	f106 4300 	add.w	r3, r6, #2147483648	; 0x80000000
 8007cb2:	f7f8 fe83 	bl	80009bc <__aeabi_dcmplt>
 8007cb6:	2800      	cmp	r0, #0
 8007cb8:	f040 8292 	bne.w	80081e0 <_dtoa_r+0x998>
 8007cbc:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	; 0x30
 8007cc0:	e9cd 3404 	strd	r3, r4, [sp, #16]
 8007cc4:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8007cc6:	2b00      	cmp	r3, #0
 8007cc8:	f2c0 8153 	blt.w	8007f72 <_dtoa_r+0x72a>
 8007ccc:	f1b9 0f0e 	cmp.w	r9, #14
 8007cd0:	f300 814f 	bgt.w	8007f72 <_dtoa_r+0x72a>
 8007cd4:	4b45      	ldr	r3, [pc, #276]	; (8007dec <_dtoa_r+0x5a4>)
 8007cd6:	eb03 03c9 	add.w	r3, r3, r9, lsl #3
 8007cda:	e9d3 3400 	ldrd	r3, r4, [r3]
 8007cde:	e9cd 3406 	strd	r3, r4, [sp, #24]
 8007ce2:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8007ce4:	2b00      	cmp	r3, #0
 8007ce6:	f280 80db 	bge.w	8007ea0 <_dtoa_r+0x658>
 8007cea:	9b02      	ldr	r3, [sp, #8]
 8007cec:	2b00      	cmp	r3, #0
 8007cee:	f300 80d7 	bgt.w	8007ea0 <_dtoa_r+0x658>
 8007cf2:	f040 8274 	bne.w	80081de <_dtoa_r+0x996>
 8007cf6:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8007cfa:	2200      	movs	r2, #0
 8007cfc:	4b40      	ldr	r3, [pc, #256]	; (8007e00 <_dtoa_r+0x5b8>)
 8007cfe:	f7f8 fbeb 	bl	80004d8 <__aeabi_dmul>
 8007d02:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8007d06:	f7f8 fe6d 	bl	80009e4 <__aeabi_dcmpge>
 8007d0a:	9c02      	ldr	r4, [sp, #8]
 8007d0c:	4626      	mov	r6, r4
 8007d0e:	2800      	cmp	r0, #0
 8007d10:	f040 824a 	bne.w	80081a8 <_dtoa_r+0x960>
 8007d14:	2331      	movs	r3, #49	; 0x31
 8007d16:	9f08      	ldr	r7, [sp, #32]
 8007d18:	f109 0901 	add.w	r9, r9, #1
 8007d1c:	f807 3b01 	strb.w	r3, [r7], #1
 8007d20:	e246      	b.n	80081b0 <_dtoa_r+0x968>
 8007d22:	07e2      	lsls	r2, r4, #31
 8007d24:	d505      	bpl.n	8007d32 <_dtoa_r+0x4ea>
 8007d26:	e9d6 2300 	ldrd	r2, r3, [r6]
 8007d2a:	f7f8 fbd5 	bl	80004d8 <__aeabi_dmul>
 8007d2e:	2301      	movs	r3, #1
 8007d30:	3701      	adds	r7, #1
 8007d32:	1064      	asrs	r4, r4, #1
 8007d34:	3608      	adds	r6, #8
 8007d36:	e76d      	b.n	8007c14 <_dtoa_r+0x3cc>
 8007d38:	2702      	movs	r7, #2
 8007d3a:	e770      	b.n	8007c1e <_dtoa_r+0x3d6>
 8007d3c:	46c8      	mov	r8, r9
 8007d3e:	9c02      	ldr	r4, [sp, #8]
 8007d40:	e78f      	b.n	8007c62 <_dtoa_r+0x41a>
 8007d42:	9908      	ldr	r1, [sp, #32]
 8007d44:	4b29      	ldr	r3, [pc, #164]	; (8007dec <_dtoa_r+0x5a4>)
 8007d46:	4421      	add	r1, r4
 8007d48:	9112      	str	r1, [sp, #72]	; 0x48
 8007d4a:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8007d4c:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8007d50:	e9dd 6710 	ldrd	r6, r7, [sp, #64]	; 0x40
 8007d54:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8007d58:	2900      	cmp	r1, #0
 8007d5a:	d055      	beq.n	8007e08 <_dtoa_r+0x5c0>
 8007d5c:	2000      	movs	r0, #0
 8007d5e:	4929      	ldr	r1, [pc, #164]	; (8007e04 <_dtoa_r+0x5bc>)
 8007d60:	f7f8 fce4 	bl	800072c <__aeabi_ddiv>
 8007d64:	463b      	mov	r3, r7
 8007d66:	4632      	mov	r2, r6
 8007d68:	f7f8 f9fe 	bl	8000168 <__aeabi_dsub>
 8007d6c:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 8007d70:	9f08      	ldr	r7, [sp, #32]
 8007d72:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8007d76:	f7f8 fe5f 	bl	8000a38 <__aeabi_d2iz>
 8007d7a:	4604      	mov	r4, r0
 8007d7c:	f7f8 fb42 	bl	8000404 <__aeabi_i2d>
 8007d80:	4602      	mov	r2, r0
 8007d82:	460b      	mov	r3, r1
 8007d84:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8007d88:	f7f8 f9ee 	bl	8000168 <__aeabi_dsub>
 8007d8c:	4602      	mov	r2, r0
 8007d8e:	460b      	mov	r3, r1
 8007d90:	3430      	adds	r4, #48	; 0x30
 8007d92:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8007d96:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8007d9a:	f807 4b01 	strb.w	r4, [r7], #1
 8007d9e:	f7f8 fe0d 	bl	80009bc <__aeabi_dcmplt>
 8007da2:	2800      	cmp	r0, #0
 8007da4:	d174      	bne.n	8007e90 <_dtoa_r+0x648>
 8007da6:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8007daa:	2000      	movs	r0, #0
 8007dac:	4911      	ldr	r1, [pc, #68]	; (8007df4 <_dtoa_r+0x5ac>)
 8007dae:	f7f8 f9db 	bl	8000168 <__aeabi_dsub>
 8007db2:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8007db6:	f7f8 fe01 	bl	80009bc <__aeabi_dcmplt>
 8007dba:	2800      	cmp	r0, #0
 8007dbc:	f040 80b6 	bne.w	8007f2c <_dtoa_r+0x6e4>
 8007dc0:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8007dc2:	429f      	cmp	r7, r3
 8007dc4:	f43f af7a 	beq.w	8007cbc <_dtoa_r+0x474>
 8007dc8:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8007dcc:	2200      	movs	r2, #0
 8007dce:	4b0a      	ldr	r3, [pc, #40]	; (8007df8 <_dtoa_r+0x5b0>)
 8007dd0:	f7f8 fb82 	bl	80004d8 <__aeabi_dmul>
 8007dd4:	2200      	movs	r2, #0
 8007dd6:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 8007dda:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8007dde:	4b06      	ldr	r3, [pc, #24]	; (8007df8 <_dtoa_r+0x5b0>)
 8007de0:	f7f8 fb7a 	bl	80004d8 <__aeabi_dmul>
 8007de4:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8007de8:	e7c3      	b.n	8007d72 <_dtoa_r+0x52a>
 8007dea:	bf00      	nop
 8007dec:	0800a9a8 	.word	0x0800a9a8
 8007df0:	0800a980 	.word	0x0800a980
 8007df4:	3ff00000 	.word	0x3ff00000
 8007df8:	40240000 	.word	0x40240000
 8007dfc:	401c0000 	.word	0x401c0000
 8007e00:	40140000 	.word	0x40140000
 8007e04:	3fe00000 	.word	0x3fe00000
 8007e08:	4630      	mov	r0, r6
 8007e0a:	4639      	mov	r1, r7
 8007e0c:	f7f8 fb64 	bl	80004d8 <__aeabi_dmul>
 8007e10:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8007e12:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 8007e16:	9c08      	ldr	r4, [sp, #32]
 8007e18:	9314      	str	r3, [sp, #80]	; 0x50
 8007e1a:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8007e1e:	f7f8 fe0b 	bl	8000a38 <__aeabi_d2iz>
 8007e22:	9015      	str	r0, [sp, #84]	; 0x54
 8007e24:	f7f8 faee 	bl	8000404 <__aeabi_i2d>
 8007e28:	4602      	mov	r2, r0
 8007e2a:	460b      	mov	r3, r1
 8007e2c:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8007e30:	f7f8 f99a 	bl	8000168 <__aeabi_dsub>
 8007e34:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8007e36:	4606      	mov	r6, r0
 8007e38:	3330      	adds	r3, #48	; 0x30
 8007e3a:	f804 3b01 	strb.w	r3, [r4], #1
 8007e3e:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8007e40:	460f      	mov	r7, r1
 8007e42:	429c      	cmp	r4, r3
 8007e44:	f04f 0200 	mov.w	r2, #0
 8007e48:	d124      	bne.n	8007e94 <_dtoa_r+0x64c>
 8007e4a:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8007e4e:	4bb3      	ldr	r3, [pc, #716]	; (800811c <_dtoa_r+0x8d4>)
 8007e50:	f7f8 f98c 	bl	800016c <__adddf3>
 8007e54:	4602      	mov	r2, r0
 8007e56:	460b      	mov	r3, r1
 8007e58:	4630      	mov	r0, r6
 8007e5a:	4639      	mov	r1, r7
 8007e5c:	f7f8 fdcc 	bl	80009f8 <__aeabi_dcmpgt>
 8007e60:	2800      	cmp	r0, #0
 8007e62:	d162      	bne.n	8007f2a <_dtoa_r+0x6e2>
 8007e64:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8007e68:	2000      	movs	r0, #0
 8007e6a:	49ac      	ldr	r1, [pc, #688]	; (800811c <_dtoa_r+0x8d4>)
 8007e6c:	f7f8 f97c 	bl	8000168 <__aeabi_dsub>
 8007e70:	4602      	mov	r2, r0
 8007e72:	460b      	mov	r3, r1
 8007e74:	4630      	mov	r0, r6
 8007e76:	4639      	mov	r1, r7
 8007e78:	f7f8 fda0 	bl	80009bc <__aeabi_dcmplt>
 8007e7c:	2800      	cmp	r0, #0
 8007e7e:	f43f af1d 	beq.w	8007cbc <_dtoa_r+0x474>
 8007e82:	9f14      	ldr	r7, [sp, #80]	; 0x50
 8007e84:	1e7b      	subs	r3, r7, #1
 8007e86:	9314      	str	r3, [sp, #80]	; 0x50
 8007e88:	f817 3c01 	ldrb.w	r3, [r7, #-1]
 8007e8c:	2b30      	cmp	r3, #48	; 0x30
 8007e8e:	d0f8      	beq.n	8007e82 <_dtoa_r+0x63a>
 8007e90:	46c1      	mov	r9, r8
 8007e92:	e03a      	b.n	8007f0a <_dtoa_r+0x6c2>
 8007e94:	4ba2      	ldr	r3, [pc, #648]	; (8008120 <_dtoa_r+0x8d8>)
 8007e96:	f7f8 fb1f 	bl	80004d8 <__aeabi_dmul>
 8007e9a:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8007e9e:	e7bc      	b.n	8007e1a <_dtoa_r+0x5d2>
 8007ea0:	9f08      	ldr	r7, [sp, #32]
 8007ea2:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8007ea6:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8007eaa:	f7f8 fc3f 	bl	800072c <__aeabi_ddiv>
 8007eae:	f7f8 fdc3 	bl	8000a38 <__aeabi_d2iz>
 8007eb2:	4604      	mov	r4, r0
 8007eb4:	f7f8 faa6 	bl	8000404 <__aeabi_i2d>
 8007eb8:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8007ebc:	f7f8 fb0c 	bl	80004d8 <__aeabi_dmul>
 8007ec0:	f104 0630 	add.w	r6, r4, #48	; 0x30
 8007ec4:	460b      	mov	r3, r1
 8007ec6:	4602      	mov	r2, r0
 8007ec8:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8007ecc:	f7f8 f94c 	bl	8000168 <__aeabi_dsub>
 8007ed0:	f807 6b01 	strb.w	r6, [r7], #1
 8007ed4:	9e08      	ldr	r6, [sp, #32]
 8007ed6:	9b02      	ldr	r3, [sp, #8]
 8007ed8:	1bbe      	subs	r6, r7, r6
 8007eda:	42b3      	cmp	r3, r6
 8007edc:	d13a      	bne.n	8007f54 <_dtoa_r+0x70c>
 8007ede:	4602      	mov	r2, r0
 8007ee0:	460b      	mov	r3, r1
 8007ee2:	f7f8 f943 	bl	800016c <__adddf3>
 8007ee6:	4602      	mov	r2, r0
 8007ee8:	460b      	mov	r3, r1
 8007eea:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8007eee:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8007ef2:	f7f8 fd81 	bl	80009f8 <__aeabi_dcmpgt>
 8007ef6:	bb58      	cbnz	r0, 8007f50 <_dtoa_r+0x708>
 8007ef8:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8007efc:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8007f00:	f7f8 fd52 	bl	80009a8 <__aeabi_dcmpeq>
 8007f04:	b108      	cbz	r0, 8007f0a <_dtoa_r+0x6c2>
 8007f06:	07e1      	lsls	r1, r4, #31
 8007f08:	d422      	bmi.n	8007f50 <_dtoa_r+0x708>
 8007f0a:	4628      	mov	r0, r5
 8007f0c:	4651      	mov	r1, sl
 8007f0e:	f000 fe69 	bl	8008be4 <_Bfree>
 8007f12:	2300      	movs	r3, #0
 8007f14:	703b      	strb	r3, [r7, #0]
 8007f16:	9b24      	ldr	r3, [sp, #144]	; 0x90
 8007f18:	f109 0001 	add.w	r0, r9, #1
 8007f1c:	6018      	str	r0, [r3, #0]
 8007f1e:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8007f20:	2b00      	cmp	r3, #0
 8007f22:	f43f acdf 	beq.w	80078e4 <_dtoa_r+0x9c>
 8007f26:	601f      	str	r7, [r3, #0]
 8007f28:	e4dc      	b.n	80078e4 <_dtoa_r+0x9c>
 8007f2a:	4627      	mov	r7, r4
 8007f2c:	463b      	mov	r3, r7
 8007f2e:	461f      	mov	r7, r3
 8007f30:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8007f34:	2a39      	cmp	r2, #57	; 0x39
 8007f36:	d107      	bne.n	8007f48 <_dtoa_r+0x700>
 8007f38:	9a08      	ldr	r2, [sp, #32]
 8007f3a:	429a      	cmp	r2, r3
 8007f3c:	d1f7      	bne.n	8007f2e <_dtoa_r+0x6e6>
 8007f3e:	2230      	movs	r2, #48	; 0x30
 8007f40:	9908      	ldr	r1, [sp, #32]
 8007f42:	f108 0801 	add.w	r8, r8, #1
 8007f46:	700a      	strb	r2, [r1, #0]
 8007f48:	781a      	ldrb	r2, [r3, #0]
 8007f4a:	3201      	adds	r2, #1
 8007f4c:	701a      	strb	r2, [r3, #0]
 8007f4e:	e79f      	b.n	8007e90 <_dtoa_r+0x648>
 8007f50:	46c8      	mov	r8, r9
 8007f52:	e7eb      	b.n	8007f2c <_dtoa_r+0x6e4>
 8007f54:	2200      	movs	r2, #0
 8007f56:	4b72      	ldr	r3, [pc, #456]	; (8008120 <_dtoa_r+0x8d8>)
 8007f58:	f7f8 fabe 	bl	80004d8 <__aeabi_dmul>
 8007f5c:	4602      	mov	r2, r0
 8007f5e:	460b      	mov	r3, r1
 8007f60:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8007f64:	2200      	movs	r2, #0
 8007f66:	2300      	movs	r3, #0
 8007f68:	f7f8 fd1e 	bl	80009a8 <__aeabi_dcmpeq>
 8007f6c:	2800      	cmp	r0, #0
 8007f6e:	d098      	beq.n	8007ea2 <_dtoa_r+0x65a>
 8007f70:	e7cb      	b.n	8007f0a <_dtoa_r+0x6c2>
 8007f72:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8007f74:	2a00      	cmp	r2, #0
 8007f76:	f000 80cd 	beq.w	8008114 <_dtoa_r+0x8cc>
 8007f7a:	9a22      	ldr	r2, [sp, #136]	; 0x88
 8007f7c:	2a01      	cmp	r2, #1
 8007f7e:	f300 80af 	bgt.w	80080e0 <_dtoa_r+0x898>
 8007f82:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8007f84:	2a00      	cmp	r2, #0
 8007f86:	f000 80a7 	beq.w	80080d8 <_dtoa_r+0x890>
 8007f8a:	f203 4333 	addw	r3, r3, #1075	; 0x433
 8007f8e:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 8007f90:	9f06      	ldr	r7, [sp, #24]
 8007f92:	9a06      	ldr	r2, [sp, #24]
 8007f94:	2101      	movs	r1, #1
 8007f96:	441a      	add	r2, r3
 8007f98:	9206      	str	r2, [sp, #24]
 8007f9a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8007f9c:	4628      	mov	r0, r5
 8007f9e:	441a      	add	r2, r3
 8007fa0:	9209      	str	r2, [sp, #36]	; 0x24
 8007fa2:	f000 ff23 	bl	8008dec <__i2b>
 8007fa6:	4606      	mov	r6, r0
 8007fa8:	2f00      	cmp	r7, #0
 8007faa:	dd0c      	ble.n	8007fc6 <_dtoa_r+0x77e>
 8007fac:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007fae:	2b00      	cmp	r3, #0
 8007fb0:	dd09      	ble.n	8007fc6 <_dtoa_r+0x77e>
 8007fb2:	42bb      	cmp	r3, r7
 8007fb4:	bfa8      	it	ge
 8007fb6:	463b      	movge	r3, r7
 8007fb8:	9a06      	ldr	r2, [sp, #24]
 8007fba:	1aff      	subs	r7, r7, r3
 8007fbc:	1ad2      	subs	r2, r2, r3
 8007fbe:	9206      	str	r2, [sp, #24]
 8007fc0:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8007fc2:	1ad3      	subs	r3, r2, r3
 8007fc4:	9309      	str	r3, [sp, #36]	; 0x24
 8007fc6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007fc8:	b1f3      	cbz	r3, 8008008 <_dtoa_r+0x7c0>
 8007fca:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8007fcc:	2b00      	cmp	r3, #0
 8007fce:	f000 80a9 	beq.w	8008124 <_dtoa_r+0x8dc>
 8007fd2:	2c00      	cmp	r4, #0
 8007fd4:	dd10      	ble.n	8007ff8 <_dtoa_r+0x7b0>
 8007fd6:	4631      	mov	r1, r6
 8007fd8:	4622      	mov	r2, r4
 8007fda:	4628      	mov	r0, r5
 8007fdc:	f000 ffc0 	bl	8008f60 <__pow5mult>
 8007fe0:	4652      	mov	r2, sl
 8007fe2:	4601      	mov	r1, r0
 8007fe4:	4606      	mov	r6, r0
 8007fe6:	4628      	mov	r0, r5
 8007fe8:	f000 ff16 	bl	8008e18 <__multiply>
 8007fec:	4680      	mov	r8, r0
 8007fee:	4651      	mov	r1, sl
 8007ff0:	4628      	mov	r0, r5
 8007ff2:	f000 fdf7 	bl	8008be4 <_Bfree>
 8007ff6:	46c2      	mov	sl, r8
 8007ff8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007ffa:	1b1a      	subs	r2, r3, r4
 8007ffc:	d004      	beq.n	8008008 <_dtoa_r+0x7c0>
 8007ffe:	4651      	mov	r1, sl
 8008000:	4628      	mov	r0, r5
 8008002:	f000 ffad 	bl	8008f60 <__pow5mult>
 8008006:	4682      	mov	sl, r0
 8008008:	2101      	movs	r1, #1
 800800a:	4628      	mov	r0, r5
 800800c:	f000 feee 	bl	8008dec <__i2b>
 8008010:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8008012:	4604      	mov	r4, r0
 8008014:	2b00      	cmp	r3, #0
 8008016:	f340 8087 	ble.w	8008128 <_dtoa_r+0x8e0>
 800801a:	461a      	mov	r2, r3
 800801c:	4601      	mov	r1, r0
 800801e:	4628      	mov	r0, r5
 8008020:	f000 ff9e 	bl	8008f60 <__pow5mult>
 8008024:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8008026:	4604      	mov	r4, r0
 8008028:	2b01      	cmp	r3, #1
 800802a:	f340 8080 	ble.w	800812e <_dtoa_r+0x8e6>
 800802e:	f04f 0800 	mov.w	r8, #0
 8008032:	6923      	ldr	r3, [r4, #16]
 8008034:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8008038:	6918      	ldr	r0, [r3, #16]
 800803a:	f000 fe89 	bl	8008d50 <__hi0bits>
 800803e:	f1c0 0020 	rsb	r0, r0, #32
 8008042:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008044:	4418      	add	r0, r3
 8008046:	f010 001f 	ands.w	r0, r0, #31
 800804a:	f000 8092 	beq.w	8008172 <_dtoa_r+0x92a>
 800804e:	f1c0 0320 	rsb	r3, r0, #32
 8008052:	2b04      	cmp	r3, #4
 8008054:	f340 808a 	ble.w	800816c <_dtoa_r+0x924>
 8008058:	f1c0 001c 	rsb	r0, r0, #28
 800805c:	9b06      	ldr	r3, [sp, #24]
 800805e:	4407      	add	r7, r0
 8008060:	4403      	add	r3, r0
 8008062:	9306      	str	r3, [sp, #24]
 8008064:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008066:	4403      	add	r3, r0
 8008068:	9309      	str	r3, [sp, #36]	; 0x24
 800806a:	9b06      	ldr	r3, [sp, #24]
 800806c:	2b00      	cmp	r3, #0
 800806e:	dd05      	ble.n	800807c <_dtoa_r+0x834>
 8008070:	4651      	mov	r1, sl
 8008072:	461a      	mov	r2, r3
 8008074:	4628      	mov	r0, r5
 8008076:	f000 ffcd 	bl	8009014 <__lshift>
 800807a:	4682      	mov	sl, r0
 800807c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800807e:	2b00      	cmp	r3, #0
 8008080:	dd05      	ble.n	800808e <_dtoa_r+0x846>
 8008082:	4621      	mov	r1, r4
 8008084:	461a      	mov	r2, r3
 8008086:	4628      	mov	r0, r5
 8008088:	f000 ffc4 	bl	8009014 <__lshift>
 800808c:	4604      	mov	r4, r0
 800808e:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8008090:	2b00      	cmp	r3, #0
 8008092:	d070      	beq.n	8008176 <_dtoa_r+0x92e>
 8008094:	4621      	mov	r1, r4
 8008096:	4650      	mov	r0, sl
 8008098:	f001 f828 	bl	80090ec <__mcmp>
 800809c:	2800      	cmp	r0, #0
 800809e:	da6a      	bge.n	8008176 <_dtoa_r+0x92e>
 80080a0:	2300      	movs	r3, #0
 80080a2:	4651      	mov	r1, sl
 80080a4:	220a      	movs	r2, #10
 80080a6:	4628      	mov	r0, r5
 80080a8:	f000 fdbe 	bl	8008c28 <__multadd>
 80080ac:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80080ae:	4682      	mov	sl, r0
 80080b0:	f109 39ff 	add.w	r9, r9, #4294967295
 80080b4:	2b00      	cmp	r3, #0
 80080b6:	f000 8193 	beq.w	80083e0 <_dtoa_r+0xb98>
 80080ba:	4631      	mov	r1, r6
 80080bc:	2300      	movs	r3, #0
 80080be:	220a      	movs	r2, #10
 80080c0:	4628      	mov	r0, r5
 80080c2:	f000 fdb1 	bl	8008c28 <__multadd>
 80080c6:	f1bb 0f00 	cmp.w	fp, #0
 80080ca:	4606      	mov	r6, r0
 80080cc:	f300 8093 	bgt.w	80081f6 <_dtoa_r+0x9ae>
 80080d0:	9b22      	ldr	r3, [sp, #136]	; 0x88
 80080d2:	2b02      	cmp	r3, #2
 80080d4:	dc57      	bgt.n	8008186 <_dtoa_r+0x93e>
 80080d6:	e08e      	b.n	80081f6 <_dtoa_r+0x9ae>
 80080d8:	9b16      	ldr	r3, [sp, #88]	; 0x58
 80080da:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 80080de:	e756      	b.n	8007f8e <_dtoa_r+0x746>
 80080e0:	9b02      	ldr	r3, [sp, #8]
 80080e2:	1e5c      	subs	r4, r3, #1
 80080e4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80080e6:	42a3      	cmp	r3, r4
 80080e8:	bfb7      	itett	lt
 80080ea:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 80080ec:	1b1c      	subge	r4, r3, r4
 80080ee:	1ae2      	sublt	r2, r4, r3
 80080f0:	9b0e      	ldrlt	r3, [sp, #56]	; 0x38
 80080f2:	bfbe      	ittt	lt
 80080f4:	940a      	strlt	r4, [sp, #40]	; 0x28
 80080f6:	189b      	addlt	r3, r3, r2
 80080f8:	930e      	strlt	r3, [sp, #56]	; 0x38
 80080fa:	9b02      	ldr	r3, [sp, #8]
 80080fc:	bfb8      	it	lt
 80080fe:	2400      	movlt	r4, #0
 8008100:	2b00      	cmp	r3, #0
 8008102:	bfbb      	ittet	lt
 8008104:	9b06      	ldrlt	r3, [sp, #24]
 8008106:	9a02      	ldrlt	r2, [sp, #8]
 8008108:	9f06      	ldrge	r7, [sp, #24]
 800810a:	1a9f      	sublt	r7, r3, r2
 800810c:	bfac      	ite	ge
 800810e:	9b02      	ldrge	r3, [sp, #8]
 8008110:	2300      	movlt	r3, #0
 8008112:	e73e      	b.n	8007f92 <_dtoa_r+0x74a>
 8008114:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 8008116:	9f06      	ldr	r7, [sp, #24]
 8008118:	9e0b      	ldr	r6, [sp, #44]	; 0x2c
 800811a:	e745      	b.n	8007fa8 <_dtoa_r+0x760>
 800811c:	3fe00000 	.word	0x3fe00000
 8008120:	40240000 	.word	0x40240000
 8008124:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8008126:	e76a      	b.n	8007ffe <_dtoa_r+0x7b6>
 8008128:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800812a:	2b01      	cmp	r3, #1
 800812c:	dc19      	bgt.n	8008162 <_dtoa_r+0x91a>
 800812e:	9b04      	ldr	r3, [sp, #16]
 8008130:	b9bb      	cbnz	r3, 8008162 <_dtoa_r+0x91a>
 8008132:	9b05      	ldr	r3, [sp, #20]
 8008134:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8008138:	b99b      	cbnz	r3, 8008162 <_dtoa_r+0x91a>
 800813a:	9b05      	ldr	r3, [sp, #20]
 800813c:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8008140:	0d1b      	lsrs	r3, r3, #20
 8008142:	051b      	lsls	r3, r3, #20
 8008144:	b183      	cbz	r3, 8008168 <_dtoa_r+0x920>
 8008146:	f04f 0801 	mov.w	r8, #1
 800814a:	9b06      	ldr	r3, [sp, #24]
 800814c:	3301      	adds	r3, #1
 800814e:	9306      	str	r3, [sp, #24]
 8008150:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008152:	3301      	adds	r3, #1
 8008154:	9309      	str	r3, [sp, #36]	; 0x24
 8008156:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8008158:	2b00      	cmp	r3, #0
 800815a:	f47f af6a 	bne.w	8008032 <_dtoa_r+0x7ea>
 800815e:	2001      	movs	r0, #1
 8008160:	e76f      	b.n	8008042 <_dtoa_r+0x7fa>
 8008162:	f04f 0800 	mov.w	r8, #0
 8008166:	e7f6      	b.n	8008156 <_dtoa_r+0x90e>
 8008168:	4698      	mov	r8, r3
 800816a:	e7f4      	b.n	8008156 <_dtoa_r+0x90e>
 800816c:	f43f af7d 	beq.w	800806a <_dtoa_r+0x822>
 8008170:	4618      	mov	r0, r3
 8008172:	301c      	adds	r0, #28
 8008174:	e772      	b.n	800805c <_dtoa_r+0x814>
 8008176:	9b02      	ldr	r3, [sp, #8]
 8008178:	2b00      	cmp	r3, #0
 800817a:	dc36      	bgt.n	80081ea <_dtoa_r+0x9a2>
 800817c:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800817e:	2b02      	cmp	r3, #2
 8008180:	dd33      	ble.n	80081ea <_dtoa_r+0x9a2>
 8008182:	f8dd b008 	ldr.w	fp, [sp, #8]
 8008186:	f1bb 0f00 	cmp.w	fp, #0
 800818a:	d10d      	bne.n	80081a8 <_dtoa_r+0x960>
 800818c:	4621      	mov	r1, r4
 800818e:	465b      	mov	r3, fp
 8008190:	2205      	movs	r2, #5
 8008192:	4628      	mov	r0, r5
 8008194:	f000 fd48 	bl	8008c28 <__multadd>
 8008198:	4601      	mov	r1, r0
 800819a:	4604      	mov	r4, r0
 800819c:	4650      	mov	r0, sl
 800819e:	f000 ffa5 	bl	80090ec <__mcmp>
 80081a2:	2800      	cmp	r0, #0
 80081a4:	f73f adb6 	bgt.w	8007d14 <_dtoa_r+0x4cc>
 80081a8:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 80081aa:	9f08      	ldr	r7, [sp, #32]
 80081ac:	ea6f 0903 	mvn.w	r9, r3
 80081b0:	f04f 0800 	mov.w	r8, #0
 80081b4:	4621      	mov	r1, r4
 80081b6:	4628      	mov	r0, r5
 80081b8:	f000 fd14 	bl	8008be4 <_Bfree>
 80081bc:	2e00      	cmp	r6, #0
 80081be:	f43f aea4 	beq.w	8007f0a <_dtoa_r+0x6c2>
 80081c2:	f1b8 0f00 	cmp.w	r8, #0
 80081c6:	d005      	beq.n	80081d4 <_dtoa_r+0x98c>
 80081c8:	45b0      	cmp	r8, r6
 80081ca:	d003      	beq.n	80081d4 <_dtoa_r+0x98c>
 80081cc:	4641      	mov	r1, r8
 80081ce:	4628      	mov	r0, r5
 80081d0:	f000 fd08 	bl	8008be4 <_Bfree>
 80081d4:	4631      	mov	r1, r6
 80081d6:	4628      	mov	r0, r5
 80081d8:	f000 fd04 	bl	8008be4 <_Bfree>
 80081dc:	e695      	b.n	8007f0a <_dtoa_r+0x6c2>
 80081de:	2400      	movs	r4, #0
 80081e0:	4626      	mov	r6, r4
 80081e2:	e7e1      	b.n	80081a8 <_dtoa_r+0x960>
 80081e4:	46c1      	mov	r9, r8
 80081e6:	4626      	mov	r6, r4
 80081e8:	e594      	b.n	8007d14 <_dtoa_r+0x4cc>
 80081ea:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80081ec:	f8dd b008 	ldr.w	fp, [sp, #8]
 80081f0:	2b00      	cmp	r3, #0
 80081f2:	f000 80fc 	beq.w	80083ee <_dtoa_r+0xba6>
 80081f6:	2f00      	cmp	r7, #0
 80081f8:	dd05      	ble.n	8008206 <_dtoa_r+0x9be>
 80081fa:	4631      	mov	r1, r6
 80081fc:	463a      	mov	r2, r7
 80081fe:	4628      	mov	r0, r5
 8008200:	f000 ff08 	bl	8009014 <__lshift>
 8008204:	4606      	mov	r6, r0
 8008206:	f1b8 0f00 	cmp.w	r8, #0
 800820a:	d05c      	beq.n	80082c6 <_dtoa_r+0xa7e>
 800820c:	4628      	mov	r0, r5
 800820e:	6871      	ldr	r1, [r6, #4]
 8008210:	f000 fca8 	bl	8008b64 <_Balloc>
 8008214:	4607      	mov	r7, r0
 8008216:	b928      	cbnz	r0, 8008224 <_dtoa_r+0x9dc>
 8008218:	4602      	mov	r2, r0
 800821a:	f240 21ea 	movw	r1, #746	; 0x2ea
 800821e:	4b7e      	ldr	r3, [pc, #504]	; (8008418 <_dtoa_r+0xbd0>)
 8008220:	f7ff bb26 	b.w	8007870 <_dtoa_r+0x28>
 8008224:	6932      	ldr	r2, [r6, #16]
 8008226:	f106 010c 	add.w	r1, r6, #12
 800822a:	3202      	adds	r2, #2
 800822c:	0092      	lsls	r2, r2, #2
 800822e:	300c      	adds	r0, #12
 8008230:	f000 fc8a 	bl	8008b48 <memcpy>
 8008234:	2201      	movs	r2, #1
 8008236:	4639      	mov	r1, r7
 8008238:	4628      	mov	r0, r5
 800823a:	f000 feeb 	bl	8009014 <__lshift>
 800823e:	46b0      	mov	r8, r6
 8008240:	4606      	mov	r6, r0
 8008242:	9b08      	ldr	r3, [sp, #32]
 8008244:	3301      	adds	r3, #1
 8008246:	9302      	str	r3, [sp, #8]
 8008248:	9b08      	ldr	r3, [sp, #32]
 800824a:	445b      	add	r3, fp
 800824c:	930a      	str	r3, [sp, #40]	; 0x28
 800824e:	9b04      	ldr	r3, [sp, #16]
 8008250:	f003 0301 	and.w	r3, r3, #1
 8008254:	9309      	str	r3, [sp, #36]	; 0x24
 8008256:	9b02      	ldr	r3, [sp, #8]
 8008258:	4621      	mov	r1, r4
 800825a:	4650      	mov	r0, sl
 800825c:	f103 3bff 	add.w	fp, r3, #4294967295
 8008260:	f7ff fa64 	bl	800772c <quorem>
 8008264:	4603      	mov	r3, r0
 8008266:	4641      	mov	r1, r8
 8008268:	3330      	adds	r3, #48	; 0x30
 800826a:	9004      	str	r0, [sp, #16]
 800826c:	4650      	mov	r0, sl
 800826e:	930b      	str	r3, [sp, #44]	; 0x2c
 8008270:	f000 ff3c 	bl	80090ec <__mcmp>
 8008274:	4632      	mov	r2, r6
 8008276:	9006      	str	r0, [sp, #24]
 8008278:	4621      	mov	r1, r4
 800827a:	4628      	mov	r0, r5
 800827c:	f000 ff52 	bl	8009124 <__mdiff>
 8008280:	68c2      	ldr	r2, [r0, #12]
 8008282:	4607      	mov	r7, r0
 8008284:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8008286:	bb02      	cbnz	r2, 80082ca <_dtoa_r+0xa82>
 8008288:	4601      	mov	r1, r0
 800828a:	4650      	mov	r0, sl
 800828c:	f000 ff2e 	bl	80090ec <__mcmp>
 8008290:	4602      	mov	r2, r0
 8008292:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8008294:	4639      	mov	r1, r7
 8008296:	4628      	mov	r0, r5
 8008298:	e9cd 320b 	strd	r3, r2, [sp, #44]	; 0x2c
 800829c:	f000 fca2 	bl	8008be4 <_Bfree>
 80082a0:	9b22      	ldr	r3, [sp, #136]	; 0x88
 80082a2:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80082a4:	9f02      	ldr	r7, [sp, #8]
 80082a6:	ea43 0102 	orr.w	r1, r3, r2
 80082aa:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80082ac:	430b      	orrs	r3, r1
 80082ae:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80082b0:	d10d      	bne.n	80082ce <_dtoa_r+0xa86>
 80082b2:	2b39      	cmp	r3, #57	; 0x39
 80082b4:	d027      	beq.n	8008306 <_dtoa_r+0xabe>
 80082b6:	9a06      	ldr	r2, [sp, #24]
 80082b8:	2a00      	cmp	r2, #0
 80082ba:	dd01      	ble.n	80082c0 <_dtoa_r+0xa78>
 80082bc:	9b04      	ldr	r3, [sp, #16]
 80082be:	3331      	adds	r3, #49	; 0x31
 80082c0:	f88b 3000 	strb.w	r3, [fp]
 80082c4:	e776      	b.n	80081b4 <_dtoa_r+0x96c>
 80082c6:	4630      	mov	r0, r6
 80082c8:	e7b9      	b.n	800823e <_dtoa_r+0x9f6>
 80082ca:	2201      	movs	r2, #1
 80082cc:	e7e2      	b.n	8008294 <_dtoa_r+0xa4c>
 80082ce:	9906      	ldr	r1, [sp, #24]
 80082d0:	2900      	cmp	r1, #0
 80082d2:	db04      	blt.n	80082de <_dtoa_r+0xa96>
 80082d4:	9822      	ldr	r0, [sp, #136]	; 0x88
 80082d6:	4301      	orrs	r1, r0
 80082d8:	9809      	ldr	r0, [sp, #36]	; 0x24
 80082da:	4301      	orrs	r1, r0
 80082dc:	d120      	bne.n	8008320 <_dtoa_r+0xad8>
 80082de:	2a00      	cmp	r2, #0
 80082e0:	ddee      	ble.n	80082c0 <_dtoa_r+0xa78>
 80082e2:	4651      	mov	r1, sl
 80082e4:	2201      	movs	r2, #1
 80082e6:	4628      	mov	r0, r5
 80082e8:	9302      	str	r3, [sp, #8]
 80082ea:	f000 fe93 	bl	8009014 <__lshift>
 80082ee:	4621      	mov	r1, r4
 80082f0:	4682      	mov	sl, r0
 80082f2:	f000 fefb 	bl	80090ec <__mcmp>
 80082f6:	2800      	cmp	r0, #0
 80082f8:	9b02      	ldr	r3, [sp, #8]
 80082fa:	dc02      	bgt.n	8008302 <_dtoa_r+0xaba>
 80082fc:	d1e0      	bne.n	80082c0 <_dtoa_r+0xa78>
 80082fe:	07da      	lsls	r2, r3, #31
 8008300:	d5de      	bpl.n	80082c0 <_dtoa_r+0xa78>
 8008302:	2b39      	cmp	r3, #57	; 0x39
 8008304:	d1da      	bne.n	80082bc <_dtoa_r+0xa74>
 8008306:	2339      	movs	r3, #57	; 0x39
 8008308:	f88b 3000 	strb.w	r3, [fp]
 800830c:	463b      	mov	r3, r7
 800830e:	461f      	mov	r7, r3
 8008310:	f817 2c01 	ldrb.w	r2, [r7, #-1]
 8008314:	3b01      	subs	r3, #1
 8008316:	2a39      	cmp	r2, #57	; 0x39
 8008318:	d050      	beq.n	80083bc <_dtoa_r+0xb74>
 800831a:	3201      	adds	r2, #1
 800831c:	701a      	strb	r2, [r3, #0]
 800831e:	e749      	b.n	80081b4 <_dtoa_r+0x96c>
 8008320:	2a00      	cmp	r2, #0
 8008322:	dd03      	ble.n	800832c <_dtoa_r+0xae4>
 8008324:	2b39      	cmp	r3, #57	; 0x39
 8008326:	d0ee      	beq.n	8008306 <_dtoa_r+0xabe>
 8008328:	3301      	adds	r3, #1
 800832a:	e7c9      	b.n	80082c0 <_dtoa_r+0xa78>
 800832c:	9a02      	ldr	r2, [sp, #8]
 800832e:	990a      	ldr	r1, [sp, #40]	; 0x28
 8008330:	f802 3c01 	strb.w	r3, [r2, #-1]
 8008334:	428a      	cmp	r2, r1
 8008336:	d02a      	beq.n	800838e <_dtoa_r+0xb46>
 8008338:	4651      	mov	r1, sl
 800833a:	2300      	movs	r3, #0
 800833c:	220a      	movs	r2, #10
 800833e:	4628      	mov	r0, r5
 8008340:	f000 fc72 	bl	8008c28 <__multadd>
 8008344:	45b0      	cmp	r8, r6
 8008346:	4682      	mov	sl, r0
 8008348:	f04f 0300 	mov.w	r3, #0
 800834c:	f04f 020a 	mov.w	r2, #10
 8008350:	4641      	mov	r1, r8
 8008352:	4628      	mov	r0, r5
 8008354:	d107      	bne.n	8008366 <_dtoa_r+0xb1e>
 8008356:	f000 fc67 	bl	8008c28 <__multadd>
 800835a:	4680      	mov	r8, r0
 800835c:	4606      	mov	r6, r0
 800835e:	9b02      	ldr	r3, [sp, #8]
 8008360:	3301      	adds	r3, #1
 8008362:	9302      	str	r3, [sp, #8]
 8008364:	e777      	b.n	8008256 <_dtoa_r+0xa0e>
 8008366:	f000 fc5f 	bl	8008c28 <__multadd>
 800836a:	4631      	mov	r1, r6
 800836c:	4680      	mov	r8, r0
 800836e:	2300      	movs	r3, #0
 8008370:	220a      	movs	r2, #10
 8008372:	4628      	mov	r0, r5
 8008374:	f000 fc58 	bl	8008c28 <__multadd>
 8008378:	4606      	mov	r6, r0
 800837a:	e7f0      	b.n	800835e <_dtoa_r+0xb16>
 800837c:	f1bb 0f00 	cmp.w	fp, #0
 8008380:	bfcc      	ite	gt
 8008382:	465f      	movgt	r7, fp
 8008384:	2701      	movle	r7, #1
 8008386:	f04f 0800 	mov.w	r8, #0
 800838a:	9a08      	ldr	r2, [sp, #32]
 800838c:	4417      	add	r7, r2
 800838e:	4651      	mov	r1, sl
 8008390:	2201      	movs	r2, #1
 8008392:	4628      	mov	r0, r5
 8008394:	9302      	str	r3, [sp, #8]
 8008396:	f000 fe3d 	bl	8009014 <__lshift>
 800839a:	4621      	mov	r1, r4
 800839c:	4682      	mov	sl, r0
 800839e:	f000 fea5 	bl	80090ec <__mcmp>
 80083a2:	2800      	cmp	r0, #0
 80083a4:	dcb2      	bgt.n	800830c <_dtoa_r+0xac4>
 80083a6:	d102      	bne.n	80083ae <_dtoa_r+0xb66>
 80083a8:	9b02      	ldr	r3, [sp, #8]
 80083aa:	07db      	lsls	r3, r3, #31
 80083ac:	d4ae      	bmi.n	800830c <_dtoa_r+0xac4>
 80083ae:	463b      	mov	r3, r7
 80083b0:	461f      	mov	r7, r3
 80083b2:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 80083b6:	2a30      	cmp	r2, #48	; 0x30
 80083b8:	d0fa      	beq.n	80083b0 <_dtoa_r+0xb68>
 80083ba:	e6fb      	b.n	80081b4 <_dtoa_r+0x96c>
 80083bc:	9a08      	ldr	r2, [sp, #32]
 80083be:	429a      	cmp	r2, r3
 80083c0:	d1a5      	bne.n	800830e <_dtoa_r+0xac6>
 80083c2:	2331      	movs	r3, #49	; 0x31
 80083c4:	f109 0901 	add.w	r9, r9, #1
 80083c8:	7013      	strb	r3, [r2, #0]
 80083ca:	e6f3      	b.n	80081b4 <_dtoa_r+0x96c>
 80083cc:	4b13      	ldr	r3, [pc, #76]	; (800841c <_dtoa_r+0xbd4>)
 80083ce:	f7ff baa7 	b.w	8007920 <_dtoa_r+0xd8>
 80083d2:	9b26      	ldr	r3, [sp, #152]	; 0x98
 80083d4:	2b00      	cmp	r3, #0
 80083d6:	f47f aa80 	bne.w	80078da <_dtoa_r+0x92>
 80083da:	4b11      	ldr	r3, [pc, #68]	; (8008420 <_dtoa_r+0xbd8>)
 80083dc:	f7ff baa0 	b.w	8007920 <_dtoa_r+0xd8>
 80083e0:	f1bb 0f00 	cmp.w	fp, #0
 80083e4:	dc03      	bgt.n	80083ee <_dtoa_r+0xba6>
 80083e6:	9b22      	ldr	r3, [sp, #136]	; 0x88
 80083e8:	2b02      	cmp	r3, #2
 80083ea:	f73f aecc 	bgt.w	8008186 <_dtoa_r+0x93e>
 80083ee:	9f08      	ldr	r7, [sp, #32]
 80083f0:	4621      	mov	r1, r4
 80083f2:	4650      	mov	r0, sl
 80083f4:	f7ff f99a 	bl	800772c <quorem>
 80083f8:	9a08      	ldr	r2, [sp, #32]
 80083fa:	f100 0330 	add.w	r3, r0, #48	; 0x30
 80083fe:	f807 3b01 	strb.w	r3, [r7], #1
 8008402:	1aba      	subs	r2, r7, r2
 8008404:	4593      	cmp	fp, r2
 8008406:	ddb9      	ble.n	800837c <_dtoa_r+0xb34>
 8008408:	4651      	mov	r1, sl
 800840a:	2300      	movs	r3, #0
 800840c:	220a      	movs	r2, #10
 800840e:	4628      	mov	r0, r5
 8008410:	f000 fc0a 	bl	8008c28 <__multadd>
 8008414:	4682      	mov	sl, r0
 8008416:	e7eb      	b.n	80083f0 <_dtoa_r+0xba8>
 8008418:	0800a88c 	.word	0x0800a88c
 800841c:	0800a68c 	.word	0x0800a68c
 8008420:	0800a809 	.word	0x0800a809

08008424 <rshift>:
 8008424:	6903      	ldr	r3, [r0, #16]
 8008426:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800842a:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 800842e:	f100 0414 	add.w	r4, r0, #20
 8008432:	ea4f 1261 	mov.w	r2, r1, asr #5
 8008436:	dd46      	ble.n	80084c6 <rshift+0xa2>
 8008438:	f011 011f 	ands.w	r1, r1, #31
 800843c:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 8008440:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 8008444:	d10c      	bne.n	8008460 <rshift+0x3c>
 8008446:	4629      	mov	r1, r5
 8008448:	f100 0710 	add.w	r7, r0, #16
 800844c:	42b1      	cmp	r1, r6
 800844e:	d335      	bcc.n	80084bc <rshift+0x98>
 8008450:	1a9b      	subs	r3, r3, r2
 8008452:	009b      	lsls	r3, r3, #2
 8008454:	1eea      	subs	r2, r5, #3
 8008456:	4296      	cmp	r6, r2
 8008458:	bf38      	it	cc
 800845a:	2300      	movcc	r3, #0
 800845c:	4423      	add	r3, r4
 800845e:	e015      	b.n	800848c <rshift+0x68>
 8008460:	46a1      	mov	r9, r4
 8008462:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 8008466:	f1c1 0820 	rsb	r8, r1, #32
 800846a:	40cf      	lsrs	r7, r1
 800846c:	f105 0e04 	add.w	lr, r5, #4
 8008470:	4576      	cmp	r6, lr
 8008472:	46f4      	mov	ip, lr
 8008474:	d816      	bhi.n	80084a4 <rshift+0x80>
 8008476:	1a9b      	subs	r3, r3, r2
 8008478:	009a      	lsls	r2, r3, #2
 800847a:	3a04      	subs	r2, #4
 800847c:	3501      	adds	r5, #1
 800847e:	42ae      	cmp	r6, r5
 8008480:	bf38      	it	cc
 8008482:	2200      	movcc	r2, #0
 8008484:	18a3      	adds	r3, r4, r2
 8008486:	50a7      	str	r7, [r4, r2]
 8008488:	b107      	cbz	r7, 800848c <rshift+0x68>
 800848a:	3304      	adds	r3, #4
 800848c:	42a3      	cmp	r3, r4
 800848e:	eba3 0204 	sub.w	r2, r3, r4
 8008492:	bf08      	it	eq
 8008494:	2300      	moveq	r3, #0
 8008496:	ea4f 02a2 	mov.w	r2, r2, asr #2
 800849a:	6102      	str	r2, [r0, #16]
 800849c:	bf08      	it	eq
 800849e:	6143      	streq	r3, [r0, #20]
 80084a0:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80084a4:	f8dc c000 	ldr.w	ip, [ip]
 80084a8:	fa0c fc08 	lsl.w	ip, ip, r8
 80084ac:	ea4c 0707 	orr.w	r7, ip, r7
 80084b0:	f849 7b04 	str.w	r7, [r9], #4
 80084b4:	f85e 7b04 	ldr.w	r7, [lr], #4
 80084b8:	40cf      	lsrs	r7, r1
 80084ba:	e7d9      	b.n	8008470 <rshift+0x4c>
 80084bc:	f851 cb04 	ldr.w	ip, [r1], #4
 80084c0:	f847 cf04 	str.w	ip, [r7, #4]!
 80084c4:	e7c2      	b.n	800844c <rshift+0x28>
 80084c6:	4623      	mov	r3, r4
 80084c8:	e7e0      	b.n	800848c <rshift+0x68>

080084ca <__hexdig_fun>:
 80084ca:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 80084ce:	2b09      	cmp	r3, #9
 80084d0:	d802      	bhi.n	80084d8 <__hexdig_fun+0xe>
 80084d2:	3820      	subs	r0, #32
 80084d4:	b2c0      	uxtb	r0, r0
 80084d6:	4770      	bx	lr
 80084d8:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 80084dc:	2b05      	cmp	r3, #5
 80084de:	d801      	bhi.n	80084e4 <__hexdig_fun+0x1a>
 80084e0:	3847      	subs	r0, #71	; 0x47
 80084e2:	e7f7      	b.n	80084d4 <__hexdig_fun+0xa>
 80084e4:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 80084e8:	2b05      	cmp	r3, #5
 80084ea:	d801      	bhi.n	80084f0 <__hexdig_fun+0x26>
 80084ec:	3827      	subs	r0, #39	; 0x27
 80084ee:	e7f1      	b.n	80084d4 <__hexdig_fun+0xa>
 80084f0:	2000      	movs	r0, #0
 80084f2:	4770      	bx	lr

080084f4 <__gethex>:
 80084f4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80084f8:	b08b      	sub	sp, #44	; 0x2c
 80084fa:	9306      	str	r3, [sp, #24]
 80084fc:	4bb9      	ldr	r3, [pc, #740]	; (80087e4 <__gethex+0x2f0>)
 80084fe:	9002      	str	r0, [sp, #8]
 8008500:	681b      	ldr	r3, [r3, #0]
 8008502:	468b      	mov	fp, r1
 8008504:	4618      	mov	r0, r3
 8008506:	4690      	mov	r8, r2
 8008508:	9303      	str	r3, [sp, #12]
 800850a:	f7f7 fe21 	bl	8000150 <strlen>
 800850e:	4682      	mov	sl, r0
 8008510:	9b03      	ldr	r3, [sp, #12]
 8008512:	f8db 2000 	ldr.w	r2, [fp]
 8008516:	4403      	add	r3, r0
 8008518:	f813 3c01 	ldrb.w	r3, [r3, #-1]
 800851c:	9307      	str	r3, [sp, #28]
 800851e:	1c93      	adds	r3, r2, #2
 8008520:	f1c2 22ff 	rsb	r2, r2, #4278255360	; 0xff00ff00
 8008524:	f502 027f 	add.w	r2, r2, #16711680	; 0xff0000
 8008528:	32fe      	adds	r2, #254	; 0xfe
 800852a:	18d1      	adds	r1, r2, r3
 800852c:	461f      	mov	r7, r3
 800852e:	f813 0b01 	ldrb.w	r0, [r3], #1
 8008532:	9101      	str	r1, [sp, #4]
 8008534:	2830      	cmp	r0, #48	; 0x30
 8008536:	d0f8      	beq.n	800852a <__gethex+0x36>
 8008538:	f7ff ffc7 	bl	80084ca <__hexdig_fun>
 800853c:	4604      	mov	r4, r0
 800853e:	2800      	cmp	r0, #0
 8008540:	d13a      	bne.n	80085b8 <__gethex+0xc4>
 8008542:	4652      	mov	r2, sl
 8008544:	4638      	mov	r0, r7
 8008546:	9903      	ldr	r1, [sp, #12]
 8008548:	f001 f9ea 	bl	8009920 <strncmp>
 800854c:	4605      	mov	r5, r0
 800854e:	2800      	cmp	r0, #0
 8008550:	d166      	bne.n	8008620 <__gethex+0x12c>
 8008552:	f817 000a 	ldrb.w	r0, [r7, sl]
 8008556:	eb07 060a 	add.w	r6, r7, sl
 800855a:	f7ff ffb6 	bl	80084ca <__hexdig_fun>
 800855e:	2800      	cmp	r0, #0
 8008560:	d060      	beq.n	8008624 <__gethex+0x130>
 8008562:	4633      	mov	r3, r6
 8008564:	7818      	ldrb	r0, [r3, #0]
 8008566:	461f      	mov	r7, r3
 8008568:	2830      	cmp	r0, #48	; 0x30
 800856a:	f103 0301 	add.w	r3, r3, #1
 800856e:	d0f9      	beq.n	8008564 <__gethex+0x70>
 8008570:	f7ff ffab 	bl	80084ca <__hexdig_fun>
 8008574:	2301      	movs	r3, #1
 8008576:	fab0 f480 	clz	r4, r0
 800857a:	4635      	mov	r5, r6
 800857c:	0964      	lsrs	r4, r4, #5
 800857e:	9301      	str	r3, [sp, #4]
 8008580:	463a      	mov	r2, r7
 8008582:	4616      	mov	r6, r2
 8008584:	7830      	ldrb	r0, [r6, #0]
 8008586:	3201      	adds	r2, #1
 8008588:	f7ff ff9f 	bl	80084ca <__hexdig_fun>
 800858c:	2800      	cmp	r0, #0
 800858e:	d1f8      	bne.n	8008582 <__gethex+0x8e>
 8008590:	4652      	mov	r2, sl
 8008592:	4630      	mov	r0, r6
 8008594:	9903      	ldr	r1, [sp, #12]
 8008596:	f001 f9c3 	bl	8009920 <strncmp>
 800859a:	b980      	cbnz	r0, 80085be <__gethex+0xca>
 800859c:	b94d      	cbnz	r5, 80085b2 <__gethex+0xbe>
 800859e:	eb06 050a 	add.w	r5, r6, sl
 80085a2:	462a      	mov	r2, r5
 80085a4:	4616      	mov	r6, r2
 80085a6:	7830      	ldrb	r0, [r6, #0]
 80085a8:	3201      	adds	r2, #1
 80085aa:	f7ff ff8e 	bl	80084ca <__hexdig_fun>
 80085ae:	2800      	cmp	r0, #0
 80085b0:	d1f8      	bne.n	80085a4 <__gethex+0xb0>
 80085b2:	1bad      	subs	r5, r5, r6
 80085b4:	00ad      	lsls	r5, r5, #2
 80085b6:	e004      	b.n	80085c2 <__gethex+0xce>
 80085b8:	2400      	movs	r4, #0
 80085ba:	4625      	mov	r5, r4
 80085bc:	e7e0      	b.n	8008580 <__gethex+0x8c>
 80085be:	2d00      	cmp	r5, #0
 80085c0:	d1f7      	bne.n	80085b2 <__gethex+0xbe>
 80085c2:	7833      	ldrb	r3, [r6, #0]
 80085c4:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 80085c8:	2b50      	cmp	r3, #80	; 0x50
 80085ca:	d139      	bne.n	8008640 <__gethex+0x14c>
 80085cc:	7873      	ldrb	r3, [r6, #1]
 80085ce:	2b2b      	cmp	r3, #43	; 0x2b
 80085d0:	d02a      	beq.n	8008628 <__gethex+0x134>
 80085d2:	2b2d      	cmp	r3, #45	; 0x2d
 80085d4:	d02c      	beq.n	8008630 <__gethex+0x13c>
 80085d6:	f04f 0900 	mov.w	r9, #0
 80085da:	1c71      	adds	r1, r6, #1
 80085dc:	7808      	ldrb	r0, [r1, #0]
 80085de:	f7ff ff74 	bl	80084ca <__hexdig_fun>
 80085e2:	1e43      	subs	r3, r0, #1
 80085e4:	b2db      	uxtb	r3, r3
 80085e6:	2b18      	cmp	r3, #24
 80085e8:	d82a      	bhi.n	8008640 <__gethex+0x14c>
 80085ea:	f1a0 0210 	sub.w	r2, r0, #16
 80085ee:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 80085f2:	f7ff ff6a 	bl	80084ca <__hexdig_fun>
 80085f6:	1e43      	subs	r3, r0, #1
 80085f8:	b2db      	uxtb	r3, r3
 80085fa:	2b18      	cmp	r3, #24
 80085fc:	d91b      	bls.n	8008636 <__gethex+0x142>
 80085fe:	f1b9 0f00 	cmp.w	r9, #0
 8008602:	d000      	beq.n	8008606 <__gethex+0x112>
 8008604:	4252      	negs	r2, r2
 8008606:	4415      	add	r5, r2
 8008608:	f8cb 1000 	str.w	r1, [fp]
 800860c:	b1d4      	cbz	r4, 8008644 <__gethex+0x150>
 800860e:	9b01      	ldr	r3, [sp, #4]
 8008610:	2b00      	cmp	r3, #0
 8008612:	bf14      	ite	ne
 8008614:	2700      	movne	r7, #0
 8008616:	2706      	moveq	r7, #6
 8008618:	4638      	mov	r0, r7
 800861a:	b00b      	add	sp, #44	; 0x2c
 800861c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008620:	463e      	mov	r6, r7
 8008622:	4625      	mov	r5, r4
 8008624:	2401      	movs	r4, #1
 8008626:	e7cc      	b.n	80085c2 <__gethex+0xce>
 8008628:	f04f 0900 	mov.w	r9, #0
 800862c:	1cb1      	adds	r1, r6, #2
 800862e:	e7d5      	b.n	80085dc <__gethex+0xe8>
 8008630:	f04f 0901 	mov.w	r9, #1
 8008634:	e7fa      	b.n	800862c <__gethex+0x138>
 8008636:	230a      	movs	r3, #10
 8008638:	fb03 0202 	mla	r2, r3, r2, r0
 800863c:	3a10      	subs	r2, #16
 800863e:	e7d6      	b.n	80085ee <__gethex+0xfa>
 8008640:	4631      	mov	r1, r6
 8008642:	e7e1      	b.n	8008608 <__gethex+0x114>
 8008644:	4621      	mov	r1, r4
 8008646:	1bf3      	subs	r3, r6, r7
 8008648:	3b01      	subs	r3, #1
 800864a:	2b07      	cmp	r3, #7
 800864c:	dc0a      	bgt.n	8008664 <__gethex+0x170>
 800864e:	9802      	ldr	r0, [sp, #8]
 8008650:	f000 fa88 	bl	8008b64 <_Balloc>
 8008654:	4604      	mov	r4, r0
 8008656:	b940      	cbnz	r0, 800866a <__gethex+0x176>
 8008658:	4602      	mov	r2, r0
 800865a:	21de      	movs	r1, #222	; 0xde
 800865c:	4b62      	ldr	r3, [pc, #392]	; (80087e8 <__gethex+0x2f4>)
 800865e:	4863      	ldr	r0, [pc, #396]	; (80087ec <__gethex+0x2f8>)
 8008660:	f001 f97e 	bl	8009960 <__assert_func>
 8008664:	3101      	adds	r1, #1
 8008666:	105b      	asrs	r3, r3, #1
 8008668:	e7ef      	b.n	800864a <__gethex+0x156>
 800866a:	f04f 0b00 	mov.w	fp, #0
 800866e:	f100 0914 	add.w	r9, r0, #20
 8008672:	f1ca 0301 	rsb	r3, sl, #1
 8008676:	f8cd 9010 	str.w	r9, [sp, #16]
 800867a:	f8cd b004 	str.w	fp, [sp, #4]
 800867e:	9308      	str	r3, [sp, #32]
 8008680:	42b7      	cmp	r7, r6
 8008682:	d33f      	bcc.n	8008704 <__gethex+0x210>
 8008684:	9f04      	ldr	r7, [sp, #16]
 8008686:	9b01      	ldr	r3, [sp, #4]
 8008688:	f847 3b04 	str.w	r3, [r7], #4
 800868c:	eba7 0709 	sub.w	r7, r7, r9
 8008690:	10bf      	asrs	r7, r7, #2
 8008692:	6127      	str	r7, [r4, #16]
 8008694:	4618      	mov	r0, r3
 8008696:	f000 fb5b 	bl	8008d50 <__hi0bits>
 800869a:	017f      	lsls	r7, r7, #5
 800869c:	f8d8 6000 	ldr.w	r6, [r8]
 80086a0:	1a3f      	subs	r7, r7, r0
 80086a2:	42b7      	cmp	r7, r6
 80086a4:	dd62      	ble.n	800876c <__gethex+0x278>
 80086a6:	1bbf      	subs	r7, r7, r6
 80086a8:	4639      	mov	r1, r7
 80086aa:	4620      	mov	r0, r4
 80086ac:	f000 fef1 	bl	8009492 <__any_on>
 80086b0:	4682      	mov	sl, r0
 80086b2:	b1a8      	cbz	r0, 80086e0 <__gethex+0x1ec>
 80086b4:	f04f 0a01 	mov.w	sl, #1
 80086b8:	1e7b      	subs	r3, r7, #1
 80086ba:	1159      	asrs	r1, r3, #5
 80086bc:	f859 1021 	ldr.w	r1, [r9, r1, lsl #2]
 80086c0:	f003 021f 	and.w	r2, r3, #31
 80086c4:	fa0a f202 	lsl.w	r2, sl, r2
 80086c8:	420a      	tst	r2, r1
 80086ca:	d009      	beq.n	80086e0 <__gethex+0x1ec>
 80086cc:	4553      	cmp	r3, sl
 80086ce:	dd05      	ble.n	80086dc <__gethex+0x1e8>
 80086d0:	4620      	mov	r0, r4
 80086d2:	1eb9      	subs	r1, r7, #2
 80086d4:	f000 fedd 	bl	8009492 <__any_on>
 80086d8:	2800      	cmp	r0, #0
 80086da:	d144      	bne.n	8008766 <__gethex+0x272>
 80086dc:	f04f 0a02 	mov.w	sl, #2
 80086e0:	4639      	mov	r1, r7
 80086e2:	4620      	mov	r0, r4
 80086e4:	f7ff fe9e 	bl	8008424 <rshift>
 80086e8:	443d      	add	r5, r7
 80086ea:	f8d8 3008 	ldr.w	r3, [r8, #8]
 80086ee:	42ab      	cmp	r3, r5
 80086f0:	da4a      	bge.n	8008788 <__gethex+0x294>
 80086f2:	4621      	mov	r1, r4
 80086f4:	9802      	ldr	r0, [sp, #8]
 80086f6:	f000 fa75 	bl	8008be4 <_Bfree>
 80086fa:	2300      	movs	r3, #0
 80086fc:	9a14      	ldr	r2, [sp, #80]	; 0x50
 80086fe:	27a3      	movs	r7, #163	; 0xa3
 8008700:	6013      	str	r3, [r2, #0]
 8008702:	e789      	b.n	8008618 <__gethex+0x124>
 8008704:	1e73      	subs	r3, r6, #1
 8008706:	9a07      	ldr	r2, [sp, #28]
 8008708:	9305      	str	r3, [sp, #20]
 800870a:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 800870e:	4293      	cmp	r3, r2
 8008710:	d019      	beq.n	8008746 <__gethex+0x252>
 8008712:	f1bb 0f20 	cmp.w	fp, #32
 8008716:	d107      	bne.n	8008728 <__gethex+0x234>
 8008718:	9b04      	ldr	r3, [sp, #16]
 800871a:	9a01      	ldr	r2, [sp, #4]
 800871c:	f843 2b04 	str.w	r2, [r3], #4
 8008720:	9304      	str	r3, [sp, #16]
 8008722:	2300      	movs	r3, #0
 8008724:	469b      	mov	fp, r3
 8008726:	9301      	str	r3, [sp, #4]
 8008728:	f816 0c01 	ldrb.w	r0, [r6, #-1]
 800872c:	f7ff fecd 	bl	80084ca <__hexdig_fun>
 8008730:	9b01      	ldr	r3, [sp, #4]
 8008732:	f000 000f 	and.w	r0, r0, #15
 8008736:	fa00 f00b 	lsl.w	r0, r0, fp
 800873a:	4303      	orrs	r3, r0
 800873c:	9301      	str	r3, [sp, #4]
 800873e:	f10b 0b04 	add.w	fp, fp, #4
 8008742:	9b05      	ldr	r3, [sp, #20]
 8008744:	e00d      	b.n	8008762 <__gethex+0x26e>
 8008746:	9b05      	ldr	r3, [sp, #20]
 8008748:	9a08      	ldr	r2, [sp, #32]
 800874a:	4413      	add	r3, r2
 800874c:	42bb      	cmp	r3, r7
 800874e:	d3e0      	bcc.n	8008712 <__gethex+0x21e>
 8008750:	4618      	mov	r0, r3
 8008752:	4652      	mov	r2, sl
 8008754:	9903      	ldr	r1, [sp, #12]
 8008756:	9309      	str	r3, [sp, #36]	; 0x24
 8008758:	f001 f8e2 	bl	8009920 <strncmp>
 800875c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800875e:	2800      	cmp	r0, #0
 8008760:	d1d7      	bne.n	8008712 <__gethex+0x21e>
 8008762:	461e      	mov	r6, r3
 8008764:	e78c      	b.n	8008680 <__gethex+0x18c>
 8008766:	f04f 0a03 	mov.w	sl, #3
 800876a:	e7b9      	b.n	80086e0 <__gethex+0x1ec>
 800876c:	da09      	bge.n	8008782 <__gethex+0x28e>
 800876e:	1bf7      	subs	r7, r6, r7
 8008770:	4621      	mov	r1, r4
 8008772:	463a      	mov	r2, r7
 8008774:	9802      	ldr	r0, [sp, #8]
 8008776:	f000 fc4d 	bl	8009014 <__lshift>
 800877a:	4604      	mov	r4, r0
 800877c:	1bed      	subs	r5, r5, r7
 800877e:	f100 0914 	add.w	r9, r0, #20
 8008782:	f04f 0a00 	mov.w	sl, #0
 8008786:	e7b0      	b.n	80086ea <__gethex+0x1f6>
 8008788:	f8d8 0004 	ldr.w	r0, [r8, #4]
 800878c:	42a8      	cmp	r0, r5
 800878e:	dd71      	ble.n	8008874 <__gethex+0x380>
 8008790:	1b45      	subs	r5, r0, r5
 8008792:	42ae      	cmp	r6, r5
 8008794:	dc34      	bgt.n	8008800 <__gethex+0x30c>
 8008796:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800879a:	2b02      	cmp	r3, #2
 800879c:	d028      	beq.n	80087f0 <__gethex+0x2fc>
 800879e:	2b03      	cmp	r3, #3
 80087a0:	d02a      	beq.n	80087f8 <__gethex+0x304>
 80087a2:	2b01      	cmp	r3, #1
 80087a4:	d115      	bne.n	80087d2 <__gethex+0x2de>
 80087a6:	42ae      	cmp	r6, r5
 80087a8:	d113      	bne.n	80087d2 <__gethex+0x2de>
 80087aa:	2e01      	cmp	r6, #1
 80087ac:	d10b      	bne.n	80087c6 <__gethex+0x2d2>
 80087ae:	f8d8 3004 	ldr.w	r3, [r8, #4]
 80087b2:	9a06      	ldr	r2, [sp, #24]
 80087b4:	2762      	movs	r7, #98	; 0x62
 80087b6:	6013      	str	r3, [r2, #0]
 80087b8:	2301      	movs	r3, #1
 80087ba:	6123      	str	r3, [r4, #16]
 80087bc:	f8c9 3000 	str.w	r3, [r9]
 80087c0:	9b14      	ldr	r3, [sp, #80]	; 0x50
 80087c2:	601c      	str	r4, [r3, #0]
 80087c4:	e728      	b.n	8008618 <__gethex+0x124>
 80087c6:	4620      	mov	r0, r4
 80087c8:	1e71      	subs	r1, r6, #1
 80087ca:	f000 fe62 	bl	8009492 <__any_on>
 80087ce:	2800      	cmp	r0, #0
 80087d0:	d1ed      	bne.n	80087ae <__gethex+0x2ba>
 80087d2:	4621      	mov	r1, r4
 80087d4:	9802      	ldr	r0, [sp, #8]
 80087d6:	f000 fa05 	bl	8008be4 <_Bfree>
 80087da:	2300      	movs	r3, #0
 80087dc:	9a14      	ldr	r2, [sp, #80]	; 0x50
 80087de:	2750      	movs	r7, #80	; 0x50
 80087e0:	6013      	str	r3, [r2, #0]
 80087e2:	e719      	b.n	8008618 <__gethex+0x124>
 80087e4:	0800a908 	.word	0x0800a908
 80087e8:	0800a88c 	.word	0x0800a88c
 80087ec:	0800a89d 	.word	0x0800a89d
 80087f0:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80087f2:	2b00      	cmp	r3, #0
 80087f4:	d1ed      	bne.n	80087d2 <__gethex+0x2de>
 80087f6:	e7da      	b.n	80087ae <__gethex+0x2ba>
 80087f8:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80087fa:	2b00      	cmp	r3, #0
 80087fc:	d1d7      	bne.n	80087ae <__gethex+0x2ba>
 80087fe:	e7e8      	b.n	80087d2 <__gethex+0x2de>
 8008800:	1e6f      	subs	r7, r5, #1
 8008802:	f1ba 0f00 	cmp.w	sl, #0
 8008806:	d132      	bne.n	800886e <__gethex+0x37a>
 8008808:	b127      	cbz	r7, 8008814 <__gethex+0x320>
 800880a:	4639      	mov	r1, r7
 800880c:	4620      	mov	r0, r4
 800880e:	f000 fe40 	bl	8009492 <__any_on>
 8008812:	4682      	mov	sl, r0
 8008814:	2101      	movs	r1, #1
 8008816:	117b      	asrs	r3, r7, #5
 8008818:	f859 3023 	ldr.w	r3, [r9, r3, lsl #2]
 800881c:	f007 071f 	and.w	r7, r7, #31
 8008820:	fa01 f707 	lsl.w	r7, r1, r7
 8008824:	421f      	tst	r7, r3
 8008826:	f04f 0702 	mov.w	r7, #2
 800882a:	4629      	mov	r1, r5
 800882c:	4620      	mov	r0, r4
 800882e:	bf18      	it	ne
 8008830:	f04a 0a02 	orrne.w	sl, sl, #2
 8008834:	1b76      	subs	r6, r6, r5
 8008836:	f7ff fdf5 	bl	8008424 <rshift>
 800883a:	f8d8 5004 	ldr.w	r5, [r8, #4]
 800883e:	f1ba 0f00 	cmp.w	sl, #0
 8008842:	d048      	beq.n	80088d6 <__gethex+0x3e2>
 8008844:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8008848:	2b02      	cmp	r3, #2
 800884a:	d015      	beq.n	8008878 <__gethex+0x384>
 800884c:	2b03      	cmp	r3, #3
 800884e:	d017      	beq.n	8008880 <__gethex+0x38c>
 8008850:	2b01      	cmp	r3, #1
 8008852:	d109      	bne.n	8008868 <__gethex+0x374>
 8008854:	f01a 0f02 	tst.w	sl, #2
 8008858:	d006      	beq.n	8008868 <__gethex+0x374>
 800885a:	f8d9 0000 	ldr.w	r0, [r9]
 800885e:	ea4a 0a00 	orr.w	sl, sl, r0
 8008862:	f01a 0f01 	tst.w	sl, #1
 8008866:	d10e      	bne.n	8008886 <__gethex+0x392>
 8008868:	f047 0710 	orr.w	r7, r7, #16
 800886c:	e033      	b.n	80088d6 <__gethex+0x3e2>
 800886e:	f04f 0a01 	mov.w	sl, #1
 8008872:	e7cf      	b.n	8008814 <__gethex+0x320>
 8008874:	2701      	movs	r7, #1
 8008876:	e7e2      	b.n	800883e <__gethex+0x34a>
 8008878:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800887a:	f1c3 0301 	rsb	r3, r3, #1
 800887e:	9315      	str	r3, [sp, #84]	; 0x54
 8008880:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8008882:	2b00      	cmp	r3, #0
 8008884:	d0f0      	beq.n	8008868 <__gethex+0x374>
 8008886:	f04f 0c00 	mov.w	ip, #0
 800888a:	f8d4 b010 	ldr.w	fp, [r4, #16]
 800888e:	f104 0314 	add.w	r3, r4, #20
 8008892:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 8008896:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 800889a:	4618      	mov	r0, r3
 800889c:	f853 2b04 	ldr.w	r2, [r3], #4
 80088a0:	f1b2 3fff 	cmp.w	r2, #4294967295
 80088a4:	d01c      	beq.n	80088e0 <__gethex+0x3ec>
 80088a6:	3201      	adds	r2, #1
 80088a8:	6002      	str	r2, [r0, #0]
 80088aa:	2f02      	cmp	r7, #2
 80088ac:	f104 0314 	add.w	r3, r4, #20
 80088b0:	d13d      	bne.n	800892e <__gethex+0x43a>
 80088b2:	f8d8 2000 	ldr.w	r2, [r8]
 80088b6:	3a01      	subs	r2, #1
 80088b8:	42b2      	cmp	r2, r6
 80088ba:	d10a      	bne.n	80088d2 <__gethex+0x3de>
 80088bc:	2201      	movs	r2, #1
 80088be:	1171      	asrs	r1, r6, #5
 80088c0:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 80088c4:	f006 061f 	and.w	r6, r6, #31
 80088c8:	fa02 f606 	lsl.w	r6, r2, r6
 80088cc:	421e      	tst	r6, r3
 80088ce:	bf18      	it	ne
 80088d0:	4617      	movne	r7, r2
 80088d2:	f047 0720 	orr.w	r7, r7, #32
 80088d6:	9b14      	ldr	r3, [sp, #80]	; 0x50
 80088d8:	601c      	str	r4, [r3, #0]
 80088da:	9b06      	ldr	r3, [sp, #24]
 80088dc:	601d      	str	r5, [r3, #0]
 80088de:	e69b      	b.n	8008618 <__gethex+0x124>
 80088e0:	4299      	cmp	r1, r3
 80088e2:	f843 cc04 	str.w	ip, [r3, #-4]
 80088e6:	d8d8      	bhi.n	800889a <__gethex+0x3a6>
 80088e8:	68a3      	ldr	r3, [r4, #8]
 80088ea:	459b      	cmp	fp, r3
 80088ec:	db17      	blt.n	800891e <__gethex+0x42a>
 80088ee:	6861      	ldr	r1, [r4, #4]
 80088f0:	9802      	ldr	r0, [sp, #8]
 80088f2:	3101      	adds	r1, #1
 80088f4:	f000 f936 	bl	8008b64 <_Balloc>
 80088f8:	4681      	mov	r9, r0
 80088fa:	b918      	cbnz	r0, 8008904 <__gethex+0x410>
 80088fc:	4602      	mov	r2, r0
 80088fe:	2184      	movs	r1, #132	; 0x84
 8008900:	4b19      	ldr	r3, [pc, #100]	; (8008968 <__gethex+0x474>)
 8008902:	e6ac      	b.n	800865e <__gethex+0x16a>
 8008904:	6922      	ldr	r2, [r4, #16]
 8008906:	f104 010c 	add.w	r1, r4, #12
 800890a:	3202      	adds	r2, #2
 800890c:	0092      	lsls	r2, r2, #2
 800890e:	300c      	adds	r0, #12
 8008910:	f000 f91a 	bl	8008b48 <memcpy>
 8008914:	4621      	mov	r1, r4
 8008916:	9802      	ldr	r0, [sp, #8]
 8008918:	f000 f964 	bl	8008be4 <_Bfree>
 800891c:	464c      	mov	r4, r9
 800891e:	6923      	ldr	r3, [r4, #16]
 8008920:	1c5a      	adds	r2, r3, #1
 8008922:	6122      	str	r2, [r4, #16]
 8008924:	2201      	movs	r2, #1
 8008926:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800892a:	615a      	str	r2, [r3, #20]
 800892c:	e7bd      	b.n	80088aa <__gethex+0x3b6>
 800892e:	6922      	ldr	r2, [r4, #16]
 8008930:	455a      	cmp	r2, fp
 8008932:	dd0b      	ble.n	800894c <__gethex+0x458>
 8008934:	2101      	movs	r1, #1
 8008936:	4620      	mov	r0, r4
 8008938:	f7ff fd74 	bl	8008424 <rshift>
 800893c:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8008940:	3501      	adds	r5, #1
 8008942:	42ab      	cmp	r3, r5
 8008944:	f6ff aed5 	blt.w	80086f2 <__gethex+0x1fe>
 8008948:	2701      	movs	r7, #1
 800894a:	e7c2      	b.n	80088d2 <__gethex+0x3de>
 800894c:	f016 061f 	ands.w	r6, r6, #31
 8008950:	d0fa      	beq.n	8008948 <__gethex+0x454>
 8008952:	449a      	add	sl, r3
 8008954:	f85a 0c04 	ldr.w	r0, [sl, #-4]
 8008958:	f000 f9fa 	bl	8008d50 <__hi0bits>
 800895c:	f1c6 0620 	rsb	r6, r6, #32
 8008960:	42b0      	cmp	r0, r6
 8008962:	dbe7      	blt.n	8008934 <__gethex+0x440>
 8008964:	e7f0      	b.n	8008948 <__gethex+0x454>
 8008966:	bf00      	nop
 8008968:	0800a88c 	.word	0x0800a88c

0800896c <L_shift>:
 800896c:	f1c2 0208 	rsb	r2, r2, #8
 8008970:	0092      	lsls	r2, r2, #2
 8008972:	b570      	push	{r4, r5, r6, lr}
 8008974:	f1c2 0620 	rsb	r6, r2, #32
 8008978:	6843      	ldr	r3, [r0, #4]
 800897a:	6804      	ldr	r4, [r0, #0]
 800897c:	fa03 f506 	lsl.w	r5, r3, r6
 8008980:	432c      	orrs	r4, r5
 8008982:	40d3      	lsrs	r3, r2
 8008984:	6004      	str	r4, [r0, #0]
 8008986:	f840 3f04 	str.w	r3, [r0, #4]!
 800898a:	4288      	cmp	r0, r1
 800898c:	d3f4      	bcc.n	8008978 <L_shift+0xc>
 800898e:	bd70      	pop	{r4, r5, r6, pc}

08008990 <__match>:
 8008990:	b530      	push	{r4, r5, lr}
 8008992:	6803      	ldr	r3, [r0, #0]
 8008994:	3301      	adds	r3, #1
 8008996:	f811 4b01 	ldrb.w	r4, [r1], #1
 800899a:	b914      	cbnz	r4, 80089a2 <__match+0x12>
 800899c:	6003      	str	r3, [r0, #0]
 800899e:	2001      	movs	r0, #1
 80089a0:	bd30      	pop	{r4, r5, pc}
 80089a2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80089a6:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 80089aa:	2d19      	cmp	r5, #25
 80089ac:	bf98      	it	ls
 80089ae:	3220      	addls	r2, #32
 80089b0:	42a2      	cmp	r2, r4
 80089b2:	d0f0      	beq.n	8008996 <__match+0x6>
 80089b4:	2000      	movs	r0, #0
 80089b6:	e7f3      	b.n	80089a0 <__match+0x10>

080089b8 <__hexnan>:
 80089b8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80089bc:	2500      	movs	r5, #0
 80089be:	680b      	ldr	r3, [r1, #0]
 80089c0:	4682      	mov	sl, r0
 80089c2:	115e      	asrs	r6, r3, #5
 80089c4:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 80089c8:	f013 031f 	ands.w	r3, r3, #31
 80089cc:	bf18      	it	ne
 80089ce:	3604      	addne	r6, #4
 80089d0:	1f37      	subs	r7, r6, #4
 80089d2:	4690      	mov	r8, r2
 80089d4:	46b9      	mov	r9, r7
 80089d6:	463c      	mov	r4, r7
 80089d8:	46ab      	mov	fp, r5
 80089da:	b087      	sub	sp, #28
 80089dc:	6801      	ldr	r1, [r0, #0]
 80089de:	9301      	str	r3, [sp, #4]
 80089e0:	f846 5c04 	str.w	r5, [r6, #-4]
 80089e4:	9502      	str	r5, [sp, #8]
 80089e6:	784a      	ldrb	r2, [r1, #1]
 80089e8:	1c4b      	adds	r3, r1, #1
 80089ea:	9303      	str	r3, [sp, #12]
 80089ec:	b342      	cbz	r2, 8008a40 <__hexnan+0x88>
 80089ee:	4610      	mov	r0, r2
 80089f0:	9105      	str	r1, [sp, #20]
 80089f2:	9204      	str	r2, [sp, #16]
 80089f4:	f7ff fd69 	bl	80084ca <__hexdig_fun>
 80089f8:	2800      	cmp	r0, #0
 80089fa:	d14f      	bne.n	8008a9c <__hexnan+0xe4>
 80089fc:	9a04      	ldr	r2, [sp, #16]
 80089fe:	9905      	ldr	r1, [sp, #20]
 8008a00:	2a20      	cmp	r2, #32
 8008a02:	d818      	bhi.n	8008a36 <__hexnan+0x7e>
 8008a04:	9b02      	ldr	r3, [sp, #8]
 8008a06:	459b      	cmp	fp, r3
 8008a08:	dd13      	ble.n	8008a32 <__hexnan+0x7a>
 8008a0a:	454c      	cmp	r4, r9
 8008a0c:	d206      	bcs.n	8008a1c <__hexnan+0x64>
 8008a0e:	2d07      	cmp	r5, #7
 8008a10:	dc04      	bgt.n	8008a1c <__hexnan+0x64>
 8008a12:	462a      	mov	r2, r5
 8008a14:	4649      	mov	r1, r9
 8008a16:	4620      	mov	r0, r4
 8008a18:	f7ff ffa8 	bl	800896c <L_shift>
 8008a1c:	4544      	cmp	r4, r8
 8008a1e:	d950      	bls.n	8008ac2 <__hexnan+0x10a>
 8008a20:	2300      	movs	r3, #0
 8008a22:	f1a4 0904 	sub.w	r9, r4, #4
 8008a26:	f844 3c04 	str.w	r3, [r4, #-4]
 8008a2a:	461d      	mov	r5, r3
 8008a2c:	464c      	mov	r4, r9
 8008a2e:	f8cd b008 	str.w	fp, [sp, #8]
 8008a32:	9903      	ldr	r1, [sp, #12]
 8008a34:	e7d7      	b.n	80089e6 <__hexnan+0x2e>
 8008a36:	2a29      	cmp	r2, #41	; 0x29
 8008a38:	d156      	bne.n	8008ae8 <__hexnan+0x130>
 8008a3a:	3102      	adds	r1, #2
 8008a3c:	f8ca 1000 	str.w	r1, [sl]
 8008a40:	f1bb 0f00 	cmp.w	fp, #0
 8008a44:	d050      	beq.n	8008ae8 <__hexnan+0x130>
 8008a46:	454c      	cmp	r4, r9
 8008a48:	d206      	bcs.n	8008a58 <__hexnan+0xa0>
 8008a4a:	2d07      	cmp	r5, #7
 8008a4c:	dc04      	bgt.n	8008a58 <__hexnan+0xa0>
 8008a4e:	462a      	mov	r2, r5
 8008a50:	4649      	mov	r1, r9
 8008a52:	4620      	mov	r0, r4
 8008a54:	f7ff ff8a 	bl	800896c <L_shift>
 8008a58:	4544      	cmp	r4, r8
 8008a5a:	d934      	bls.n	8008ac6 <__hexnan+0x10e>
 8008a5c:	4623      	mov	r3, r4
 8008a5e:	f1a8 0204 	sub.w	r2, r8, #4
 8008a62:	f853 1b04 	ldr.w	r1, [r3], #4
 8008a66:	429f      	cmp	r7, r3
 8008a68:	f842 1f04 	str.w	r1, [r2, #4]!
 8008a6c:	d2f9      	bcs.n	8008a62 <__hexnan+0xaa>
 8008a6e:	1b3b      	subs	r3, r7, r4
 8008a70:	f023 0303 	bic.w	r3, r3, #3
 8008a74:	3304      	adds	r3, #4
 8008a76:	3401      	adds	r4, #1
 8008a78:	3e03      	subs	r6, #3
 8008a7a:	42b4      	cmp	r4, r6
 8008a7c:	bf88      	it	hi
 8008a7e:	2304      	movhi	r3, #4
 8008a80:	2200      	movs	r2, #0
 8008a82:	4443      	add	r3, r8
 8008a84:	f843 2b04 	str.w	r2, [r3], #4
 8008a88:	429f      	cmp	r7, r3
 8008a8a:	d2fb      	bcs.n	8008a84 <__hexnan+0xcc>
 8008a8c:	683b      	ldr	r3, [r7, #0]
 8008a8e:	b91b      	cbnz	r3, 8008a98 <__hexnan+0xe0>
 8008a90:	4547      	cmp	r7, r8
 8008a92:	d127      	bne.n	8008ae4 <__hexnan+0x12c>
 8008a94:	2301      	movs	r3, #1
 8008a96:	603b      	str	r3, [r7, #0]
 8008a98:	2005      	movs	r0, #5
 8008a9a:	e026      	b.n	8008aea <__hexnan+0x132>
 8008a9c:	3501      	adds	r5, #1
 8008a9e:	2d08      	cmp	r5, #8
 8008aa0:	f10b 0b01 	add.w	fp, fp, #1
 8008aa4:	dd06      	ble.n	8008ab4 <__hexnan+0xfc>
 8008aa6:	4544      	cmp	r4, r8
 8008aa8:	d9c3      	bls.n	8008a32 <__hexnan+0x7a>
 8008aaa:	2300      	movs	r3, #0
 8008aac:	2501      	movs	r5, #1
 8008aae:	f844 3c04 	str.w	r3, [r4, #-4]
 8008ab2:	3c04      	subs	r4, #4
 8008ab4:	6822      	ldr	r2, [r4, #0]
 8008ab6:	f000 000f 	and.w	r0, r0, #15
 8008aba:	ea40 1202 	orr.w	r2, r0, r2, lsl #4
 8008abe:	6022      	str	r2, [r4, #0]
 8008ac0:	e7b7      	b.n	8008a32 <__hexnan+0x7a>
 8008ac2:	2508      	movs	r5, #8
 8008ac4:	e7b5      	b.n	8008a32 <__hexnan+0x7a>
 8008ac6:	9b01      	ldr	r3, [sp, #4]
 8008ac8:	2b00      	cmp	r3, #0
 8008aca:	d0df      	beq.n	8008a8c <__hexnan+0xd4>
 8008acc:	f04f 32ff 	mov.w	r2, #4294967295
 8008ad0:	f1c3 0320 	rsb	r3, r3, #32
 8008ad4:	fa22 f303 	lsr.w	r3, r2, r3
 8008ad8:	f856 2c04 	ldr.w	r2, [r6, #-4]
 8008adc:	401a      	ands	r2, r3
 8008ade:	f846 2c04 	str.w	r2, [r6, #-4]
 8008ae2:	e7d3      	b.n	8008a8c <__hexnan+0xd4>
 8008ae4:	3f04      	subs	r7, #4
 8008ae6:	e7d1      	b.n	8008a8c <__hexnan+0xd4>
 8008ae8:	2004      	movs	r0, #4
 8008aea:	b007      	add	sp, #28
 8008aec:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08008af0 <_localeconv_r>:
 8008af0:	4800      	ldr	r0, [pc, #0]	; (8008af4 <_localeconv_r+0x4>)
 8008af2:	4770      	bx	lr
 8008af4:	20000164 	.word	0x20000164

08008af8 <malloc>:
 8008af8:	4b02      	ldr	r3, [pc, #8]	; (8008b04 <malloc+0xc>)
 8008afa:	4601      	mov	r1, r0
 8008afc:	6818      	ldr	r0, [r3, #0]
 8008afe:	f000 bd43 	b.w	8009588 <_malloc_r>
 8008b02:	bf00      	nop
 8008b04:	2000000c 	.word	0x2000000c

08008b08 <__ascii_mbtowc>:
 8008b08:	b082      	sub	sp, #8
 8008b0a:	b901      	cbnz	r1, 8008b0e <__ascii_mbtowc+0x6>
 8008b0c:	a901      	add	r1, sp, #4
 8008b0e:	b142      	cbz	r2, 8008b22 <__ascii_mbtowc+0x1a>
 8008b10:	b14b      	cbz	r3, 8008b26 <__ascii_mbtowc+0x1e>
 8008b12:	7813      	ldrb	r3, [r2, #0]
 8008b14:	600b      	str	r3, [r1, #0]
 8008b16:	7812      	ldrb	r2, [r2, #0]
 8008b18:	1e10      	subs	r0, r2, #0
 8008b1a:	bf18      	it	ne
 8008b1c:	2001      	movne	r0, #1
 8008b1e:	b002      	add	sp, #8
 8008b20:	4770      	bx	lr
 8008b22:	4610      	mov	r0, r2
 8008b24:	e7fb      	b.n	8008b1e <__ascii_mbtowc+0x16>
 8008b26:	f06f 0001 	mvn.w	r0, #1
 8008b2a:	e7f8      	b.n	8008b1e <__ascii_mbtowc+0x16>

08008b2c <memchr>:
 8008b2c:	4603      	mov	r3, r0
 8008b2e:	b510      	push	{r4, lr}
 8008b30:	b2c9      	uxtb	r1, r1
 8008b32:	4402      	add	r2, r0
 8008b34:	4293      	cmp	r3, r2
 8008b36:	4618      	mov	r0, r3
 8008b38:	d101      	bne.n	8008b3e <memchr+0x12>
 8008b3a:	2000      	movs	r0, #0
 8008b3c:	e003      	b.n	8008b46 <memchr+0x1a>
 8008b3e:	7804      	ldrb	r4, [r0, #0]
 8008b40:	3301      	adds	r3, #1
 8008b42:	428c      	cmp	r4, r1
 8008b44:	d1f6      	bne.n	8008b34 <memchr+0x8>
 8008b46:	bd10      	pop	{r4, pc}

08008b48 <memcpy>:
 8008b48:	440a      	add	r2, r1
 8008b4a:	4291      	cmp	r1, r2
 8008b4c:	f100 33ff 	add.w	r3, r0, #4294967295
 8008b50:	d100      	bne.n	8008b54 <memcpy+0xc>
 8008b52:	4770      	bx	lr
 8008b54:	b510      	push	{r4, lr}
 8008b56:	f811 4b01 	ldrb.w	r4, [r1], #1
 8008b5a:	4291      	cmp	r1, r2
 8008b5c:	f803 4f01 	strb.w	r4, [r3, #1]!
 8008b60:	d1f9      	bne.n	8008b56 <memcpy+0xe>
 8008b62:	bd10      	pop	{r4, pc}

08008b64 <_Balloc>:
 8008b64:	b570      	push	{r4, r5, r6, lr}
 8008b66:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8008b68:	4604      	mov	r4, r0
 8008b6a:	460d      	mov	r5, r1
 8008b6c:	b976      	cbnz	r6, 8008b8c <_Balloc+0x28>
 8008b6e:	2010      	movs	r0, #16
 8008b70:	f7ff ffc2 	bl	8008af8 <malloc>
 8008b74:	4602      	mov	r2, r0
 8008b76:	6260      	str	r0, [r4, #36]	; 0x24
 8008b78:	b920      	cbnz	r0, 8008b84 <_Balloc+0x20>
 8008b7a:	2166      	movs	r1, #102	; 0x66
 8008b7c:	4b17      	ldr	r3, [pc, #92]	; (8008bdc <_Balloc+0x78>)
 8008b7e:	4818      	ldr	r0, [pc, #96]	; (8008be0 <_Balloc+0x7c>)
 8008b80:	f000 feee 	bl	8009960 <__assert_func>
 8008b84:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8008b88:	6006      	str	r6, [r0, #0]
 8008b8a:	60c6      	str	r6, [r0, #12]
 8008b8c:	6a66      	ldr	r6, [r4, #36]	; 0x24
 8008b8e:	68f3      	ldr	r3, [r6, #12]
 8008b90:	b183      	cbz	r3, 8008bb4 <_Balloc+0x50>
 8008b92:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8008b94:	68db      	ldr	r3, [r3, #12]
 8008b96:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8008b9a:	b9b8      	cbnz	r0, 8008bcc <_Balloc+0x68>
 8008b9c:	2101      	movs	r1, #1
 8008b9e:	fa01 f605 	lsl.w	r6, r1, r5
 8008ba2:	1d72      	adds	r2, r6, #5
 8008ba4:	4620      	mov	r0, r4
 8008ba6:	0092      	lsls	r2, r2, #2
 8008ba8:	f000 fc94 	bl	80094d4 <_calloc_r>
 8008bac:	b160      	cbz	r0, 8008bc8 <_Balloc+0x64>
 8008bae:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8008bb2:	e00e      	b.n	8008bd2 <_Balloc+0x6e>
 8008bb4:	2221      	movs	r2, #33	; 0x21
 8008bb6:	2104      	movs	r1, #4
 8008bb8:	4620      	mov	r0, r4
 8008bba:	f000 fc8b 	bl	80094d4 <_calloc_r>
 8008bbe:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8008bc0:	60f0      	str	r0, [r6, #12]
 8008bc2:	68db      	ldr	r3, [r3, #12]
 8008bc4:	2b00      	cmp	r3, #0
 8008bc6:	d1e4      	bne.n	8008b92 <_Balloc+0x2e>
 8008bc8:	2000      	movs	r0, #0
 8008bca:	bd70      	pop	{r4, r5, r6, pc}
 8008bcc:	6802      	ldr	r2, [r0, #0]
 8008bce:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8008bd2:	2300      	movs	r3, #0
 8008bd4:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8008bd8:	e7f7      	b.n	8008bca <_Balloc+0x66>
 8008bda:	bf00      	nop
 8008bdc:	0800a816 	.word	0x0800a816
 8008be0:	0800a91c 	.word	0x0800a91c

08008be4 <_Bfree>:
 8008be4:	b570      	push	{r4, r5, r6, lr}
 8008be6:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8008be8:	4605      	mov	r5, r0
 8008bea:	460c      	mov	r4, r1
 8008bec:	b976      	cbnz	r6, 8008c0c <_Bfree+0x28>
 8008bee:	2010      	movs	r0, #16
 8008bf0:	f7ff ff82 	bl	8008af8 <malloc>
 8008bf4:	4602      	mov	r2, r0
 8008bf6:	6268      	str	r0, [r5, #36]	; 0x24
 8008bf8:	b920      	cbnz	r0, 8008c04 <_Bfree+0x20>
 8008bfa:	218a      	movs	r1, #138	; 0x8a
 8008bfc:	4b08      	ldr	r3, [pc, #32]	; (8008c20 <_Bfree+0x3c>)
 8008bfe:	4809      	ldr	r0, [pc, #36]	; (8008c24 <_Bfree+0x40>)
 8008c00:	f000 feae 	bl	8009960 <__assert_func>
 8008c04:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8008c08:	6006      	str	r6, [r0, #0]
 8008c0a:	60c6      	str	r6, [r0, #12]
 8008c0c:	b13c      	cbz	r4, 8008c1e <_Bfree+0x3a>
 8008c0e:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8008c10:	6862      	ldr	r2, [r4, #4]
 8008c12:	68db      	ldr	r3, [r3, #12]
 8008c14:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8008c18:	6021      	str	r1, [r4, #0]
 8008c1a:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8008c1e:	bd70      	pop	{r4, r5, r6, pc}
 8008c20:	0800a816 	.word	0x0800a816
 8008c24:	0800a91c 	.word	0x0800a91c

08008c28 <__multadd>:
 8008c28:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008c2c:	4698      	mov	r8, r3
 8008c2e:	460c      	mov	r4, r1
 8008c30:	2300      	movs	r3, #0
 8008c32:	690e      	ldr	r6, [r1, #16]
 8008c34:	4607      	mov	r7, r0
 8008c36:	f101 0014 	add.w	r0, r1, #20
 8008c3a:	6805      	ldr	r5, [r0, #0]
 8008c3c:	3301      	adds	r3, #1
 8008c3e:	b2a9      	uxth	r1, r5
 8008c40:	fb02 8101 	mla	r1, r2, r1, r8
 8008c44:	0c2d      	lsrs	r5, r5, #16
 8008c46:	ea4f 4c11 	mov.w	ip, r1, lsr #16
 8008c4a:	fb02 c505 	mla	r5, r2, r5, ip
 8008c4e:	b289      	uxth	r1, r1
 8008c50:	eb01 4105 	add.w	r1, r1, r5, lsl #16
 8008c54:	429e      	cmp	r6, r3
 8008c56:	ea4f 4815 	mov.w	r8, r5, lsr #16
 8008c5a:	f840 1b04 	str.w	r1, [r0], #4
 8008c5e:	dcec      	bgt.n	8008c3a <__multadd+0x12>
 8008c60:	f1b8 0f00 	cmp.w	r8, #0
 8008c64:	d022      	beq.n	8008cac <__multadd+0x84>
 8008c66:	68a3      	ldr	r3, [r4, #8]
 8008c68:	42b3      	cmp	r3, r6
 8008c6a:	dc19      	bgt.n	8008ca0 <__multadd+0x78>
 8008c6c:	6861      	ldr	r1, [r4, #4]
 8008c6e:	4638      	mov	r0, r7
 8008c70:	3101      	adds	r1, #1
 8008c72:	f7ff ff77 	bl	8008b64 <_Balloc>
 8008c76:	4605      	mov	r5, r0
 8008c78:	b928      	cbnz	r0, 8008c86 <__multadd+0x5e>
 8008c7a:	4602      	mov	r2, r0
 8008c7c:	21b5      	movs	r1, #181	; 0xb5
 8008c7e:	4b0d      	ldr	r3, [pc, #52]	; (8008cb4 <__multadd+0x8c>)
 8008c80:	480d      	ldr	r0, [pc, #52]	; (8008cb8 <__multadd+0x90>)
 8008c82:	f000 fe6d 	bl	8009960 <__assert_func>
 8008c86:	6922      	ldr	r2, [r4, #16]
 8008c88:	f104 010c 	add.w	r1, r4, #12
 8008c8c:	3202      	adds	r2, #2
 8008c8e:	0092      	lsls	r2, r2, #2
 8008c90:	300c      	adds	r0, #12
 8008c92:	f7ff ff59 	bl	8008b48 <memcpy>
 8008c96:	4621      	mov	r1, r4
 8008c98:	4638      	mov	r0, r7
 8008c9a:	f7ff ffa3 	bl	8008be4 <_Bfree>
 8008c9e:	462c      	mov	r4, r5
 8008ca0:	eb04 0386 	add.w	r3, r4, r6, lsl #2
 8008ca4:	3601      	adds	r6, #1
 8008ca6:	f8c3 8014 	str.w	r8, [r3, #20]
 8008caa:	6126      	str	r6, [r4, #16]
 8008cac:	4620      	mov	r0, r4
 8008cae:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008cb2:	bf00      	nop
 8008cb4:	0800a88c 	.word	0x0800a88c
 8008cb8:	0800a91c 	.word	0x0800a91c

08008cbc <__s2b>:
 8008cbc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008cc0:	4615      	mov	r5, r2
 8008cc2:	2209      	movs	r2, #9
 8008cc4:	461f      	mov	r7, r3
 8008cc6:	3308      	adds	r3, #8
 8008cc8:	460c      	mov	r4, r1
 8008cca:	fb93 f3f2 	sdiv	r3, r3, r2
 8008cce:	4606      	mov	r6, r0
 8008cd0:	2201      	movs	r2, #1
 8008cd2:	2100      	movs	r1, #0
 8008cd4:	429a      	cmp	r2, r3
 8008cd6:	db09      	blt.n	8008cec <__s2b+0x30>
 8008cd8:	4630      	mov	r0, r6
 8008cda:	f7ff ff43 	bl	8008b64 <_Balloc>
 8008cde:	b940      	cbnz	r0, 8008cf2 <__s2b+0x36>
 8008ce0:	4602      	mov	r2, r0
 8008ce2:	21ce      	movs	r1, #206	; 0xce
 8008ce4:	4b18      	ldr	r3, [pc, #96]	; (8008d48 <__s2b+0x8c>)
 8008ce6:	4819      	ldr	r0, [pc, #100]	; (8008d4c <__s2b+0x90>)
 8008ce8:	f000 fe3a 	bl	8009960 <__assert_func>
 8008cec:	0052      	lsls	r2, r2, #1
 8008cee:	3101      	adds	r1, #1
 8008cf0:	e7f0      	b.n	8008cd4 <__s2b+0x18>
 8008cf2:	9b08      	ldr	r3, [sp, #32]
 8008cf4:	2d09      	cmp	r5, #9
 8008cf6:	6143      	str	r3, [r0, #20]
 8008cf8:	f04f 0301 	mov.w	r3, #1
 8008cfc:	6103      	str	r3, [r0, #16]
 8008cfe:	dd16      	ble.n	8008d2e <__s2b+0x72>
 8008d00:	f104 0909 	add.w	r9, r4, #9
 8008d04:	46c8      	mov	r8, r9
 8008d06:	442c      	add	r4, r5
 8008d08:	f818 3b01 	ldrb.w	r3, [r8], #1
 8008d0c:	4601      	mov	r1, r0
 8008d0e:	220a      	movs	r2, #10
 8008d10:	4630      	mov	r0, r6
 8008d12:	3b30      	subs	r3, #48	; 0x30
 8008d14:	f7ff ff88 	bl	8008c28 <__multadd>
 8008d18:	45a0      	cmp	r8, r4
 8008d1a:	d1f5      	bne.n	8008d08 <__s2b+0x4c>
 8008d1c:	f1a5 0408 	sub.w	r4, r5, #8
 8008d20:	444c      	add	r4, r9
 8008d22:	1b2d      	subs	r5, r5, r4
 8008d24:	1963      	adds	r3, r4, r5
 8008d26:	42bb      	cmp	r3, r7
 8008d28:	db04      	blt.n	8008d34 <__s2b+0x78>
 8008d2a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8008d2e:	2509      	movs	r5, #9
 8008d30:	340a      	adds	r4, #10
 8008d32:	e7f6      	b.n	8008d22 <__s2b+0x66>
 8008d34:	f814 3b01 	ldrb.w	r3, [r4], #1
 8008d38:	4601      	mov	r1, r0
 8008d3a:	220a      	movs	r2, #10
 8008d3c:	4630      	mov	r0, r6
 8008d3e:	3b30      	subs	r3, #48	; 0x30
 8008d40:	f7ff ff72 	bl	8008c28 <__multadd>
 8008d44:	e7ee      	b.n	8008d24 <__s2b+0x68>
 8008d46:	bf00      	nop
 8008d48:	0800a88c 	.word	0x0800a88c
 8008d4c:	0800a91c 	.word	0x0800a91c

08008d50 <__hi0bits>:
 8008d50:	0c02      	lsrs	r2, r0, #16
 8008d52:	0412      	lsls	r2, r2, #16
 8008d54:	4603      	mov	r3, r0
 8008d56:	b9ca      	cbnz	r2, 8008d8c <__hi0bits+0x3c>
 8008d58:	0403      	lsls	r3, r0, #16
 8008d5a:	2010      	movs	r0, #16
 8008d5c:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
 8008d60:	bf04      	itt	eq
 8008d62:	021b      	lsleq	r3, r3, #8
 8008d64:	3008      	addeq	r0, #8
 8008d66:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
 8008d6a:	bf04      	itt	eq
 8008d6c:	011b      	lsleq	r3, r3, #4
 8008d6e:	3004      	addeq	r0, #4
 8008d70:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
 8008d74:	bf04      	itt	eq
 8008d76:	009b      	lsleq	r3, r3, #2
 8008d78:	3002      	addeq	r0, #2
 8008d7a:	2b00      	cmp	r3, #0
 8008d7c:	db05      	blt.n	8008d8a <__hi0bits+0x3a>
 8008d7e:	f013 4f80 	tst.w	r3, #1073741824	; 0x40000000
 8008d82:	f100 0001 	add.w	r0, r0, #1
 8008d86:	bf08      	it	eq
 8008d88:	2020      	moveq	r0, #32
 8008d8a:	4770      	bx	lr
 8008d8c:	2000      	movs	r0, #0
 8008d8e:	e7e5      	b.n	8008d5c <__hi0bits+0xc>

08008d90 <__lo0bits>:
 8008d90:	6803      	ldr	r3, [r0, #0]
 8008d92:	4602      	mov	r2, r0
 8008d94:	f013 0007 	ands.w	r0, r3, #7
 8008d98:	d00b      	beq.n	8008db2 <__lo0bits+0x22>
 8008d9a:	07d9      	lsls	r1, r3, #31
 8008d9c:	d422      	bmi.n	8008de4 <__lo0bits+0x54>
 8008d9e:	0798      	lsls	r0, r3, #30
 8008da0:	bf49      	itett	mi
 8008da2:	085b      	lsrmi	r3, r3, #1
 8008da4:	089b      	lsrpl	r3, r3, #2
 8008da6:	2001      	movmi	r0, #1
 8008da8:	6013      	strmi	r3, [r2, #0]
 8008daa:	bf5c      	itt	pl
 8008dac:	2002      	movpl	r0, #2
 8008dae:	6013      	strpl	r3, [r2, #0]
 8008db0:	4770      	bx	lr
 8008db2:	b299      	uxth	r1, r3
 8008db4:	b909      	cbnz	r1, 8008dba <__lo0bits+0x2a>
 8008db6:	2010      	movs	r0, #16
 8008db8:	0c1b      	lsrs	r3, r3, #16
 8008dba:	f013 0fff 	tst.w	r3, #255	; 0xff
 8008dbe:	bf04      	itt	eq
 8008dc0:	0a1b      	lsreq	r3, r3, #8
 8008dc2:	3008      	addeq	r0, #8
 8008dc4:	0719      	lsls	r1, r3, #28
 8008dc6:	bf04      	itt	eq
 8008dc8:	091b      	lsreq	r3, r3, #4
 8008dca:	3004      	addeq	r0, #4
 8008dcc:	0799      	lsls	r1, r3, #30
 8008dce:	bf04      	itt	eq
 8008dd0:	089b      	lsreq	r3, r3, #2
 8008dd2:	3002      	addeq	r0, #2
 8008dd4:	07d9      	lsls	r1, r3, #31
 8008dd6:	d403      	bmi.n	8008de0 <__lo0bits+0x50>
 8008dd8:	085b      	lsrs	r3, r3, #1
 8008dda:	f100 0001 	add.w	r0, r0, #1
 8008dde:	d003      	beq.n	8008de8 <__lo0bits+0x58>
 8008de0:	6013      	str	r3, [r2, #0]
 8008de2:	4770      	bx	lr
 8008de4:	2000      	movs	r0, #0
 8008de6:	4770      	bx	lr
 8008de8:	2020      	movs	r0, #32
 8008dea:	4770      	bx	lr

08008dec <__i2b>:
 8008dec:	b510      	push	{r4, lr}
 8008dee:	460c      	mov	r4, r1
 8008df0:	2101      	movs	r1, #1
 8008df2:	f7ff feb7 	bl	8008b64 <_Balloc>
 8008df6:	4602      	mov	r2, r0
 8008df8:	b928      	cbnz	r0, 8008e06 <__i2b+0x1a>
 8008dfa:	f44f 71a0 	mov.w	r1, #320	; 0x140
 8008dfe:	4b04      	ldr	r3, [pc, #16]	; (8008e10 <__i2b+0x24>)
 8008e00:	4804      	ldr	r0, [pc, #16]	; (8008e14 <__i2b+0x28>)
 8008e02:	f000 fdad 	bl	8009960 <__assert_func>
 8008e06:	2301      	movs	r3, #1
 8008e08:	6144      	str	r4, [r0, #20]
 8008e0a:	6103      	str	r3, [r0, #16]
 8008e0c:	bd10      	pop	{r4, pc}
 8008e0e:	bf00      	nop
 8008e10:	0800a88c 	.word	0x0800a88c
 8008e14:	0800a91c 	.word	0x0800a91c

08008e18 <__multiply>:
 8008e18:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008e1c:	4614      	mov	r4, r2
 8008e1e:	690a      	ldr	r2, [r1, #16]
 8008e20:	6923      	ldr	r3, [r4, #16]
 8008e22:	460d      	mov	r5, r1
 8008e24:	429a      	cmp	r2, r3
 8008e26:	bfbe      	ittt	lt
 8008e28:	460b      	movlt	r3, r1
 8008e2a:	4625      	movlt	r5, r4
 8008e2c:	461c      	movlt	r4, r3
 8008e2e:	f8d5 a010 	ldr.w	sl, [r5, #16]
 8008e32:	f8d4 9010 	ldr.w	r9, [r4, #16]
 8008e36:	68ab      	ldr	r3, [r5, #8]
 8008e38:	6869      	ldr	r1, [r5, #4]
 8008e3a:	eb0a 0709 	add.w	r7, sl, r9
 8008e3e:	42bb      	cmp	r3, r7
 8008e40:	b085      	sub	sp, #20
 8008e42:	bfb8      	it	lt
 8008e44:	3101      	addlt	r1, #1
 8008e46:	f7ff fe8d 	bl	8008b64 <_Balloc>
 8008e4a:	b930      	cbnz	r0, 8008e5a <__multiply+0x42>
 8008e4c:	4602      	mov	r2, r0
 8008e4e:	f240 115d 	movw	r1, #349	; 0x15d
 8008e52:	4b41      	ldr	r3, [pc, #260]	; (8008f58 <__multiply+0x140>)
 8008e54:	4841      	ldr	r0, [pc, #260]	; (8008f5c <__multiply+0x144>)
 8008e56:	f000 fd83 	bl	8009960 <__assert_func>
 8008e5a:	f100 0614 	add.w	r6, r0, #20
 8008e5e:	4633      	mov	r3, r6
 8008e60:	2200      	movs	r2, #0
 8008e62:	eb06 0887 	add.w	r8, r6, r7, lsl #2
 8008e66:	4543      	cmp	r3, r8
 8008e68:	d31e      	bcc.n	8008ea8 <__multiply+0x90>
 8008e6a:	f105 0c14 	add.w	ip, r5, #20
 8008e6e:	f104 0314 	add.w	r3, r4, #20
 8008e72:	eb0c 0c8a 	add.w	ip, ip, sl, lsl #2
 8008e76:	eb03 0289 	add.w	r2, r3, r9, lsl #2
 8008e7a:	9202      	str	r2, [sp, #8]
 8008e7c:	ebac 0205 	sub.w	r2, ip, r5
 8008e80:	3a15      	subs	r2, #21
 8008e82:	f022 0203 	bic.w	r2, r2, #3
 8008e86:	3204      	adds	r2, #4
 8008e88:	f105 0115 	add.w	r1, r5, #21
 8008e8c:	458c      	cmp	ip, r1
 8008e8e:	bf38      	it	cc
 8008e90:	2204      	movcc	r2, #4
 8008e92:	9201      	str	r2, [sp, #4]
 8008e94:	9a02      	ldr	r2, [sp, #8]
 8008e96:	9303      	str	r3, [sp, #12]
 8008e98:	429a      	cmp	r2, r3
 8008e9a:	d808      	bhi.n	8008eae <__multiply+0x96>
 8008e9c:	2f00      	cmp	r7, #0
 8008e9e:	dc55      	bgt.n	8008f4c <__multiply+0x134>
 8008ea0:	6107      	str	r7, [r0, #16]
 8008ea2:	b005      	add	sp, #20
 8008ea4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008ea8:	f843 2b04 	str.w	r2, [r3], #4
 8008eac:	e7db      	b.n	8008e66 <__multiply+0x4e>
 8008eae:	f8b3 a000 	ldrh.w	sl, [r3]
 8008eb2:	f1ba 0f00 	cmp.w	sl, #0
 8008eb6:	d020      	beq.n	8008efa <__multiply+0xe2>
 8008eb8:	46b1      	mov	r9, r6
 8008eba:	2200      	movs	r2, #0
 8008ebc:	f105 0e14 	add.w	lr, r5, #20
 8008ec0:	f85e 4b04 	ldr.w	r4, [lr], #4
 8008ec4:	f8d9 b000 	ldr.w	fp, [r9]
 8008ec8:	b2a1      	uxth	r1, r4
 8008eca:	fa1f fb8b 	uxth.w	fp, fp
 8008ece:	fb0a b101 	mla	r1, sl, r1, fp
 8008ed2:	4411      	add	r1, r2
 8008ed4:	f8d9 2000 	ldr.w	r2, [r9]
 8008ed8:	0c24      	lsrs	r4, r4, #16
 8008eda:	0c12      	lsrs	r2, r2, #16
 8008edc:	fb0a 2404 	mla	r4, sl, r4, r2
 8008ee0:	eb04 4411 	add.w	r4, r4, r1, lsr #16
 8008ee4:	b289      	uxth	r1, r1
 8008ee6:	ea41 4104 	orr.w	r1, r1, r4, lsl #16
 8008eea:	45f4      	cmp	ip, lr
 8008eec:	ea4f 4214 	mov.w	r2, r4, lsr #16
 8008ef0:	f849 1b04 	str.w	r1, [r9], #4
 8008ef4:	d8e4      	bhi.n	8008ec0 <__multiply+0xa8>
 8008ef6:	9901      	ldr	r1, [sp, #4]
 8008ef8:	5072      	str	r2, [r6, r1]
 8008efa:	9a03      	ldr	r2, [sp, #12]
 8008efc:	3304      	adds	r3, #4
 8008efe:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 8008f02:	f1b9 0f00 	cmp.w	r9, #0
 8008f06:	d01f      	beq.n	8008f48 <__multiply+0x130>
 8008f08:	46b6      	mov	lr, r6
 8008f0a:	f04f 0a00 	mov.w	sl, #0
 8008f0e:	6834      	ldr	r4, [r6, #0]
 8008f10:	f105 0114 	add.w	r1, r5, #20
 8008f14:	880a      	ldrh	r2, [r1, #0]
 8008f16:	f8be b002 	ldrh.w	fp, [lr, #2]
 8008f1a:	b2a4      	uxth	r4, r4
 8008f1c:	fb09 b202 	mla	r2, r9, r2, fp
 8008f20:	4492      	add	sl, r2
 8008f22:	ea44 440a 	orr.w	r4, r4, sl, lsl #16
 8008f26:	f84e 4b04 	str.w	r4, [lr], #4
 8008f2a:	f851 4b04 	ldr.w	r4, [r1], #4
 8008f2e:	f8be 2000 	ldrh.w	r2, [lr]
 8008f32:	0c24      	lsrs	r4, r4, #16
 8008f34:	fb09 2404 	mla	r4, r9, r4, r2
 8008f38:	458c      	cmp	ip, r1
 8008f3a:	eb04 441a 	add.w	r4, r4, sl, lsr #16
 8008f3e:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 8008f42:	d8e7      	bhi.n	8008f14 <__multiply+0xfc>
 8008f44:	9a01      	ldr	r2, [sp, #4]
 8008f46:	50b4      	str	r4, [r6, r2]
 8008f48:	3604      	adds	r6, #4
 8008f4a:	e7a3      	b.n	8008e94 <__multiply+0x7c>
 8008f4c:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8008f50:	2b00      	cmp	r3, #0
 8008f52:	d1a5      	bne.n	8008ea0 <__multiply+0x88>
 8008f54:	3f01      	subs	r7, #1
 8008f56:	e7a1      	b.n	8008e9c <__multiply+0x84>
 8008f58:	0800a88c 	.word	0x0800a88c
 8008f5c:	0800a91c 	.word	0x0800a91c

08008f60 <__pow5mult>:
 8008f60:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008f64:	4615      	mov	r5, r2
 8008f66:	f012 0203 	ands.w	r2, r2, #3
 8008f6a:	4606      	mov	r6, r0
 8008f6c:	460f      	mov	r7, r1
 8008f6e:	d007      	beq.n	8008f80 <__pow5mult+0x20>
 8008f70:	4c25      	ldr	r4, [pc, #148]	; (8009008 <__pow5mult+0xa8>)
 8008f72:	3a01      	subs	r2, #1
 8008f74:	2300      	movs	r3, #0
 8008f76:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8008f7a:	f7ff fe55 	bl	8008c28 <__multadd>
 8008f7e:	4607      	mov	r7, r0
 8008f80:	10ad      	asrs	r5, r5, #2
 8008f82:	d03d      	beq.n	8009000 <__pow5mult+0xa0>
 8008f84:	6a74      	ldr	r4, [r6, #36]	; 0x24
 8008f86:	b97c      	cbnz	r4, 8008fa8 <__pow5mult+0x48>
 8008f88:	2010      	movs	r0, #16
 8008f8a:	f7ff fdb5 	bl	8008af8 <malloc>
 8008f8e:	4602      	mov	r2, r0
 8008f90:	6270      	str	r0, [r6, #36]	; 0x24
 8008f92:	b928      	cbnz	r0, 8008fa0 <__pow5mult+0x40>
 8008f94:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 8008f98:	4b1c      	ldr	r3, [pc, #112]	; (800900c <__pow5mult+0xac>)
 8008f9a:	481d      	ldr	r0, [pc, #116]	; (8009010 <__pow5mult+0xb0>)
 8008f9c:	f000 fce0 	bl	8009960 <__assert_func>
 8008fa0:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8008fa4:	6004      	str	r4, [r0, #0]
 8008fa6:	60c4      	str	r4, [r0, #12]
 8008fa8:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 8008fac:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8008fb0:	b94c      	cbnz	r4, 8008fc6 <__pow5mult+0x66>
 8008fb2:	f240 2171 	movw	r1, #625	; 0x271
 8008fb6:	4630      	mov	r0, r6
 8008fb8:	f7ff ff18 	bl	8008dec <__i2b>
 8008fbc:	2300      	movs	r3, #0
 8008fbe:	4604      	mov	r4, r0
 8008fc0:	f8c8 0008 	str.w	r0, [r8, #8]
 8008fc4:	6003      	str	r3, [r0, #0]
 8008fc6:	f04f 0900 	mov.w	r9, #0
 8008fca:	07eb      	lsls	r3, r5, #31
 8008fcc:	d50a      	bpl.n	8008fe4 <__pow5mult+0x84>
 8008fce:	4639      	mov	r1, r7
 8008fd0:	4622      	mov	r2, r4
 8008fd2:	4630      	mov	r0, r6
 8008fd4:	f7ff ff20 	bl	8008e18 <__multiply>
 8008fd8:	4680      	mov	r8, r0
 8008fda:	4639      	mov	r1, r7
 8008fdc:	4630      	mov	r0, r6
 8008fde:	f7ff fe01 	bl	8008be4 <_Bfree>
 8008fe2:	4647      	mov	r7, r8
 8008fe4:	106d      	asrs	r5, r5, #1
 8008fe6:	d00b      	beq.n	8009000 <__pow5mult+0xa0>
 8008fe8:	6820      	ldr	r0, [r4, #0]
 8008fea:	b938      	cbnz	r0, 8008ffc <__pow5mult+0x9c>
 8008fec:	4622      	mov	r2, r4
 8008fee:	4621      	mov	r1, r4
 8008ff0:	4630      	mov	r0, r6
 8008ff2:	f7ff ff11 	bl	8008e18 <__multiply>
 8008ff6:	6020      	str	r0, [r4, #0]
 8008ff8:	f8c0 9000 	str.w	r9, [r0]
 8008ffc:	4604      	mov	r4, r0
 8008ffe:	e7e4      	b.n	8008fca <__pow5mult+0x6a>
 8009000:	4638      	mov	r0, r7
 8009002:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8009006:	bf00      	nop
 8009008:	0800aa70 	.word	0x0800aa70
 800900c:	0800a816 	.word	0x0800a816
 8009010:	0800a91c 	.word	0x0800a91c

08009014 <__lshift>:
 8009014:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009018:	460c      	mov	r4, r1
 800901a:	4607      	mov	r7, r0
 800901c:	4691      	mov	r9, r2
 800901e:	6923      	ldr	r3, [r4, #16]
 8009020:	6849      	ldr	r1, [r1, #4]
 8009022:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8009026:	68a3      	ldr	r3, [r4, #8]
 8009028:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800902c:	f108 0601 	add.w	r6, r8, #1
 8009030:	42b3      	cmp	r3, r6
 8009032:	db0b      	blt.n	800904c <__lshift+0x38>
 8009034:	4638      	mov	r0, r7
 8009036:	f7ff fd95 	bl	8008b64 <_Balloc>
 800903a:	4605      	mov	r5, r0
 800903c:	b948      	cbnz	r0, 8009052 <__lshift+0x3e>
 800903e:	4602      	mov	r2, r0
 8009040:	f240 11d9 	movw	r1, #473	; 0x1d9
 8009044:	4b27      	ldr	r3, [pc, #156]	; (80090e4 <__lshift+0xd0>)
 8009046:	4828      	ldr	r0, [pc, #160]	; (80090e8 <__lshift+0xd4>)
 8009048:	f000 fc8a 	bl	8009960 <__assert_func>
 800904c:	3101      	adds	r1, #1
 800904e:	005b      	lsls	r3, r3, #1
 8009050:	e7ee      	b.n	8009030 <__lshift+0x1c>
 8009052:	2300      	movs	r3, #0
 8009054:	f100 0114 	add.w	r1, r0, #20
 8009058:	f100 0210 	add.w	r2, r0, #16
 800905c:	4618      	mov	r0, r3
 800905e:	4553      	cmp	r3, sl
 8009060:	db33      	blt.n	80090ca <__lshift+0xb6>
 8009062:	6920      	ldr	r0, [r4, #16]
 8009064:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8009068:	f104 0314 	add.w	r3, r4, #20
 800906c:	f019 091f 	ands.w	r9, r9, #31
 8009070:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8009074:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8009078:	d02b      	beq.n	80090d2 <__lshift+0xbe>
 800907a:	468a      	mov	sl, r1
 800907c:	2200      	movs	r2, #0
 800907e:	f1c9 0e20 	rsb	lr, r9, #32
 8009082:	6818      	ldr	r0, [r3, #0]
 8009084:	fa00 f009 	lsl.w	r0, r0, r9
 8009088:	4302      	orrs	r2, r0
 800908a:	f84a 2b04 	str.w	r2, [sl], #4
 800908e:	f853 2b04 	ldr.w	r2, [r3], #4
 8009092:	459c      	cmp	ip, r3
 8009094:	fa22 f20e 	lsr.w	r2, r2, lr
 8009098:	d8f3      	bhi.n	8009082 <__lshift+0x6e>
 800909a:	ebac 0304 	sub.w	r3, ip, r4
 800909e:	3b15      	subs	r3, #21
 80090a0:	f023 0303 	bic.w	r3, r3, #3
 80090a4:	3304      	adds	r3, #4
 80090a6:	f104 0015 	add.w	r0, r4, #21
 80090aa:	4584      	cmp	ip, r0
 80090ac:	bf38      	it	cc
 80090ae:	2304      	movcc	r3, #4
 80090b0:	50ca      	str	r2, [r1, r3]
 80090b2:	b10a      	cbz	r2, 80090b8 <__lshift+0xa4>
 80090b4:	f108 0602 	add.w	r6, r8, #2
 80090b8:	3e01      	subs	r6, #1
 80090ba:	4638      	mov	r0, r7
 80090bc:	4621      	mov	r1, r4
 80090be:	612e      	str	r6, [r5, #16]
 80090c0:	f7ff fd90 	bl	8008be4 <_Bfree>
 80090c4:	4628      	mov	r0, r5
 80090c6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80090ca:	f842 0f04 	str.w	r0, [r2, #4]!
 80090ce:	3301      	adds	r3, #1
 80090d0:	e7c5      	b.n	800905e <__lshift+0x4a>
 80090d2:	3904      	subs	r1, #4
 80090d4:	f853 2b04 	ldr.w	r2, [r3], #4
 80090d8:	459c      	cmp	ip, r3
 80090da:	f841 2f04 	str.w	r2, [r1, #4]!
 80090de:	d8f9      	bhi.n	80090d4 <__lshift+0xc0>
 80090e0:	e7ea      	b.n	80090b8 <__lshift+0xa4>
 80090e2:	bf00      	nop
 80090e4:	0800a88c 	.word	0x0800a88c
 80090e8:	0800a91c 	.word	0x0800a91c

080090ec <__mcmp>:
 80090ec:	4603      	mov	r3, r0
 80090ee:	690a      	ldr	r2, [r1, #16]
 80090f0:	6900      	ldr	r0, [r0, #16]
 80090f2:	b530      	push	{r4, r5, lr}
 80090f4:	1a80      	subs	r0, r0, r2
 80090f6:	d10d      	bne.n	8009114 <__mcmp+0x28>
 80090f8:	3314      	adds	r3, #20
 80090fa:	3114      	adds	r1, #20
 80090fc:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 8009100:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 8009104:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 8009108:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 800910c:	4295      	cmp	r5, r2
 800910e:	d002      	beq.n	8009116 <__mcmp+0x2a>
 8009110:	d304      	bcc.n	800911c <__mcmp+0x30>
 8009112:	2001      	movs	r0, #1
 8009114:	bd30      	pop	{r4, r5, pc}
 8009116:	42a3      	cmp	r3, r4
 8009118:	d3f4      	bcc.n	8009104 <__mcmp+0x18>
 800911a:	e7fb      	b.n	8009114 <__mcmp+0x28>
 800911c:	f04f 30ff 	mov.w	r0, #4294967295
 8009120:	e7f8      	b.n	8009114 <__mcmp+0x28>
	...

08009124 <__mdiff>:
 8009124:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009128:	460c      	mov	r4, r1
 800912a:	4606      	mov	r6, r0
 800912c:	4611      	mov	r1, r2
 800912e:	4620      	mov	r0, r4
 8009130:	4692      	mov	sl, r2
 8009132:	f7ff ffdb 	bl	80090ec <__mcmp>
 8009136:	1e05      	subs	r5, r0, #0
 8009138:	d111      	bne.n	800915e <__mdiff+0x3a>
 800913a:	4629      	mov	r1, r5
 800913c:	4630      	mov	r0, r6
 800913e:	f7ff fd11 	bl	8008b64 <_Balloc>
 8009142:	4602      	mov	r2, r0
 8009144:	b928      	cbnz	r0, 8009152 <__mdiff+0x2e>
 8009146:	f240 2132 	movw	r1, #562	; 0x232
 800914a:	4b3c      	ldr	r3, [pc, #240]	; (800923c <__mdiff+0x118>)
 800914c:	483c      	ldr	r0, [pc, #240]	; (8009240 <__mdiff+0x11c>)
 800914e:	f000 fc07 	bl	8009960 <__assert_func>
 8009152:	2301      	movs	r3, #1
 8009154:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8009158:	4610      	mov	r0, r2
 800915a:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800915e:	bfa4      	itt	ge
 8009160:	4653      	movge	r3, sl
 8009162:	46a2      	movge	sl, r4
 8009164:	4630      	mov	r0, r6
 8009166:	f8da 1004 	ldr.w	r1, [sl, #4]
 800916a:	bfa6      	itte	ge
 800916c:	461c      	movge	r4, r3
 800916e:	2500      	movge	r5, #0
 8009170:	2501      	movlt	r5, #1
 8009172:	f7ff fcf7 	bl	8008b64 <_Balloc>
 8009176:	4602      	mov	r2, r0
 8009178:	b918      	cbnz	r0, 8009182 <__mdiff+0x5e>
 800917a:	f44f 7110 	mov.w	r1, #576	; 0x240
 800917e:	4b2f      	ldr	r3, [pc, #188]	; (800923c <__mdiff+0x118>)
 8009180:	e7e4      	b.n	800914c <__mdiff+0x28>
 8009182:	f100 0814 	add.w	r8, r0, #20
 8009186:	f8da 7010 	ldr.w	r7, [sl, #16]
 800918a:	60c5      	str	r5, [r0, #12]
 800918c:	f04f 0c00 	mov.w	ip, #0
 8009190:	f10a 0514 	add.w	r5, sl, #20
 8009194:	f10a 0010 	add.w	r0, sl, #16
 8009198:	46c2      	mov	sl, r8
 800919a:	6926      	ldr	r6, [r4, #16]
 800919c:	f104 0914 	add.w	r9, r4, #20
 80091a0:	eb05 0e87 	add.w	lr, r5, r7, lsl #2
 80091a4:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 80091a8:	f850 bf04 	ldr.w	fp, [r0, #4]!
 80091ac:	f859 3b04 	ldr.w	r3, [r9], #4
 80091b0:	fa1f f18b 	uxth.w	r1, fp
 80091b4:	4461      	add	r1, ip
 80091b6:	fa1f fc83 	uxth.w	ip, r3
 80091ba:	0c1b      	lsrs	r3, r3, #16
 80091bc:	eba1 010c 	sub.w	r1, r1, ip
 80091c0:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 80091c4:	eb03 4321 	add.w	r3, r3, r1, asr #16
 80091c8:	b289      	uxth	r1, r1
 80091ca:	ea4f 4c23 	mov.w	ip, r3, asr #16
 80091ce:	454e      	cmp	r6, r9
 80091d0:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 80091d4:	f84a 3b04 	str.w	r3, [sl], #4
 80091d8:	d8e6      	bhi.n	80091a8 <__mdiff+0x84>
 80091da:	1b33      	subs	r3, r6, r4
 80091dc:	3b15      	subs	r3, #21
 80091de:	f023 0303 	bic.w	r3, r3, #3
 80091e2:	3415      	adds	r4, #21
 80091e4:	3304      	adds	r3, #4
 80091e6:	42a6      	cmp	r6, r4
 80091e8:	bf38      	it	cc
 80091ea:	2304      	movcc	r3, #4
 80091ec:	441d      	add	r5, r3
 80091ee:	4443      	add	r3, r8
 80091f0:	461e      	mov	r6, r3
 80091f2:	462c      	mov	r4, r5
 80091f4:	4574      	cmp	r4, lr
 80091f6:	d30e      	bcc.n	8009216 <__mdiff+0xf2>
 80091f8:	f10e 0103 	add.w	r1, lr, #3
 80091fc:	1b49      	subs	r1, r1, r5
 80091fe:	f021 0103 	bic.w	r1, r1, #3
 8009202:	3d03      	subs	r5, #3
 8009204:	45ae      	cmp	lr, r5
 8009206:	bf38      	it	cc
 8009208:	2100      	movcc	r1, #0
 800920a:	4419      	add	r1, r3
 800920c:	f851 3d04 	ldr.w	r3, [r1, #-4]!
 8009210:	b18b      	cbz	r3, 8009236 <__mdiff+0x112>
 8009212:	6117      	str	r7, [r2, #16]
 8009214:	e7a0      	b.n	8009158 <__mdiff+0x34>
 8009216:	f854 8b04 	ldr.w	r8, [r4], #4
 800921a:	fa1f f188 	uxth.w	r1, r8
 800921e:	4461      	add	r1, ip
 8009220:	1408      	asrs	r0, r1, #16
 8009222:	eb00 4018 	add.w	r0, r0, r8, lsr #16
 8009226:	b289      	uxth	r1, r1
 8009228:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800922c:	ea4f 4c20 	mov.w	ip, r0, asr #16
 8009230:	f846 1b04 	str.w	r1, [r6], #4
 8009234:	e7de      	b.n	80091f4 <__mdiff+0xd0>
 8009236:	3f01      	subs	r7, #1
 8009238:	e7e8      	b.n	800920c <__mdiff+0xe8>
 800923a:	bf00      	nop
 800923c:	0800a88c 	.word	0x0800a88c
 8009240:	0800a91c 	.word	0x0800a91c

08009244 <__ulp>:
 8009244:	4b11      	ldr	r3, [pc, #68]	; (800928c <__ulp+0x48>)
 8009246:	400b      	ands	r3, r1
 8009248:	f1a3 7350 	sub.w	r3, r3, #54525952	; 0x3400000
 800924c:	2b00      	cmp	r3, #0
 800924e:	dd02      	ble.n	8009256 <__ulp+0x12>
 8009250:	2000      	movs	r0, #0
 8009252:	4619      	mov	r1, r3
 8009254:	4770      	bx	lr
 8009256:	425b      	negs	r3, r3
 8009258:	f1b3 7fa0 	cmp.w	r3, #20971520	; 0x1400000
 800925c:	f04f 0000 	mov.w	r0, #0
 8009260:	f04f 0100 	mov.w	r1, #0
 8009264:	ea4f 5223 	mov.w	r2, r3, asr #20
 8009268:	da04      	bge.n	8009274 <__ulp+0x30>
 800926a:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 800926e:	fa43 f102 	asr.w	r1, r3, r2
 8009272:	4770      	bx	lr
 8009274:	f1a2 0314 	sub.w	r3, r2, #20
 8009278:	2b1e      	cmp	r3, #30
 800927a:	bfd6      	itet	le
 800927c:	f04f 4200 	movle.w	r2, #2147483648	; 0x80000000
 8009280:	2301      	movgt	r3, #1
 8009282:	fa22 f303 	lsrle.w	r3, r2, r3
 8009286:	4618      	mov	r0, r3
 8009288:	4770      	bx	lr
 800928a:	bf00      	nop
 800928c:	7ff00000 	.word	0x7ff00000

08009290 <__b2d>:
 8009290:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8009294:	6907      	ldr	r7, [r0, #16]
 8009296:	f100 0914 	add.w	r9, r0, #20
 800929a:	eb09 0787 	add.w	r7, r9, r7, lsl #2
 800929e:	f857 6c04 	ldr.w	r6, [r7, #-4]
 80092a2:	f1a7 0804 	sub.w	r8, r7, #4
 80092a6:	4630      	mov	r0, r6
 80092a8:	f7ff fd52 	bl	8008d50 <__hi0bits>
 80092ac:	f1c0 0320 	rsb	r3, r0, #32
 80092b0:	280a      	cmp	r0, #10
 80092b2:	600b      	str	r3, [r1, #0]
 80092b4:	491f      	ldr	r1, [pc, #124]	; (8009334 <__b2d+0xa4>)
 80092b6:	dc17      	bgt.n	80092e8 <__b2d+0x58>
 80092b8:	45c1      	cmp	r9, r8
 80092ba:	bf28      	it	cs
 80092bc:	2200      	movcs	r2, #0
 80092be:	f1c0 0c0b 	rsb	ip, r0, #11
 80092c2:	fa26 f30c 	lsr.w	r3, r6, ip
 80092c6:	bf38      	it	cc
 80092c8:	f857 2c08 	ldrcc.w	r2, [r7, #-8]
 80092cc:	ea43 0501 	orr.w	r5, r3, r1
 80092d0:	f100 0315 	add.w	r3, r0, #21
 80092d4:	fa06 f303 	lsl.w	r3, r6, r3
 80092d8:	fa22 f20c 	lsr.w	r2, r2, ip
 80092dc:	ea43 0402 	orr.w	r4, r3, r2
 80092e0:	4620      	mov	r0, r4
 80092e2:	4629      	mov	r1, r5
 80092e4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80092e8:	45c1      	cmp	r9, r8
 80092ea:	bf2e      	itee	cs
 80092ec:	2200      	movcs	r2, #0
 80092ee:	f857 2c08 	ldrcc.w	r2, [r7, #-8]
 80092f2:	f1a7 0808 	subcc.w	r8, r7, #8
 80092f6:	f1b0 030b 	subs.w	r3, r0, #11
 80092fa:	d016      	beq.n	800932a <__b2d+0x9a>
 80092fc:	f1c3 0720 	rsb	r7, r3, #32
 8009300:	fa22 f107 	lsr.w	r1, r2, r7
 8009304:	45c8      	cmp	r8, r9
 8009306:	fa06 f603 	lsl.w	r6, r6, r3
 800930a:	ea46 0601 	orr.w	r6, r6, r1
 800930e:	bf94      	ite	ls
 8009310:	2100      	movls	r1, #0
 8009312:	f858 1c04 	ldrhi.w	r1, [r8, #-4]
 8009316:	f046 557f 	orr.w	r5, r6, #1069547520	; 0x3fc00000
 800931a:	fa02 f003 	lsl.w	r0, r2, r3
 800931e:	40f9      	lsrs	r1, r7
 8009320:	f445 1540 	orr.w	r5, r5, #3145728	; 0x300000
 8009324:	ea40 0401 	orr.w	r4, r0, r1
 8009328:	e7da      	b.n	80092e0 <__b2d+0x50>
 800932a:	4614      	mov	r4, r2
 800932c:	ea46 0501 	orr.w	r5, r6, r1
 8009330:	e7d6      	b.n	80092e0 <__b2d+0x50>
 8009332:	bf00      	nop
 8009334:	3ff00000 	.word	0x3ff00000

08009338 <__d2b>:
 8009338:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 800933c:	2101      	movs	r1, #1
 800933e:	e9dd 7608 	ldrd	r7, r6, [sp, #32]
 8009342:	4690      	mov	r8, r2
 8009344:	461d      	mov	r5, r3
 8009346:	f7ff fc0d 	bl	8008b64 <_Balloc>
 800934a:	4604      	mov	r4, r0
 800934c:	b930      	cbnz	r0, 800935c <__d2b+0x24>
 800934e:	4602      	mov	r2, r0
 8009350:	f240 310a 	movw	r1, #778	; 0x30a
 8009354:	4b24      	ldr	r3, [pc, #144]	; (80093e8 <__d2b+0xb0>)
 8009356:	4825      	ldr	r0, [pc, #148]	; (80093ec <__d2b+0xb4>)
 8009358:	f000 fb02 	bl	8009960 <__assert_func>
 800935c:	f3c5 0313 	ubfx	r3, r5, #0, #20
 8009360:	f3c5 550a 	ubfx	r5, r5, #20, #11
 8009364:	bb2d      	cbnz	r5, 80093b2 <__d2b+0x7a>
 8009366:	9301      	str	r3, [sp, #4]
 8009368:	f1b8 0300 	subs.w	r3, r8, #0
 800936c:	d026      	beq.n	80093bc <__d2b+0x84>
 800936e:	4668      	mov	r0, sp
 8009370:	9300      	str	r3, [sp, #0]
 8009372:	f7ff fd0d 	bl	8008d90 <__lo0bits>
 8009376:	9900      	ldr	r1, [sp, #0]
 8009378:	b1f0      	cbz	r0, 80093b8 <__d2b+0x80>
 800937a:	9a01      	ldr	r2, [sp, #4]
 800937c:	f1c0 0320 	rsb	r3, r0, #32
 8009380:	fa02 f303 	lsl.w	r3, r2, r3
 8009384:	430b      	orrs	r3, r1
 8009386:	40c2      	lsrs	r2, r0
 8009388:	6163      	str	r3, [r4, #20]
 800938a:	9201      	str	r2, [sp, #4]
 800938c:	9b01      	ldr	r3, [sp, #4]
 800938e:	2b00      	cmp	r3, #0
 8009390:	bf14      	ite	ne
 8009392:	2102      	movne	r1, #2
 8009394:	2101      	moveq	r1, #1
 8009396:	61a3      	str	r3, [r4, #24]
 8009398:	6121      	str	r1, [r4, #16]
 800939a:	b1c5      	cbz	r5, 80093ce <__d2b+0x96>
 800939c:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 80093a0:	4405      	add	r5, r0
 80093a2:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 80093a6:	603d      	str	r5, [r7, #0]
 80093a8:	6030      	str	r0, [r6, #0]
 80093aa:	4620      	mov	r0, r4
 80093ac:	b002      	add	sp, #8
 80093ae:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80093b2:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80093b6:	e7d6      	b.n	8009366 <__d2b+0x2e>
 80093b8:	6161      	str	r1, [r4, #20]
 80093ba:	e7e7      	b.n	800938c <__d2b+0x54>
 80093bc:	a801      	add	r0, sp, #4
 80093be:	f7ff fce7 	bl	8008d90 <__lo0bits>
 80093c2:	2101      	movs	r1, #1
 80093c4:	9b01      	ldr	r3, [sp, #4]
 80093c6:	6121      	str	r1, [r4, #16]
 80093c8:	6163      	str	r3, [r4, #20]
 80093ca:	3020      	adds	r0, #32
 80093cc:	e7e5      	b.n	800939a <__d2b+0x62>
 80093ce:	eb04 0381 	add.w	r3, r4, r1, lsl #2
 80093d2:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 80093d6:	6038      	str	r0, [r7, #0]
 80093d8:	6918      	ldr	r0, [r3, #16]
 80093da:	f7ff fcb9 	bl	8008d50 <__hi0bits>
 80093de:	ebc0 1141 	rsb	r1, r0, r1, lsl #5
 80093e2:	6031      	str	r1, [r6, #0]
 80093e4:	e7e1      	b.n	80093aa <__d2b+0x72>
 80093e6:	bf00      	nop
 80093e8:	0800a88c 	.word	0x0800a88c
 80093ec:	0800a91c 	.word	0x0800a91c

080093f0 <__ratio>:
 80093f0:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80093f4:	4688      	mov	r8, r1
 80093f6:	4669      	mov	r1, sp
 80093f8:	4681      	mov	r9, r0
 80093fa:	f7ff ff49 	bl	8009290 <__b2d>
 80093fe:	460f      	mov	r7, r1
 8009400:	4604      	mov	r4, r0
 8009402:	460d      	mov	r5, r1
 8009404:	4640      	mov	r0, r8
 8009406:	a901      	add	r1, sp, #4
 8009408:	f7ff ff42 	bl	8009290 <__b2d>
 800940c:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8009410:	f8d8 2010 	ldr.w	r2, [r8, #16]
 8009414:	468b      	mov	fp, r1
 8009416:	eba3 0c02 	sub.w	ip, r3, r2
 800941a:	e9dd 3200 	ldrd	r3, r2, [sp]
 800941e:	1a9b      	subs	r3, r3, r2
 8009420:	eb03 134c 	add.w	r3, r3, ip, lsl #5
 8009424:	2b00      	cmp	r3, #0
 8009426:	bfd5      	itete	le
 8009428:	460a      	movle	r2, r1
 800942a:	462a      	movgt	r2, r5
 800942c:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 8009430:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 8009434:	bfd8      	it	le
 8009436:	eb02 5b03 	addle.w	fp, r2, r3, lsl #20
 800943a:	465b      	mov	r3, fp
 800943c:	4602      	mov	r2, r0
 800943e:	4639      	mov	r1, r7
 8009440:	4620      	mov	r0, r4
 8009442:	f7f7 f973 	bl	800072c <__aeabi_ddiv>
 8009446:	b003      	add	sp, #12
 8009448:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800944c <__copybits>:
 800944c:	3901      	subs	r1, #1
 800944e:	b570      	push	{r4, r5, r6, lr}
 8009450:	1149      	asrs	r1, r1, #5
 8009452:	6914      	ldr	r4, [r2, #16]
 8009454:	3101      	adds	r1, #1
 8009456:	f102 0314 	add.w	r3, r2, #20
 800945a:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 800945e:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 8009462:	1f05      	subs	r5, r0, #4
 8009464:	42a3      	cmp	r3, r4
 8009466:	d30c      	bcc.n	8009482 <__copybits+0x36>
 8009468:	1aa3      	subs	r3, r4, r2
 800946a:	3b11      	subs	r3, #17
 800946c:	f023 0303 	bic.w	r3, r3, #3
 8009470:	3211      	adds	r2, #17
 8009472:	42a2      	cmp	r2, r4
 8009474:	bf88      	it	hi
 8009476:	2300      	movhi	r3, #0
 8009478:	4418      	add	r0, r3
 800947a:	2300      	movs	r3, #0
 800947c:	4288      	cmp	r0, r1
 800947e:	d305      	bcc.n	800948c <__copybits+0x40>
 8009480:	bd70      	pop	{r4, r5, r6, pc}
 8009482:	f853 6b04 	ldr.w	r6, [r3], #4
 8009486:	f845 6f04 	str.w	r6, [r5, #4]!
 800948a:	e7eb      	b.n	8009464 <__copybits+0x18>
 800948c:	f840 3b04 	str.w	r3, [r0], #4
 8009490:	e7f4      	b.n	800947c <__copybits+0x30>

08009492 <__any_on>:
 8009492:	f100 0214 	add.w	r2, r0, #20
 8009496:	6900      	ldr	r0, [r0, #16]
 8009498:	114b      	asrs	r3, r1, #5
 800949a:	4298      	cmp	r0, r3
 800949c:	b510      	push	{r4, lr}
 800949e:	db11      	blt.n	80094c4 <__any_on+0x32>
 80094a0:	dd0a      	ble.n	80094b8 <__any_on+0x26>
 80094a2:	f011 011f 	ands.w	r1, r1, #31
 80094a6:	d007      	beq.n	80094b8 <__any_on+0x26>
 80094a8:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 80094ac:	fa24 f001 	lsr.w	r0, r4, r1
 80094b0:	fa00 f101 	lsl.w	r1, r0, r1
 80094b4:	428c      	cmp	r4, r1
 80094b6:	d10b      	bne.n	80094d0 <__any_on+0x3e>
 80094b8:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 80094bc:	4293      	cmp	r3, r2
 80094be:	d803      	bhi.n	80094c8 <__any_on+0x36>
 80094c0:	2000      	movs	r0, #0
 80094c2:	bd10      	pop	{r4, pc}
 80094c4:	4603      	mov	r3, r0
 80094c6:	e7f7      	b.n	80094b8 <__any_on+0x26>
 80094c8:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 80094cc:	2900      	cmp	r1, #0
 80094ce:	d0f5      	beq.n	80094bc <__any_on+0x2a>
 80094d0:	2001      	movs	r0, #1
 80094d2:	e7f6      	b.n	80094c2 <__any_on+0x30>

080094d4 <_calloc_r>:
 80094d4:	b538      	push	{r3, r4, r5, lr}
 80094d6:	fb02 f501 	mul.w	r5, r2, r1
 80094da:	4629      	mov	r1, r5
 80094dc:	f000 f854 	bl	8009588 <_malloc_r>
 80094e0:	4604      	mov	r4, r0
 80094e2:	b118      	cbz	r0, 80094ec <_calloc_r+0x18>
 80094e4:	462a      	mov	r2, r5
 80094e6:	2100      	movs	r1, #0
 80094e8:	f7fc fbce 	bl	8005c88 <memset>
 80094ec:	4620      	mov	r0, r4
 80094ee:	bd38      	pop	{r3, r4, r5, pc}

080094f0 <_free_r>:
 80094f0:	b538      	push	{r3, r4, r5, lr}
 80094f2:	4605      	mov	r5, r0
 80094f4:	2900      	cmp	r1, #0
 80094f6:	d043      	beq.n	8009580 <_free_r+0x90>
 80094f8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80094fc:	1f0c      	subs	r4, r1, #4
 80094fe:	2b00      	cmp	r3, #0
 8009500:	bfb8      	it	lt
 8009502:	18e4      	addlt	r4, r4, r3
 8009504:	f000 fa76 	bl	80099f4 <__malloc_lock>
 8009508:	4a1e      	ldr	r2, [pc, #120]	; (8009584 <_free_r+0x94>)
 800950a:	6813      	ldr	r3, [r2, #0]
 800950c:	4610      	mov	r0, r2
 800950e:	b933      	cbnz	r3, 800951e <_free_r+0x2e>
 8009510:	6063      	str	r3, [r4, #4]
 8009512:	6014      	str	r4, [r2, #0]
 8009514:	4628      	mov	r0, r5
 8009516:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800951a:	f000 ba71 	b.w	8009a00 <__malloc_unlock>
 800951e:	42a3      	cmp	r3, r4
 8009520:	d90a      	bls.n	8009538 <_free_r+0x48>
 8009522:	6821      	ldr	r1, [r4, #0]
 8009524:	1862      	adds	r2, r4, r1
 8009526:	4293      	cmp	r3, r2
 8009528:	bf01      	itttt	eq
 800952a:	681a      	ldreq	r2, [r3, #0]
 800952c:	685b      	ldreq	r3, [r3, #4]
 800952e:	1852      	addeq	r2, r2, r1
 8009530:	6022      	streq	r2, [r4, #0]
 8009532:	6063      	str	r3, [r4, #4]
 8009534:	6004      	str	r4, [r0, #0]
 8009536:	e7ed      	b.n	8009514 <_free_r+0x24>
 8009538:	461a      	mov	r2, r3
 800953a:	685b      	ldr	r3, [r3, #4]
 800953c:	b10b      	cbz	r3, 8009542 <_free_r+0x52>
 800953e:	42a3      	cmp	r3, r4
 8009540:	d9fa      	bls.n	8009538 <_free_r+0x48>
 8009542:	6811      	ldr	r1, [r2, #0]
 8009544:	1850      	adds	r0, r2, r1
 8009546:	42a0      	cmp	r0, r4
 8009548:	d10b      	bne.n	8009562 <_free_r+0x72>
 800954a:	6820      	ldr	r0, [r4, #0]
 800954c:	4401      	add	r1, r0
 800954e:	1850      	adds	r0, r2, r1
 8009550:	4283      	cmp	r3, r0
 8009552:	6011      	str	r1, [r2, #0]
 8009554:	d1de      	bne.n	8009514 <_free_r+0x24>
 8009556:	6818      	ldr	r0, [r3, #0]
 8009558:	685b      	ldr	r3, [r3, #4]
 800955a:	4401      	add	r1, r0
 800955c:	6011      	str	r1, [r2, #0]
 800955e:	6053      	str	r3, [r2, #4]
 8009560:	e7d8      	b.n	8009514 <_free_r+0x24>
 8009562:	d902      	bls.n	800956a <_free_r+0x7a>
 8009564:	230c      	movs	r3, #12
 8009566:	602b      	str	r3, [r5, #0]
 8009568:	e7d4      	b.n	8009514 <_free_r+0x24>
 800956a:	6820      	ldr	r0, [r4, #0]
 800956c:	1821      	adds	r1, r4, r0
 800956e:	428b      	cmp	r3, r1
 8009570:	bf01      	itttt	eq
 8009572:	6819      	ldreq	r1, [r3, #0]
 8009574:	685b      	ldreq	r3, [r3, #4]
 8009576:	1809      	addeq	r1, r1, r0
 8009578:	6021      	streq	r1, [r4, #0]
 800957a:	6063      	str	r3, [r4, #4]
 800957c:	6054      	str	r4, [r2, #4]
 800957e:	e7c9      	b.n	8009514 <_free_r+0x24>
 8009580:	bd38      	pop	{r3, r4, r5, pc}
 8009582:	bf00      	nop
 8009584:	20000294 	.word	0x20000294

08009588 <_malloc_r>:
 8009588:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800958a:	1ccd      	adds	r5, r1, #3
 800958c:	f025 0503 	bic.w	r5, r5, #3
 8009590:	3508      	adds	r5, #8
 8009592:	2d0c      	cmp	r5, #12
 8009594:	bf38      	it	cc
 8009596:	250c      	movcc	r5, #12
 8009598:	2d00      	cmp	r5, #0
 800959a:	4606      	mov	r6, r0
 800959c:	db01      	blt.n	80095a2 <_malloc_r+0x1a>
 800959e:	42a9      	cmp	r1, r5
 80095a0:	d903      	bls.n	80095aa <_malloc_r+0x22>
 80095a2:	230c      	movs	r3, #12
 80095a4:	6033      	str	r3, [r6, #0]
 80095a6:	2000      	movs	r0, #0
 80095a8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80095aa:	f000 fa23 	bl	80099f4 <__malloc_lock>
 80095ae:	4921      	ldr	r1, [pc, #132]	; (8009634 <_malloc_r+0xac>)
 80095b0:	680a      	ldr	r2, [r1, #0]
 80095b2:	4614      	mov	r4, r2
 80095b4:	b99c      	cbnz	r4, 80095de <_malloc_r+0x56>
 80095b6:	4f20      	ldr	r7, [pc, #128]	; (8009638 <_malloc_r+0xb0>)
 80095b8:	683b      	ldr	r3, [r7, #0]
 80095ba:	b923      	cbnz	r3, 80095c6 <_malloc_r+0x3e>
 80095bc:	4621      	mov	r1, r4
 80095be:	4630      	mov	r0, r6
 80095c0:	f000 f99e 	bl	8009900 <_sbrk_r>
 80095c4:	6038      	str	r0, [r7, #0]
 80095c6:	4629      	mov	r1, r5
 80095c8:	4630      	mov	r0, r6
 80095ca:	f000 f999 	bl	8009900 <_sbrk_r>
 80095ce:	1c43      	adds	r3, r0, #1
 80095d0:	d123      	bne.n	800961a <_malloc_r+0x92>
 80095d2:	230c      	movs	r3, #12
 80095d4:	4630      	mov	r0, r6
 80095d6:	6033      	str	r3, [r6, #0]
 80095d8:	f000 fa12 	bl	8009a00 <__malloc_unlock>
 80095dc:	e7e3      	b.n	80095a6 <_malloc_r+0x1e>
 80095de:	6823      	ldr	r3, [r4, #0]
 80095e0:	1b5b      	subs	r3, r3, r5
 80095e2:	d417      	bmi.n	8009614 <_malloc_r+0x8c>
 80095e4:	2b0b      	cmp	r3, #11
 80095e6:	d903      	bls.n	80095f0 <_malloc_r+0x68>
 80095e8:	6023      	str	r3, [r4, #0]
 80095ea:	441c      	add	r4, r3
 80095ec:	6025      	str	r5, [r4, #0]
 80095ee:	e004      	b.n	80095fa <_malloc_r+0x72>
 80095f0:	6863      	ldr	r3, [r4, #4]
 80095f2:	42a2      	cmp	r2, r4
 80095f4:	bf0c      	ite	eq
 80095f6:	600b      	streq	r3, [r1, #0]
 80095f8:	6053      	strne	r3, [r2, #4]
 80095fa:	4630      	mov	r0, r6
 80095fc:	f000 fa00 	bl	8009a00 <__malloc_unlock>
 8009600:	f104 000b 	add.w	r0, r4, #11
 8009604:	1d23      	adds	r3, r4, #4
 8009606:	f020 0007 	bic.w	r0, r0, #7
 800960a:	1ac2      	subs	r2, r0, r3
 800960c:	d0cc      	beq.n	80095a8 <_malloc_r+0x20>
 800960e:	1a1b      	subs	r3, r3, r0
 8009610:	50a3      	str	r3, [r4, r2]
 8009612:	e7c9      	b.n	80095a8 <_malloc_r+0x20>
 8009614:	4622      	mov	r2, r4
 8009616:	6864      	ldr	r4, [r4, #4]
 8009618:	e7cc      	b.n	80095b4 <_malloc_r+0x2c>
 800961a:	1cc4      	adds	r4, r0, #3
 800961c:	f024 0403 	bic.w	r4, r4, #3
 8009620:	42a0      	cmp	r0, r4
 8009622:	d0e3      	beq.n	80095ec <_malloc_r+0x64>
 8009624:	1a21      	subs	r1, r4, r0
 8009626:	4630      	mov	r0, r6
 8009628:	f000 f96a 	bl	8009900 <_sbrk_r>
 800962c:	3001      	adds	r0, #1
 800962e:	d1dd      	bne.n	80095ec <_malloc_r+0x64>
 8009630:	e7cf      	b.n	80095d2 <_malloc_r+0x4a>
 8009632:	bf00      	nop
 8009634:	20000294 	.word	0x20000294
 8009638:	20000298 	.word	0x20000298

0800963c <__ssputs_r>:
 800963c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009640:	688e      	ldr	r6, [r1, #8]
 8009642:	4682      	mov	sl, r0
 8009644:	429e      	cmp	r6, r3
 8009646:	460c      	mov	r4, r1
 8009648:	4690      	mov	r8, r2
 800964a:	461f      	mov	r7, r3
 800964c:	d838      	bhi.n	80096c0 <__ssputs_r+0x84>
 800964e:	898a      	ldrh	r2, [r1, #12]
 8009650:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8009654:	d032      	beq.n	80096bc <__ssputs_r+0x80>
 8009656:	6825      	ldr	r5, [r4, #0]
 8009658:	6909      	ldr	r1, [r1, #16]
 800965a:	3301      	adds	r3, #1
 800965c:	eba5 0901 	sub.w	r9, r5, r1
 8009660:	6965      	ldr	r5, [r4, #20]
 8009662:	444b      	add	r3, r9
 8009664:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8009668:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800966c:	106d      	asrs	r5, r5, #1
 800966e:	429d      	cmp	r5, r3
 8009670:	bf38      	it	cc
 8009672:	461d      	movcc	r5, r3
 8009674:	0553      	lsls	r3, r2, #21
 8009676:	d531      	bpl.n	80096dc <__ssputs_r+0xa0>
 8009678:	4629      	mov	r1, r5
 800967a:	f7ff ff85 	bl	8009588 <_malloc_r>
 800967e:	4606      	mov	r6, r0
 8009680:	b950      	cbnz	r0, 8009698 <__ssputs_r+0x5c>
 8009682:	230c      	movs	r3, #12
 8009684:	f04f 30ff 	mov.w	r0, #4294967295
 8009688:	f8ca 3000 	str.w	r3, [sl]
 800968c:	89a3      	ldrh	r3, [r4, #12]
 800968e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8009692:	81a3      	strh	r3, [r4, #12]
 8009694:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009698:	464a      	mov	r2, r9
 800969a:	6921      	ldr	r1, [r4, #16]
 800969c:	f7ff fa54 	bl	8008b48 <memcpy>
 80096a0:	89a3      	ldrh	r3, [r4, #12]
 80096a2:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 80096a6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80096aa:	81a3      	strh	r3, [r4, #12]
 80096ac:	6126      	str	r6, [r4, #16]
 80096ae:	444e      	add	r6, r9
 80096b0:	6026      	str	r6, [r4, #0]
 80096b2:	463e      	mov	r6, r7
 80096b4:	6165      	str	r5, [r4, #20]
 80096b6:	eba5 0509 	sub.w	r5, r5, r9
 80096ba:	60a5      	str	r5, [r4, #8]
 80096bc:	42be      	cmp	r6, r7
 80096be:	d900      	bls.n	80096c2 <__ssputs_r+0x86>
 80096c0:	463e      	mov	r6, r7
 80096c2:	4632      	mov	r2, r6
 80096c4:	4641      	mov	r1, r8
 80096c6:	6820      	ldr	r0, [r4, #0]
 80096c8:	f000 f97a 	bl	80099c0 <memmove>
 80096cc:	68a3      	ldr	r3, [r4, #8]
 80096ce:	6822      	ldr	r2, [r4, #0]
 80096d0:	1b9b      	subs	r3, r3, r6
 80096d2:	4432      	add	r2, r6
 80096d4:	2000      	movs	r0, #0
 80096d6:	60a3      	str	r3, [r4, #8]
 80096d8:	6022      	str	r2, [r4, #0]
 80096da:	e7db      	b.n	8009694 <__ssputs_r+0x58>
 80096dc:	462a      	mov	r2, r5
 80096de:	f000 f995 	bl	8009a0c <_realloc_r>
 80096e2:	4606      	mov	r6, r0
 80096e4:	2800      	cmp	r0, #0
 80096e6:	d1e1      	bne.n	80096ac <__ssputs_r+0x70>
 80096e8:	4650      	mov	r0, sl
 80096ea:	6921      	ldr	r1, [r4, #16]
 80096ec:	f7ff ff00 	bl	80094f0 <_free_r>
 80096f0:	e7c7      	b.n	8009682 <__ssputs_r+0x46>
	...

080096f4 <_svfiprintf_r>:
 80096f4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80096f8:	4698      	mov	r8, r3
 80096fa:	898b      	ldrh	r3, [r1, #12]
 80096fc:	4607      	mov	r7, r0
 80096fe:	061b      	lsls	r3, r3, #24
 8009700:	460d      	mov	r5, r1
 8009702:	4614      	mov	r4, r2
 8009704:	b09d      	sub	sp, #116	; 0x74
 8009706:	d50e      	bpl.n	8009726 <_svfiprintf_r+0x32>
 8009708:	690b      	ldr	r3, [r1, #16]
 800970a:	b963      	cbnz	r3, 8009726 <_svfiprintf_r+0x32>
 800970c:	2140      	movs	r1, #64	; 0x40
 800970e:	f7ff ff3b 	bl	8009588 <_malloc_r>
 8009712:	6028      	str	r0, [r5, #0]
 8009714:	6128      	str	r0, [r5, #16]
 8009716:	b920      	cbnz	r0, 8009722 <_svfiprintf_r+0x2e>
 8009718:	230c      	movs	r3, #12
 800971a:	603b      	str	r3, [r7, #0]
 800971c:	f04f 30ff 	mov.w	r0, #4294967295
 8009720:	e0d1      	b.n	80098c6 <_svfiprintf_r+0x1d2>
 8009722:	2340      	movs	r3, #64	; 0x40
 8009724:	616b      	str	r3, [r5, #20]
 8009726:	2300      	movs	r3, #0
 8009728:	9309      	str	r3, [sp, #36]	; 0x24
 800972a:	2320      	movs	r3, #32
 800972c:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8009730:	2330      	movs	r3, #48	; 0x30
 8009732:	f04f 0901 	mov.w	r9, #1
 8009736:	f8cd 800c 	str.w	r8, [sp, #12]
 800973a:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 80098e0 <_svfiprintf_r+0x1ec>
 800973e:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8009742:	4623      	mov	r3, r4
 8009744:	469a      	mov	sl, r3
 8009746:	f813 2b01 	ldrb.w	r2, [r3], #1
 800974a:	b10a      	cbz	r2, 8009750 <_svfiprintf_r+0x5c>
 800974c:	2a25      	cmp	r2, #37	; 0x25
 800974e:	d1f9      	bne.n	8009744 <_svfiprintf_r+0x50>
 8009750:	ebba 0b04 	subs.w	fp, sl, r4
 8009754:	d00b      	beq.n	800976e <_svfiprintf_r+0x7a>
 8009756:	465b      	mov	r3, fp
 8009758:	4622      	mov	r2, r4
 800975a:	4629      	mov	r1, r5
 800975c:	4638      	mov	r0, r7
 800975e:	f7ff ff6d 	bl	800963c <__ssputs_r>
 8009762:	3001      	adds	r0, #1
 8009764:	f000 80aa 	beq.w	80098bc <_svfiprintf_r+0x1c8>
 8009768:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800976a:	445a      	add	r2, fp
 800976c:	9209      	str	r2, [sp, #36]	; 0x24
 800976e:	f89a 3000 	ldrb.w	r3, [sl]
 8009772:	2b00      	cmp	r3, #0
 8009774:	f000 80a2 	beq.w	80098bc <_svfiprintf_r+0x1c8>
 8009778:	2300      	movs	r3, #0
 800977a:	f04f 32ff 	mov.w	r2, #4294967295
 800977e:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8009782:	f10a 0a01 	add.w	sl, sl, #1
 8009786:	9304      	str	r3, [sp, #16]
 8009788:	9307      	str	r3, [sp, #28]
 800978a:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800978e:	931a      	str	r3, [sp, #104]	; 0x68
 8009790:	4654      	mov	r4, sl
 8009792:	2205      	movs	r2, #5
 8009794:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009798:	4851      	ldr	r0, [pc, #324]	; (80098e0 <_svfiprintf_r+0x1ec>)
 800979a:	f7ff f9c7 	bl	8008b2c <memchr>
 800979e:	9a04      	ldr	r2, [sp, #16]
 80097a0:	b9d8      	cbnz	r0, 80097da <_svfiprintf_r+0xe6>
 80097a2:	06d0      	lsls	r0, r2, #27
 80097a4:	bf44      	itt	mi
 80097a6:	2320      	movmi	r3, #32
 80097a8:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80097ac:	0711      	lsls	r1, r2, #28
 80097ae:	bf44      	itt	mi
 80097b0:	232b      	movmi	r3, #43	; 0x2b
 80097b2:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80097b6:	f89a 3000 	ldrb.w	r3, [sl]
 80097ba:	2b2a      	cmp	r3, #42	; 0x2a
 80097bc:	d015      	beq.n	80097ea <_svfiprintf_r+0xf6>
 80097be:	4654      	mov	r4, sl
 80097c0:	2000      	movs	r0, #0
 80097c2:	f04f 0c0a 	mov.w	ip, #10
 80097c6:	9a07      	ldr	r2, [sp, #28]
 80097c8:	4621      	mov	r1, r4
 80097ca:	f811 3b01 	ldrb.w	r3, [r1], #1
 80097ce:	3b30      	subs	r3, #48	; 0x30
 80097d0:	2b09      	cmp	r3, #9
 80097d2:	d94e      	bls.n	8009872 <_svfiprintf_r+0x17e>
 80097d4:	b1b0      	cbz	r0, 8009804 <_svfiprintf_r+0x110>
 80097d6:	9207      	str	r2, [sp, #28]
 80097d8:	e014      	b.n	8009804 <_svfiprintf_r+0x110>
 80097da:	eba0 0308 	sub.w	r3, r0, r8
 80097de:	fa09 f303 	lsl.w	r3, r9, r3
 80097e2:	4313      	orrs	r3, r2
 80097e4:	46a2      	mov	sl, r4
 80097e6:	9304      	str	r3, [sp, #16]
 80097e8:	e7d2      	b.n	8009790 <_svfiprintf_r+0x9c>
 80097ea:	9b03      	ldr	r3, [sp, #12]
 80097ec:	1d19      	adds	r1, r3, #4
 80097ee:	681b      	ldr	r3, [r3, #0]
 80097f0:	9103      	str	r1, [sp, #12]
 80097f2:	2b00      	cmp	r3, #0
 80097f4:	bfbb      	ittet	lt
 80097f6:	425b      	neglt	r3, r3
 80097f8:	f042 0202 	orrlt.w	r2, r2, #2
 80097fc:	9307      	strge	r3, [sp, #28]
 80097fe:	9307      	strlt	r3, [sp, #28]
 8009800:	bfb8      	it	lt
 8009802:	9204      	strlt	r2, [sp, #16]
 8009804:	7823      	ldrb	r3, [r4, #0]
 8009806:	2b2e      	cmp	r3, #46	; 0x2e
 8009808:	d10c      	bne.n	8009824 <_svfiprintf_r+0x130>
 800980a:	7863      	ldrb	r3, [r4, #1]
 800980c:	2b2a      	cmp	r3, #42	; 0x2a
 800980e:	d135      	bne.n	800987c <_svfiprintf_r+0x188>
 8009810:	9b03      	ldr	r3, [sp, #12]
 8009812:	3402      	adds	r4, #2
 8009814:	1d1a      	adds	r2, r3, #4
 8009816:	681b      	ldr	r3, [r3, #0]
 8009818:	9203      	str	r2, [sp, #12]
 800981a:	2b00      	cmp	r3, #0
 800981c:	bfb8      	it	lt
 800981e:	f04f 33ff 	movlt.w	r3, #4294967295
 8009822:	9305      	str	r3, [sp, #20]
 8009824:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 80098f0 <_svfiprintf_r+0x1fc>
 8009828:	2203      	movs	r2, #3
 800982a:	4650      	mov	r0, sl
 800982c:	7821      	ldrb	r1, [r4, #0]
 800982e:	f7ff f97d 	bl	8008b2c <memchr>
 8009832:	b140      	cbz	r0, 8009846 <_svfiprintf_r+0x152>
 8009834:	2340      	movs	r3, #64	; 0x40
 8009836:	eba0 000a 	sub.w	r0, r0, sl
 800983a:	fa03 f000 	lsl.w	r0, r3, r0
 800983e:	9b04      	ldr	r3, [sp, #16]
 8009840:	3401      	adds	r4, #1
 8009842:	4303      	orrs	r3, r0
 8009844:	9304      	str	r3, [sp, #16]
 8009846:	f814 1b01 	ldrb.w	r1, [r4], #1
 800984a:	2206      	movs	r2, #6
 800984c:	4825      	ldr	r0, [pc, #148]	; (80098e4 <_svfiprintf_r+0x1f0>)
 800984e:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8009852:	f7ff f96b 	bl	8008b2c <memchr>
 8009856:	2800      	cmp	r0, #0
 8009858:	d038      	beq.n	80098cc <_svfiprintf_r+0x1d8>
 800985a:	4b23      	ldr	r3, [pc, #140]	; (80098e8 <_svfiprintf_r+0x1f4>)
 800985c:	bb1b      	cbnz	r3, 80098a6 <_svfiprintf_r+0x1b2>
 800985e:	9b03      	ldr	r3, [sp, #12]
 8009860:	3307      	adds	r3, #7
 8009862:	f023 0307 	bic.w	r3, r3, #7
 8009866:	3308      	adds	r3, #8
 8009868:	9303      	str	r3, [sp, #12]
 800986a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800986c:	4433      	add	r3, r6
 800986e:	9309      	str	r3, [sp, #36]	; 0x24
 8009870:	e767      	b.n	8009742 <_svfiprintf_r+0x4e>
 8009872:	460c      	mov	r4, r1
 8009874:	2001      	movs	r0, #1
 8009876:	fb0c 3202 	mla	r2, ip, r2, r3
 800987a:	e7a5      	b.n	80097c8 <_svfiprintf_r+0xd4>
 800987c:	2300      	movs	r3, #0
 800987e:	f04f 0c0a 	mov.w	ip, #10
 8009882:	4619      	mov	r1, r3
 8009884:	3401      	adds	r4, #1
 8009886:	9305      	str	r3, [sp, #20]
 8009888:	4620      	mov	r0, r4
 800988a:	f810 2b01 	ldrb.w	r2, [r0], #1
 800988e:	3a30      	subs	r2, #48	; 0x30
 8009890:	2a09      	cmp	r2, #9
 8009892:	d903      	bls.n	800989c <_svfiprintf_r+0x1a8>
 8009894:	2b00      	cmp	r3, #0
 8009896:	d0c5      	beq.n	8009824 <_svfiprintf_r+0x130>
 8009898:	9105      	str	r1, [sp, #20]
 800989a:	e7c3      	b.n	8009824 <_svfiprintf_r+0x130>
 800989c:	4604      	mov	r4, r0
 800989e:	2301      	movs	r3, #1
 80098a0:	fb0c 2101 	mla	r1, ip, r1, r2
 80098a4:	e7f0      	b.n	8009888 <_svfiprintf_r+0x194>
 80098a6:	ab03      	add	r3, sp, #12
 80098a8:	9300      	str	r3, [sp, #0]
 80098aa:	462a      	mov	r2, r5
 80098ac:	4638      	mov	r0, r7
 80098ae:	4b0f      	ldr	r3, [pc, #60]	; (80098ec <_svfiprintf_r+0x1f8>)
 80098b0:	a904      	add	r1, sp, #16
 80098b2:	f7fc fa8f 	bl	8005dd4 <_printf_float>
 80098b6:	1c42      	adds	r2, r0, #1
 80098b8:	4606      	mov	r6, r0
 80098ba:	d1d6      	bne.n	800986a <_svfiprintf_r+0x176>
 80098bc:	89ab      	ldrh	r3, [r5, #12]
 80098be:	065b      	lsls	r3, r3, #25
 80098c0:	f53f af2c 	bmi.w	800971c <_svfiprintf_r+0x28>
 80098c4:	9809      	ldr	r0, [sp, #36]	; 0x24
 80098c6:	b01d      	add	sp, #116	; 0x74
 80098c8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80098cc:	ab03      	add	r3, sp, #12
 80098ce:	9300      	str	r3, [sp, #0]
 80098d0:	462a      	mov	r2, r5
 80098d2:	4638      	mov	r0, r7
 80098d4:	4b05      	ldr	r3, [pc, #20]	; (80098ec <_svfiprintf_r+0x1f8>)
 80098d6:	a904      	add	r1, sp, #16
 80098d8:	f7fc fd18 	bl	800630c <_printf_i>
 80098dc:	e7eb      	b.n	80098b6 <_svfiprintf_r+0x1c2>
 80098de:	bf00      	nop
 80098e0:	0800aa7c 	.word	0x0800aa7c
 80098e4:	0800aa86 	.word	0x0800aa86
 80098e8:	08005dd5 	.word	0x08005dd5
 80098ec:	0800963d 	.word	0x0800963d
 80098f0:	0800aa82 	.word	0x0800aa82

080098f4 <nan>:
 80098f4:	2000      	movs	r0, #0
 80098f6:	4901      	ldr	r1, [pc, #4]	; (80098fc <nan+0x8>)
 80098f8:	4770      	bx	lr
 80098fa:	bf00      	nop
 80098fc:	7ff80000 	.word	0x7ff80000

08009900 <_sbrk_r>:
 8009900:	b538      	push	{r3, r4, r5, lr}
 8009902:	2300      	movs	r3, #0
 8009904:	4d05      	ldr	r5, [pc, #20]	; (800991c <_sbrk_r+0x1c>)
 8009906:	4604      	mov	r4, r0
 8009908:	4608      	mov	r0, r1
 800990a:	602b      	str	r3, [r5, #0]
 800990c:	f7f8 fcfe 	bl	800230c <_sbrk>
 8009910:	1c43      	adds	r3, r0, #1
 8009912:	d102      	bne.n	800991a <_sbrk_r+0x1a>
 8009914:	682b      	ldr	r3, [r5, #0]
 8009916:	b103      	cbz	r3, 800991a <_sbrk_r+0x1a>
 8009918:	6023      	str	r3, [r4, #0]
 800991a:	bd38      	pop	{r3, r4, r5, pc}
 800991c:	200003d0 	.word	0x200003d0

08009920 <strncmp>:
 8009920:	b510      	push	{r4, lr}
 8009922:	b16a      	cbz	r2, 8009940 <strncmp+0x20>
 8009924:	3901      	subs	r1, #1
 8009926:	1884      	adds	r4, r0, r2
 8009928:	f810 3b01 	ldrb.w	r3, [r0], #1
 800992c:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 8009930:	4293      	cmp	r3, r2
 8009932:	d103      	bne.n	800993c <strncmp+0x1c>
 8009934:	42a0      	cmp	r0, r4
 8009936:	d001      	beq.n	800993c <strncmp+0x1c>
 8009938:	2b00      	cmp	r3, #0
 800993a:	d1f5      	bne.n	8009928 <strncmp+0x8>
 800993c:	1a98      	subs	r0, r3, r2
 800993e:	bd10      	pop	{r4, pc}
 8009940:	4610      	mov	r0, r2
 8009942:	e7fc      	b.n	800993e <strncmp+0x1e>

08009944 <__ascii_wctomb>:
 8009944:	4603      	mov	r3, r0
 8009946:	4608      	mov	r0, r1
 8009948:	b141      	cbz	r1, 800995c <__ascii_wctomb+0x18>
 800994a:	2aff      	cmp	r2, #255	; 0xff
 800994c:	d904      	bls.n	8009958 <__ascii_wctomb+0x14>
 800994e:	228a      	movs	r2, #138	; 0x8a
 8009950:	f04f 30ff 	mov.w	r0, #4294967295
 8009954:	601a      	str	r2, [r3, #0]
 8009956:	4770      	bx	lr
 8009958:	2001      	movs	r0, #1
 800995a:	700a      	strb	r2, [r1, #0]
 800995c:	4770      	bx	lr
	...

08009960 <__assert_func>:
 8009960:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8009962:	4614      	mov	r4, r2
 8009964:	461a      	mov	r2, r3
 8009966:	4b09      	ldr	r3, [pc, #36]	; (800998c <__assert_func+0x2c>)
 8009968:	4605      	mov	r5, r0
 800996a:	681b      	ldr	r3, [r3, #0]
 800996c:	68d8      	ldr	r0, [r3, #12]
 800996e:	b14c      	cbz	r4, 8009984 <__assert_func+0x24>
 8009970:	4b07      	ldr	r3, [pc, #28]	; (8009990 <__assert_func+0x30>)
 8009972:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8009976:	9100      	str	r1, [sp, #0]
 8009978:	462b      	mov	r3, r5
 800997a:	4906      	ldr	r1, [pc, #24]	; (8009994 <__assert_func+0x34>)
 800997c:	f000 f80e 	bl	800999c <fiprintf>
 8009980:	f000 fa82 	bl	8009e88 <abort>
 8009984:	4b04      	ldr	r3, [pc, #16]	; (8009998 <__assert_func+0x38>)
 8009986:	461c      	mov	r4, r3
 8009988:	e7f3      	b.n	8009972 <__assert_func+0x12>
 800998a:	bf00      	nop
 800998c:	2000000c 	.word	0x2000000c
 8009990:	0800aa8d 	.word	0x0800aa8d
 8009994:	0800aa9a 	.word	0x0800aa9a
 8009998:	0800aac8 	.word	0x0800aac8

0800999c <fiprintf>:
 800999c:	b40e      	push	{r1, r2, r3}
 800999e:	b503      	push	{r0, r1, lr}
 80099a0:	4601      	mov	r1, r0
 80099a2:	ab03      	add	r3, sp, #12
 80099a4:	4805      	ldr	r0, [pc, #20]	; (80099bc <fiprintf+0x20>)
 80099a6:	f853 2b04 	ldr.w	r2, [r3], #4
 80099aa:	6800      	ldr	r0, [r0, #0]
 80099ac:	9301      	str	r3, [sp, #4]
 80099ae:	f000 f87b 	bl	8009aa8 <_vfiprintf_r>
 80099b2:	b002      	add	sp, #8
 80099b4:	f85d eb04 	ldr.w	lr, [sp], #4
 80099b8:	b003      	add	sp, #12
 80099ba:	4770      	bx	lr
 80099bc:	2000000c 	.word	0x2000000c

080099c0 <memmove>:
 80099c0:	4288      	cmp	r0, r1
 80099c2:	b510      	push	{r4, lr}
 80099c4:	eb01 0402 	add.w	r4, r1, r2
 80099c8:	d902      	bls.n	80099d0 <memmove+0x10>
 80099ca:	4284      	cmp	r4, r0
 80099cc:	4623      	mov	r3, r4
 80099ce:	d807      	bhi.n	80099e0 <memmove+0x20>
 80099d0:	1e43      	subs	r3, r0, #1
 80099d2:	42a1      	cmp	r1, r4
 80099d4:	d008      	beq.n	80099e8 <memmove+0x28>
 80099d6:	f811 2b01 	ldrb.w	r2, [r1], #1
 80099da:	f803 2f01 	strb.w	r2, [r3, #1]!
 80099de:	e7f8      	b.n	80099d2 <memmove+0x12>
 80099e0:	4601      	mov	r1, r0
 80099e2:	4402      	add	r2, r0
 80099e4:	428a      	cmp	r2, r1
 80099e6:	d100      	bne.n	80099ea <memmove+0x2a>
 80099e8:	bd10      	pop	{r4, pc}
 80099ea:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80099ee:	f802 4d01 	strb.w	r4, [r2, #-1]!
 80099f2:	e7f7      	b.n	80099e4 <memmove+0x24>

080099f4 <__malloc_lock>:
 80099f4:	4801      	ldr	r0, [pc, #4]	; (80099fc <__malloc_lock+0x8>)
 80099f6:	f000 bc07 	b.w	800a208 <__retarget_lock_acquire_recursive>
 80099fa:	bf00      	nop
 80099fc:	200003d8 	.word	0x200003d8

08009a00 <__malloc_unlock>:
 8009a00:	4801      	ldr	r0, [pc, #4]	; (8009a08 <__malloc_unlock+0x8>)
 8009a02:	f000 bc02 	b.w	800a20a <__retarget_lock_release_recursive>
 8009a06:	bf00      	nop
 8009a08:	200003d8 	.word	0x200003d8

08009a0c <_realloc_r>:
 8009a0c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009a0e:	4607      	mov	r7, r0
 8009a10:	4614      	mov	r4, r2
 8009a12:	460e      	mov	r6, r1
 8009a14:	b921      	cbnz	r1, 8009a20 <_realloc_r+0x14>
 8009a16:	4611      	mov	r1, r2
 8009a18:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8009a1c:	f7ff bdb4 	b.w	8009588 <_malloc_r>
 8009a20:	b922      	cbnz	r2, 8009a2c <_realloc_r+0x20>
 8009a22:	f7ff fd65 	bl	80094f0 <_free_r>
 8009a26:	4625      	mov	r5, r4
 8009a28:	4628      	mov	r0, r5
 8009a2a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8009a2c:	f000 fc52 	bl	800a2d4 <_malloc_usable_size_r>
 8009a30:	42a0      	cmp	r0, r4
 8009a32:	d20f      	bcs.n	8009a54 <_realloc_r+0x48>
 8009a34:	4621      	mov	r1, r4
 8009a36:	4638      	mov	r0, r7
 8009a38:	f7ff fda6 	bl	8009588 <_malloc_r>
 8009a3c:	4605      	mov	r5, r0
 8009a3e:	2800      	cmp	r0, #0
 8009a40:	d0f2      	beq.n	8009a28 <_realloc_r+0x1c>
 8009a42:	4631      	mov	r1, r6
 8009a44:	4622      	mov	r2, r4
 8009a46:	f7ff f87f 	bl	8008b48 <memcpy>
 8009a4a:	4631      	mov	r1, r6
 8009a4c:	4638      	mov	r0, r7
 8009a4e:	f7ff fd4f 	bl	80094f0 <_free_r>
 8009a52:	e7e9      	b.n	8009a28 <_realloc_r+0x1c>
 8009a54:	4635      	mov	r5, r6
 8009a56:	e7e7      	b.n	8009a28 <_realloc_r+0x1c>

08009a58 <__sfputc_r>:
 8009a58:	6893      	ldr	r3, [r2, #8]
 8009a5a:	b410      	push	{r4}
 8009a5c:	3b01      	subs	r3, #1
 8009a5e:	2b00      	cmp	r3, #0
 8009a60:	6093      	str	r3, [r2, #8]
 8009a62:	da07      	bge.n	8009a74 <__sfputc_r+0x1c>
 8009a64:	6994      	ldr	r4, [r2, #24]
 8009a66:	42a3      	cmp	r3, r4
 8009a68:	db01      	blt.n	8009a6e <__sfputc_r+0x16>
 8009a6a:	290a      	cmp	r1, #10
 8009a6c:	d102      	bne.n	8009a74 <__sfputc_r+0x1c>
 8009a6e:	bc10      	pop	{r4}
 8009a70:	f000 b94a 	b.w	8009d08 <__swbuf_r>
 8009a74:	6813      	ldr	r3, [r2, #0]
 8009a76:	1c58      	adds	r0, r3, #1
 8009a78:	6010      	str	r0, [r2, #0]
 8009a7a:	7019      	strb	r1, [r3, #0]
 8009a7c:	4608      	mov	r0, r1
 8009a7e:	bc10      	pop	{r4}
 8009a80:	4770      	bx	lr

08009a82 <__sfputs_r>:
 8009a82:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009a84:	4606      	mov	r6, r0
 8009a86:	460f      	mov	r7, r1
 8009a88:	4614      	mov	r4, r2
 8009a8a:	18d5      	adds	r5, r2, r3
 8009a8c:	42ac      	cmp	r4, r5
 8009a8e:	d101      	bne.n	8009a94 <__sfputs_r+0x12>
 8009a90:	2000      	movs	r0, #0
 8009a92:	e007      	b.n	8009aa4 <__sfputs_r+0x22>
 8009a94:	463a      	mov	r2, r7
 8009a96:	4630      	mov	r0, r6
 8009a98:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009a9c:	f7ff ffdc 	bl	8009a58 <__sfputc_r>
 8009aa0:	1c43      	adds	r3, r0, #1
 8009aa2:	d1f3      	bne.n	8009a8c <__sfputs_r+0xa>
 8009aa4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08009aa8 <_vfiprintf_r>:
 8009aa8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009aac:	460d      	mov	r5, r1
 8009aae:	4614      	mov	r4, r2
 8009ab0:	4698      	mov	r8, r3
 8009ab2:	4606      	mov	r6, r0
 8009ab4:	b09d      	sub	sp, #116	; 0x74
 8009ab6:	b118      	cbz	r0, 8009ac0 <_vfiprintf_r+0x18>
 8009ab8:	6983      	ldr	r3, [r0, #24]
 8009aba:	b90b      	cbnz	r3, 8009ac0 <_vfiprintf_r+0x18>
 8009abc:	f000 fb06 	bl	800a0cc <__sinit>
 8009ac0:	4b89      	ldr	r3, [pc, #548]	; (8009ce8 <_vfiprintf_r+0x240>)
 8009ac2:	429d      	cmp	r5, r3
 8009ac4:	d11b      	bne.n	8009afe <_vfiprintf_r+0x56>
 8009ac6:	6875      	ldr	r5, [r6, #4]
 8009ac8:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8009aca:	07d9      	lsls	r1, r3, #31
 8009acc:	d405      	bmi.n	8009ada <_vfiprintf_r+0x32>
 8009ace:	89ab      	ldrh	r3, [r5, #12]
 8009ad0:	059a      	lsls	r2, r3, #22
 8009ad2:	d402      	bmi.n	8009ada <_vfiprintf_r+0x32>
 8009ad4:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8009ad6:	f000 fb97 	bl	800a208 <__retarget_lock_acquire_recursive>
 8009ada:	89ab      	ldrh	r3, [r5, #12]
 8009adc:	071b      	lsls	r3, r3, #28
 8009ade:	d501      	bpl.n	8009ae4 <_vfiprintf_r+0x3c>
 8009ae0:	692b      	ldr	r3, [r5, #16]
 8009ae2:	b9eb      	cbnz	r3, 8009b20 <_vfiprintf_r+0x78>
 8009ae4:	4629      	mov	r1, r5
 8009ae6:	4630      	mov	r0, r6
 8009ae8:	f000 f960 	bl	8009dac <__swsetup_r>
 8009aec:	b1c0      	cbz	r0, 8009b20 <_vfiprintf_r+0x78>
 8009aee:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8009af0:	07dc      	lsls	r4, r3, #31
 8009af2:	d50e      	bpl.n	8009b12 <_vfiprintf_r+0x6a>
 8009af4:	f04f 30ff 	mov.w	r0, #4294967295
 8009af8:	b01d      	add	sp, #116	; 0x74
 8009afa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009afe:	4b7b      	ldr	r3, [pc, #492]	; (8009cec <_vfiprintf_r+0x244>)
 8009b00:	429d      	cmp	r5, r3
 8009b02:	d101      	bne.n	8009b08 <_vfiprintf_r+0x60>
 8009b04:	68b5      	ldr	r5, [r6, #8]
 8009b06:	e7df      	b.n	8009ac8 <_vfiprintf_r+0x20>
 8009b08:	4b79      	ldr	r3, [pc, #484]	; (8009cf0 <_vfiprintf_r+0x248>)
 8009b0a:	429d      	cmp	r5, r3
 8009b0c:	bf08      	it	eq
 8009b0e:	68f5      	ldreq	r5, [r6, #12]
 8009b10:	e7da      	b.n	8009ac8 <_vfiprintf_r+0x20>
 8009b12:	89ab      	ldrh	r3, [r5, #12]
 8009b14:	0598      	lsls	r0, r3, #22
 8009b16:	d4ed      	bmi.n	8009af4 <_vfiprintf_r+0x4c>
 8009b18:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8009b1a:	f000 fb76 	bl	800a20a <__retarget_lock_release_recursive>
 8009b1e:	e7e9      	b.n	8009af4 <_vfiprintf_r+0x4c>
 8009b20:	2300      	movs	r3, #0
 8009b22:	9309      	str	r3, [sp, #36]	; 0x24
 8009b24:	2320      	movs	r3, #32
 8009b26:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8009b2a:	2330      	movs	r3, #48	; 0x30
 8009b2c:	f04f 0901 	mov.w	r9, #1
 8009b30:	f8cd 800c 	str.w	r8, [sp, #12]
 8009b34:	f8df 81bc 	ldr.w	r8, [pc, #444]	; 8009cf4 <_vfiprintf_r+0x24c>
 8009b38:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8009b3c:	4623      	mov	r3, r4
 8009b3e:	469a      	mov	sl, r3
 8009b40:	f813 2b01 	ldrb.w	r2, [r3], #1
 8009b44:	b10a      	cbz	r2, 8009b4a <_vfiprintf_r+0xa2>
 8009b46:	2a25      	cmp	r2, #37	; 0x25
 8009b48:	d1f9      	bne.n	8009b3e <_vfiprintf_r+0x96>
 8009b4a:	ebba 0b04 	subs.w	fp, sl, r4
 8009b4e:	d00b      	beq.n	8009b68 <_vfiprintf_r+0xc0>
 8009b50:	465b      	mov	r3, fp
 8009b52:	4622      	mov	r2, r4
 8009b54:	4629      	mov	r1, r5
 8009b56:	4630      	mov	r0, r6
 8009b58:	f7ff ff93 	bl	8009a82 <__sfputs_r>
 8009b5c:	3001      	adds	r0, #1
 8009b5e:	f000 80aa 	beq.w	8009cb6 <_vfiprintf_r+0x20e>
 8009b62:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8009b64:	445a      	add	r2, fp
 8009b66:	9209      	str	r2, [sp, #36]	; 0x24
 8009b68:	f89a 3000 	ldrb.w	r3, [sl]
 8009b6c:	2b00      	cmp	r3, #0
 8009b6e:	f000 80a2 	beq.w	8009cb6 <_vfiprintf_r+0x20e>
 8009b72:	2300      	movs	r3, #0
 8009b74:	f04f 32ff 	mov.w	r2, #4294967295
 8009b78:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8009b7c:	f10a 0a01 	add.w	sl, sl, #1
 8009b80:	9304      	str	r3, [sp, #16]
 8009b82:	9307      	str	r3, [sp, #28]
 8009b84:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8009b88:	931a      	str	r3, [sp, #104]	; 0x68
 8009b8a:	4654      	mov	r4, sl
 8009b8c:	2205      	movs	r2, #5
 8009b8e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009b92:	4858      	ldr	r0, [pc, #352]	; (8009cf4 <_vfiprintf_r+0x24c>)
 8009b94:	f7fe ffca 	bl	8008b2c <memchr>
 8009b98:	9a04      	ldr	r2, [sp, #16]
 8009b9a:	b9d8      	cbnz	r0, 8009bd4 <_vfiprintf_r+0x12c>
 8009b9c:	06d1      	lsls	r1, r2, #27
 8009b9e:	bf44      	itt	mi
 8009ba0:	2320      	movmi	r3, #32
 8009ba2:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8009ba6:	0713      	lsls	r3, r2, #28
 8009ba8:	bf44      	itt	mi
 8009baa:	232b      	movmi	r3, #43	; 0x2b
 8009bac:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8009bb0:	f89a 3000 	ldrb.w	r3, [sl]
 8009bb4:	2b2a      	cmp	r3, #42	; 0x2a
 8009bb6:	d015      	beq.n	8009be4 <_vfiprintf_r+0x13c>
 8009bb8:	4654      	mov	r4, sl
 8009bba:	2000      	movs	r0, #0
 8009bbc:	f04f 0c0a 	mov.w	ip, #10
 8009bc0:	9a07      	ldr	r2, [sp, #28]
 8009bc2:	4621      	mov	r1, r4
 8009bc4:	f811 3b01 	ldrb.w	r3, [r1], #1
 8009bc8:	3b30      	subs	r3, #48	; 0x30
 8009bca:	2b09      	cmp	r3, #9
 8009bcc:	d94e      	bls.n	8009c6c <_vfiprintf_r+0x1c4>
 8009bce:	b1b0      	cbz	r0, 8009bfe <_vfiprintf_r+0x156>
 8009bd0:	9207      	str	r2, [sp, #28]
 8009bd2:	e014      	b.n	8009bfe <_vfiprintf_r+0x156>
 8009bd4:	eba0 0308 	sub.w	r3, r0, r8
 8009bd8:	fa09 f303 	lsl.w	r3, r9, r3
 8009bdc:	4313      	orrs	r3, r2
 8009bde:	46a2      	mov	sl, r4
 8009be0:	9304      	str	r3, [sp, #16]
 8009be2:	e7d2      	b.n	8009b8a <_vfiprintf_r+0xe2>
 8009be4:	9b03      	ldr	r3, [sp, #12]
 8009be6:	1d19      	adds	r1, r3, #4
 8009be8:	681b      	ldr	r3, [r3, #0]
 8009bea:	9103      	str	r1, [sp, #12]
 8009bec:	2b00      	cmp	r3, #0
 8009bee:	bfbb      	ittet	lt
 8009bf0:	425b      	neglt	r3, r3
 8009bf2:	f042 0202 	orrlt.w	r2, r2, #2
 8009bf6:	9307      	strge	r3, [sp, #28]
 8009bf8:	9307      	strlt	r3, [sp, #28]
 8009bfa:	bfb8      	it	lt
 8009bfc:	9204      	strlt	r2, [sp, #16]
 8009bfe:	7823      	ldrb	r3, [r4, #0]
 8009c00:	2b2e      	cmp	r3, #46	; 0x2e
 8009c02:	d10c      	bne.n	8009c1e <_vfiprintf_r+0x176>
 8009c04:	7863      	ldrb	r3, [r4, #1]
 8009c06:	2b2a      	cmp	r3, #42	; 0x2a
 8009c08:	d135      	bne.n	8009c76 <_vfiprintf_r+0x1ce>
 8009c0a:	9b03      	ldr	r3, [sp, #12]
 8009c0c:	3402      	adds	r4, #2
 8009c0e:	1d1a      	adds	r2, r3, #4
 8009c10:	681b      	ldr	r3, [r3, #0]
 8009c12:	9203      	str	r2, [sp, #12]
 8009c14:	2b00      	cmp	r3, #0
 8009c16:	bfb8      	it	lt
 8009c18:	f04f 33ff 	movlt.w	r3, #4294967295
 8009c1c:	9305      	str	r3, [sp, #20]
 8009c1e:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8009d04 <_vfiprintf_r+0x25c>
 8009c22:	2203      	movs	r2, #3
 8009c24:	4650      	mov	r0, sl
 8009c26:	7821      	ldrb	r1, [r4, #0]
 8009c28:	f7fe ff80 	bl	8008b2c <memchr>
 8009c2c:	b140      	cbz	r0, 8009c40 <_vfiprintf_r+0x198>
 8009c2e:	2340      	movs	r3, #64	; 0x40
 8009c30:	eba0 000a 	sub.w	r0, r0, sl
 8009c34:	fa03 f000 	lsl.w	r0, r3, r0
 8009c38:	9b04      	ldr	r3, [sp, #16]
 8009c3a:	3401      	adds	r4, #1
 8009c3c:	4303      	orrs	r3, r0
 8009c3e:	9304      	str	r3, [sp, #16]
 8009c40:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009c44:	2206      	movs	r2, #6
 8009c46:	482c      	ldr	r0, [pc, #176]	; (8009cf8 <_vfiprintf_r+0x250>)
 8009c48:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8009c4c:	f7fe ff6e 	bl	8008b2c <memchr>
 8009c50:	2800      	cmp	r0, #0
 8009c52:	d03f      	beq.n	8009cd4 <_vfiprintf_r+0x22c>
 8009c54:	4b29      	ldr	r3, [pc, #164]	; (8009cfc <_vfiprintf_r+0x254>)
 8009c56:	bb1b      	cbnz	r3, 8009ca0 <_vfiprintf_r+0x1f8>
 8009c58:	9b03      	ldr	r3, [sp, #12]
 8009c5a:	3307      	adds	r3, #7
 8009c5c:	f023 0307 	bic.w	r3, r3, #7
 8009c60:	3308      	adds	r3, #8
 8009c62:	9303      	str	r3, [sp, #12]
 8009c64:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009c66:	443b      	add	r3, r7
 8009c68:	9309      	str	r3, [sp, #36]	; 0x24
 8009c6a:	e767      	b.n	8009b3c <_vfiprintf_r+0x94>
 8009c6c:	460c      	mov	r4, r1
 8009c6e:	2001      	movs	r0, #1
 8009c70:	fb0c 3202 	mla	r2, ip, r2, r3
 8009c74:	e7a5      	b.n	8009bc2 <_vfiprintf_r+0x11a>
 8009c76:	2300      	movs	r3, #0
 8009c78:	f04f 0c0a 	mov.w	ip, #10
 8009c7c:	4619      	mov	r1, r3
 8009c7e:	3401      	adds	r4, #1
 8009c80:	9305      	str	r3, [sp, #20]
 8009c82:	4620      	mov	r0, r4
 8009c84:	f810 2b01 	ldrb.w	r2, [r0], #1
 8009c88:	3a30      	subs	r2, #48	; 0x30
 8009c8a:	2a09      	cmp	r2, #9
 8009c8c:	d903      	bls.n	8009c96 <_vfiprintf_r+0x1ee>
 8009c8e:	2b00      	cmp	r3, #0
 8009c90:	d0c5      	beq.n	8009c1e <_vfiprintf_r+0x176>
 8009c92:	9105      	str	r1, [sp, #20]
 8009c94:	e7c3      	b.n	8009c1e <_vfiprintf_r+0x176>
 8009c96:	4604      	mov	r4, r0
 8009c98:	2301      	movs	r3, #1
 8009c9a:	fb0c 2101 	mla	r1, ip, r1, r2
 8009c9e:	e7f0      	b.n	8009c82 <_vfiprintf_r+0x1da>
 8009ca0:	ab03      	add	r3, sp, #12
 8009ca2:	9300      	str	r3, [sp, #0]
 8009ca4:	462a      	mov	r2, r5
 8009ca6:	4630      	mov	r0, r6
 8009ca8:	4b15      	ldr	r3, [pc, #84]	; (8009d00 <_vfiprintf_r+0x258>)
 8009caa:	a904      	add	r1, sp, #16
 8009cac:	f7fc f892 	bl	8005dd4 <_printf_float>
 8009cb0:	4607      	mov	r7, r0
 8009cb2:	1c78      	adds	r0, r7, #1
 8009cb4:	d1d6      	bne.n	8009c64 <_vfiprintf_r+0x1bc>
 8009cb6:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8009cb8:	07d9      	lsls	r1, r3, #31
 8009cba:	d405      	bmi.n	8009cc8 <_vfiprintf_r+0x220>
 8009cbc:	89ab      	ldrh	r3, [r5, #12]
 8009cbe:	059a      	lsls	r2, r3, #22
 8009cc0:	d402      	bmi.n	8009cc8 <_vfiprintf_r+0x220>
 8009cc2:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8009cc4:	f000 faa1 	bl	800a20a <__retarget_lock_release_recursive>
 8009cc8:	89ab      	ldrh	r3, [r5, #12]
 8009cca:	065b      	lsls	r3, r3, #25
 8009ccc:	f53f af12 	bmi.w	8009af4 <_vfiprintf_r+0x4c>
 8009cd0:	9809      	ldr	r0, [sp, #36]	; 0x24
 8009cd2:	e711      	b.n	8009af8 <_vfiprintf_r+0x50>
 8009cd4:	ab03      	add	r3, sp, #12
 8009cd6:	9300      	str	r3, [sp, #0]
 8009cd8:	462a      	mov	r2, r5
 8009cda:	4630      	mov	r0, r6
 8009cdc:	4b08      	ldr	r3, [pc, #32]	; (8009d00 <_vfiprintf_r+0x258>)
 8009cde:	a904      	add	r1, sp, #16
 8009ce0:	f7fc fb14 	bl	800630c <_printf_i>
 8009ce4:	e7e4      	b.n	8009cb0 <_vfiprintf_r+0x208>
 8009ce6:	bf00      	nop
 8009ce8:	0800aaec 	.word	0x0800aaec
 8009cec:	0800ab0c 	.word	0x0800ab0c
 8009cf0:	0800aacc 	.word	0x0800aacc
 8009cf4:	0800aa7c 	.word	0x0800aa7c
 8009cf8:	0800aa86 	.word	0x0800aa86
 8009cfc:	08005dd5 	.word	0x08005dd5
 8009d00:	08009a83 	.word	0x08009a83
 8009d04:	0800aa82 	.word	0x0800aa82

08009d08 <__swbuf_r>:
 8009d08:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009d0a:	460e      	mov	r6, r1
 8009d0c:	4614      	mov	r4, r2
 8009d0e:	4605      	mov	r5, r0
 8009d10:	b118      	cbz	r0, 8009d1a <__swbuf_r+0x12>
 8009d12:	6983      	ldr	r3, [r0, #24]
 8009d14:	b90b      	cbnz	r3, 8009d1a <__swbuf_r+0x12>
 8009d16:	f000 f9d9 	bl	800a0cc <__sinit>
 8009d1a:	4b21      	ldr	r3, [pc, #132]	; (8009da0 <__swbuf_r+0x98>)
 8009d1c:	429c      	cmp	r4, r3
 8009d1e:	d12b      	bne.n	8009d78 <__swbuf_r+0x70>
 8009d20:	686c      	ldr	r4, [r5, #4]
 8009d22:	69a3      	ldr	r3, [r4, #24]
 8009d24:	60a3      	str	r3, [r4, #8]
 8009d26:	89a3      	ldrh	r3, [r4, #12]
 8009d28:	071a      	lsls	r2, r3, #28
 8009d2a:	d52f      	bpl.n	8009d8c <__swbuf_r+0x84>
 8009d2c:	6923      	ldr	r3, [r4, #16]
 8009d2e:	b36b      	cbz	r3, 8009d8c <__swbuf_r+0x84>
 8009d30:	6923      	ldr	r3, [r4, #16]
 8009d32:	6820      	ldr	r0, [r4, #0]
 8009d34:	b2f6      	uxtb	r6, r6
 8009d36:	1ac0      	subs	r0, r0, r3
 8009d38:	6963      	ldr	r3, [r4, #20]
 8009d3a:	4637      	mov	r7, r6
 8009d3c:	4283      	cmp	r3, r0
 8009d3e:	dc04      	bgt.n	8009d4a <__swbuf_r+0x42>
 8009d40:	4621      	mov	r1, r4
 8009d42:	4628      	mov	r0, r5
 8009d44:	f000 f92e 	bl	8009fa4 <_fflush_r>
 8009d48:	bb30      	cbnz	r0, 8009d98 <__swbuf_r+0x90>
 8009d4a:	68a3      	ldr	r3, [r4, #8]
 8009d4c:	3001      	adds	r0, #1
 8009d4e:	3b01      	subs	r3, #1
 8009d50:	60a3      	str	r3, [r4, #8]
 8009d52:	6823      	ldr	r3, [r4, #0]
 8009d54:	1c5a      	adds	r2, r3, #1
 8009d56:	6022      	str	r2, [r4, #0]
 8009d58:	701e      	strb	r6, [r3, #0]
 8009d5a:	6963      	ldr	r3, [r4, #20]
 8009d5c:	4283      	cmp	r3, r0
 8009d5e:	d004      	beq.n	8009d6a <__swbuf_r+0x62>
 8009d60:	89a3      	ldrh	r3, [r4, #12]
 8009d62:	07db      	lsls	r3, r3, #31
 8009d64:	d506      	bpl.n	8009d74 <__swbuf_r+0x6c>
 8009d66:	2e0a      	cmp	r6, #10
 8009d68:	d104      	bne.n	8009d74 <__swbuf_r+0x6c>
 8009d6a:	4621      	mov	r1, r4
 8009d6c:	4628      	mov	r0, r5
 8009d6e:	f000 f919 	bl	8009fa4 <_fflush_r>
 8009d72:	b988      	cbnz	r0, 8009d98 <__swbuf_r+0x90>
 8009d74:	4638      	mov	r0, r7
 8009d76:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8009d78:	4b0a      	ldr	r3, [pc, #40]	; (8009da4 <__swbuf_r+0x9c>)
 8009d7a:	429c      	cmp	r4, r3
 8009d7c:	d101      	bne.n	8009d82 <__swbuf_r+0x7a>
 8009d7e:	68ac      	ldr	r4, [r5, #8]
 8009d80:	e7cf      	b.n	8009d22 <__swbuf_r+0x1a>
 8009d82:	4b09      	ldr	r3, [pc, #36]	; (8009da8 <__swbuf_r+0xa0>)
 8009d84:	429c      	cmp	r4, r3
 8009d86:	bf08      	it	eq
 8009d88:	68ec      	ldreq	r4, [r5, #12]
 8009d8a:	e7ca      	b.n	8009d22 <__swbuf_r+0x1a>
 8009d8c:	4621      	mov	r1, r4
 8009d8e:	4628      	mov	r0, r5
 8009d90:	f000 f80c 	bl	8009dac <__swsetup_r>
 8009d94:	2800      	cmp	r0, #0
 8009d96:	d0cb      	beq.n	8009d30 <__swbuf_r+0x28>
 8009d98:	f04f 37ff 	mov.w	r7, #4294967295
 8009d9c:	e7ea      	b.n	8009d74 <__swbuf_r+0x6c>
 8009d9e:	bf00      	nop
 8009da0:	0800aaec 	.word	0x0800aaec
 8009da4:	0800ab0c 	.word	0x0800ab0c
 8009da8:	0800aacc 	.word	0x0800aacc

08009dac <__swsetup_r>:
 8009dac:	4b32      	ldr	r3, [pc, #200]	; (8009e78 <__swsetup_r+0xcc>)
 8009dae:	b570      	push	{r4, r5, r6, lr}
 8009db0:	681d      	ldr	r5, [r3, #0]
 8009db2:	4606      	mov	r6, r0
 8009db4:	460c      	mov	r4, r1
 8009db6:	b125      	cbz	r5, 8009dc2 <__swsetup_r+0x16>
 8009db8:	69ab      	ldr	r3, [r5, #24]
 8009dba:	b913      	cbnz	r3, 8009dc2 <__swsetup_r+0x16>
 8009dbc:	4628      	mov	r0, r5
 8009dbe:	f000 f985 	bl	800a0cc <__sinit>
 8009dc2:	4b2e      	ldr	r3, [pc, #184]	; (8009e7c <__swsetup_r+0xd0>)
 8009dc4:	429c      	cmp	r4, r3
 8009dc6:	d10f      	bne.n	8009de8 <__swsetup_r+0x3c>
 8009dc8:	686c      	ldr	r4, [r5, #4]
 8009dca:	89a3      	ldrh	r3, [r4, #12]
 8009dcc:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8009dd0:	0719      	lsls	r1, r3, #28
 8009dd2:	d42c      	bmi.n	8009e2e <__swsetup_r+0x82>
 8009dd4:	06dd      	lsls	r5, r3, #27
 8009dd6:	d411      	bmi.n	8009dfc <__swsetup_r+0x50>
 8009dd8:	2309      	movs	r3, #9
 8009dda:	6033      	str	r3, [r6, #0]
 8009ddc:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8009de0:	f04f 30ff 	mov.w	r0, #4294967295
 8009de4:	81a3      	strh	r3, [r4, #12]
 8009de6:	e03e      	b.n	8009e66 <__swsetup_r+0xba>
 8009de8:	4b25      	ldr	r3, [pc, #148]	; (8009e80 <__swsetup_r+0xd4>)
 8009dea:	429c      	cmp	r4, r3
 8009dec:	d101      	bne.n	8009df2 <__swsetup_r+0x46>
 8009dee:	68ac      	ldr	r4, [r5, #8]
 8009df0:	e7eb      	b.n	8009dca <__swsetup_r+0x1e>
 8009df2:	4b24      	ldr	r3, [pc, #144]	; (8009e84 <__swsetup_r+0xd8>)
 8009df4:	429c      	cmp	r4, r3
 8009df6:	bf08      	it	eq
 8009df8:	68ec      	ldreq	r4, [r5, #12]
 8009dfa:	e7e6      	b.n	8009dca <__swsetup_r+0x1e>
 8009dfc:	0758      	lsls	r0, r3, #29
 8009dfe:	d512      	bpl.n	8009e26 <__swsetup_r+0x7a>
 8009e00:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8009e02:	b141      	cbz	r1, 8009e16 <__swsetup_r+0x6a>
 8009e04:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8009e08:	4299      	cmp	r1, r3
 8009e0a:	d002      	beq.n	8009e12 <__swsetup_r+0x66>
 8009e0c:	4630      	mov	r0, r6
 8009e0e:	f7ff fb6f 	bl	80094f0 <_free_r>
 8009e12:	2300      	movs	r3, #0
 8009e14:	6363      	str	r3, [r4, #52]	; 0x34
 8009e16:	89a3      	ldrh	r3, [r4, #12]
 8009e18:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8009e1c:	81a3      	strh	r3, [r4, #12]
 8009e1e:	2300      	movs	r3, #0
 8009e20:	6063      	str	r3, [r4, #4]
 8009e22:	6923      	ldr	r3, [r4, #16]
 8009e24:	6023      	str	r3, [r4, #0]
 8009e26:	89a3      	ldrh	r3, [r4, #12]
 8009e28:	f043 0308 	orr.w	r3, r3, #8
 8009e2c:	81a3      	strh	r3, [r4, #12]
 8009e2e:	6923      	ldr	r3, [r4, #16]
 8009e30:	b94b      	cbnz	r3, 8009e46 <__swsetup_r+0x9a>
 8009e32:	89a3      	ldrh	r3, [r4, #12]
 8009e34:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8009e38:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8009e3c:	d003      	beq.n	8009e46 <__swsetup_r+0x9a>
 8009e3e:	4621      	mov	r1, r4
 8009e40:	4630      	mov	r0, r6
 8009e42:	f000 fa07 	bl	800a254 <__smakebuf_r>
 8009e46:	89a0      	ldrh	r0, [r4, #12]
 8009e48:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8009e4c:	f010 0301 	ands.w	r3, r0, #1
 8009e50:	d00a      	beq.n	8009e68 <__swsetup_r+0xbc>
 8009e52:	2300      	movs	r3, #0
 8009e54:	60a3      	str	r3, [r4, #8]
 8009e56:	6963      	ldr	r3, [r4, #20]
 8009e58:	425b      	negs	r3, r3
 8009e5a:	61a3      	str	r3, [r4, #24]
 8009e5c:	6923      	ldr	r3, [r4, #16]
 8009e5e:	b943      	cbnz	r3, 8009e72 <__swsetup_r+0xc6>
 8009e60:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8009e64:	d1ba      	bne.n	8009ddc <__swsetup_r+0x30>
 8009e66:	bd70      	pop	{r4, r5, r6, pc}
 8009e68:	0781      	lsls	r1, r0, #30
 8009e6a:	bf58      	it	pl
 8009e6c:	6963      	ldrpl	r3, [r4, #20]
 8009e6e:	60a3      	str	r3, [r4, #8]
 8009e70:	e7f4      	b.n	8009e5c <__swsetup_r+0xb0>
 8009e72:	2000      	movs	r0, #0
 8009e74:	e7f7      	b.n	8009e66 <__swsetup_r+0xba>
 8009e76:	bf00      	nop
 8009e78:	2000000c 	.word	0x2000000c
 8009e7c:	0800aaec 	.word	0x0800aaec
 8009e80:	0800ab0c 	.word	0x0800ab0c
 8009e84:	0800aacc 	.word	0x0800aacc

08009e88 <abort>:
 8009e88:	2006      	movs	r0, #6
 8009e8a:	b508      	push	{r3, lr}
 8009e8c:	f000 fa52 	bl	800a334 <raise>
 8009e90:	2001      	movs	r0, #1
 8009e92:	f7f8 f9c7 	bl	8002224 <_exit>
	...

08009e98 <__sflush_r>:
 8009e98:	898a      	ldrh	r2, [r1, #12]
 8009e9a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009e9e:	4605      	mov	r5, r0
 8009ea0:	0710      	lsls	r0, r2, #28
 8009ea2:	460c      	mov	r4, r1
 8009ea4:	d458      	bmi.n	8009f58 <__sflush_r+0xc0>
 8009ea6:	684b      	ldr	r3, [r1, #4]
 8009ea8:	2b00      	cmp	r3, #0
 8009eaa:	dc05      	bgt.n	8009eb8 <__sflush_r+0x20>
 8009eac:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8009eae:	2b00      	cmp	r3, #0
 8009eb0:	dc02      	bgt.n	8009eb8 <__sflush_r+0x20>
 8009eb2:	2000      	movs	r0, #0
 8009eb4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009eb8:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8009eba:	2e00      	cmp	r6, #0
 8009ebc:	d0f9      	beq.n	8009eb2 <__sflush_r+0x1a>
 8009ebe:	2300      	movs	r3, #0
 8009ec0:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8009ec4:	682f      	ldr	r7, [r5, #0]
 8009ec6:	602b      	str	r3, [r5, #0]
 8009ec8:	d032      	beq.n	8009f30 <__sflush_r+0x98>
 8009eca:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8009ecc:	89a3      	ldrh	r3, [r4, #12]
 8009ece:	075a      	lsls	r2, r3, #29
 8009ed0:	d505      	bpl.n	8009ede <__sflush_r+0x46>
 8009ed2:	6863      	ldr	r3, [r4, #4]
 8009ed4:	1ac0      	subs	r0, r0, r3
 8009ed6:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8009ed8:	b10b      	cbz	r3, 8009ede <__sflush_r+0x46>
 8009eda:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8009edc:	1ac0      	subs	r0, r0, r3
 8009ede:	2300      	movs	r3, #0
 8009ee0:	4602      	mov	r2, r0
 8009ee2:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8009ee4:	4628      	mov	r0, r5
 8009ee6:	6a21      	ldr	r1, [r4, #32]
 8009ee8:	47b0      	blx	r6
 8009eea:	1c43      	adds	r3, r0, #1
 8009eec:	89a3      	ldrh	r3, [r4, #12]
 8009eee:	d106      	bne.n	8009efe <__sflush_r+0x66>
 8009ef0:	6829      	ldr	r1, [r5, #0]
 8009ef2:	291d      	cmp	r1, #29
 8009ef4:	d82c      	bhi.n	8009f50 <__sflush_r+0xb8>
 8009ef6:	4a2a      	ldr	r2, [pc, #168]	; (8009fa0 <__sflush_r+0x108>)
 8009ef8:	40ca      	lsrs	r2, r1
 8009efa:	07d6      	lsls	r6, r2, #31
 8009efc:	d528      	bpl.n	8009f50 <__sflush_r+0xb8>
 8009efe:	2200      	movs	r2, #0
 8009f00:	6062      	str	r2, [r4, #4]
 8009f02:	6922      	ldr	r2, [r4, #16]
 8009f04:	04d9      	lsls	r1, r3, #19
 8009f06:	6022      	str	r2, [r4, #0]
 8009f08:	d504      	bpl.n	8009f14 <__sflush_r+0x7c>
 8009f0a:	1c42      	adds	r2, r0, #1
 8009f0c:	d101      	bne.n	8009f12 <__sflush_r+0x7a>
 8009f0e:	682b      	ldr	r3, [r5, #0]
 8009f10:	b903      	cbnz	r3, 8009f14 <__sflush_r+0x7c>
 8009f12:	6560      	str	r0, [r4, #84]	; 0x54
 8009f14:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8009f16:	602f      	str	r7, [r5, #0]
 8009f18:	2900      	cmp	r1, #0
 8009f1a:	d0ca      	beq.n	8009eb2 <__sflush_r+0x1a>
 8009f1c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8009f20:	4299      	cmp	r1, r3
 8009f22:	d002      	beq.n	8009f2a <__sflush_r+0x92>
 8009f24:	4628      	mov	r0, r5
 8009f26:	f7ff fae3 	bl	80094f0 <_free_r>
 8009f2a:	2000      	movs	r0, #0
 8009f2c:	6360      	str	r0, [r4, #52]	; 0x34
 8009f2e:	e7c1      	b.n	8009eb4 <__sflush_r+0x1c>
 8009f30:	6a21      	ldr	r1, [r4, #32]
 8009f32:	2301      	movs	r3, #1
 8009f34:	4628      	mov	r0, r5
 8009f36:	47b0      	blx	r6
 8009f38:	1c41      	adds	r1, r0, #1
 8009f3a:	d1c7      	bne.n	8009ecc <__sflush_r+0x34>
 8009f3c:	682b      	ldr	r3, [r5, #0]
 8009f3e:	2b00      	cmp	r3, #0
 8009f40:	d0c4      	beq.n	8009ecc <__sflush_r+0x34>
 8009f42:	2b1d      	cmp	r3, #29
 8009f44:	d001      	beq.n	8009f4a <__sflush_r+0xb2>
 8009f46:	2b16      	cmp	r3, #22
 8009f48:	d101      	bne.n	8009f4e <__sflush_r+0xb6>
 8009f4a:	602f      	str	r7, [r5, #0]
 8009f4c:	e7b1      	b.n	8009eb2 <__sflush_r+0x1a>
 8009f4e:	89a3      	ldrh	r3, [r4, #12]
 8009f50:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8009f54:	81a3      	strh	r3, [r4, #12]
 8009f56:	e7ad      	b.n	8009eb4 <__sflush_r+0x1c>
 8009f58:	690f      	ldr	r7, [r1, #16]
 8009f5a:	2f00      	cmp	r7, #0
 8009f5c:	d0a9      	beq.n	8009eb2 <__sflush_r+0x1a>
 8009f5e:	0793      	lsls	r3, r2, #30
 8009f60:	bf18      	it	ne
 8009f62:	2300      	movne	r3, #0
 8009f64:	680e      	ldr	r6, [r1, #0]
 8009f66:	bf08      	it	eq
 8009f68:	694b      	ldreq	r3, [r1, #20]
 8009f6a:	eba6 0807 	sub.w	r8, r6, r7
 8009f6e:	600f      	str	r7, [r1, #0]
 8009f70:	608b      	str	r3, [r1, #8]
 8009f72:	f1b8 0f00 	cmp.w	r8, #0
 8009f76:	dd9c      	ble.n	8009eb2 <__sflush_r+0x1a>
 8009f78:	4643      	mov	r3, r8
 8009f7a:	463a      	mov	r2, r7
 8009f7c:	4628      	mov	r0, r5
 8009f7e:	6a21      	ldr	r1, [r4, #32]
 8009f80:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8009f82:	47b0      	blx	r6
 8009f84:	2800      	cmp	r0, #0
 8009f86:	dc06      	bgt.n	8009f96 <__sflush_r+0xfe>
 8009f88:	89a3      	ldrh	r3, [r4, #12]
 8009f8a:	f04f 30ff 	mov.w	r0, #4294967295
 8009f8e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8009f92:	81a3      	strh	r3, [r4, #12]
 8009f94:	e78e      	b.n	8009eb4 <__sflush_r+0x1c>
 8009f96:	4407      	add	r7, r0
 8009f98:	eba8 0800 	sub.w	r8, r8, r0
 8009f9c:	e7e9      	b.n	8009f72 <__sflush_r+0xda>
 8009f9e:	bf00      	nop
 8009fa0:	20400001 	.word	0x20400001

08009fa4 <_fflush_r>:
 8009fa4:	b538      	push	{r3, r4, r5, lr}
 8009fa6:	690b      	ldr	r3, [r1, #16]
 8009fa8:	4605      	mov	r5, r0
 8009faa:	460c      	mov	r4, r1
 8009fac:	b913      	cbnz	r3, 8009fb4 <_fflush_r+0x10>
 8009fae:	2500      	movs	r5, #0
 8009fb0:	4628      	mov	r0, r5
 8009fb2:	bd38      	pop	{r3, r4, r5, pc}
 8009fb4:	b118      	cbz	r0, 8009fbe <_fflush_r+0x1a>
 8009fb6:	6983      	ldr	r3, [r0, #24]
 8009fb8:	b90b      	cbnz	r3, 8009fbe <_fflush_r+0x1a>
 8009fba:	f000 f887 	bl	800a0cc <__sinit>
 8009fbe:	4b14      	ldr	r3, [pc, #80]	; (800a010 <_fflush_r+0x6c>)
 8009fc0:	429c      	cmp	r4, r3
 8009fc2:	d11b      	bne.n	8009ffc <_fflush_r+0x58>
 8009fc4:	686c      	ldr	r4, [r5, #4]
 8009fc6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8009fca:	2b00      	cmp	r3, #0
 8009fcc:	d0ef      	beq.n	8009fae <_fflush_r+0xa>
 8009fce:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8009fd0:	07d0      	lsls	r0, r2, #31
 8009fd2:	d404      	bmi.n	8009fde <_fflush_r+0x3a>
 8009fd4:	0599      	lsls	r1, r3, #22
 8009fd6:	d402      	bmi.n	8009fde <_fflush_r+0x3a>
 8009fd8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8009fda:	f000 f915 	bl	800a208 <__retarget_lock_acquire_recursive>
 8009fde:	4628      	mov	r0, r5
 8009fe0:	4621      	mov	r1, r4
 8009fe2:	f7ff ff59 	bl	8009e98 <__sflush_r>
 8009fe6:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8009fe8:	4605      	mov	r5, r0
 8009fea:	07da      	lsls	r2, r3, #31
 8009fec:	d4e0      	bmi.n	8009fb0 <_fflush_r+0xc>
 8009fee:	89a3      	ldrh	r3, [r4, #12]
 8009ff0:	059b      	lsls	r3, r3, #22
 8009ff2:	d4dd      	bmi.n	8009fb0 <_fflush_r+0xc>
 8009ff4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8009ff6:	f000 f908 	bl	800a20a <__retarget_lock_release_recursive>
 8009ffa:	e7d9      	b.n	8009fb0 <_fflush_r+0xc>
 8009ffc:	4b05      	ldr	r3, [pc, #20]	; (800a014 <_fflush_r+0x70>)
 8009ffe:	429c      	cmp	r4, r3
 800a000:	d101      	bne.n	800a006 <_fflush_r+0x62>
 800a002:	68ac      	ldr	r4, [r5, #8]
 800a004:	e7df      	b.n	8009fc6 <_fflush_r+0x22>
 800a006:	4b04      	ldr	r3, [pc, #16]	; (800a018 <_fflush_r+0x74>)
 800a008:	429c      	cmp	r4, r3
 800a00a:	bf08      	it	eq
 800a00c:	68ec      	ldreq	r4, [r5, #12]
 800a00e:	e7da      	b.n	8009fc6 <_fflush_r+0x22>
 800a010:	0800aaec 	.word	0x0800aaec
 800a014:	0800ab0c 	.word	0x0800ab0c
 800a018:	0800aacc 	.word	0x0800aacc

0800a01c <std>:
 800a01c:	2300      	movs	r3, #0
 800a01e:	b510      	push	{r4, lr}
 800a020:	4604      	mov	r4, r0
 800a022:	e9c0 3300 	strd	r3, r3, [r0]
 800a026:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800a02a:	6083      	str	r3, [r0, #8]
 800a02c:	8181      	strh	r1, [r0, #12]
 800a02e:	6643      	str	r3, [r0, #100]	; 0x64
 800a030:	81c2      	strh	r2, [r0, #14]
 800a032:	6183      	str	r3, [r0, #24]
 800a034:	4619      	mov	r1, r3
 800a036:	2208      	movs	r2, #8
 800a038:	305c      	adds	r0, #92	; 0x5c
 800a03a:	f7fb fe25 	bl	8005c88 <memset>
 800a03e:	4b05      	ldr	r3, [pc, #20]	; (800a054 <std+0x38>)
 800a040:	6224      	str	r4, [r4, #32]
 800a042:	6263      	str	r3, [r4, #36]	; 0x24
 800a044:	4b04      	ldr	r3, [pc, #16]	; (800a058 <std+0x3c>)
 800a046:	62a3      	str	r3, [r4, #40]	; 0x28
 800a048:	4b04      	ldr	r3, [pc, #16]	; (800a05c <std+0x40>)
 800a04a:	62e3      	str	r3, [r4, #44]	; 0x2c
 800a04c:	4b04      	ldr	r3, [pc, #16]	; (800a060 <std+0x44>)
 800a04e:	6323      	str	r3, [r4, #48]	; 0x30
 800a050:	bd10      	pop	{r4, pc}
 800a052:	bf00      	nop
 800a054:	0800a36d 	.word	0x0800a36d
 800a058:	0800a38f 	.word	0x0800a38f
 800a05c:	0800a3c7 	.word	0x0800a3c7
 800a060:	0800a3eb 	.word	0x0800a3eb

0800a064 <_cleanup_r>:
 800a064:	4901      	ldr	r1, [pc, #4]	; (800a06c <_cleanup_r+0x8>)
 800a066:	f000 b8af 	b.w	800a1c8 <_fwalk_reent>
 800a06a:	bf00      	nop
 800a06c:	08009fa5 	.word	0x08009fa5

0800a070 <__sfmoreglue>:
 800a070:	b570      	push	{r4, r5, r6, lr}
 800a072:	2568      	movs	r5, #104	; 0x68
 800a074:	1e4a      	subs	r2, r1, #1
 800a076:	4355      	muls	r5, r2
 800a078:	460e      	mov	r6, r1
 800a07a:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800a07e:	f7ff fa83 	bl	8009588 <_malloc_r>
 800a082:	4604      	mov	r4, r0
 800a084:	b140      	cbz	r0, 800a098 <__sfmoreglue+0x28>
 800a086:	2100      	movs	r1, #0
 800a088:	e9c0 1600 	strd	r1, r6, [r0]
 800a08c:	300c      	adds	r0, #12
 800a08e:	60a0      	str	r0, [r4, #8]
 800a090:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800a094:	f7fb fdf8 	bl	8005c88 <memset>
 800a098:	4620      	mov	r0, r4
 800a09a:	bd70      	pop	{r4, r5, r6, pc}

0800a09c <__sfp_lock_acquire>:
 800a09c:	4801      	ldr	r0, [pc, #4]	; (800a0a4 <__sfp_lock_acquire+0x8>)
 800a09e:	f000 b8b3 	b.w	800a208 <__retarget_lock_acquire_recursive>
 800a0a2:	bf00      	nop
 800a0a4:	200003dc 	.word	0x200003dc

0800a0a8 <__sfp_lock_release>:
 800a0a8:	4801      	ldr	r0, [pc, #4]	; (800a0b0 <__sfp_lock_release+0x8>)
 800a0aa:	f000 b8ae 	b.w	800a20a <__retarget_lock_release_recursive>
 800a0ae:	bf00      	nop
 800a0b0:	200003dc 	.word	0x200003dc

0800a0b4 <__sinit_lock_acquire>:
 800a0b4:	4801      	ldr	r0, [pc, #4]	; (800a0bc <__sinit_lock_acquire+0x8>)
 800a0b6:	f000 b8a7 	b.w	800a208 <__retarget_lock_acquire_recursive>
 800a0ba:	bf00      	nop
 800a0bc:	200003d7 	.word	0x200003d7

0800a0c0 <__sinit_lock_release>:
 800a0c0:	4801      	ldr	r0, [pc, #4]	; (800a0c8 <__sinit_lock_release+0x8>)
 800a0c2:	f000 b8a2 	b.w	800a20a <__retarget_lock_release_recursive>
 800a0c6:	bf00      	nop
 800a0c8:	200003d7 	.word	0x200003d7

0800a0cc <__sinit>:
 800a0cc:	b510      	push	{r4, lr}
 800a0ce:	4604      	mov	r4, r0
 800a0d0:	f7ff fff0 	bl	800a0b4 <__sinit_lock_acquire>
 800a0d4:	69a3      	ldr	r3, [r4, #24]
 800a0d6:	b11b      	cbz	r3, 800a0e0 <__sinit+0x14>
 800a0d8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800a0dc:	f7ff bff0 	b.w	800a0c0 <__sinit_lock_release>
 800a0e0:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 800a0e4:	6523      	str	r3, [r4, #80]	; 0x50
 800a0e6:	4b13      	ldr	r3, [pc, #76]	; (800a134 <__sinit+0x68>)
 800a0e8:	4a13      	ldr	r2, [pc, #76]	; (800a138 <__sinit+0x6c>)
 800a0ea:	681b      	ldr	r3, [r3, #0]
 800a0ec:	62a2      	str	r2, [r4, #40]	; 0x28
 800a0ee:	42a3      	cmp	r3, r4
 800a0f0:	bf08      	it	eq
 800a0f2:	2301      	moveq	r3, #1
 800a0f4:	4620      	mov	r0, r4
 800a0f6:	bf08      	it	eq
 800a0f8:	61a3      	streq	r3, [r4, #24]
 800a0fa:	f000 f81f 	bl	800a13c <__sfp>
 800a0fe:	6060      	str	r0, [r4, #4]
 800a100:	4620      	mov	r0, r4
 800a102:	f000 f81b 	bl	800a13c <__sfp>
 800a106:	60a0      	str	r0, [r4, #8]
 800a108:	4620      	mov	r0, r4
 800a10a:	f000 f817 	bl	800a13c <__sfp>
 800a10e:	2200      	movs	r2, #0
 800a110:	2104      	movs	r1, #4
 800a112:	60e0      	str	r0, [r4, #12]
 800a114:	6860      	ldr	r0, [r4, #4]
 800a116:	f7ff ff81 	bl	800a01c <std>
 800a11a:	2201      	movs	r2, #1
 800a11c:	2109      	movs	r1, #9
 800a11e:	68a0      	ldr	r0, [r4, #8]
 800a120:	f7ff ff7c 	bl	800a01c <std>
 800a124:	2202      	movs	r2, #2
 800a126:	2112      	movs	r1, #18
 800a128:	68e0      	ldr	r0, [r4, #12]
 800a12a:	f7ff ff77 	bl	800a01c <std>
 800a12e:	2301      	movs	r3, #1
 800a130:	61a3      	str	r3, [r4, #24]
 800a132:	e7d1      	b.n	800a0d8 <__sinit+0xc>
 800a134:	0800a678 	.word	0x0800a678
 800a138:	0800a065 	.word	0x0800a065

0800a13c <__sfp>:
 800a13c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a13e:	4607      	mov	r7, r0
 800a140:	f7ff ffac 	bl	800a09c <__sfp_lock_acquire>
 800a144:	4b1e      	ldr	r3, [pc, #120]	; (800a1c0 <__sfp+0x84>)
 800a146:	681e      	ldr	r6, [r3, #0]
 800a148:	69b3      	ldr	r3, [r6, #24]
 800a14a:	b913      	cbnz	r3, 800a152 <__sfp+0x16>
 800a14c:	4630      	mov	r0, r6
 800a14e:	f7ff ffbd 	bl	800a0cc <__sinit>
 800a152:	3648      	adds	r6, #72	; 0x48
 800a154:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 800a158:	3b01      	subs	r3, #1
 800a15a:	d503      	bpl.n	800a164 <__sfp+0x28>
 800a15c:	6833      	ldr	r3, [r6, #0]
 800a15e:	b30b      	cbz	r3, 800a1a4 <__sfp+0x68>
 800a160:	6836      	ldr	r6, [r6, #0]
 800a162:	e7f7      	b.n	800a154 <__sfp+0x18>
 800a164:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800a168:	b9d5      	cbnz	r5, 800a1a0 <__sfp+0x64>
 800a16a:	4b16      	ldr	r3, [pc, #88]	; (800a1c4 <__sfp+0x88>)
 800a16c:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800a170:	60e3      	str	r3, [r4, #12]
 800a172:	6665      	str	r5, [r4, #100]	; 0x64
 800a174:	f000 f847 	bl	800a206 <__retarget_lock_init_recursive>
 800a178:	f7ff ff96 	bl	800a0a8 <__sfp_lock_release>
 800a17c:	2208      	movs	r2, #8
 800a17e:	4629      	mov	r1, r5
 800a180:	e9c4 5501 	strd	r5, r5, [r4, #4]
 800a184:	e9c4 5504 	strd	r5, r5, [r4, #16]
 800a188:	6025      	str	r5, [r4, #0]
 800a18a:	61a5      	str	r5, [r4, #24]
 800a18c:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800a190:	f7fb fd7a 	bl	8005c88 <memset>
 800a194:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 800a198:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800a19c:	4620      	mov	r0, r4
 800a19e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800a1a0:	3468      	adds	r4, #104	; 0x68
 800a1a2:	e7d9      	b.n	800a158 <__sfp+0x1c>
 800a1a4:	2104      	movs	r1, #4
 800a1a6:	4638      	mov	r0, r7
 800a1a8:	f7ff ff62 	bl	800a070 <__sfmoreglue>
 800a1ac:	4604      	mov	r4, r0
 800a1ae:	6030      	str	r0, [r6, #0]
 800a1b0:	2800      	cmp	r0, #0
 800a1b2:	d1d5      	bne.n	800a160 <__sfp+0x24>
 800a1b4:	f7ff ff78 	bl	800a0a8 <__sfp_lock_release>
 800a1b8:	230c      	movs	r3, #12
 800a1ba:	603b      	str	r3, [r7, #0]
 800a1bc:	e7ee      	b.n	800a19c <__sfp+0x60>
 800a1be:	bf00      	nop
 800a1c0:	0800a678 	.word	0x0800a678
 800a1c4:	ffff0001 	.word	0xffff0001

0800a1c8 <_fwalk_reent>:
 800a1c8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800a1cc:	4606      	mov	r6, r0
 800a1ce:	4688      	mov	r8, r1
 800a1d0:	2700      	movs	r7, #0
 800a1d2:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800a1d6:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800a1da:	f1b9 0901 	subs.w	r9, r9, #1
 800a1de:	d505      	bpl.n	800a1ec <_fwalk_reent+0x24>
 800a1e0:	6824      	ldr	r4, [r4, #0]
 800a1e2:	2c00      	cmp	r4, #0
 800a1e4:	d1f7      	bne.n	800a1d6 <_fwalk_reent+0xe>
 800a1e6:	4638      	mov	r0, r7
 800a1e8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800a1ec:	89ab      	ldrh	r3, [r5, #12]
 800a1ee:	2b01      	cmp	r3, #1
 800a1f0:	d907      	bls.n	800a202 <_fwalk_reent+0x3a>
 800a1f2:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800a1f6:	3301      	adds	r3, #1
 800a1f8:	d003      	beq.n	800a202 <_fwalk_reent+0x3a>
 800a1fa:	4629      	mov	r1, r5
 800a1fc:	4630      	mov	r0, r6
 800a1fe:	47c0      	blx	r8
 800a200:	4307      	orrs	r7, r0
 800a202:	3568      	adds	r5, #104	; 0x68
 800a204:	e7e9      	b.n	800a1da <_fwalk_reent+0x12>

0800a206 <__retarget_lock_init_recursive>:
 800a206:	4770      	bx	lr

0800a208 <__retarget_lock_acquire_recursive>:
 800a208:	4770      	bx	lr

0800a20a <__retarget_lock_release_recursive>:
 800a20a:	4770      	bx	lr

0800a20c <__swhatbuf_r>:
 800a20c:	b570      	push	{r4, r5, r6, lr}
 800a20e:	460e      	mov	r6, r1
 800a210:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a214:	4614      	mov	r4, r2
 800a216:	2900      	cmp	r1, #0
 800a218:	461d      	mov	r5, r3
 800a21a:	b096      	sub	sp, #88	; 0x58
 800a21c:	da07      	bge.n	800a22e <__swhatbuf_r+0x22>
 800a21e:	2300      	movs	r3, #0
 800a220:	602b      	str	r3, [r5, #0]
 800a222:	89b3      	ldrh	r3, [r6, #12]
 800a224:	061a      	lsls	r2, r3, #24
 800a226:	d410      	bmi.n	800a24a <__swhatbuf_r+0x3e>
 800a228:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800a22c:	e00e      	b.n	800a24c <__swhatbuf_r+0x40>
 800a22e:	466a      	mov	r2, sp
 800a230:	f000 f902 	bl	800a438 <_fstat_r>
 800a234:	2800      	cmp	r0, #0
 800a236:	dbf2      	blt.n	800a21e <__swhatbuf_r+0x12>
 800a238:	9a01      	ldr	r2, [sp, #4]
 800a23a:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800a23e:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800a242:	425a      	negs	r2, r3
 800a244:	415a      	adcs	r2, r3
 800a246:	602a      	str	r2, [r5, #0]
 800a248:	e7ee      	b.n	800a228 <__swhatbuf_r+0x1c>
 800a24a:	2340      	movs	r3, #64	; 0x40
 800a24c:	2000      	movs	r0, #0
 800a24e:	6023      	str	r3, [r4, #0]
 800a250:	b016      	add	sp, #88	; 0x58
 800a252:	bd70      	pop	{r4, r5, r6, pc}

0800a254 <__smakebuf_r>:
 800a254:	898b      	ldrh	r3, [r1, #12]
 800a256:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800a258:	079d      	lsls	r5, r3, #30
 800a25a:	4606      	mov	r6, r0
 800a25c:	460c      	mov	r4, r1
 800a25e:	d507      	bpl.n	800a270 <__smakebuf_r+0x1c>
 800a260:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800a264:	6023      	str	r3, [r4, #0]
 800a266:	6123      	str	r3, [r4, #16]
 800a268:	2301      	movs	r3, #1
 800a26a:	6163      	str	r3, [r4, #20]
 800a26c:	b002      	add	sp, #8
 800a26e:	bd70      	pop	{r4, r5, r6, pc}
 800a270:	466a      	mov	r2, sp
 800a272:	ab01      	add	r3, sp, #4
 800a274:	f7ff ffca 	bl	800a20c <__swhatbuf_r>
 800a278:	9900      	ldr	r1, [sp, #0]
 800a27a:	4605      	mov	r5, r0
 800a27c:	4630      	mov	r0, r6
 800a27e:	f7ff f983 	bl	8009588 <_malloc_r>
 800a282:	b948      	cbnz	r0, 800a298 <__smakebuf_r+0x44>
 800a284:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800a288:	059a      	lsls	r2, r3, #22
 800a28a:	d4ef      	bmi.n	800a26c <__smakebuf_r+0x18>
 800a28c:	f023 0303 	bic.w	r3, r3, #3
 800a290:	f043 0302 	orr.w	r3, r3, #2
 800a294:	81a3      	strh	r3, [r4, #12]
 800a296:	e7e3      	b.n	800a260 <__smakebuf_r+0xc>
 800a298:	4b0d      	ldr	r3, [pc, #52]	; (800a2d0 <__smakebuf_r+0x7c>)
 800a29a:	62b3      	str	r3, [r6, #40]	; 0x28
 800a29c:	89a3      	ldrh	r3, [r4, #12]
 800a29e:	6020      	str	r0, [r4, #0]
 800a2a0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800a2a4:	81a3      	strh	r3, [r4, #12]
 800a2a6:	9b00      	ldr	r3, [sp, #0]
 800a2a8:	6120      	str	r0, [r4, #16]
 800a2aa:	6163      	str	r3, [r4, #20]
 800a2ac:	9b01      	ldr	r3, [sp, #4]
 800a2ae:	b15b      	cbz	r3, 800a2c8 <__smakebuf_r+0x74>
 800a2b0:	4630      	mov	r0, r6
 800a2b2:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800a2b6:	f000 f8d1 	bl	800a45c <_isatty_r>
 800a2ba:	b128      	cbz	r0, 800a2c8 <__smakebuf_r+0x74>
 800a2bc:	89a3      	ldrh	r3, [r4, #12]
 800a2be:	f023 0303 	bic.w	r3, r3, #3
 800a2c2:	f043 0301 	orr.w	r3, r3, #1
 800a2c6:	81a3      	strh	r3, [r4, #12]
 800a2c8:	89a0      	ldrh	r0, [r4, #12]
 800a2ca:	4305      	orrs	r5, r0
 800a2cc:	81a5      	strh	r5, [r4, #12]
 800a2ce:	e7cd      	b.n	800a26c <__smakebuf_r+0x18>
 800a2d0:	0800a065 	.word	0x0800a065

0800a2d4 <_malloc_usable_size_r>:
 800a2d4:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800a2d8:	1f18      	subs	r0, r3, #4
 800a2da:	2b00      	cmp	r3, #0
 800a2dc:	bfbc      	itt	lt
 800a2de:	580b      	ldrlt	r3, [r1, r0]
 800a2e0:	18c0      	addlt	r0, r0, r3
 800a2e2:	4770      	bx	lr

0800a2e4 <_raise_r>:
 800a2e4:	291f      	cmp	r1, #31
 800a2e6:	b538      	push	{r3, r4, r5, lr}
 800a2e8:	4604      	mov	r4, r0
 800a2ea:	460d      	mov	r5, r1
 800a2ec:	d904      	bls.n	800a2f8 <_raise_r+0x14>
 800a2ee:	2316      	movs	r3, #22
 800a2f0:	6003      	str	r3, [r0, #0]
 800a2f2:	f04f 30ff 	mov.w	r0, #4294967295
 800a2f6:	bd38      	pop	{r3, r4, r5, pc}
 800a2f8:	6c42      	ldr	r2, [r0, #68]	; 0x44
 800a2fa:	b112      	cbz	r2, 800a302 <_raise_r+0x1e>
 800a2fc:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800a300:	b94b      	cbnz	r3, 800a316 <_raise_r+0x32>
 800a302:	4620      	mov	r0, r4
 800a304:	f000 f830 	bl	800a368 <_getpid_r>
 800a308:	462a      	mov	r2, r5
 800a30a:	4601      	mov	r1, r0
 800a30c:	4620      	mov	r0, r4
 800a30e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800a312:	f000 b817 	b.w	800a344 <_kill_r>
 800a316:	2b01      	cmp	r3, #1
 800a318:	d00a      	beq.n	800a330 <_raise_r+0x4c>
 800a31a:	1c59      	adds	r1, r3, #1
 800a31c:	d103      	bne.n	800a326 <_raise_r+0x42>
 800a31e:	2316      	movs	r3, #22
 800a320:	6003      	str	r3, [r0, #0]
 800a322:	2001      	movs	r0, #1
 800a324:	e7e7      	b.n	800a2f6 <_raise_r+0x12>
 800a326:	2400      	movs	r4, #0
 800a328:	4628      	mov	r0, r5
 800a32a:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800a32e:	4798      	blx	r3
 800a330:	2000      	movs	r0, #0
 800a332:	e7e0      	b.n	800a2f6 <_raise_r+0x12>

0800a334 <raise>:
 800a334:	4b02      	ldr	r3, [pc, #8]	; (800a340 <raise+0xc>)
 800a336:	4601      	mov	r1, r0
 800a338:	6818      	ldr	r0, [r3, #0]
 800a33a:	f7ff bfd3 	b.w	800a2e4 <_raise_r>
 800a33e:	bf00      	nop
 800a340:	2000000c 	.word	0x2000000c

0800a344 <_kill_r>:
 800a344:	b538      	push	{r3, r4, r5, lr}
 800a346:	2300      	movs	r3, #0
 800a348:	4d06      	ldr	r5, [pc, #24]	; (800a364 <_kill_r+0x20>)
 800a34a:	4604      	mov	r4, r0
 800a34c:	4608      	mov	r0, r1
 800a34e:	4611      	mov	r1, r2
 800a350:	602b      	str	r3, [r5, #0]
 800a352:	f7f7 ff57 	bl	8002204 <_kill>
 800a356:	1c43      	adds	r3, r0, #1
 800a358:	d102      	bne.n	800a360 <_kill_r+0x1c>
 800a35a:	682b      	ldr	r3, [r5, #0]
 800a35c:	b103      	cbz	r3, 800a360 <_kill_r+0x1c>
 800a35e:	6023      	str	r3, [r4, #0]
 800a360:	bd38      	pop	{r3, r4, r5, pc}
 800a362:	bf00      	nop
 800a364:	200003d0 	.word	0x200003d0

0800a368 <_getpid_r>:
 800a368:	f7f7 bf45 	b.w	80021f6 <_getpid>

0800a36c <__sread>:
 800a36c:	b510      	push	{r4, lr}
 800a36e:	460c      	mov	r4, r1
 800a370:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a374:	f000 f894 	bl	800a4a0 <_read_r>
 800a378:	2800      	cmp	r0, #0
 800a37a:	bfab      	itete	ge
 800a37c:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800a37e:	89a3      	ldrhlt	r3, [r4, #12]
 800a380:	181b      	addge	r3, r3, r0
 800a382:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800a386:	bfac      	ite	ge
 800a388:	6563      	strge	r3, [r4, #84]	; 0x54
 800a38a:	81a3      	strhlt	r3, [r4, #12]
 800a38c:	bd10      	pop	{r4, pc}

0800a38e <__swrite>:
 800a38e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a392:	461f      	mov	r7, r3
 800a394:	898b      	ldrh	r3, [r1, #12]
 800a396:	4605      	mov	r5, r0
 800a398:	05db      	lsls	r3, r3, #23
 800a39a:	460c      	mov	r4, r1
 800a39c:	4616      	mov	r6, r2
 800a39e:	d505      	bpl.n	800a3ac <__swrite+0x1e>
 800a3a0:	2302      	movs	r3, #2
 800a3a2:	2200      	movs	r2, #0
 800a3a4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a3a8:	f000 f868 	bl	800a47c <_lseek_r>
 800a3ac:	89a3      	ldrh	r3, [r4, #12]
 800a3ae:	4632      	mov	r2, r6
 800a3b0:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800a3b4:	81a3      	strh	r3, [r4, #12]
 800a3b6:	4628      	mov	r0, r5
 800a3b8:	463b      	mov	r3, r7
 800a3ba:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800a3be:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800a3c2:	f000 b817 	b.w	800a3f4 <_write_r>

0800a3c6 <__sseek>:
 800a3c6:	b510      	push	{r4, lr}
 800a3c8:	460c      	mov	r4, r1
 800a3ca:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a3ce:	f000 f855 	bl	800a47c <_lseek_r>
 800a3d2:	1c43      	adds	r3, r0, #1
 800a3d4:	89a3      	ldrh	r3, [r4, #12]
 800a3d6:	bf15      	itete	ne
 800a3d8:	6560      	strne	r0, [r4, #84]	; 0x54
 800a3da:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800a3de:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800a3e2:	81a3      	strheq	r3, [r4, #12]
 800a3e4:	bf18      	it	ne
 800a3e6:	81a3      	strhne	r3, [r4, #12]
 800a3e8:	bd10      	pop	{r4, pc}

0800a3ea <__sclose>:
 800a3ea:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a3ee:	f000 b813 	b.w	800a418 <_close_r>
	...

0800a3f4 <_write_r>:
 800a3f4:	b538      	push	{r3, r4, r5, lr}
 800a3f6:	4604      	mov	r4, r0
 800a3f8:	4608      	mov	r0, r1
 800a3fa:	4611      	mov	r1, r2
 800a3fc:	2200      	movs	r2, #0
 800a3fe:	4d05      	ldr	r5, [pc, #20]	; (800a414 <_write_r+0x20>)
 800a400:	602a      	str	r2, [r5, #0]
 800a402:	461a      	mov	r2, r3
 800a404:	f7f7 ff35 	bl	8002272 <_write>
 800a408:	1c43      	adds	r3, r0, #1
 800a40a:	d102      	bne.n	800a412 <_write_r+0x1e>
 800a40c:	682b      	ldr	r3, [r5, #0]
 800a40e:	b103      	cbz	r3, 800a412 <_write_r+0x1e>
 800a410:	6023      	str	r3, [r4, #0]
 800a412:	bd38      	pop	{r3, r4, r5, pc}
 800a414:	200003d0 	.word	0x200003d0

0800a418 <_close_r>:
 800a418:	b538      	push	{r3, r4, r5, lr}
 800a41a:	2300      	movs	r3, #0
 800a41c:	4d05      	ldr	r5, [pc, #20]	; (800a434 <_close_r+0x1c>)
 800a41e:	4604      	mov	r4, r0
 800a420:	4608      	mov	r0, r1
 800a422:	602b      	str	r3, [r5, #0]
 800a424:	f7f7 ff41 	bl	80022aa <_close>
 800a428:	1c43      	adds	r3, r0, #1
 800a42a:	d102      	bne.n	800a432 <_close_r+0x1a>
 800a42c:	682b      	ldr	r3, [r5, #0]
 800a42e:	b103      	cbz	r3, 800a432 <_close_r+0x1a>
 800a430:	6023      	str	r3, [r4, #0]
 800a432:	bd38      	pop	{r3, r4, r5, pc}
 800a434:	200003d0 	.word	0x200003d0

0800a438 <_fstat_r>:
 800a438:	b538      	push	{r3, r4, r5, lr}
 800a43a:	2300      	movs	r3, #0
 800a43c:	4d06      	ldr	r5, [pc, #24]	; (800a458 <_fstat_r+0x20>)
 800a43e:	4604      	mov	r4, r0
 800a440:	4608      	mov	r0, r1
 800a442:	4611      	mov	r1, r2
 800a444:	602b      	str	r3, [r5, #0]
 800a446:	f7f7 ff3b 	bl	80022c0 <_fstat>
 800a44a:	1c43      	adds	r3, r0, #1
 800a44c:	d102      	bne.n	800a454 <_fstat_r+0x1c>
 800a44e:	682b      	ldr	r3, [r5, #0]
 800a450:	b103      	cbz	r3, 800a454 <_fstat_r+0x1c>
 800a452:	6023      	str	r3, [r4, #0]
 800a454:	bd38      	pop	{r3, r4, r5, pc}
 800a456:	bf00      	nop
 800a458:	200003d0 	.word	0x200003d0

0800a45c <_isatty_r>:
 800a45c:	b538      	push	{r3, r4, r5, lr}
 800a45e:	2300      	movs	r3, #0
 800a460:	4d05      	ldr	r5, [pc, #20]	; (800a478 <_isatty_r+0x1c>)
 800a462:	4604      	mov	r4, r0
 800a464:	4608      	mov	r0, r1
 800a466:	602b      	str	r3, [r5, #0]
 800a468:	f7f7 ff39 	bl	80022de <_isatty>
 800a46c:	1c43      	adds	r3, r0, #1
 800a46e:	d102      	bne.n	800a476 <_isatty_r+0x1a>
 800a470:	682b      	ldr	r3, [r5, #0]
 800a472:	b103      	cbz	r3, 800a476 <_isatty_r+0x1a>
 800a474:	6023      	str	r3, [r4, #0]
 800a476:	bd38      	pop	{r3, r4, r5, pc}
 800a478:	200003d0 	.word	0x200003d0

0800a47c <_lseek_r>:
 800a47c:	b538      	push	{r3, r4, r5, lr}
 800a47e:	4604      	mov	r4, r0
 800a480:	4608      	mov	r0, r1
 800a482:	4611      	mov	r1, r2
 800a484:	2200      	movs	r2, #0
 800a486:	4d05      	ldr	r5, [pc, #20]	; (800a49c <_lseek_r+0x20>)
 800a488:	602a      	str	r2, [r5, #0]
 800a48a:	461a      	mov	r2, r3
 800a48c:	f7f7 ff31 	bl	80022f2 <_lseek>
 800a490:	1c43      	adds	r3, r0, #1
 800a492:	d102      	bne.n	800a49a <_lseek_r+0x1e>
 800a494:	682b      	ldr	r3, [r5, #0]
 800a496:	b103      	cbz	r3, 800a49a <_lseek_r+0x1e>
 800a498:	6023      	str	r3, [r4, #0]
 800a49a:	bd38      	pop	{r3, r4, r5, pc}
 800a49c:	200003d0 	.word	0x200003d0

0800a4a0 <_read_r>:
 800a4a0:	b538      	push	{r3, r4, r5, lr}
 800a4a2:	4604      	mov	r4, r0
 800a4a4:	4608      	mov	r0, r1
 800a4a6:	4611      	mov	r1, r2
 800a4a8:	2200      	movs	r2, #0
 800a4aa:	4d05      	ldr	r5, [pc, #20]	; (800a4c0 <_read_r+0x20>)
 800a4ac:	602a      	str	r2, [r5, #0]
 800a4ae:	461a      	mov	r2, r3
 800a4b0:	f7f7 fec2 	bl	8002238 <_read>
 800a4b4:	1c43      	adds	r3, r0, #1
 800a4b6:	d102      	bne.n	800a4be <_read_r+0x1e>
 800a4b8:	682b      	ldr	r3, [r5, #0]
 800a4ba:	b103      	cbz	r3, 800a4be <_read_r+0x1e>
 800a4bc:	6023      	str	r3, [r4, #0]
 800a4be:	bd38      	pop	{r3, r4, r5, pc}
 800a4c0:	200003d0 	.word	0x200003d0

0800a4c4 <_init>:
 800a4c4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a4c6:	bf00      	nop
 800a4c8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a4ca:	bc08      	pop	{r3}
 800a4cc:	469e      	mov	lr, r3
 800a4ce:	4770      	bx	lr

0800a4d0 <_fini>:
 800a4d0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a4d2:	bf00      	nop
 800a4d4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a4d6:	bc08      	pop	{r3}
 800a4d8:	469e      	mov	lr, r3
 800a4da:	4770      	bx	lr
